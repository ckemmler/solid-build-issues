/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });

var events_1 = require("events");
var Stream = require("stream");
var http = require("http");
var url = require("url");
var punycode = require("punycode");
var https = require("https");
var zlib$1 = require("zlib");
var buffer_1 = require("buffer");
var crypto_1 = require("crypto");
var util_1 = require("util");
var require$$0$1 = require("assert");
var querystring = require("querystring");
var v8 = require("v8");

function _interopDefaultLegacy(e) {
	return e && typeof e === "object" && "default" in e ? e : { default: e };
}

var events_1__default = /*#__PURE__*/ _interopDefaultLegacy(events_1);
var Stream__default = /*#__PURE__*/ _interopDefaultLegacy(Stream);
var http__default = /*#__PURE__*/ _interopDefaultLegacy(http);
var url__default = /*#__PURE__*/ _interopDefaultLegacy(url);
var punycode__default = /*#__PURE__*/ _interopDefaultLegacy(punycode);
var https__default = /*#__PURE__*/ _interopDefaultLegacy(https);
var zlib__default = /*#__PURE__*/ _interopDefaultLegacy(zlib$1);
var buffer_1__default = /*#__PURE__*/ _interopDefaultLegacy(buffer_1);
var crypto_1__default = /*#__PURE__*/ _interopDefaultLegacy(crypto_1);
var util_1__default = /*#__PURE__*/ _interopDefaultLegacy(util_1);
var require$$0__default = /*#__PURE__*/ _interopDefaultLegacy(require$$0$1);
var querystring__default = /*#__PURE__*/ _interopDefaultLegacy(querystring);
var v8__default = /*#__PURE__*/ _interopDefaultLegacy(v8);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P
			? value
			: new P(function (resolve) {
					resolve(value);
			  });
	}
	return new (P || (P = Promise))(function (resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
}

function __generator(thisArg, body) {
	var _ = {
			label: 0,
			sent: function () {
				if (t[0] & 1) throw t[1];
				return t[1];
			},
			trys: [],
			ops: [],
		},
		f,
		y,
		t,
		g;
	return (
		(g = { next: verb(0), throw: verb(1), return: verb(2) }),
		typeof Symbol === "function" &&
			(g[Symbol.iterator] = function () {
				return this;
			}),
		g
	);
	function verb(n) {
		return function (v) {
			return step([n, v]);
		};
	}
	function step(op) {
		if (f) throw new TypeError("Generator is already executing.");
		while ((g && ((g = 0), op[0] && (_ = 0)), _))
			try {
				if (((f = 1), y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
				if (((y = 0), t)) op = [op[0] & 2, t.value];
				switch (op[0]) {
					case 0:
					case 1:
						t = op;
						break;
					case 4:
						_.label++;
						return { value: op[1], done: false };
					case 5:
						_.label++;
						y = op[1];
						op = [0];
						continue;
					case 7:
						op = _.ops.pop();
						_.trys.pop();
						continue;
					default:
						if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
							_ = 0;
							continue;
						}
						if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
							_.label = op[1];
							break;
						}
						if (op[0] === 6 && _.label < t[1]) {
							_.label = t[1];
							t = op;
							break;
						}
						if (t && _.label < t[2]) {
							_.label = t[2];
							_.ops.push(op);
							break;
						}
						if (t[2]) _.ops.pop();
						_.trys.pop();
						continue;
				}
				op = body.call(thisArg, _);
			} catch (e) {
				op = [6, e];
				y = 0;
			} finally {
				f = t = 0;
			}
		if (op[0] & 5) throw op[1];
		return { value: op[0] ? op[1] : void 0, done: true };
	}
}

var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, "__esModule", { value: true });
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(
			a,
			k,
			d.get
				? d
				: {
						enumerable: true,
						get: function () {
							return n[k];
						},
				  }
		);
	});
	return a;
}

function createCommonjsModule(fn) {
	var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var conversions = {};
var lib$3 = conversions;

function sign$5(x) {
	return x < 0 ? -1 : 1;
}

function evenRound(x) {
	// Round x to the nearest integer, choosing the even integer if it lies halfway between two.
	if (x % 1 === 0.5 && (x & 1) === 0) {
		// [even number].5; round down (i.e. floor)
		return Math.floor(x);
	} else {
		return Math.round(x);
	}
}

function createNumberConversion(bitLength, typeOpts) {
	if (!typeOpts.unsigned) {
		--bitLength;
	}
	const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
	const upperBound = Math.pow(2, bitLength) - 1;

	const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
	const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);

	return function (V, opts) {
		if (!opts) opts = {};

		let x = +V;

		if (opts.enforceRange) {
			if (!Number.isFinite(x)) {
				throw new TypeError("Argument is not a finite number");
			}

			x = sign$5(x) * Math.floor(Math.abs(x));
			if (x < lowerBound || x > upperBound) {
				throw new TypeError("Argument is not in byte range");
			}

			return x;
		}

		if (!isNaN(x) && opts.clamp) {
			x = evenRound(x);

			if (x < lowerBound) x = lowerBound;
			if (x > upperBound) x = upperBound;
			return x;
		}

		if (!Number.isFinite(x) || x === 0) {
			return 0;
		}

		x = sign$5(x) * Math.floor(Math.abs(x));
		x = x % moduloVal;

		if (!typeOpts.unsigned && x >= moduloBound) {
			return x - moduloVal;
		} else if (typeOpts.unsigned) {
			if (x < 0) {
				x += moduloVal;
			} else if (x === -0) {
				// don't return negative zero
				return 0;
			}
		}

		return x;
	};
}

conversions["void"] = function () {
	return undefined;
};

conversions["boolean"] = function (val) {
	return !!val;
};

conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });

conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });

conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });

conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });

conversions["double"] = function (V) {
	const x = +V;

	if (!Number.isFinite(x)) {
		throw new TypeError("Argument is not a finite floating-point value");
	}

	return x;
};

conversions["unrestricted double"] = function (V) {
	const x = +V;

	if (isNaN(x)) {
		throw new TypeError("Argument is NaN");
	}

	return x;
};

// not quite valid, but good enough for JS
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];

conversions["DOMString"] = function (V, opts) {
	if (!opts) opts = {};

	if (opts.treatNullAsEmptyString && V === null) {
		return "";
	}

	return String(V);
};

conversions["ByteString"] = function (V, opts) {
	const x = String(V);
	let c = undefined;
	for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
		if (c > 255) {
			throw new TypeError("Argument is not a valid bytestring");
		}
	}

	return x;
};

conversions["USVString"] = function (V) {
	const S = String(V);
	const n = S.length;
	const U = [];
	for (let i = 0; i < n; ++i) {
		const c = S.charCodeAt(i);
		if (c < 0xd800 || c > 0xdfff) {
			U.push(String.fromCodePoint(c));
		} else if (0xdc00 <= c && c <= 0xdfff) {
			U.push(String.fromCodePoint(0xfffd));
		} else {
			if (i === n - 1) {
				U.push(String.fromCodePoint(0xfffd));
			} else {
				const d = S.charCodeAt(i + 1);
				if (0xdc00 <= d && d <= 0xdfff) {
					const a = c & 0x3ff;
					const b = d & 0x3ff;
					U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
					++i;
				} else {
					U.push(String.fromCodePoint(0xfffd));
				}
			}
		}
	}

	return U.join("");
};

conversions["Date"] = function (V, opts) {
	if (!(V instanceof Date)) {
		throw new TypeError("Argument is not a Date object");
	}
	if (isNaN(V)) {
		return undefined;
	}

	return V;
};

conversions["RegExp"] = function (V, opts) {
	if (!(V instanceof RegExp)) {
		V = new RegExp(V);
	}

	return V;
};

var utils = createCommonjsModule(function (module) {
	module.exports.mixin = function mixin(target, source) {
		const keys = Object.getOwnPropertyNames(source);
		for (let i = 0; i < keys.length; ++i) {
			Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
		}
	};

	module.exports.wrapperSymbol = Symbol("wrapper");
	module.exports.implSymbol = Symbol("impl");

	module.exports.wrapperForImpl = function (impl) {
		return impl[module.exports.wrapperSymbol];
	};

	module.exports.implForWrapper = function (wrapper) {
		return wrapper[module.exports.implSymbol];
	};
});

var mappingTable = [
	[[0, 44], "disallowed_STD3_valid"],
	[[45, 46], "valid"],
	[[47, 47], "disallowed_STD3_valid"],
	[[48, 57], "valid"],
	[[58, 64], "disallowed_STD3_valid"],
	[[65, 65], "mapped", [97]],
	[[66, 66], "mapped", [98]],
	[[67, 67], "mapped", [99]],
	[[68, 68], "mapped", [100]],
	[[69, 69], "mapped", [101]],
	[[70, 70], "mapped", [102]],
	[[71, 71], "mapped", [103]],
	[[72, 72], "mapped", [104]],
	[[73, 73], "mapped", [105]],
	[[74, 74], "mapped", [106]],
	[[75, 75], "mapped", [107]],
	[[76, 76], "mapped", [108]],
	[[77, 77], "mapped", [109]],
	[[78, 78], "mapped", [110]],
	[[79, 79], "mapped", [111]],
	[[80, 80], "mapped", [112]],
	[[81, 81], "mapped", [113]],
	[[82, 82], "mapped", [114]],
	[[83, 83], "mapped", [115]],
	[[84, 84], "mapped", [116]],
	[[85, 85], "mapped", [117]],
	[[86, 86], "mapped", [118]],
	[[87, 87], "mapped", [119]],
	[[88, 88], "mapped", [120]],
	[[89, 89], "mapped", [121]],
	[[90, 90], "mapped", [122]],
	[[91, 96], "disallowed_STD3_valid"],
	[[97, 122], "valid"],
	[[123, 127], "disallowed_STD3_valid"],
	[[128, 159], "disallowed"],
	[[160, 160], "disallowed_STD3_mapped", [32]],
	[[161, 167], "valid", [], "NV8"],
	[[168, 168], "disallowed_STD3_mapped", [32, 776]],
	[[169, 169], "valid", [], "NV8"],
	[[170, 170], "mapped", [97]],
	[[171, 172], "valid", [], "NV8"],
	[[173, 173], "ignored"],
	[[174, 174], "valid", [], "NV8"],
	[[175, 175], "disallowed_STD3_mapped", [32, 772]],
	[[176, 177], "valid", [], "NV8"],
	[[178, 178], "mapped", [50]],
	[[179, 179], "mapped", [51]],
	[[180, 180], "disallowed_STD3_mapped", [32, 769]],
	[[181, 181], "mapped", [956]],
	[[182, 182], "valid", [], "NV8"],
	[[183, 183], "valid"],
	[[184, 184], "disallowed_STD3_mapped", [32, 807]],
	[[185, 185], "mapped", [49]],
	[[186, 186], "mapped", [111]],
	[[187, 187], "valid", [], "NV8"],
	[[188, 188], "mapped", [49, 8260, 52]],
	[[189, 189], "mapped", [49, 8260, 50]],
	[[190, 190], "mapped", [51, 8260, 52]],
	[[191, 191], "valid", [], "NV8"],
	[[192, 192], "mapped", [224]],
	[[193, 193], "mapped", [225]],
	[[194, 194], "mapped", [226]],
	[[195, 195], "mapped", [227]],
	[[196, 196], "mapped", [228]],
	[[197, 197], "mapped", [229]],
	[[198, 198], "mapped", [230]],
	[[199, 199], "mapped", [231]],
	[[200, 200], "mapped", [232]],
	[[201, 201], "mapped", [233]],
	[[202, 202], "mapped", [234]],
	[[203, 203], "mapped", [235]],
	[[204, 204], "mapped", [236]],
	[[205, 205], "mapped", [237]],
	[[206, 206], "mapped", [238]],
	[[207, 207], "mapped", [239]],
	[[208, 208], "mapped", [240]],
	[[209, 209], "mapped", [241]],
	[[210, 210], "mapped", [242]],
	[[211, 211], "mapped", [243]],
	[[212, 212], "mapped", [244]],
	[[213, 213], "mapped", [245]],
	[[214, 214], "mapped", [246]],
	[[215, 215], "valid", [], "NV8"],
	[[216, 216], "mapped", [248]],
	[[217, 217], "mapped", [249]],
	[[218, 218], "mapped", [250]],
	[[219, 219], "mapped", [251]],
	[[220, 220], "mapped", [252]],
	[[221, 221], "mapped", [253]],
	[[222, 222], "mapped", [254]],
	[[223, 223], "deviation", [115, 115]],
	[[224, 246], "valid"],
	[[247, 247], "valid", [], "NV8"],
	[[248, 255], "valid"],
	[[256, 256], "mapped", [257]],
	[[257, 257], "valid"],
	[[258, 258], "mapped", [259]],
	[[259, 259], "valid"],
	[[260, 260], "mapped", [261]],
	[[261, 261], "valid"],
	[[262, 262], "mapped", [263]],
	[[263, 263], "valid"],
	[[264, 264], "mapped", [265]],
	[[265, 265], "valid"],
	[[266, 266], "mapped", [267]],
	[[267, 267], "valid"],
	[[268, 268], "mapped", [269]],
	[[269, 269], "valid"],
	[[270, 270], "mapped", [271]],
	[[271, 271], "valid"],
	[[272, 272], "mapped", [273]],
	[[273, 273], "valid"],
	[[274, 274], "mapped", [275]],
	[[275, 275], "valid"],
	[[276, 276], "mapped", [277]],
	[[277, 277], "valid"],
	[[278, 278], "mapped", [279]],
	[[279, 279], "valid"],
	[[280, 280], "mapped", [281]],
	[[281, 281], "valid"],
	[[282, 282], "mapped", [283]],
	[[283, 283], "valid"],
	[[284, 284], "mapped", [285]],
	[[285, 285], "valid"],
	[[286, 286], "mapped", [287]],
	[[287, 287], "valid"],
	[[288, 288], "mapped", [289]],
	[[289, 289], "valid"],
	[[290, 290], "mapped", [291]],
	[[291, 291], "valid"],
	[[292, 292], "mapped", [293]],
	[[293, 293], "valid"],
	[[294, 294], "mapped", [295]],
	[[295, 295], "valid"],
	[[296, 296], "mapped", [297]],
	[[297, 297], "valid"],
	[[298, 298], "mapped", [299]],
	[[299, 299], "valid"],
	[[300, 300], "mapped", [301]],
	[[301, 301], "valid"],
	[[302, 302], "mapped", [303]],
	[[303, 303], "valid"],
	[[304, 304], "mapped", [105, 775]],
	[[305, 305], "valid"],
	[[306, 307], "mapped", [105, 106]],
	[[308, 308], "mapped", [309]],
	[[309, 309], "valid"],
	[[310, 310], "mapped", [311]],
	[[311, 312], "valid"],
	[[313, 313], "mapped", [314]],
	[[314, 314], "valid"],
	[[315, 315], "mapped", [316]],
	[[316, 316], "valid"],
	[[317, 317], "mapped", [318]],
	[[318, 318], "valid"],
	[[319, 320], "mapped", [108, 183]],
	[[321, 321], "mapped", [322]],
	[[322, 322], "valid"],
	[[323, 323], "mapped", [324]],
	[[324, 324], "valid"],
	[[325, 325], "mapped", [326]],
	[[326, 326], "valid"],
	[[327, 327], "mapped", [328]],
	[[328, 328], "valid"],
	[[329, 329], "mapped", [700, 110]],
	[[330, 330], "mapped", [331]],
	[[331, 331], "valid"],
	[[332, 332], "mapped", [333]],
	[[333, 333], "valid"],
	[[334, 334], "mapped", [335]],
	[[335, 335], "valid"],
	[[336, 336], "mapped", [337]],
	[[337, 337], "valid"],
	[[338, 338], "mapped", [339]],
	[[339, 339], "valid"],
	[[340, 340], "mapped", [341]],
	[[341, 341], "valid"],
	[[342, 342], "mapped", [343]],
	[[343, 343], "valid"],
	[[344, 344], "mapped", [345]],
	[[345, 345], "valid"],
	[[346, 346], "mapped", [347]],
	[[347, 347], "valid"],
	[[348, 348], "mapped", [349]],
	[[349, 349], "valid"],
	[[350, 350], "mapped", [351]],
	[[351, 351], "valid"],
	[[352, 352], "mapped", [353]],
	[[353, 353], "valid"],
	[[354, 354], "mapped", [355]],
	[[355, 355], "valid"],
	[[356, 356], "mapped", [357]],
	[[357, 357], "valid"],
	[[358, 358], "mapped", [359]],
	[[359, 359], "valid"],
	[[360, 360], "mapped", [361]],
	[[361, 361], "valid"],
	[[362, 362], "mapped", [363]],
	[[363, 363], "valid"],
	[[364, 364], "mapped", [365]],
	[[365, 365], "valid"],
	[[366, 366], "mapped", [367]],
	[[367, 367], "valid"],
	[[368, 368], "mapped", [369]],
	[[369, 369], "valid"],
	[[370, 370], "mapped", [371]],
	[[371, 371], "valid"],
	[[372, 372], "mapped", [373]],
	[[373, 373], "valid"],
	[[374, 374], "mapped", [375]],
	[[375, 375], "valid"],
	[[376, 376], "mapped", [255]],
	[[377, 377], "mapped", [378]],
	[[378, 378], "valid"],
	[[379, 379], "mapped", [380]],
	[[380, 380], "valid"],
	[[381, 381], "mapped", [382]],
	[[382, 382], "valid"],
	[[383, 383], "mapped", [115]],
	[[384, 384], "valid"],
	[[385, 385], "mapped", [595]],
	[[386, 386], "mapped", [387]],
	[[387, 387], "valid"],
	[[388, 388], "mapped", [389]],
	[[389, 389], "valid"],
	[[390, 390], "mapped", [596]],
	[[391, 391], "mapped", [392]],
	[[392, 392], "valid"],
	[[393, 393], "mapped", [598]],
	[[394, 394], "mapped", [599]],
	[[395, 395], "mapped", [396]],
	[[396, 397], "valid"],
	[[398, 398], "mapped", [477]],
	[[399, 399], "mapped", [601]],
	[[400, 400], "mapped", [603]],
	[[401, 401], "mapped", [402]],
	[[402, 402], "valid"],
	[[403, 403], "mapped", [608]],
	[[404, 404], "mapped", [611]],
	[[405, 405], "valid"],
	[[406, 406], "mapped", [617]],
	[[407, 407], "mapped", [616]],
	[[408, 408], "mapped", [409]],
	[[409, 411], "valid"],
	[[412, 412], "mapped", [623]],
	[[413, 413], "mapped", [626]],
	[[414, 414], "valid"],
	[[415, 415], "mapped", [629]],
	[[416, 416], "mapped", [417]],
	[[417, 417], "valid"],
	[[418, 418], "mapped", [419]],
	[[419, 419], "valid"],
	[[420, 420], "mapped", [421]],
	[[421, 421], "valid"],
	[[422, 422], "mapped", [640]],
	[[423, 423], "mapped", [424]],
	[[424, 424], "valid"],
	[[425, 425], "mapped", [643]],
	[[426, 427], "valid"],
	[[428, 428], "mapped", [429]],
	[[429, 429], "valid"],
	[[430, 430], "mapped", [648]],
	[[431, 431], "mapped", [432]],
	[[432, 432], "valid"],
	[[433, 433], "mapped", [650]],
	[[434, 434], "mapped", [651]],
	[[435, 435], "mapped", [436]],
	[[436, 436], "valid"],
	[[437, 437], "mapped", [438]],
	[[438, 438], "valid"],
	[[439, 439], "mapped", [658]],
	[[440, 440], "mapped", [441]],
	[[441, 443], "valid"],
	[[444, 444], "mapped", [445]],
	[[445, 451], "valid"],
	[[452, 454], "mapped", [100, 382]],
	[[455, 457], "mapped", [108, 106]],
	[[458, 460], "mapped", [110, 106]],
	[[461, 461], "mapped", [462]],
	[[462, 462], "valid"],
	[[463, 463], "mapped", [464]],
	[[464, 464], "valid"],
	[[465, 465], "mapped", [466]],
	[[466, 466], "valid"],
	[[467, 467], "mapped", [468]],
	[[468, 468], "valid"],
	[[469, 469], "mapped", [470]],
	[[470, 470], "valid"],
	[[471, 471], "mapped", [472]],
	[[472, 472], "valid"],
	[[473, 473], "mapped", [474]],
	[[474, 474], "valid"],
	[[475, 475], "mapped", [476]],
	[[476, 477], "valid"],
	[[478, 478], "mapped", [479]],
	[[479, 479], "valid"],
	[[480, 480], "mapped", [481]],
	[[481, 481], "valid"],
	[[482, 482], "mapped", [483]],
	[[483, 483], "valid"],
	[[484, 484], "mapped", [485]],
	[[485, 485], "valid"],
	[[486, 486], "mapped", [487]],
	[[487, 487], "valid"],
	[[488, 488], "mapped", [489]],
	[[489, 489], "valid"],
	[[490, 490], "mapped", [491]],
	[[491, 491], "valid"],
	[[492, 492], "mapped", [493]],
	[[493, 493], "valid"],
	[[494, 494], "mapped", [495]],
	[[495, 496], "valid"],
	[[497, 499], "mapped", [100, 122]],
	[[500, 500], "mapped", [501]],
	[[501, 501], "valid"],
	[[502, 502], "mapped", [405]],
	[[503, 503], "mapped", [447]],
	[[504, 504], "mapped", [505]],
	[[505, 505], "valid"],
	[[506, 506], "mapped", [507]],
	[[507, 507], "valid"],
	[[508, 508], "mapped", [509]],
	[[509, 509], "valid"],
	[[510, 510], "mapped", [511]],
	[[511, 511], "valid"],
	[[512, 512], "mapped", [513]],
	[[513, 513], "valid"],
	[[514, 514], "mapped", [515]],
	[[515, 515], "valid"],
	[[516, 516], "mapped", [517]],
	[[517, 517], "valid"],
	[[518, 518], "mapped", [519]],
	[[519, 519], "valid"],
	[[520, 520], "mapped", [521]],
	[[521, 521], "valid"],
	[[522, 522], "mapped", [523]],
	[[523, 523], "valid"],
	[[524, 524], "mapped", [525]],
	[[525, 525], "valid"],
	[[526, 526], "mapped", [527]],
	[[527, 527], "valid"],
	[[528, 528], "mapped", [529]],
	[[529, 529], "valid"],
	[[530, 530], "mapped", [531]],
	[[531, 531], "valid"],
	[[532, 532], "mapped", [533]],
	[[533, 533], "valid"],
	[[534, 534], "mapped", [535]],
	[[535, 535], "valid"],
	[[536, 536], "mapped", [537]],
	[[537, 537], "valid"],
	[[538, 538], "mapped", [539]],
	[[539, 539], "valid"],
	[[540, 540], "mapped", [541]],
	[[541, 541], "valid"],
	[[542, 542], "mapped", [543]],
	[[543, 543], "valid"],
	[[544, 544], "mapped", [414]],
	[[545, 545], "valid"],
	[[546, 546], "mapped", [547]],
	[[547, 547], "valid"],
	[[548, 548], "mapped", [549]],
	[[549, 549], "valid"],
	[[550, 550], "mapped", [551]],
	[[551, 551], "valid"],
	[[552, 552], "mapped", [553]],
	[[553, 553], "valid"],
	[[554, 554], "mapped", [555]],
	[[555, 555], "valid"],
	[[556, 556], "mapped", [557]],
	[[557, 557], "valid"],
	[[558, 558], "mapped", [559]],
	[[559, 559], "valid"],
	[[560, 560], "mapped", [561]],
	[[561, 561], "valid"],
	[[562, 562], "mapped", [563]],
	[[563, 563], "valid"],
	[[564, 566], "valid"],
	[[567, 569], "valid"],
	[[570, 570], "mapped", [11365]],
	[[571, 571], "mapped", [572]],
	[[572, 572], "valid"],
	[[573, 573], "mapped", [410]],
	[[574, 574], "mapped", [11366]],
	[[575, 576], "valid"],
	[[577, 577], "mapped", [578]],
	[[578, 578], "valid"],
	[[579, 579], "mapped", [384]],
	[[580, 580], "mapped", [649]],
	[[581, 581], "mapped", [652]],
	[[582, 582], "mapped", [583]],
	[[583, 583], "valid"],
	[[584, 584], "mapped", [585]],
	[[585, 585], "valid"],
	[[586, 586], "mapped", [587]],
	[[587, 587], "valid"],
	[[588, 588], "mapped", [589]],
	[[589, 589], "valid"],
	[[590, 590], "mapped", [591]],
	[[591, 591], "valid"],
	[[592, 680], "valid"],
	[[681, 685], "valid"],
	[[686, 687], "valid"],
	[[688, 688], "mapped", [104]],
	[[689, 689], "mapped", [614]],
	[[690, 690], "mapped", [106]],
	[[691, 691], "mapped", [114]],
	[[692, 692], "mapped", [633]],
	[[693, 693], "mapped", [635]],
	[[694, 694], "mapped", [641]],
	[[695, 695], "mapped", [119]],
	[[696, 696], "mapped", [121]],
	[[697, 705], "valid"],
	[[706, 709], "valid", [], "NV8"],
	[[710, 721], "valid"],
	[[722, 727], "valid", [], "NV8"],
	[[728, 728], "disallowed_STD3_mapped", [32, 774]],
	[[729, 729], "disallowed_STD3_mapped", [32, 775]],
	[[730, 730], "disallowed_STD3_mapped", [32, 778]],
	[[731, 731], "disallowed_STD3_mapped", [32, 808]],
	[[732, 732], "disallowed_STD3_mapped", [32, 771]],
	[[733, 733], "disallowed_STD3_mapped", [32, 779]],
	[[734, 734], "valid", [], "NV8"],
	[[735, 735], "valid", [], "NV8"],
	[[736, 736], "mapped", [611]],
	[[737, 737], "mapped", [108]],
	[[738, 738], "mapped", [115]],
	[[739, 739], "mapped", [120]],
	[[740, 740], "mapped", [661]],
	[[741, 745], "valid", [], "NV8"],
	[[746, 747], "valid", [], "NV8"],
	[[748, 748], "valid"],
	[[749, 749], "valid", [], "NV8"],
	[[750, 750], "valid"],
	[[751, 767], "valid", [], "NV8"],
	[[768, 831], "valid"],
	[[832, 832], "mapped", [768]],
	[[833, 833], "mapped", [769]],
	[[834, 834], "valid"],
	[[835, 835], "mapped", [787]],
	[[836, 836], "mapped", [776, 769]],
	[[837, 837], "mapped", [953]],
	[[838, 846], "valid"],
	[[847, 847], "ignored"],
	[[848, 855], "valid"],
	[[856, 860], "valid"],
	[[861, 863], "valid"],
	[[864, 865], "valid"],
	[[866, 866], "valid"],
	[[867, 879], "valid"],
	[[880, 880], "mapped", [881]],
	[[881, 881], "valid"],
	[[882, 882], "mapped", [883]],
	[[883, 883], "valid"],
	[[884, 884], "mapped", [697]],
	[[885, 885], "valid"],
	[[886, 886], "mapped", [887]],
	[[887, 887], "valid"],
	[[888, 889], "disallowed"],
	[[890, 890], "disallowed_STD3_mapped", [32, 953]],
	[[891, 893], "valid"],
	[[894, 894], "disallowed_STD3_mapped", [59]],
	[[895, 895], "mapped", [1011]],
	[[896, 899], "disallowed"],
	[[900, 900], "disallowed_STD3_mapped", [32, 769]],
	[[901, 901], "disallowed_STD3_mapped", [32, 776, 769]],
	[[902, 902], "mapped", [940]],
	[[903, 903], "mapped", [183]],
	[[904, 904], "mapped", [941]],
	[[905, 905], "mapped", [942]],
	[[906, 906], "mapped", [943]],
	[[907, 907], "disallowed"],
	[[908, 908], "mapped", [972]],
	[[909, 909], "disallowed"],
	[[910, 910], "mapped", [973]],
	[[911, 911], "mapped", [974]],
	[[912, 912], "valid"],
	[[913, 913], "mapped", [945]],
	[[914, 914], "mapped", [946]],
	[[915, 915], "mapped", [947]],
	[[916, 916], "mapped", [948]],
	[[917, 917], "mapped", [949]],
	[[918, 918], "mapped", [950]],
	[[919, 919], "mapped", [951]],
	[[920, 920], "mapped", [952]],
	[[921, 921], "mapped", [953]],
	[[922, 922], "mapped", [954]],
	[[923, 923], "mapped", [955]],
	[[924, 924], "mapped", [956]],
	[[925, 925], "mapped", [957]],
	[[926, 926], "mapped", [958]],
	[[927, 927], "mapped", [959]],
	[[928, 928], "mapped", [960]],
	[[929, 929], "mapped", [961]],
	[[930, 930], "disallowed"],
	[[931, 931], "mapped", [963]],
	[[932, 932], "mapped", [964]],
	[[933, 933], "mapped", [965]],
	[[934, 934], "mapped", [966]],
	[[935, 935], "mapped", [967]],
	[[936, 936], "mapped", [968]],
	[[937, 937], "mapped", [969]],
	[[938, 938], "mapped", [970]],
	[[939, 939], "mapped", [971]],
	[[940, 961], "valid"],
	[[962, 962], "deviation", [963]],
	[[963, 974], "valid"],
	[[975, 975], "mapped", [983]],
	[[976, 976], "mapped", [946]],
	[[977, 977], "mapped", [952]],
	[[978, 978], "mapped", [965]],
	[[979, 979], "mapped", [973]],
	[[980, 980], "mapped", [971]],
	[[981, 981], "mapped", [966]],
	[[982, 982], "mapped", [960]],
	[[983, 983], "valid"],
	[[984, 984], "mapped", [985]],
	[[985, 985], "valid"],
	[[986, 986], "mapped", [987]],
	[[987, 987], "valid"],
	[[988, 988], "mapped", [989]],
	[[989, 989], "valid"],
	[[990, 990], "mapped", [991]],
	[[991, 991], "valid"],
	[[992, 992], "mapped", [993]],
	[[993, 993], "valid"],
	[[994, 994], "mapped", [995]],
	[[995, 995], "valid"],
	[[996, 996], "mapped", [997]],
	[[997, 997], "valid"],
	[[998, 998], "mapped", [999]],
	[[999, 999], "valid"],
	[[1000, 1000], "mapped", [1001]],
	[[1001, 1001], "valid"],
	[[1002, 1002], "mapped", [1003]],
	[[1003, 1003], "valid"],
	[[1004, 1004], "mapped", [1005]],
	[[1005, 1005], "valid"],
	[[1006, 1006], "mapped", [1007]],
	[[1007, 1007], "valid"],
	[[1008, 1008], "mapped", [954]],
	[[1009, 1009], "mapped", [961]],
	[[1010, 1010], "mapped", [963]],
	[[1011, 1011], "valid"],
	[[1012, 1012], "mapped", [952]],
	[[1013, 1013], "mapped", [949]],
	[[1014, 1014], "valid", [], "NV8"],
	[[1015, 1015], "mapped", [1016]],
	[[1016, 1016], "valid"],
	[[1017, 1017], "mapped", [963]],
	[[1018, 1018], "mapped", [1019]],
	[[1019, 1019], "valid"],
	[[1020, 1020], "valid"],
	[[1021, 1021], "mapped", [891]],
	[[1022, 1022], "mapped", [892]],
	[[1023, 1023], "mapped", [893]],
	[[1024, 1024], "mapped", [1104]],
	[[1025, 1025], "mapped", [1105]],
	[[1026, 1026], "mapped", [1106]],
	[[1027, 1027], "mapped", [1107]],
	[[1028, 1028], "mapped", [1108]],
	[[1029, 1029], "mapped", [1109]],
	[[1030, 1030], "mapped", [1110]],
	[[1031, 1031], "mapped", [1111]],
	[[1032, 1032], "mapped", [1112]],
	[[1033, 1033], "mapped", [1113]],
	[[1034, 1034], "mapped", [1114]],
	[[1035, 1035], "mapped", [1115]],
	[[1036, 1036], "mapped", [1116]],
	[[1037, 1037], "mapped", [1117]],
	[[1038, 1038], "mapped", [1118]],
	[[1039, 1039], "mapped", [1119]],
	[[1040, 1040], "mapped", [1072]],
	[[1041, 1041], "mapped", [1073]],
	[[1042, 1042], "mapped", [1074]],
	[[1043, 1043], "mapped", [1075]],
	[[1044, 1044], "mapped", [1076]],
	[[1045, 1045], "mapped", [1077]],
	[[1046, 1046], "mapped", [1078]],
	[[1047, 1047], "mapped", [1079]],
	[[1048, 1048], "mapped", [1080]],
	[[1049, 1049], "mapped", [1081]],
	[[1050, 1050], "mapped", [1082]],
	[[1051, 1051], "mapped", [1083]],
	[[1052, 1052], "mapped", [1084]],
	[[1053, 1053], "mapped", [1085]],
	[[1054, 1054], "mapped", [1086]],
	[[1055, 1055], "mapped", [1087]],
	[[1056, 1056], "mapped", [1088]],
	[[1057, 1057], "mapped", [1089]],
	[[1058, 1058], "mapped", [1090]],
	[[1059, 1059], "mapped", [1091]],
	[[1060, 1060], "mapped", [1092]],
	[[1061, 1061], "mapped", [1093]],
	[[1062, 1062], "mapped", [1094]],
	[[1063, 1063], "mapped", [1095]],
	[[1064, 1064], "mapped", [1096]],
	[[1065, 1065], "mapped", [1097]],
	[[1066, 1066], "mapped", [1098]],
	[[1067, 1067], "mapped", [1099]],
	[[1068, 1068], "mapped", [1100]],
	[[1069, 1069], "mapped", [1101]],
	[[1070, 1070], "mapped", [1102]],
	[[1071, 1071], "mapped", [1103]],
	[[1072, 1103], "valid"],
	[[1104, 1104], "valid"],
	[[1105, 1116], "valid"],
	[[1117, 1117], "valid"],
	[[1118, 1119], "valid"],
	[[1120, 1120], "mapped", [1121]],
	[[1121, 1121], "valid"],
	[[1122, 1122], "mapped", [1123]],
	[[1123, 1123], "valid"],
	[[1124, 1124], "mapped", [1125]],
	[[1125, 1125], "valid"],
	[[1126, 1126], "mapped", [1127]],
	[[1127, 1127], "valid"],
	[[1128, 1128], "mapped", [1129]],
	[[1129, 1129], "valid"],
	[[1130, 1130], "mapped", [1131]],
	[[1131, 1131], "valid"],
	[[1132, 1132], "mapped", [1133]],
	[[1133, 1133], "valid"],
	[[1134, 1134], "mapped", [1135]],
	[[1135, 1135], "valid"],
	[[1136, 1136], "mapped", [1137]],
	[[1137, 1137], "valid"],
	[[1138, 1138], "mapped", [1139]],
	[[1139, 1139], "valid"],
	[[1140, 1140], "mapped", [1141]],
	[[1141, 1141], "valid"],
	[[1142, 1142], "mapped", [1143]],
	[[1143, 1143], "valid"],
	[[1144, 1144], "mapped", [1145]],
	[[1145, 1145], "valid"],
	[[1146, 1146], "mapped", [1147]],
	[[1147, 1147], "valid"],
	[[1148, 1148], "mapped", [1149]],
	[[1149, 1149], "valid"],
	[[1150, 1150], "mapped", [1151]],
	[[1151, 1151], "valid"],
	[[1152, 1152], "mapped", [1153]],
	[[1153, 1153], "valid"],
	[[1154, 1154], "valid", [], "NV8"],
	[[1155, 1158], "valid"],
	[[1159, 1159], "valid"],
	[[1160, 1161], "valid", [], "NV8"],
	[[1162, 1162], "mapped", [1163]],
	[[1163, 1163], "valid"],
	[[1164, 1164], "mapped", [1165]],
	[[1165, 1165], "valid"],
	[[1166, 1166], "mapped", [1167]],
	[[1167, 1167], "valid"],
	[[1168, 1168], "mapped", [1169]],
	[[1169, 1169], "valid"],
	[[1170, 1170], "mapped", [1171]],
	[[1171, 1171], "valid"],
	[[1172, 1172], "mapped", [1173]],
	[[1173, 1173], "valid"],
	[[1174, 1174], "mapped", [1175]],
	[[1175, 1175], "valid"],
	[[1176, 1176], "mapped", [1177]],
	[[1177, 1177], "valid"],
	[[1178, 1178], "mapped", [1179]],
	[[1179, 1179], "valid"],
	[[1180, 1180], "mapped", [1181]],
	[[1181, 1181], "valid"],
	[[1182, 1182], "mapped", [1183]],
	[[1183, 1183], "valid"],
	[[1184, 1184], "mapped", [1185]],
	[[1185, 1185], "valid"],
	[[1186, 1186], "mapped", [1187]],
	[[1187, 1187], "valid"],
	[[1188, 1188], "mapped", [1189]],
	[[1189, 1189], "valid"],
	[[1190, 1190], "mapped", [1191]],
	[[1191, 1191], "valid"],
	[[1192, 1192], "mapped", [1193]],
	[[1193, 1193], "valid"],
	[[1194, 1194], "mapped", [1195]],
	[[1195, 1195], "valid"],
	[[1196, 1196], "mapped", [1197]],
	[[1197, 1197], "valid"],
	[[1198, 1198], "mapped", [1199]],
	[[1199, 1199], "valid"],
	[[1200, 1200], "mapped", [1201]],
	[[1201, 1201], "valid"],
	[[1202, 1202], "mapped", [1203]],
	[[1203, 1203], "valid"],
	[[1204, 1204], "mapped", [1205]],
	[[1205, 1205], "valid"],
	[[1206, 1206], "mapped", [1207]],
	[[1207, 1207], "valid"],
	[[1208, 1208], "mapped", [1209]],
	[[1209, 1209], "valid"],
	[[1210, 1210], "mapped", [1211]],
	[[1211, 1211], "valid"],
	[[1212, 1212], "mapped", [1213]],
	[[1213, 1213], "valid"],
	[[1214, 1214], "mapped", [1215]],
	[[1215, 1215], "valid"],
	[[1216, 1216], "disallowed"],
	[[1217, 1217], "mapped", [1218]],
	[[1218, 1218], "valid"],
	[[1219, 1219], "mapped", [1220]],
	[[1220, 1220], "valid"],
	[[1221, 1221], "mapped", [1222]],
	[[1222, 1222], "valid"],
	[[1223, 1223], "mapped", [1224]],
	[[1224, 1224], "valid"],
	[[1225, 1225], "mapped", [1226]],
	[[1226, 1226], "valid"],
	[[1227, 1227], "mapped", [1228]],
	[[1228, 1228], "valid"],
	[[1229, 1229], "mapped", [1230]],
	[[1230, 1230], "valid"],
	[[1231, 1231], "valid"],
	[[1232, 1232], "mapped", [1233]],
	[[1233, 1233], "valid"],
	[[1234, 1234], "mapped", [1235]],
	[[1235, 1235], "valid"],
	[[1236, 1236], "mapped", [1237]],
	[[1237, 1237], "valid"],
	[[1238, 1238], "mapped", [1239]],
	[[1239, 1239], "valid"],
	[[1240, 1240], "mapped", [1241]],
	[[1241, 1241], "valid"],
	[[1242, 1242], "mapped", [1243]],
	[[1243, 1243], "valid"],
	[[1244, 1244], "mapped", [1245]],
	[[1245, 1245], "valid"],
	[[1246, 1246], "mapped", [1247]],
	[[1247, 1247], "valid"],
	[[1248, 1248], "mapped", [1249]],
	[[1249, 1249], "valid"],
	[[1250, 1250], "mapped", [1251]],
	[[1251, 1251], "valid"],
	[[1252, 1252], "mapped", [1253]],
	[[1253, 1253], "valid"],
	[[1254, 1254], "mapped", [1255]],
	[[1255, 1255], "valid"],
	[[1256, 1256], "mapped", [1257]],
	[[1257, 1257], "valid"],
	[[1258, 1258], "mapped", [1259]],
	[[1259, 1259], "valid"],
	[[1260, 1260], "mapped", [1261]],
	[[1261, 1261], "valid"],
	[[1262, 1262], "mapped", [1263]],
	[[1263, 1263], "valid"],
	[[1264, 1264], "mapped", [1265]],
	[[1265, 1265], "valid"],
	[[1266, 1266], "mapped", [1267]],
	[[1267, 1267], "valid"],
	[[1268, 1268], "mapped", [1269]],
	[[1269, 1269], "valid"],
	[[1270, 1270], "mapped", [1271]],
	[[1271, 1271], "valid"],
	[[1272, 1272], "mapped", [1273]],
	[[1273, 1273], "valid"],
	[[1274, 1274], "mapped", [1275]],
	[[1275, 1275], "valid"],
	[[1276, 1276], "mapped", [1277]],
	[[1277, 1277], "valid"],
	[[1278, 1278], "mapped", [1279]],
	[[1279, 1279], "valid"],
	[[1280, 1280], "mapped", [1281]],
	[[1281, 1281], "valid"],
	[[1282, 1282], "mapped", [1283]],
	[[1283, 1283], "valid"],
	[[1284, 1284], "mapped", [1285]],
	[[1285, 1285], "valid"],
	[[1286, 1286], "mapped", [1287]],
	[[1287, 1287], "valid"],
	[[1288, 1288], "mapped", [1289]],
	[[1289, 1289], "valid"],
	[[1290, 1290], "mapped", [1291]],
	[[1291, 1291], "valid"],
	[[1292, 1292], "mapped", [1293]],
	[[1293, 1293], "valid"],
	[[1294, 1294], "mapped", [1295]],
	[[1295, 1295], "valid"],
	[[1296, 1296], "mapped", [1297]],
	[[1297, 1297], "valid"],
	[[1298, 1298], "mapped", [1299]],
	[[1299, 1299], "valid"],
	[[1300, 1300], "mapped", [1301]],
	[[1301, 1301], "valid"],
	[[1302, 1302], "mapped", [1303]],
	[[1303, 1303], "valid"],
	[[1304, 1304], "mapped", [1305]],
	[[1305, 1305], "valid"],
	[[1306, 1306], "mapped", [1307]],
	[[1307, 1307], "valid"],
	[[1308, 1308], "mapped", [1309]],
	[[1309, 1309], "valid"],
	[[1310, 1310], "mapped", [1311]],
	[[1311, 1311], "valid"],
	[[1312, 1312], "mapped", [1313]],
	[[1313, 1313], "valid"],
	[[1314, 1314], "mapped", [1315]],
	[[1315, 1315], "valid"],
	[[1316, 1316], "mapped", [1317]],
	[[1317, 1317], "valid"],
	[[1318, 1318], "mapped", [1319]],
	[[1319, 1319], "valid"],
	[[1320, 1320], "mapped", [1321]],
	[[1321, 1321], "valid"],
	[[1322, 1322], "mapped", [1323]],
	[[1323, 1323], "valid"],
	[[1324, 1324], "mapped", [1325]],
	[[1325, 1325], "valid"],
	[[1326, 1326], "mapped", [1327]],
	[[1327, 1327], "valid"],
	[[1328, 1328], "disallowed"],
	[[1329, 1329], "mapped", [1377]],
	[[1330, 1330], "mapped", [1378]],
	[[1331, 1331], "mapped", [1379]],
	[[1332, 1332], "mapped", [1380]],
	[[1333, 1333], "mapped", [1381]],
	[[1334, 1334], "mapped", [1382]],
	[[1335, 1335], "mapped", [1383]],
	[[1336, 1336], "mapped", [1384]],
	[[1337, 1337], "mapped", [1385]],
	[[1338, 1338], "mapped", [1386]],
	[[1339, 1339], "mapped", [1387]],
	[[1340, 1340], "mapped", [1388]],
	[[1341, 1341], "mapped", [1389]],
	[[1342, 1342], "mapped", [1390]],
	[[1343, 1343], "mapped", [1391]],
	[[1344, 1344], "mapped", [1392]],
	[[1345, 1345], "mapped", [1393]],
	[[1346, 1346], "mapped", [1394]],
	[[1347, 1347], "mapped", [1395]],
	[[1348, 1348], "mapped", [1396]],
	[[1349, 1349], "mapped", [1397]],
	[[1350, 1350], "mapped", [1398]],
	[[1351, 1351], "mapped", [1399]],
	[[1352, 1352], "mapped", [1400]],
	[[1353, 1353], "mapped", [1401]],
	[[1354, 1354], "mapped", [1402]],
	[[1355, 1355], "mapped", [1403]],
	[[1356, 1356], "mapped", [1404]],
	[[1357, 1357], "mapped", [1405]],
	[[1358, 1358], "mapped", [1406]],
	[[1359, 1359], "mapped", [1407]],
	[[1360, 1360], "mapped", [1408]],
	[[1361, 1361], "mapped", [1409]],
	[[1362, 1362], "mapped", [1410]],
	[[1363, 1363], "mapped", [1411]],
	[[1364, 1364], "mapped", [1412]],
	[[1365, 1365], "mapped", [1413]],
	[[1366, 1366], "mapped", [1414]],
	[[1367, 1368], "disallowed"],
	[[1369, 1369], "valid"],
	[[1370, 1375], "valid", [], "NV8"],
	[[1376, 1376], "disallowed"],
	[[1377, 1414], "valid"],
	[[1415, 1415], "mapped", [1381, 1410]],
	[[1416, 1416], "disallowed"],
	[[1417, 1417], "valid", [], "NV8"],
	[[1418, 1418], "valid", [], "NV8"],
	[[1419, 1420], "disallowed"],
	[[1421, 1422], "valid", [], "NV8"],
	[[1423, 1423], "valid", [], "NV8"],
	[[1424, 1424], "disallowed"],
	[[1425, 1441], "valid"],
	[[1442, 1442], "valid"],
	[[1443, 1455], "valid"],
	[[1456, 1465], "valid"],
	[[1466, 1466], "valid"],
	[[1467, 1469], "valid"],
	[[1470, 1470], "valid", [], "NV8"],
	[[1471, 1471], "valid"],
	[[1472, 1472], "valid", [], "NV8"],
	[[1473, 1474], "valid"],
	[[1475, 1475], "valid", [], "NV8"],
	[[1476, 1476], "valid"],
	[[1477, 1477], "valid"],
	[[1478, 1478], "valid", [], "NV8"],
	[[1479, 1479], "valid"],
	[[1480, 1487], "disallowed"],
	[[1488, 1514], "valid"],
	[[1515, 1519], "disallowed"],
	[[1520, 1524], "valid"],
	[[1525, 1535], "disallowed"],
	[[1536, 1539], "disallowed"],
	[[1540, 1540], "disallowed"],
	[[1541, 1541], "disallowed"],
	[[1542, 1546], "valid", [], "NV8"],
	[[1547, 1547], "valid", [], "NV8"],
	[[1548, 1548], "valid", [], "NV8"],
	[[1549, 1551], "valid", [], "NV8"],
	[[1552, 1557], "valid"],
	[[1558, 1562], "valid"],
	[[1563, 1563], "valid", [], "NV8"],
	[[1564, 1564], "disallowed"],
	[[1565, 1565], "disallowed"],
	[[1566, 1566], "valid", [], "NV8"],
	[[1567, 1567], "valid", [], "NV8"],
	[[1568, 1568], "valid"],
	[[1569, 1594], "valid"],
	[[1595, 1599], "valid"],
	[[1600, 1600], "valid", [], "NV8"],
	[[1601, 1618], "valid"],
	[[1619, 1621], "valid"],
	[[1622, 1624], "valid"],
	[[1625, 1630], "valid"],
	[[1631, 1631], "valid"],
	[[1632, 1641], "valid"],
	[[1642, 1645], "valid", [], "NV8"],
	[[1646, 1647], "valid"],
	[[1648, 1652], "valid"],
	[[1653, 1653], "mapped", [1575, 1652]],
	[[1654, 1654], "mapped", [1608, 1652]],
	[[1655, 1655], "mapped", [1735, 1652]],
	[[1656, 1656], "mapped", [1610, 1652]],
	[[1657, 1719], "valid"],
	[[1720, 1721], "valid"],
	[[1722, 1726], "valid"],
	[[1727, 1727], "valid"],
	[[1728, 1742], "valid"],
	[[1743, 1743], "valid"],
	[[1744, 1747], "valid"],
	[[1748, 1748], "valid", [], "NV8"],
	[[1749, 1756], "valid"],
	[[1757, 1757], "disallowed"],
	[[1758, 1758], "valid", [], "NV8"],
	[[1759, 1768], "valid"],
	[[1769, 1769], "valid", [], "NV8"],
	[[1770, 1773], "valid"],
	[[1774, 1775], "valid"],
	[[1776, 1785], "valid"],
	[[1786, 1790], "valid"],
	[[1791, 1791], "valid"],
	[[1792, 1805], "valid", [], "NV8"],
	[[1806, 1806], "disallowed"],
	[[1807, 1807], "disallowed"],
	[[1808, 1836], "valid"],
	[[1837, 1839], "valid"],
	[[1840, 1866], "valid"],
	[[1867, 1868], "disallowed"],
	[[1869, 1871], "valid"],
	[[1872, 1901], "valid"],
	[[1902, 1919], "valid"],
	[[1920, 1968], "valid"],
	[[1969, 1969], "valid"],
	[[1970, 1983], "disallowed"],
	[[1984, 2037], "valid"],
	[[2038, 2042], "valid", [], "NV8"],
	[[2043, 2047], "disallowed"],
	[[2048, 2093], "valid"],
	[[2094, 2095], "disallowed"],
	[[2096, 2110], "valid", [], "NV8"],
	[[2111, 2111], "disallowed"],
	[[2112, 2139], "valid"],
	[[2140, 2141], "disallowed"],
	[[2142, 2142], "valid", [], "NV8"],
	[[2143, 2207], "disallowed"],
	[[2208, 2208], "valid"],
	[[2209, 2209], "valid"],
	[[2210, 2220], "valid"],
	[[2221, 2226], "valid"],
	[[2227, 2228], "valid"],
	[[2229, 2274], "disallowed"],
	[[2275, 2275], "valid"],
	[[2276, 2302], "valid"],
	[[2303, 2303], "valid"],
	[[2304, 2304], "valid"],
	[[2305, 2307], "valid"],
	[[2308, 2308], "valid"],
	[[2309, 2361], "valid"],
	[[2362, 2363], "valid"],
	[[2364, 2381], "valid"],
	[[2382, 2382], "valid"],
	[[2383, 2383], "valid"],
	[[2384, 2388], "valid"],
	[[2389, 2389], "valid"],
	[[2390, 2391], "valid"],
	[[2392, 2392], "mapped", [2325, 2364]],
	[[2393, 2393], "mapped", [2326, 2364]],
	[[2394, 2394], "mapped", [2327, 2364]],
	[[2395, 2395], "mapped", [2332, 2364]],
	[[2396, 2396], "mapped", [2337, 2364]],
	[[2397, 2397], "mapped", [2338, 2364]],
	[[2398, 2398], "mapped", [2347, 2364]],
	[[2399, 2399], "mapped", [2351, 2364]],
	[[2400, 2403], "valid"],
	[[2404, 2405], "valid", [], "NV8"],
	[[2406, 2415], "valid"],
	[[2416, 2416], "valid", [], "NV8"],
	[[2417, 2418], "valid"],
	[[2419, 2423], "valid"],
	[[2424, 2424], "valid"],
	[[2425, 2426], "valid"],
	[[2427, 2428], "valid"],
	[[2429, 2429], "valid"],
	[[2430, 2431], "valid"],
	[[2432, 2432], "valid"],
	[[2433, 2435], "valid"],
	[[2436, 2436], "disallowed"],
	[[2437, 2444], "valid"],
	[[2445, 2446], "disallowed"],
	[[2447, 2448], "valid"],
	[[2449, 2450], "disallowed"],
	[[2451, 2472], "valid"],
	[[2473, 2473], "disallowed"],
	[[2474, 2480], "valid"],
	[[2481, 2481], "disallowed"],
	[[2482, 2482], "valid"],
	[[2483, 2485], "disallowed"],
	[[2486, 2489], "valid"],
	[[2490, 2491], "disallowed"],
	[[2492, 2492], "valid"],
	[[2493, 2493], "valid"],
	[[2494, 2500], "valid"],
	[[2501, 2502], "disallowed"],
	[[2503, 2504], "valid"],
	[[2505, 2506], "disallowed"],
	[[2507, 2509], "valid"],
	[[2510, 2510], "valid"],
	[[2511, 2518], "disallowed"],
	[[2519, 2519], "valid"],
	[[2520, 2523], "disallowed"],
	[[2524, 2524], "mapped", [2465, 2492]],
	[[2525, 2525], "mapped", [2466, 2492]],
	[[2526, 2526], "disallowed"],
	[[2527, 2527], "mapped", [2479, 2492]],
	[[2528, 2531], "valid"],
	[[2532, 2533], "disallowed"],
	[[2534, 2545], "valid"],
	[[2546, 2554], "valid", [], "NV8"],
	[[2555, 2555], "valid", [], "NV8"],
	[[2556, 2560], "disallowed"],
	[[2561, 2561], "valid"],
	[[2562, 2562], "valid"],
	[[2563, 2563], "valid"],
	[[2564, 2564], "disallowed"],
	[[2565, 2570], "valid"],
	[[2571, 2574], "disallowed"],
	[[2575, 2576], "valid"],
	[[2577, 2578], "disallowed"],
	[[2579, 2600], "valid"],
	[[2601, 2601], "disallowed"],
	[[2602, 2608], "valid"],
	[[2609, 2609], "disallowed"],
	[[2610, 2610], "valid"],
	[[2611, 2611], "mapped", [2610, 2620]],
	[[2612, 2612], "disallowed"],
	[[2613, 2613], "valid"],
	[[2614, 2614], "mapped", [2616, 2620]],
	[[2615, 2615], "disallowed"],
	[[2616, 2617], "valid"],
	[[2618, 2619], "disallowed"],
	[[2620, 2620], "valid"],
	[[2621, 2621], "disallowed"],
	[[2622, 2626], "valid"],
	[[2627, 2630], "disallowed"],
	[[2631, 2632], "valid"],
	[[2633, 2634], "disallowed"],
	[[2635, 2637], "valid"],
	[[2638, 2640], "disallowed"],
	[[2641, 2641], "valid"],
	[[2642, 2648], "disallowed"],
	[[2649, 2649], "mapped", [2582, 2620]],
	[[2650, 2650], "mapped", [2583, 2620]],
	[[2651, 2651], "mapped", [2588, 2620]],
	[[2652, 2652], "valid"],
	[[2653, 2653], "disallowed"],
	[[2654, 2654], "mapped", [2603, 2620]],
	[[2655, 2661], "disallowed"],
	[[2662, 2676], "valid"],
	[[2677, 2677], "valid"],
	[[2678, 2688], "disallowed"],
	[[2689, 2691], "valid"],
	[[2692, 2692], "disallowed"],
	[[2693, 2699], "valid"],
	[[2700, 2700], "valid"],
	[[2701, 2701], "valid"],
	[[2702, 2702], "disallowed"],
	[[2703, 2705], "valid"],
	[[2706, 2706], "disallowed"],
	[[2707, 2728], "valid"],
	[[2729, 2729], "disallowed"],
	[[2730, 2736], "valid"],
	[[2737, 2737], "disallowed"],
	[[2738, 2739], "valid"],
	[[2740, 2740], "disallowed"],
	[[2741, 2745], "valid"],
	[[2746, 2747], "disallowed"],
	[[2748, 2757], "valid"],
	[[2758, 2758], "disallowed"],
	[[2759, 2761], "valid"],
	[[2762, 2762], "disallowed"],
	[[2763, 2765], "valid"],
	[[2766, 2767], "disallowed"],
	[[2768, 2768], "valid"],
	[[2769, 2783], "disallowed"],
	[[2784, 2784], "valid"],
	[[2785, 2787], "valid"],
	[[2788, 2789], "disallowed"],
	[[2790, 2799], "valid"],
	[[2800, 2800], "valid", [], "NV8"],
	[[2801, 2801], "valid", [], "NV8"],
	[[2802, 2808], "disallowed"],
	[[2809, 2809], "valid"],
	[[2810, 2816], "disallowed"],
	[[2817, 2819], "valid"],
	[[2820, 2820], "disallowed"],
	[[2821, 2828], "valid"],
	[[2829, 2830], "disallowed"],
	[[2831, 2832], "valid"],
	[[2833, 2834], "disallowed"],
	[[2835, 2856], "valid"],
	[[2857, 2857], "disallowed"],
	[[2858, 2864], "valid"],
	[[2865, 2865], "disallowed"],
	[[2866, 2867], "valid"],
	[[2868, 2868], "disallowed"],
	[[2869, 2869], "valid"],
	[[2870, 2873], "valid"],
	[[2874, 2875], "disallowed"],
	[[2876, 2883], "valid"],
	[[2884, 2884], "valid"],
	[[2885, 2886], "disallowed"],
	[[2887, 2888], "valid"],
	[[2889, 2890], "disallowed"],
	[[2891, 2893], "valid"],
	[[2894, 2901], "disallowed"],
	[[2902, 2903], "valid"],
	[[2904, 2907], "disallowed"],
	[[2908, 2908], "mapped", [2849, 2876]],
	[[2909, 2909], "mapped", [2850, 2876]],
	[[2910, 2910], "disallowed"],
	[[2911, 2913], "valid"],
	[[2914, 2915], "valid"],
	[[2916, 2917], "disallowed"],
	[[2918, 2927], "valid"],
	[[2928, 2928], "valid", [], "NV8"],
	[[2929, 2929], "valid"],
	[[2930, 2935], "valid", [], "NV8"],
	[[2936, 2945], "disallowed"],
	[[2946, 2947], "valid"],
	[[2948, 2948], "disallowed"],
	[[2949, 2954], "valid"],
	[[2955, 2957], "disallowed"],
	[[2958, 2960], "valid"],
	[[2961, 2961], "disallowed"],
	[[2962, 2965], "valid"],
	[[2966, 2968], "disallowed"],
	[[2969, 2970], "valid"],
	[[2971, 2971], "disallowed"],
	[[2972, 2972], "valid"],
	[[2973, 2973], "disallowed"],
	[[2974, 2975], "valid"],
	[[2976, 2978], "disallowed"],
	[[2979, 2980], "valid"],
	[[2981, 2983], "disallowed"],
	[[2984, 2986], "valid"],
	[[2987, 2989], "disallowed"],
	[[2990, 2997], "valid"],
	[[2998, 2998], "valid"],
	[[2999, 3001], "valid"],
	[[3002, 3005], "disallowed"],
	[[3006, 3010], "valid"],
	[[3011, 3013], "disallowed"],
	[[3014, 3016], "valid"],
	[[3017, 3017], "disallowed"],
	[[3018, 3021], "valid"],
	[[3022, 3023], "disallowed"],
	[[3024, 3024], "valid"],
	[[3025, 3030], "disallowed"],
	[[3031, 3031], "valid"],
	[[3032, 3045], "disallowed"],
	[[3046, 3046], "valid"],
	[[3047, 3055], "valid"],
	[[3056, 3058], "valid", [], "NV8"],
	[[3059, 3066], "valid", [], "NV8"],
	[[3067, 3071], "disallowed"],
	[[3072, 3072], "valid"],
	[[3073, 3075], "valid"],
	[[3076, 3076], "disallowed"],
	[[3077, 3084], "valid"],
	[[3085, 3085], "disallowed"],
	[[3086, 3088], "valid"],
	[[3089, 3089], "disallowed"],
	[[3090, 3112], "valid"],
	[[3113, 3113], "disallowed"],
	[[3114, 3123], "valid"],
	[[3124, 3124], "valid"],
	[[3125, 3129], "valid"],
	[[3130, 3132], "disallowed"],
	[[3133, 3133], "valid"],
	[[3134, 3140], "valid"],
	[[3141, 3141], "disallowed"],
	[[3142, 3144], "valid"],
	[[3145, 3145], "disallowed"],
	[[3146, 3149], "valid"],
	[[3150, 3156], "disallowed"],
	[[3157, 3158], "valid"],
	[[3159, 3159], "disallowed"],
	[[3160, 3161], "valid"],
	[[3162, 3162], "valid"],
	[[3163, 3167], "disallowed"],
	[[3168, 3169], "valid"],
	[[3170, 3171], "valid"],
	[[3172, 3173], "disallowed"],
	[[3174, 3183], "valid"],
	[[3184, 3191], "disallowed"],
	[[3192, 3199], "valid", [], "NV8"],
	[[3200, 3200], "disallowed"],
	[[3201, 3201], "valid"],
	[[3202, 3203], "valid"],
	[[3204, 3204], "disallowed"],
	[[3205, 3212], "valid"],
	[[3213, 3213], "disallowed"],
	[[3214, 3216], "valid"],
	[[3217, 3217], "disallowed"],
	[[3218, 3240], "valid"],
	[[3241, 3241], "disallowed"],
	[[3242, 3251], "valid"],
	[[3252, 3252], "disallowed"],
	[[3253, 3257], "valid"],
	[[3258, 3259], "disallowed"],
	[[3260, 3261], "valid"],
	[[3262, 3268], "valid"],
	[[3269, 3269], "disallowed"],
	[[3270, 3272], "valid"],
	[[3273, 3273], "disallowed"],
	[[3274, 3277], "valid"],
	[[3278, 3284], "disallowed"],
	[[3285, 3286], "valid"],
	[[3287, 3293], "disallowed"],
	[[3294, 3294], "valid"],
	[[3295, 3295], "disallowed"],
	[[3296, 3297], "valid"],
	[[3298, 3299], "valid"],
	[[3300, 3301], "disallowed"],
	[[3302, 3311], "valid"],
	[[3312, 3312], "disallowed"],
	[[3313, 3314], "valid"],
	[[3315, 3328], "disallowed"],
	[[3329, 3329], "valid"],
	[[3330, 3331], "valid"],
	[[3332, 3332], "disallowed"],
	[[3333, 3340], "valid"],
	[[3341, 3341], "disallowed"],
	[[3342, 3344], "valid"],
	[[3345, 3345], "disallowed"],
	[[3346, 3368], "valid"],
	[[3369, 3369], "valid"],
	[[3370, 3385], "valid"],
	[[3386, 3386], "valid"],
	[[3387, 3388], "disallowed"],
	[[3389, 3389], "valid"],
	[[3390, 3395], "valid"],
	[[3396, 3396], "valid"],
	[[3397, 3397], "disallowed"],
	[[3398, 3400], "valid"],
	[[3401, 3401], "disallowed"],
	[[3402, 3405], "valid"],
	[[3406, 3406], "valid"],
	[[3407, 3414], "disallowed"],
	[[3415, 3415], "valid"],
	[[3416, 3422], "disallowed"],
	[[3423, 3423], "valid"],
	[[3424, 3425], "valid"],
	[[3426, 3427], "valid"],
	[[3428, 3429], "disallowed"],
	[[3430, 3439], "valid"],
	[[3440, 3445], "valid", [], "NV8"],
	[[3446, 3448], "disallowed"],
	[[3449, 3449], "valid", [], "NV8"],
	[[3450, 3455], "valid"],
	[[3456, 3457], "disallowed"],
	[[3458, 3459], "valid"],
	[[3460, 3460], "disallowed"],
	[[3461, 3478], "valid"],
	[[3479, 3481], "disallowed"],
	[[3482, 3505], "valid"],
	[[3506, 3506], "disallowed"],
	[[3507, 3515], "valid"],
	[[3516, 3516], "disallowed"],
	[[3517, 3517], "valid"],
	[[3518, 3519], "disallowed"],
	[[3520, 3526], "valid"],
	[[3527, 3529], "disallowed"],
	[[3530, 3530], "valid"],
	[[3531, 3534], "disallowed"],
	[[3535, 3540], "valid"],
	[[3541, 3541], "disallowed"],
	[[3542, 3542], "valid"],
	[[3543, 3543], "disallowed"],
	[[3544, 3551], "valid"],
	[[3552, 3557], "disallowed"],
	[[3558, 3567], "valid"],
	[[3568, 3569], "disallowed"],
	[[3570, 3571], "valid"],
	[[3572, 3572], "valid", [], "NV8"],
	[[3573, 3584], "disallowed"],
	[[3585, 3634], "valid"],
	[[3635, 3635], "mapped", [3661, 3634]],
	[[3636, 3642], "valid"],
	[[3643, 3646], "disallowed"],
	[[3647, 3647], "valid", [], "NV8"],
	[[3648, 3662], "valid"],
	[[3663, 3663], "valid", [], "NV8"],
	[[3664, 3673], "valid"],
	[[3674, 3675], "valid", [], "NV8"],
	[[3676, 3712], "disallowed"],
	[[3713, 3714], "valid"],
	[[3715, 3715], "disallowed"],
	[[3716, 3716], "valid"],
	[[3717, 3718], "disallowed"],
	[[3719, 3720], "valid"],
	[[3721, 3721], "disallowed"],
	[[3722, 3722], "valid"],
	[[3723, 3724], "disallowed"],
	[[3725, 3725], "valid"],
	[[3726, 3731], "disallowed"],
	[[3732, 3735], "valid"],
	[[3736, 3736], "disallowed"],
	[[3737, 3743], "valid"],
	[[3744, 3744], "disallowed"],
	[[3745, 3747], "valid"],
	[[3748, 3748], "disallowed"],
	[[3749, 3749], "valid"],
	[[3750, 3750], "disallowed"],
	[[3751, 3751], "valid"],
	[[3752, 3753], "disallowed"],
	[[3754, 3755], "valid"],
	[[3756, 3756], "disallowed"],
	[[3757, 3762], "valid"],
	[[3763, 3763], "mapped", [3789, 3762]],
	[[3764, 3769], "valid"],
	[[3770, 3770], "disallowed"],
	[[3771, 3773], "valid"],
	[[3774, 3775], "disallowed"],
	[[3776, 3780], "valid"],
	[[3781, 3781], "disallowed"],
	[[3782, 3782], "valid"],
	[[3783, 3783], "disallowed"],
	[[3784, 3789], "valid"],
	[[3790, 3791], "disallowed"],
	[[3792, 3801], "valid"],
	[[3802, 3803], "disallowed"],
	[[3804, 3804], "mapped", [3755, 3737]],
	[[3805, 3805], "mapped", [3755, 3745]],
	[[3806, 3807], "valid"],
	[[3808, 3839], "disallowed"],
	[[3840, 3840], "valid"],
	[[3841, 3850], "valid", [], "NV8"],
	[[3851, 3851], "valid"],
	[[3852, 3852], "mapped", [3851]],
	[[3853, 3863], "valid", [], "NV8"],
	[[3864, 3865], "valid"],
	[[3866, 3871], "valid", [], "NV8"],
	[[3872, 3881], "valid"],
	[[3882, 3892], "valid", [], "NV8"],
	[[3893, 3893], "valid"],
	[[3894, 3894], "valid", [], "NV8"],
	[[3895, 3895], "valid"],
	[[3896, 3896], "valid", [], "NV8"],
	[[3897, 3897], "valid"],
	[[3898, 3901], "valid", [], "NV8"],
	[[3902, 3906], "valid"],
	[[3907, 3907], "mapped", [3906, 4023]],
	[[3908, 3911], "valid"],
	[[3912, 3912], "disallowed"],
	[[3913, 3916], "valid"],
	[[3917, 3917], "mapped", [3916, 4023]],
	[[3918, 3921], "valid"],
	[[3922, 3922], "mapped", [3921, 4023]],
	[[3923, 3926], "valid"],
	[[3927, 3927], "mapped", [3926, 4023]],
	[[3928, 3931], "valid"],
	[[3932, 3932], "mapped", [3931, 4023]],
	[[3933, 3944], "valid"],
	[[3945, 3945], "mapped", [3904, 4021]],
	[[3946, 3946], "valid"],
	[[3947, 3948], "valid"],
	[[3949, 3952], "disallowed"],
	[[3953, 3954], "valid"],
	[[3955, 3955], "mapped", [3953, 3954]],
	[[3956, 3956], "valid"],
	[[3957, 3957], "mapped", [3953, 3956]],
	[[3958, 3958], "mapped", [4018, 3968]],
	[[3959, 3959], "mapped", [4018, 3953, 3968]],
	[[3960, 3960], "mapped", [4019, 3968]],
	[[3961, 3961], "mapped", [4019, 3953, 3968]],
	[[3962, 3968], "valid"],
	[[3969, 3969], "mapped", [3953, 3968]],
	[[3970, 3972], "valid"],
	[[3973, 3973], "valid", [], "NV8"],
	[[3974, 3979], "valid"],
	[[3980, 3983], "valid"],
	[[3984, 3986], "valid"],
	[[3987, 3987], "mapped", [3986, 4023]],
	[[3988, 3989], "valid"],
	[[3990, 3990], "valid"],
	[[3991, 3991], "valid"],
	[[3992, 3992], "disallowed"],
	[[3993, 3996], "valid"],
	[[3997, 3997], "mapped", [3996, 4023]],
	[[3998, 4001], "valid"],
	[[4002, 4002], "mapped", [4001, 4023]],
	[[4003, 4006], "valid"],
	[[4007, 4007], "mapped", [4006, 4023]],
	[[4008, 4011], "valid"],
	[[4012, 4012], "mapped", [4011, 4023]],
	[[4013, 4013], "valid"],
	[[4014, 4016], "valid"],
	[[4017, 4023], "valid"],
	[[4024, 4024], "valid"],
	[[4025, 4025], "mapped", [3984, 4021]],
	[[4026, 4028], "valid"],
	[[4029, 4029], "disallowed"],
	[[4030, 4037], "valid", [], "NV8"],
	[[4038, 4038], "valid"],
	[[4039, 4044], "valid", [], "NV8"],
	[[4045, 4045], "disallowed"],
	[[4046, 4046], "valid", [], "NV8"],
	[[4047, 4047], "valid", [], "NV8"],
	[[4048, 4049], "valid", [], "NV8"],
	[[4050, 4052], "valid", [], "NV8"],
	[[4053, 4056], "valid", [], "NV8"],
	[[4057, 4058], "valid", [], "NV8"],
	[[4059, 4095], "disallowed"],
	[[4096, 4129], "valid"],
	[[4130, 4130], "valid"],
	[[4131, 4135], "valid"],
	[[4136, 4136], "valid"],
	[[4137, 4138], "valid"],
	[[4139, 4139], "valid"],
	[[4140, 4146], "valid"],
	[[4147, 4149], "valid"],
	[[4150, 4153], "valid"],
	[[4154, 4159], "valid"],
	[[4160, 4169], "valid"],
	[[4170, 4175], "valid", [], "NV8"],
	[[4176, 4185], "valid"],
	[[4186, 4249], "valid"],
	[[4250, 4253], "valid"],
	[[4254, 4255], "valid", [], "NV8"],
	[[4256, 4293], "disallowed"],
	[[4294, 4294], "disallowed"],
	[[4295, 4295], "mapped", [11559]],
	[[4296, 4300], "disallowed"],
	[[4301, 4301], "mapped", [11565]],
	[[4302, 4303], "disallowed"],
	[[4304, 4342], "valid"],
	[[4343, 4344], "valid"],
	[[4345, 4346], "valid"],
	[[4347, 4347], "valid", [], "NV8"],
	[[4348, 4348], "mapped", [4316]],
	[[4349, 4351], "valid"],
	[[4352, 4441], "valid", [], "NV8"],
	[[4442, 4446], "valid", [], "NV8"],
	[[4447, 4448], "disallowed"],
	[[4449, 4514], "valid", [], "NV8"],
	[[4515, 4519], "valid", [], "NV8"],
	[[4520, 4601], "valid", [], "NV8"],
	[[4602, 4607], "valid", [], "NV8"],
	[[4608, 4614], "valid"],
	[[4615, 4615], "valid"],
	[[4616, 4678], "valid"],
	[[4679, 4679], "valid"],
	[[4680, 4680], "valid"],
	[[4681, 4681], "disallowed"],
	[[4682, 4685], "valid"],
	[[4686, 4687], "disallowed"],
	[[4688, 4694], "valid"],
	[[4695, 4695], "disallowed"],
	[[4696, 4696], "valid"],
	[[4697, 4697], "disallowed"],
	[[4698, 4701], "valid"],
	[[4702, 4703], "disallowed"],
	[[4704, 4742], "valid"],
	[[4743, 4743], "valid"],
	[[4744, 4744], "valid"],
	[[4745, 4745], "disallowed"],
	[[4746, 4749], "valid"],
	[[4750, 4751], "disallowed"],
	[[4752, 4782], "valid"],
	[[4783, 4783], "valid"],
	[[4784, 4784], "valid"],
	[[4785, 4785], "disallowed"],
	[[4786, 4789], "valid"],
	[[4790, 4791], "disallowed"],
	[[4792, 4798], "valid"],
	[[4799, 4799], "disallowed"],
	[[4800, 4800], "valid"],
	[[4801, 4801], "disallowed"],
	[[4802, 4805], "valid"],
	[[4806, 4807], "disallowed"],
	[[4808, 4814], "valid"],
	[[4815, 4815], "valid"],
	[[4816, 4822], "valid"],
	[[4823, 4823], "disallowed"],
	[[4824, 4846], "valid"],
	[[4847, 4847], "valid"],
	[[4848, 4878], "valid"],
	[[4879, 4879], "valid"],
	[[4880, 4880], "valid"],
	[[4881, 4881], "disallowed"],
	[[4882, 4885], "valid"],
	[[4886, 4887], "disallowed"],
	[[4888, 4894], "valid"],
	[[4895, 4895], "valid"],
	[[4896, 4934], "valid"],
	[[4935, 4935], "valid"],
	[[4936, 4954], "valid"],
	[[4955, 4956], "disallowed"],
	[[4957, 4958], "valid"],
	[[4959, 4959], "valid"],
	[[4960, 4960], "valid", [], "NV8"],
	[[4961, 4988], "valid", [], "NV8"],
	[[4989, 4991], "disallowed"],
	[[4992, 5007], "valid"],
	[[5008, 5017], "valid", [], "NV8"],
	[[5018, 5023], "disallowed"],
	[[5024, 5108], "valid"],
	[[5109, 5109], "valid"],
	[[5110, 5111], "disallowed"],
	[[5112, 5112], "mapped", [5104]],
	[[5113, 5113], "mapped", [5105]],
	[[5114, 5114], "mapped", [5106]],
	[[5115, 5115], "mapped", [5107]],
	[[5116, 5116], "mapped", [5108]],
	[[5117, 5117], "mapped", [5109]],
	[[5118, 5119], "disallowed"],
	[[5120, 5120], "valid", [], "NV8"],
	[[5121, 5740], "valid"],
	[[5741, 5742], "valid", [], "NV8"],
	[[5743, 5750], "valid"],
	[[5751, 5759], "valid"],
	[[5760, 5760], "disallowed"],
	[[5761, 5786], "valid"],
	[[5787, 5788], "valid", [], "NV8"],
	[[5789, 5791], "disallowed"],
	[[5792, 5866], "valid"],
	[[5867, 5872], "valid", [], "NV8"],
	[[5873, 5880], "valid"],
	[[5881, 5887], "disallowed"],
	[[5888, 5900], "valid"],
	[[5901, 5901], "disallowed"],
	[[5902, 5908], "valid"],
	[[5909, 5919], "disallowed"],
	[[5920, 5940], "valid"],
	[[5941, 5942], "valid", [], "NV8"],
	[[5943, 5951], "disallowed"],
	[[5952, 5971], "valid"],
	[[5972, 5983], "disallowed"],
	[[5984, 5996], "valid"],
	[[5997, 5997], "disallowed"],
	[[5998, 6000], "valid"],
	[[6001, 6001], "disallowed"],
	[[6002, 6003], "valid"],
	[[6004, 6015], "disallowed"],
	[[6016, 6067], "valid"],
	[[6068, 6069], "disallowed"],
	[[6070, 6099], "valid"],
	[[6100, 6102], "valid", [], "NV8"],
	[[6103, 6103], "valid"],
	[[6104, 6107], "valid", [], "NV8"],
	[[6108, 6108], "valid"],
	[[6109, 6109], "valid"],
	[[6110, 6111], "disallowed"],
	[[6112, 6121], "valid"],
	[[6122, 6127], "disallowed"],
	[[6128, 6137], "valid", [], "NV8"],
	[[6138, 6143], "disallowed"],
	[[6144, 6149], "valid", [], "NV8"],
	[[6150, 6150], "disallowed"],
	[[6151, 6154], "valid", [], "NV8"],
	[[6155, 6157], "ignored"],
	[[6158, 6158], "disallowed"],
	[[6159, 6159], "disallowed"],
	[[6160, 6169], "valid"],
	[[6170, 6175], "disallowed"],
	[[6176, 6263], "valid"],
	[[6264, 6271], "disallowed"],
	[[6272, 6313], "valid"],
	[[6314, 6314], "valid"],
	[[6315, 6319], "disallowed"],
	[[6320, 6389], "valid"],
	[[6390, 6399], "disallowed"],
	[[6400, 6428], "valid"],
	[[6429, 6430], "valid"],
	[[6431, 6431], "disallowed"],
	[[6432, 6443], "valid"],
	[[6444, 6447], "disallowed"],
	[[6448, 6459], "valid"],
	[[6460, 6463], "disallowed"],
	[[6464, 6464], "valid", [], "NV8"],
	[[6465, 6467], "disallowed"],
	[[6468, 6469], "valid", [], "NV8"],
	[[6470, 6509], "valid"],
	[[6510, 6511], "disallowed"],
	[[6512, 6516], "valid"],
	[[6517, 6527], "disallowed"],
	[[6528, 6569], "valid"],
	[[6570, 6571], "valid"],
	[[6572, 6575], "disallowed"],
	[[6576, 6601], "valid"],
	[[6602, 6607], "disallowed"],
	[[6608, 6617], "valid"],
	[[6618, 6618], "valid", [], "XV8"],
	[[6619, 6621], "disallowed"],
	[[6622, 6623], "valid", [], "NV8"],
	[[6624, 6655], "valid", [], "NV8"],
	[[6656, 6683], "valid"],
	[[6684, 6685], "disallowed"],
	[[6686, 6687], "valid", [], "NV8"],
	[[6688, 6750], "valid"],
	[[6751, 6751], "disallowed"],
	[[6752, 6780], "valid"],
	[[6781, 6782], "disallowed"],
	[[6783, 6793], "valid"],
	[[6794, 6799], "disallowed"],
	[[6800, 6809], "valid"],
	[[6810, 6815], "disallowed"],
	[[6816, 6822], "valid", [], "NV8"],
	[[6823, 6823], "valid"],
	[[6824, 6829], "valid", [], "NV8"],
	[[6830, 6831], "disallowed"],
	[[6832, 6845], "valid"],
	[[6846, 6846], "valid", [], "NV8"],
	[[6847, 6911], "disallowed"],
	[[6912, 6987], "valid"],
	[[6988, 6991], "disallowed"],
	[[6992, 7001], "valid"],
	[[7002, 7018], "valid", [], "NV8"],
	[[7019, 7027], "valid"],
	[[7028, 7036], "valid", [], "NV8"],
	[[7037, 7039], "disallowed"],
	[[7040, 7082], "valid"],
	[[7083, 7085], "valid"],
	[[7086, 7097], "valid"],
	[[7098, 7103], "valid"],
	[[7104, 7155], "valid"],
	[[7156, 7163], "disallowed"],
	[[7164, 7167], "valid", [], "NV8"],
	[[7168, 7223], "valid"],
	[[7224, 7226], "disallowed"],
	[[7227, 7231], "valid", [], "NV8"],
	[[7232, 7241], "valid"],
	[[7242, 7244], "disallowed"],
	[[7245, 7293], "valid"],
	[[7294, 7295], "valid", [], "NV8"],
	[[7296, 7359], "disallowed"],
	[[7360, 7367], "valid", [], "NV8"],
	[[7368, 7375], "disallowed"],
	[[7376, 7378], "valid"],
	[[7379, 7379], "valid", [], "NV8"],
	[[7380, 7410], "valid"],
	[[7411, 7414], "valid"],
	[[7415, 7415], "disallowed"],
	[[7416, 7417], "valid"],
	[[7418, 7423], "disallowed"],
	[[7424, 7467], "valid"],
	[[7468, 7468], "mapped", [97]],
	[[7469, 7469], "mapped", [230]],
	[[7470, 7470], "mapped", [98]],
	[[7471, 7471], "valid"],
	[[7472, 7472], "mapped", [100]],
	[[7473, 7473], "mapped", [101]],
	[[7474, 7474], "mapped", [477]],
	[[7475, 7475], "mapped", [103]],
	[[7476, 7476], "mapped", [104]],
	[[7477, 7477], "mapped", [105]],
	[[7478, 7478], "mapped", [106]],
	[[7479, 7479], "mapped", [107]],
	[[7480, 7480], "mapped", [108]],
	[[7481, 7481], "mapped", [109]],
	[[7482, 7482], "mapped", [110]],
	[[7483, 7483], "valid"],
	[[7484, 7484], "mapped", [111]],
	[[7485, 7485], "mapped", [547]],
	[[7486, 7486], "mapped", [112]],
	[[7487, 7487], "mapped", [114]],
	[[7488, 7488], "mapped", [116]],
	[[7489, 7489], "mapped", [117]],
	[[7490, 7490], "mapped", [119]],
	[[7491, 7491], "mapped", [97]],
	[[7492, 7492], "mapped", [592]],
	[[7493, 7493], "mapped", [593]],
	[[7494, 7494], "mapped", [7426]],
	[[7495, 7495], "mapped", [98]],
	[[7496, 7496], "mapped", [100]],
	[[7497, 7497], "mapped", [101]],
	[[7498, 7498], "mapped", [601]],
	[[7499, 7499], "mapped", [603]],
	[[7500, 7500], "mapped", [604]],
	[[7501, 7501], "mapped", [103]],
	[[7502, 7502], "valid"],
	[[7503, 7503], "mapped", [107]],
	[[7504, 7504], "mapped", [109]],
	[[7505, 7505], "mapped", [331]],
	[[7506, 7506], "mapped", [111]],
	[[7507, 7507], "mapped", [596]],
	[[7508, 7508], "mapped", [7446]],
	[[7509, 7509], "mapped", [7447]],
	[[7510, 7510], "mapped", [112]],
	[[7511, 7511], "mapped", [116]],
	[[7512, 7512], "mapped", [117]],
	[[7513, 7513], "mapped", [7453]],
	[[7514, 7514], "mapped", [623]],
	[[7515, 7515], "mapped", [118]],
	[[7516, 7516], "mapped", [7461]],
	[[7517, 7517], "mapped", [946]],
	[[7518, 7518], "mapped", [947]],
	[[7519, 7519], "mapped", [948]],
	[[7520, 7520], "mapped", [966]],
	[[7521, 7521], "mapped", [967]],
	[[7522, 7522], "mapped", [105]],
	[[7523, 7523], "mapped", [114]],
	[[7524, 7524], "mapped", [117]],
	[[7525, 7525], "mapped", [118]],
	[[7526, 7526], "mapped", [946]],
	[[7527, 7527], "mapped", [947]],
	[[7528, 7528], "mapped", [961]],
	[[7529, 7529], "mapped", [966]],
	[[7530, 7530], "mapped", [967]],
	[[7531, 7531], "valid"],
	[[7532, 7543], "valid"],
	[[7544, 7544], "mapped", [1085]],
	[[7545, 7578], "valid"],
	[[7579, 7579], "mapped", [594]],
	[[7580, 7580], "mapped", [99]],
	[[7581, 7581], "mapped", [597]],
	[[7582, 7582], "mapped", [240]],
	[[7583, 7583], "mapped", [604]],
	[[7584, 7584], "mapped", [102]],
	[[7585, 7585], "mapped", [607]],
	[[7586, 7586], "mapped", [609]],
	[[7587, 7587], "mapped", [613]],
	[[7588, 7588], "mapped", [616]],
	[[7589, 7589], "mapped", [617]],
	[[7590, 7590], "mapped", [618]],
	[[7591, 7591], "mapped", [7547]],
	[[7592, 7592], "mapped", [669]],
	[[7593, 7593], "mapped", [621]],
	[[7594, 7594], "mapped", [7557]],
	[[7595, 7595], "mapped", [671]],
	[[7596, 7596], "mapped", [625]],
	[[7597, 7597], "mapped", [624]],
	[[7598, 7598], "mapped", [626]],
	[[7599, 7599], "mapped", [627]],
	[[7600, 7600], "mapped", [628]],
	[[7601, 7601], "mapped", [629]],
	[[7602, 7602], "mapped", [632]],
	[[7603, 7603], "mapped", [642]],
	[[7604, 7604], "mapped", [643]],
	[[7605, 7605], "mapped", [427]],
	[[7606, 7606], "mapped", [649]],
	[[7607, 7607], "mapped", [650]],
	[[7608, 7608], "mapped", [7452]],
	[[7609, 7609], "mapped", [651]],
	[[7610, 7610], "mapped", [652]],
	[[7611, 7611], "mapped", [122]],
	[[7612, 7612], "mapped", [656]],
	[[7613, 7613], "mapped", [657]],
	[[7614, 7614], "mapped", [658]],
	[[7615, 7615], "mapped", [952]],
	[[7616, 7619], "valid"],
	[[7620, 7626], "valid"],
	[[7627, 7654], "valid"],
	[[7655, 7669], "valid"],
	[[7670, 7675], "disallowed"],
	[[7676, 7676], "valid"],
	[[7677, 7677], "valid"],
	[[7678, 7679], "valid"],
	[[7680, 7680], "mapped", [7681]],
	[[7681, 7681], "valid"],
	[[7682, 7682], "mapped", [7683]],
	[[7683, 7683], "valid"],
	[[7684, 7684], "mapped", [7685]],
	[[7685, 7685], "valid"],
	[[7686, 7686], "mapped", [7687]],
	[[7687, 7687], "valid"],
	[[7688, 7688], "mapped", [7689]],
	[[7689, 7689], "valid"],
	[[7690, 7690], "mapped", [7691]],
	[[7691, 7691], "valid"],
	[[7692, 7692], "mapped", [7693]],
	[[7693, 7693], "valid"],
	[[7694, 7694], "mapped", [7695]],
	[[7695, 7695], "valid"],
	[[7696, 7696], "mapped", [7697]],
	[[7697, 7697], "valid"],
	[[7698, 7698], "mapped", [7699]],
	[[7699, 7699], "valid"],
	[[7700, 7700], "mapped", [7701]],
	[[7701, 7701], "valid"],
	[[7702, 7702], "mapped", [7703]],
	[[7703, 7703], "valid"],
	[[7704, 7704], "mapped", [7705]],
	[[7705, 7705], "valid"],
	[[7706, 7706], "mapped", [7707]],
	[[7707, 7707], "valid"],
	[[7708, 7708], "mapped", [7709]],
	[[7709, 7709], "valid"],
	[[7710, 7710], "mapped", [7711]],
	[[7711, 7711], "valid"],
	[[7712, 7712], "mapped", [7713]],
	[[7713, 7713], "valid"],
	[[7714, 7714], "mapped", [7715]],
	[[7715, 7715], "valid"],
	[[7716, 7716], "mapped", [7717]],
	[[7717, 7717], "valid"],
	[[7718, 7718], "mapped", [7719]],
	[[7719, 7719], "valid"],
	[[7720, 7720], "mapped", [7721]],
	[[7721, 7721], "valid"],
	[[7722, 7722], "mapped", [7723]],
	[[7723, 7723], "valid"],
	[[7724, 7724], "mapped", [7725]],
	[[7725, 7725], "valid"],
	[[7726, 7726], "mapped", [7727]],
	[[7727, 7727], "valid"],
	[[7728, 7728], "mapped", [7729]],
	[[7729, 7729], "valid"],
	[[7730, 7730], "mapped", [7731]],
	[[7731, 7731], "valid"],
	[[7732, 7732], "mapped", [7733]],
	[[7733, 7733], "valid"],
	[[7734, 7734], "mapped", [7735]],
	[[7735, 7735], "valid"],
	[[7736, 7736], "mapped", [7737]],
	[[7737, 7737], "valid"],
	[[7738, 7738], "mapped", [7739]],
	[[7739, 7739], "valid"],
	[[7740, 7740], "mapped", [7741]],
	[[7741, 7741], "valid"],
	[[7742, 7742], "mapped", [7743]],
	[[7743, 7743], "valid"],
	[[7744, 7744], "mapped", [7745]],
	[[7745, 7745], "valid"],
	[[7746, 7746], "mapped", [7747]],
	[[7747, 7747], "valid"],
	[[7748, 7748], "mapped", [7749]],
	[[7749, 7749], "valid"],
	[[7750, 7750], "mapped", [7751]],
	[[7751, 7751], "valid"],
	[[7752, 7752], "mapped", [7753]],
	[[7753, 7753], "valid"],
	[[7754, 7754], "mapped", [7755]],
	[[7755, 7755], "valid"],
	[[7756, 7756], "mapped", [7757]],
	[[7757, 7757], "valid"],
	[[7758, 7758], "mapped", [7759]],
	[[7759, 7759], "valid"],
	[[7760, 7760], "mapped", [7761]],
	[[7761, 7761], "valid"],
	[[7762, 7762], "mapped", [7763]],
	[[7763, 7763], "valid"],
	[[7764, 7764], "mapped", [7765]],
	[[7765, 7765], "valid"],
	[[7766, 7766], "mapped", [7767]],
	[[7767, 7767], "valid"],
	[[7768, 7768], "mapped", [7769]],
	[[7769, 7769], "valid"],
	[[7770, 7770], "mapped", [7771]],
	[[7771, 7771], "valid"],
	[[7772, 7772], "mapped", [7773]],
	[[7773, 7773], "valid"],
	[[7774, 7774], "mapped", [7775]],
	[[7775, 7775], "valid"],
	[[7776, 7776], "mapped", [7777]],
	[[7777, 7777], "valid"],
	[[7778, 7778], "mapped", [7779]],
	[[7779, 7779], "valid"],
	[[7780, 7780], "mapped", [7781]],
	[[7781, 7781], "valid"],
	[[7782, 7782], "mapped", [7783]],
	[[7783, 7783], "valid"],
	[[7784, 7784], "mapped", [7785]],
	[[7785, 7785], "valid"],
	[[7786, 7786], "mapped", [7787]],
	[[7787, 7787], "valid"],
	[[7788, 7788], "mapped", [7789]],
	[[7789, 7789], "valid"],
	[[7790, 7790], "mapped", [7791]],
	[[7791, 7791], "valid"],
	[[7792, 7792], "mapped", [7793]],
	[[7793, 7793], "valid"],
	[[7794, 7794], "mapped", [7795]],
	[[7795, 7795], "valid"],
	[[7796, 7796], "mapped", [7797]],
	[[7797, 7797], "valid"],
	[[7798, 7798], "mapped", [7799]],
	[[7799, 7799], "valid"],
	[[7800, 7800], "mapped", [7801]],
	[[7801, 7801], "valid"],
	[[7802, 7802], "mapped", [7803]],
	[[7803, 7803], "valid"],
	[[7804, 7804], "mapped", [7805]],
	[[7805, 7805], "valid"],
	[[7806, 7806], "mapped", [7807]],
	[[7807, 7807], "valid"],
	[[7808, 7808], "mapped", [7809]],
	[[7809, 7809], "valid"],
	[[7810, 7810], "mapped", [7811]],
	[[7811, 7811], "valid"],
	[[7812, 7812], "mapped", [7813]],
	[[7813, 7813], "valid"],
	[[7814, 7814], "mapped", [7815]],
	[[7815, 7815], "valid"],
	[[7816, 7816], "mapped", [7817]],
	[[7817, 7817], "valid"],
	[[7818, 7818], "mapped", [7819]],
	[[7819, 7819], "valid"],
	[[7820, 7820], "mapped", [7821]],
	[[7821, 7821], "valid"],
	[[7822, 7822], "mapped", [7823]],
	[[7823, 7823], "valid"],
	[[7824, 7824], "mapped", [7825]],
	[[7825, 7825], "valid"],
	[[7826, 7826], "mapped", [7827]],
	[[7827, 7827], "valid"],
	[[7828, 7828], "mapped", [7829]],
	[[7829, 7833], "valid"],
	[[7834, 7834], "mapped", [97, 702]],
	[[7835, 7835], "mapped", [7777]],
	[[7836, 7837], "valid"],
	[[7838, 7838], "mapped", [115, 115]],
	[[7839, 7839], "valid"],
	[[7840, 7840], "mapped", [7841]],
	[[7841, 7841], "valid"],
	[[7842, 7842], "mapped", [7843]],
	[[7843, 7843], "valid"],
	[[7844, 7844], "mapped", [7845]],
	[[7845, 7845], "valid"],
	[[7846, 7846], "mapped", [7847]],
	[[7847, 7847], "valid"],
	[[7848, 7848], "mapped", [7849]],
	[[7849, 7849], "valid"],
	[[7850, 7850], "mapped", [7851]],
	[[7851, 7851], "valid"],
	[[7852, 7852], "mapped", [7853]],
	[[7853, 7853], "valid"],
	[[7854, 7854], "mapped", [7855]],
	[[7855, 7855], "valid"],
	[[7856, 7856], "mapped", [7857]],
	[[7857, 7857], "valid"],
	[[7858, 7858], "mapped", [7859]],
	[[7859, 7859], "valid"],
	[[7860, 7860], "mapped", [7861]],
	[[7861, 7861], "valid"],
	[[7862, 7862], "mapped", [7863]],
	[[7863, 7863], "valid"],
	[[7864, 7864], "mapped", [7865]],
	[[7865, 7865], "valid"],
	[[7866, 7866], "mapped", [7867]],
	[[7867, 7867], "valid"],
	[[7868, 7868], "mapped", [7869]],
	[[7869, 7869], "valid"],
	[[7870, 7870], "mapped", [7871]],
	[[7871, 7871], "valid"],
	[[7872, 7872], "mapped", [7873]],
	[[7873, 7873], "valid"],
	[[7874, 7874], "mapped", [7875]],
	[[7875, 7875], "valid"],
	[[7876, 7876], "mapped", [7877]],
	[[7877, 7877], "valid"],
	[[7878, 7878], "mapped", [7879]],
	[[7879, 7879], "valid"],
	[[7880, 7880], "mapped", [7881]],
	[[7881, 7881], "valid"],
	[[7882, 7882], "mapped", [7883]],
	[[7883, 7883], "valid"],
	[[7884, 7884], "mapped", [7885]],
	[[7885, 7885], "valid"],
	[[7886, 7886], "mapped", [7887]],
	[[7887, 7887], "valid"],
	[[7888, 7888], "mapped", [7889]],
	[[7889, 7889], "valid"],
	[[7890, 7890], "mapped", [7891]],
	[[7891, 7891], "valid"],
	[[7892, 7892], "mapped", [7893]],
	[[7893, 7893], "valid"],
	[[7894, 7894], "mapped", [7895]],
	[[7895, 7895], "valid"],
	[[7896, 7896], "mapped", [7897]],
	[[7897, 7897], "valid"],
	[[7898, 7898], "mapped", [7899]],
	[[7899, 7899], "valid"],
	[[7900, 7900], "mapped", [7901]],
	[[7901, 7901], "valid"],
	[[7902, 7902], "mapped", [7903]],
	[[7903, 7903], "valid"],
	[[7904, 7904], "mapped", [7905]],
	[[7905, 7905], "valid"],
	[[7906, 7906], "mapped", [7907]],
	[[7907, 7907], "valid"],
	[[7908, 7908], "mapped", [7909]],
	[[7909, 7909], "valid"],
	[[7910, 7910], "mapped", [7911]],
	[[7911, 7911], "valid"],
	[[7912, 7912], "mapped", [7913]],
	[[7913, 7913], "valid"],
	[[7914, 7914], "mapped", [7915]],
	[[7915, 7915], "valid"],
	[[7916, 7916], "mapped", [7917]],
	[[7917, 7917], "valid"],
	[[7918, 7918], "mapped", [7919]],
	[[7919, 7919], "valid"],
	[[7920, 7920], "mapped", [7921]],
	[[7921, 7921], "valid"],
	[[7922, 7922], "mapped", [7923]],
	[[7923, 7923], "valid"],
	[[7924, 7924], "mapped", [7925]],
	[[7925, 7925], "valid"],
	[[7926, 7926], "mapped", [7927]],
	[[7927, 7927], "valid"],
	[[7928, 7928], "mapped", [7929]],
	[[7929, 7929], "valid"],
	[[7930, 7930], "mapped", [7931]],
	[[7931, 7931], "valid"],
	[[7932, 7932], "mapped", [7933]],
	[[7933, 7933], "valid"],
	[[7934, 7934], "mapped", [7935]],
	[[7935, 7935], "valid"],
	[[7936, 7943], "valid"],
	[[7944, 7944], "mapped", [7936]],
	[[7945, 7945], "mapped", [7937]],
	[[7946, 7946], "mapped", [7938]],
	[[7947, 7947], "mapped", [7939]],
	[[7948, 7948], "mapped", [7940]],
	[[7949, 7949], "mapped", [7941]],
	[[7950, 7950], "mapped", [7942]],
	[[7951, 7951], "mapped", [7943]],
	[[7952, 7957], "valid"],
	[[7958, 7959], "disallowed"],
	[[7960, 7960], "mapped", [7952]],
	[[7961, 7961], "mapped", [7953]],
	[[7962, 7962], "mapped", [7954]],
	[[7963, 7963], "mapped", [7955]],
	[[7964, 7964], "mapped", [7956]],
	[[7965, 7965], "mapped", [7957]],
	[[7966, 7967], "disallowed"],
	[[7968, 7975], "valid"],
	[[7976, 7976], "mapped", [7968]],
	[[7977, 7977], "mapped", [7969]],
	[[7978, 7978], "mapped", [7970]],
	[[7979, 7979], "mapped", [7971]],
	[[7980, 7980], "mapped", [7972]],
	[[7981, 7981], "mapped", [7973]],
	[[7982, 7982], "mapped", [7974]],
	[[7983, 7983], "mapped", [7975]],
	[[7984, 7991], "valid"],
	[[7992, 7992], "mapped", [7984]],
	[[7993, 7993], "mapped", [7985]],
	[[7994, 7994], "mapped", [7986]],
	[[7995, 7995], "mapped", [7987]],
	[[7996, 7996], "mapped", [7988]],
	[[7997, 7997], "mapped", [7989]],
	[[7998, 7998], "mapped", [7990]],
	[[7999, 7999], "mapped", [7991]],
	[[8000, 8005], "valid"],
	[[8006, 8007], "disallowed"],
	[[8008, 8008], "mapped", [8000]],
	[[8009, 8009], "mapped", [8001]],
	[[8010, 8010], "mapped", [8002]],
	[[8011, 8011], "mapped", [8003]],
	[[8012, 8012], "mapped", [8004]],
	[[8013, 8013], "mapped", [8005]],
	[[8014, 8015], "disallowed"],
	[[8016, 8023], "valid"],
	[[8024, 8024], "disallowed"],
	[[8025, 8025], "mapped", [8017]],
	[[8026, 8026], "disallowed"],
	[[8027, 8027], "mapped", [8019]],
	[[8028, 8028], "disallowed"],
	[[8029, 8029], "mapped", [8021]],
	[[8030, 8030], "disallowed"],
	[[8031, 8031], "mapped", [8023]],
	[[8032, 8039], "valid"],
	[[8040, 8040], "mapped", [8032]],
	[[8041, 8041], "mapped", [8033]],
	[[8042, 8042], "mapped", [8034]],
	[[8043, 8043], "mapped", [8035]],
	[[8044, 8044], "mapped", [8036]],
	[[8045, 8045], "mapped", [8037]],
	[[8046, 8046], "mapped", [8038]],
	[[8047, 8047], "mapped", [8039]],
	[[8048, 8048], "valid"],
	[[8049, 8049], "mapped", [940]],
	[[8050, 8050], "valid"],
	[[8051, 8051], "mapped", [941]],
	[[8052, 8052], "valid"],
	[[8053, 8053], "mapped", [942]],
	[[8054, 8054], "valid"],
	[[8055, 8055], "mapped", [943]],
	[[8056, 8056], "valid"],
	[[8057, 8057], "mapped", [972]],
	[[8058, 8058], "valid"],
	[[8059, 8059], "mapped", [973]],
	[[8060, 8060], "valid"],
	[[8061, 8061], "mapped", [974]],
	[[8062, 8063], "disallowed"],
	[[8064, 8064], "mapped", [7936, 953]],
	[[8065, 8065], "mapped", [7937, 953]],
	[[8066, 8066], "mapped", [7938, 953]],
	[[8067, 8067], "mapped", [7939, 953]],
	[[8068, 8068], "mapped", [7940, 953]],
	[[8069, 8069], "mapped", [7941, 953]],
	[[8070, 8070], "mapped", [7942, 953]],
	[[8071, 8071], "mapped", [7943, 953]],
	[[8072, 8072], "mapped", [7936, 953]],
	[[8073, 8073], "mapped", [7937, 953]],
	[[8074, 8074], "mapped", [7938, 953]],
	[[8075, 8075], "mapped", [7939, 953]],
	[[8076, 8076], "mapped", [7940, 953]],
	[[8077, 8077], "mapped", [7941, 953]],
	[[8078, 8078], "mapped", [7942, 953]],
	[[8079, 8079], "mapped", [7943, 953]],
	[[8080, 8080], "mapped", [7968, 953]],
	[[8081, 8081], "mapped", [7969, 953]],
	[[8082, 8082], "mapped", [7970, 953]],
	[[8083, 8083], "mapped", [7971, 953]],
	[[8084, 8084], "mapped", [7972, 953]],
	[[8085, 8085], "mapped", [7973, 953]],
	[[8086, 8086], "mapped", [7974, 953]],
	[[8087, 8087], "mapped", [7975, 953]],
	[[8088, 8088], "mapped", [7968, 953]],
	[[8089, 8089], "mapped", [7969, 953]],
	[[8090, 8090], "mapped", [7970, 953]],
	[[8091, 8091], "mapped", [7971, 953]],
	[[8092, 8092], "mapped", [7972, 953]],
	[[8093, 8093], "mapped", [7973, 953]],
	[[8094, 8094], "mapped", [7974, 953]],
	[[8095, 8095], "mapped", [7975, 953]],
	[[8096, 8096], "mapped", [8032, 953]],
	[[8097, 8097], "mapped", [8033, 953]],
	[[8098, 8098], "mapped", [8034, 953]],
	[[8099, 8099], "mapped", [8035, 953]],
	[[8100, 8100], "mapped", [8036, 953]],
	[[8101, 8101], "mapped", [8037, 953]],
	[[8102, 8102], "mapped", [8038, 953]],
	[[8103, 8103], "mapped", [8039, 953]],
	[[8104, 8104], "mapped", [8032, 953]],
	[[8105, 8105], "mapped", [8033, 953]],
	[[8106, 8106], "mapped", [8034, 953]],
	[[8107, 8107], "mapped", [8035, 953]],
	[[8108, 8108], "mapped", [8036, 953]],
	[[8109, 8109], "mapped", [8037, 953]],
	[[8110, 8110], "mapped", [8038, 953]],
	[[8111, 8111], "mapped", [8039, 953]],
	[[8112, 8113], "valid"],
	[[8114, 8114], "mapped", [8048, 953]],
	[[8115, 8115], "mapped", [945, 953]],
	[[8116, 8116], "mapped", [940, 953]],
	[[8117, 8117], "disallowed"],
	[[8118, 8118], "valid"],
	[[8119, 8119], "mapped", [8118, 953]],
	[[8120, 8120], "mapped", [8112]],
	[[8121, 8121], "mapped", [8113]],
	[[8122, 8122], "mapped", [8048]],
	[[8123, 8123], "mapped", [940]],
	[[8124, 8124], "mapped", [945, 953]],
	[[8125, 8125], "disallowed_STD3_mapped", [32, 787]],
	[[8126, 8126], "mapped", [953]],
	[[8127, 8127], "disallowed_STD3_mapped", [32, 787]],
	[[8128, 8128], "disallowed_STD3_mapped", [32, 834]],
	[[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]],
	[[8130, 8130], "mapped", [8052, 953]],
	[[8131, 8131], "mapped", [951, 953]],
	[[8132, 8132], "mapped", [942, 953]],
	[[8133, 8133], "disallowed"],
	[[8134, 8134], "valid"],
	[[8135, 8135], "mapped", [8134, 953]],
	[[8136, 8136], "mapped", [8050]],
	[[8137, 8137], "mapped", [941]],
	[[8138, 8138], "mapped", [8052]],
	[[8139, 8139], "mapped", [942]],
	[[8140, 8140], "mapped", [951, 953]],
	[[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]],
	[[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]],
	[[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]],
	[[8144, 8146], "valid"],
	[[8147, 8147], "mapped", [912]],
	[[8148, 8149], "disallowed"],
	[[8150, 8151], "valid"],
	[[8152, 8152], "mapped", [8144]],
	[[8153, 8153], "mapped", [8145]],
	[[8154, 8154], "mapped", [8054]],
	[[8155, 8155], "mapped", [943]],
	[[8156, 8156], "disallowed"],
	[[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]],
	[[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]],
	[[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]],
	[[8160, 8162], "valid"],
	[[8163, 8163], "mapped", [944]],
	[[8164, 8167], "valid"],
	[[8168, 8168], "mapped", [8160]],
	[[8169, 8169], "mapped", [8161]],
	[[8170, 8170], "mapped", [8058]],
	[[8171, 8171], "mapped", [973]],
	[[8172, 8172], "mapped", [8165]],
	[[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]],
	[[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]],
	[[8175, 8175], "disallowed_STD3_mapped", [96]],
	[[8176, 8177], "disallowed"],
	[[8178, 8178], "mapped", [8060, 953]],
	[[8179, 8179], "mapped", [969, 953]],
	[[8180, 8180], "mapped", [974, 953]],
	[[8181, 8181], "disallowed"],
	[[8182, 8182], "valid"],
	[[8183, 8183], "mapped", [8182, 953]],
	[[8184, 8184], "mapped", [8056]],
	[[8185, 8185], "mapped", [972]],
	[[8186, 8186], "mapped", [8060]],
	[[8187, 8187], "mapped", [974]],
	[[8188, 8188], "mapped", [969, 953]],
	[[8189, 8189], "disallowed_STD3_mapped", [32, 769]],
	[[8190, 8190], "disallowed_STD3_mapped", [32, 788]],
	[[8191, 8191], "disallowed"],
	[[8192, 8202], "disallowed_STD3_mapped", [32]],
	[[8203, 8203], "ignored"],
	[[8204, 8205], "deviation", []],
	[[8206, 8207], "disallowed"],
	[[8208, 8208], "valid", [], "NV8"],
	[[8209, 8209], "mapped", [8208]],
	[[8210, 8214], "valid", [], "NV8"],
	[[8215, 8215], "disallowed_STD3_mapped", [32, 819]],
	[[8216, 8227], "valid", [], "NV8"],
	[[8228, 8230], "disallowed"],
	[[8231, 8231], "valid", [], "NV8"],
	[[8232, 8238], "disallowed"],
	[[8239, 8239], "disallowed_STD3_mapped", [32]],
	[[8240, 8242], "valid", [], "NV8"],
	[[8243, 8243], "mapped", [8242, 8242]],
	[[8244, 8244], "mapped", [8242, 8242, 8242]],
	[[8245, 8245], "valid", [], "NV8"],
	[[8246, 8246], "mapped", [8245, 8245]],
	[[8247, 8247], "mapped", [8245, 8245, 8245]],
	[[8248, 8251], "valid", [], "NV8"],
	[[8252, 8252], "disallowed_STD3_mapped", [33, 33]],
	[[8253, 8253], "valid", [], "NV8"],
	[[8254, 8254], "disallowed_STD3_mapped", [32, 773]],
	[[8255, 8262], "valid", [], "NV8"],
	[[8263, 8263], "disallowed_STD3_mapped", [63, 63]],
	[[8264, 8264], "disallowed_STD3_mapped", [63, 33]],
	[[8265, 8265], "disallowed_STD3_mapped", [33, 63]],
	[[8266, 8269], "valid", [], "NV8"],
	[[8270, 8274], "valid", [], "NV8"],
	[[8275, 8276], "valid", [], "NV8"],
	[[8277, 8278], "valid", [], "NV8"],
	[[8279, 8279], "mapped", [8242, 8242, 8242, 8242]],
	[[8280, 8286], "valid", [], "NV8"],
	[[8287, 8287], "disallowed_STD3_mapped", [32]],
	[[8288, 8288], "ignored"],
	[[8289, 8291], "disallowed"],
	[[8292, 8292], "ignored"],
	[[8293, 8293], "disallowed"],
	[[8294, 8297], "disallowed"],
	[[8298, 8303], "disallowed"],
	[[8304, 8304], "mapped", [48]],
	[[8305, 8305], "mapped", [105]],
	[[8306, 8307], "disallowed"],
	[[8308, 8308], "mapped", [52]],
	[[8309, 8309], "mapped", [53]],
	[[8310, 8310], "mapped", [54]],
	[[8311, 8311], "mapped", [55]],
	[[8312, 8312], "mapped", [56]],
	[[8313, 8313], "mapped", [57]],
	[[8314, 8314], "disallowed_STD3_mapped", [43]],
	[[8315, 8315], "mapped", [8722]],
	[[8316, 8316], "disallowed_STD3_mapped", [61]],
	[[8317, 8317], "disallowed_STD3_mapped", [40]],
	[[8318, 8318], "disallowed_STD3_mapped", [41]],
	[[8319, 8319], "mapped", [110]],
	[[8320, 8320], "mapped", [48]],
	[[8321, 8321], "mapped", [49]],
	[[8322, 8322], "mapped", [50]],
	[[8323, 8323], "mapped", [51]],
	[[8324, 8324], "mapped", [52]],
	[[8325, 8325], "mapped", [53]],
	[[8326, 8326], "mapped", [54]],
	[[8327, 8327], "mapped", [55]],
	[[8328, 8328], "mapped", [56]],
	[[8329, 8329], "mapped", [57]],
	[[8330, 8330], "disallowed_STD3_mapped", [43]],
	[[8331, 8331], "mapped", [8722]],
	[[8332, 8332], "disallowed_STD3_mapped", [61]],
	[[8333, 8333], "disallowed_STD3_mapped", [40]],
	[[8334, 8334], "disallowed_STD3_mapped", [41]],
	[[8335, 8335], "disallowed"],
	[[8336, 8336], "mapped", [97]],
	[[8337, 8337], "mapped", [101]],
	[[8338, 8338], "mapped", [111]],
	[[8339, 8339], "mapped", [120]],
	[[8340, 8340], "mapped", [601]],
	[[8341, 8341], "mapped", [104]],
	[[8342, 8342], "mapped", [107]],
	[[8343, 8343], "mapped", [108]],
	[[8344, 8344], "mapped", [109]],
	[[8345, 8345], "mapped", [110]],
	[[8346, 8346], "mapped", [112]],
	[[8347, 8347], "mapped", [115]],
	[[8348, 8348], "mapped", [116]],
	[[8349, 8351], "disallowed"],
	[[8352, 8359], "valid", [], "NV8"],
	[[8360, 8360], "mapped", [114, 115]],
	[[8361, 8362], "valid", [], "NV8"],
	[[8363, 8363], "valid", [], "NV8"],
	[[8364, 8364], "valid", [], "NV8"],
	[[8365, 8367], "valid", [], "NV8"],
	[[8368, 8369], "valid", [], "NV8"],
	[[8370, 8373], "valid", [], "NV8"],
	[[8374, 8376], "valid", [], "NV8"],
	[[8377, 8377], "valid", [], "NV8"],
	[[8378, 8378], "valid", [], "NV8"],
	[[8379, 8381], "valid", [], "NV8"],
	[[8382, 8382], "valid", [], "NV8"],
	[[8383, 8399], "disallowed"],
	[[8400, 8417], "valid", [], "NV8"],
	[[8418, 8419], "valid", [], "NV8"],
	[[8420, 8426], "valid", [], "NV8"],
	[[8427, 8427], "valid", [], "NV8"],
	[[8428, 8431], "valid", [], "NV8"],
	[[8432, 8432], "valid", [], "NV8"],
	[[8433, 8447], "disallowed"],
	[[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]],
	[[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]],
	[[8450, 8450], "mapped", [99]],
	[[8451, 8451], "mapped", [176, 99]],
	[[8452, 8452], "valid", [], "NV8"],
	[[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]],
	[[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]],
	[[8455, 8455], "mapped", [603]],
	[[8456, 8456], "valid", [], "NV8"],
	[[8457, 8457], "mapped", [176, 102]],
	[[8458, 8458], "mapped", [103]],
	[[8459, 8462], "mapped", [104]],
	[[8463, 8463], "mapped", [295]],
	[[8464, 8465], "mapped", [105]],
	[[8466, 8467], "mapped", [108]],
	[[8468, 8468], "valid", [], "NV8"],
	[[8469, 8469], "mapped", [110]],
	[[8470, 8470], "mapped", [110, 111]],
	[[8471, 8472], "valid", [], "NV8"],
	[[8473, 8473], "mapped", [112]],
	[[8474, 8474], "mapped", [113]],
	[[8475, 8477], "mapped", [114]],
	[[8478, 8479], "valid", [], "NV8"],
	[[8480, 8480], "mapped", [115, 109]],
	[[8481, 8481], "mapped", [116, 101, 108]],
	[[8482, 8482], "mapped", [116, 109]],
	[[8483, 8483], "valid", [], "NV8"],
	[[8484, 8484], "mapped", [122]],
	[[8485, 8485], "valid", [], "NV8"],
	[[8486, 8486], "mapped", [969]],
	[[8487, 8487], "valid", [], "NV8"],
	[[8488, 8488], "mapped", [122]],
	[[8489, 8489], "valid", [], "NV8"],
	[[8490, 8490], "mapped", [107]],
	[[8491, 8491], "mapped", [229]],
	[[8492, 8492], "mapped", [98]],
	[[8493, 8493], "mapped", [99]],
	[[8494, 8494], "valid", [], "NV8"],
	[[8495, 8496], "mapped", [101]],
	[[8497, 8497], "mapped", [102]],
	[[8498, 8498], "disallowed"],
	[[8499, 8499], "mapped", [109]],
	[[8500, 8500], "mapped", [111]],
	[[8501, 8501], "mapped", [1488]],
	[[8502, 8502], "mapped", [1489]],
	[[8503, 8503], "mapped", [1490]],
	[[8504, 8504], "mapped", [1491]],
	[[8505, 8505], "mapped", [105]],
	[[8506, 8506], "valid", [], "NV8"],
	[[8507, 8507], "mapped", [102, 97, 120]],
	[[8508, 8508], "mapped", [960]],
	[[8509, 8510], "mapped", [947]],
	[[8511, 8511], "mapped", [960]],
	[[8512, 8512], "mapped", [8721]],
	[[8513, 8516], "valid", [], "NV8"],
	[[8517, 8518], "mapped", [100]],
	[[8519, 8519], "mapped", [101]],
	[[8520, 8520], "mapped", [105]],
	[[8521, 8521], "mapped", [106]],
	[[8522, 8523], "valid", [], "NV8"],
	[[8524, 8524], "valid", [], "NV8"],
	[[8525, 8525], "valid", [], "NV8"],
	[[8526, 8526], "valid"],
	[[8527, 8527], "valid", [], "NV8"],
	[[8528, 8528], "mapped", [49, 8260, 55]],
	[[8529, 8529], "mapped", [49, 8260, 57]],
	[[8530, 8530], "mapped", [49, 8260, 49, 48]],
	[[8531, 8531], "mapped", [49, 8260, 51]],
	[[8532, 8532], "mapped", [50, 8260, 51]],
	[[8533, 8533], "mapped", [49, 8260, 53]],
	[[8534, 8534], "mapped", [50, 8260, 53]],
	[[8535, 8535], "mapped", [51, 8260, 53]],
	[[8536, 8536], "mapped", [52, 8260, 53]],
	[[8537, 8537], "mapped", [49, 8260, 54]],
	[[8538, 8538], "mapped", [53, 8260, 54]],
	[[8539, 8539], "mapped", [49, 8260, 56]],
	[[8540, 8540], "mapped", [51, 8260, 56]],
	[[8541, 8541], "mapped", [53, 8260, 56]],
	[[8542, 8542], "mapped", [55, 8260, 56]],
	[[8543, 8543], "mapped", [49, 8260]],
	[[8544, 8544], "mapped", [105]],
	[[8545, 8545], "mapped", [105, 105]],
	[[8546, 8546], "mapped", [105, 105, 105]],
	[[8547, 8547], "mapped", [105, 118]],
	[[8548, 8548], "mapped", [118]],
	[[8549, 8549], "mapped", [118, 105]],
	[[8550, 8550], "mapped", [118, 105, 105]],
	[[8551, 8551], "mapped", [118, 105, 105, 105]],
	[[8552, 8552], "mapped", [105, 120]],
	[[8553, 8553], "mapped", [120]],
	[[8554, 8554], "mapped", [120, 105]],
	[[8555, 8555], "mapped", [120, 105, 105]],
	[[8556, 8556], "mapped", [108]],
	[[8557, 8557], "mapped", [99]],
	[[8558, 8558], "mapped", [100]],
	[[8559, 8559], "mapped", [109]],
	[[8560, 8560], "mapped", [105]],
	[[8561, 8561], "mapped", [105, 105]],
	[[8562, 8562], "mapped", [105, 105, 105]],
	[[8563, 8563], "mapped", [105, 118]],
	[[8564, 8564], "mapped", [118]],
	[[8565, 8565], "mapped", [118, 105]],
	[[8566, 8566], "mapped", [118, 105, 105]],
	[[8567, 8567], "mapped", [118, 105, 105, 105]],
	[[8568, 8568], "mapped", [105, 120]],
	[[8569, 8569], "mapped", [120]],
	[[8570, 8570], "mapped", [120, 105]],
	[[8571, 8571], "mapped", [120, 105, 105]],
	[[8572, 8572], "mapped", [108]],
	[[8573, 8573], "mapped", [99]],
	[[8574, 8574], "mapped", [100]],
	[[8575, 8575], "mapped", [109]],
	[[8576, 8578], "valid", [], "NV8"],
	[[8579, 8579], "disallowed"],
	[[8580, 8580], "valid"],
	[[8581, 8584], "valid", [], "NV8"],
	[[8585, 8585], "mapped", [48, 8260, 51]],
	[[8586, 8587], "valid", [], "NV8"],
	[[8588, 8591], "disallowed"],
	[[8592, 8682], "valid", [], "NV8"],
	[[8683, 8691], "valid", [], "NV8"],
	[[8692, 8703], "valid", [], "NV8"],
	[[8704, 8747], "valid", [], "NV8"],
	[[8748, 8748], "mapped", [8747, 8747]],
	[[8749, 8749], "mapped", [8747, 8747, 8747]],
	[[8750, 8750], "valid", [], "NV8"],
	[[8751, 8751], "mapped", [8750, 8750]],
	[[8752, 8752], "mapped", [8750, 8750, 8750]],
	[[8753, 8799], "valid", [], "NV8"],
	[[8800, 8800], "disallowed_STD3_valid"],
	[[8801, 8813], "valid", [], "NV8"],
	[[8814, 8815], "disallowed_STD3_valid"],
	[[8816, 8945], "valid", [], "NV8"],
	[[8946, 8959], "valid", [], "NV8"],
	[[8960, 8960], "valid", [], "NV8"],
	[[8961, 8961], "valid", [], "NV8"],
	[[8962, 9000], "valid", [], "NV8"],
	[[9001, 9001], "mapped", [12296]],
	[[9002, 9002], "mapped", [12297]],
	[[9003, 9082], "valid", [], "NV8"],
	[[9083, 9083], "valid", [], "NV8"],
	[[9084, 9084], "valid", [], "NV8"],
	[[9085, 9114], "valid", [], "NV8"],
	[[9115, 9166], "valid", [], "NV8"],
	[[9167, 9168], "valid", [], "NV8"],
	[[9169, 9179], "valid", [], "NV8"],
	[[9180, 9191], "valid", [], "NV8"],
	[[9192, 9192], "valid", [], "NV8"],
	[[9193, 9203], "valid", [], "NV8"],
	[[9204, 9210], "valid", [], "NV8"],
	[[9211, 9215], "disallowed"],
	[[9216, 9252], "valid", [], "NV8"],
	[[9253, 9254], "valid", [], "NV8"],
	[[9255, 9279], "disallowed"],
	[[9280, 9290], "valid", [], "NV8"],
	[[9291, 9311], "disallowed"],
	[[9312, 9312], "mapped", [49]],
	[[9313, 9313], "mapped", [50]],
	[[9314, 9314], "mapped", [51]],
	[[9315, 9315], "mapped", [52]],
	[[9316, 9316], "mapped", [53]],
	[[9317, 9317], "mapped", [54]],
	[[9318, 9318], "mapped", [55]],
	[[9319, 9319], "mapped", [56]],
	[[9320, 9320], "mapped", [57]],
	[[9321, 9321], "mapped", [49, 48]],
	[[9322, 9322], "mapped", [49, 49]],
	[[9323, 9323], "mapped", [49, 50]],
	[[9324, 9324], "mapped", [49, 51]],
	[[9325, 9325], "mapped", [49, 52]],
	[[9326, 9326], "mapped", [49, 53]],
	[[9327, 9327], "mapped", [49, 54]],
	[[9328, 9328], "mapped", [49, 55]],
	[[9329, 9329], "mapped", [49, 56]],
	[[9330, 9330], "mapped", [49, 57]],
	[[9331, 9331], "mapped", [50, 48]],
	[[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]],
	[[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]],
	[[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]],
	[[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]],
	[[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]],
	[[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]],
	[[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]],
	[[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]],
	[[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]],
	[[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]],
	[[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]],
	[[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]],
	[[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]],
	[[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]],
	[[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]],
	[[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]],
	[[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]],
	[[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]],
	[[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]],
	[[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]],
	[[9352, 9371], "disallowed"],
	[[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]],
	[[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]],
	[[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]],
	[[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]],
	[[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]],
	[[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]],
	[[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]],
	[[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]],
	[[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]],
	[[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]],
	[[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]],
	[[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]],
	[[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]],
	[[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]],
	[[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]],
	[[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]],
	[[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]],
	[[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]],
	[[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]],
	[[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]],
	[[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]],
	[[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]],
	[[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]],
	[[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]],
	[[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]],
	[[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]],
	[[9398, 9398], "mapped", [97]],
	[[9399, 9399], "mapped", [98]],
	[[9400, 9400], "mapped", [99]],
	[[9401, 9401], "mapped", [100]],
	[[9402, 9402], "mapped", [101]],
	[[9403, 9403], "mapped", [102]],
	[[9404, 9404], "mapped", [103]],
	[[9405, 9405], "mapped", [104]],
	[[9406, 9406], "mapped", [105]],
	[[9407, 9407], "mapped", [106]],
	[[9408, 9408], "mapped", [107]],
	[[9409, 9409], "mapped", [108]],
	[[9410, 9410], "mapped", [109]],
	[[9411, 9411], "mapped", [110]],
	[[9412, 9412], "mapped", [111]],
	[[9413, 9413], "mapped", [112]],
	[[9414, 9414], "mapped", [113]],
	[[9415, 9415], "mapped", [114]],
	[[9416, 9416], "mapped", [115]],
	[[9417, 9417], "mapped", [116]],
	[[9418, 9418], "mapped", [117]],
	[[9419, 9419], "mapped", [118]],
	[[9420, 9420], "mapped", [119]],
	[[9421, 9421], "mapped", [120]],
	[[9422, 9422], "mapped", [121]],
	[[9423, 9423], "mapped", [122]],
	[[9424, 9424], "mapped", [97]],
	[[9425, 9425], "mapped", [98]],
	[[9426, 9426], "mapped", [99]],
	[[9427, 9427], "mapped", [100]],
	[[9428, 9428], "mapped", [101]],
	[[9429, 9429], "mapped", [102]],
	[[9430, 9430], "mapped", [103]],
	[[9431, 9431], "mapped", [104]],
	[[9432, 9432], "mapped", [105]],
	[[9433, 9433], "mapped", [106]],
	[[9434, 9434], "mapped", [107]],
	[[9435, 9435], "mapped", [108]],
	[[9436, 9436], "mapped", [109]],
	[[9437, 9437], "mapped", [110]],
	[[9438, 9438], "mapped", [111]],
	[[9439, 9439], "mapped", [112]],
	[[9440, 9440], "mapped", [113]],
	[[9441, 9441], "mapped", [114]],
	[[9442, 9442], "mapped", [115]],
	[[9443, 9443], "mapped", [116]],
	[[9444, 9444], "mapped", [117]],
	[[9445, 9445], "mapped", [118]],
	[[9446, 9446], "mapped", [119]],
	[[9447, 9447], "mapped", [120]],
	[[9448, 9448], "mapped", [121]],
	[[9449, 9449], "mapped", [122]],
	[[9450, 9450], "mapped", [48]],
	[[9451, 9470], "valid", [], "NV8"],
	[[9471, 9471], "valid", [], "NV8"],
	[[9472, 9621], "valid", [], "NV8"],
	[[9622, 9631], "valid", [], "NV8"],
	[[9632, 9711], "valid", [], "NV8"],
	[[9712, 9719], "valid", [], "NV8"],
	[[9720, 9727], "valid", [], "NV8"],
	[[9728, 9747], "valid", [], "NV8"],
	[[9748, 9749], "valid", [], "NV8"],
	[[9750, 9751], "valid", [], "NV8"],
	[[9752, 9752], "valid", [], "NV8"],
	[[9753, 9753], "valid", [], "NV8"],
	[[9754, 9839], "valid", [], "NV8"],
	[[9840, 9841], "valid", [], "NV8"],
	[[9842, 9853], "valid", [], "NV8"],
	[[9854, 9855], "valid", [], "NV8"],
	[[9856, 9865], "valid", [], "NV8"],
	[[9866, 9873], "valid", [], "NV8"],
	[[9874, 9884], "valid", [], "NV8"],
	[[9885, 9885], "valid", [], "NV8"],
	[[9886, 9887], "valid", [], "NV8"],
	[[9888, 9889], "valid", [], "NV8"],
	[[9890, 9905], "valid", [], "NV8"],
	[[9906, 9906], "valid", [], "NV8"],
	[[9907, 9916], "valid", [], "NV8"],
	[[9917, 9919], "valid", [], "NV8"],
	[[9920, 9923], "valid", [], "NV8"],
	[[9924, 9933], "valid", [], "NV8"],
	[[9934, 9934], "valid", [], "NV8"],
	[[9935, 9953], "valid", [], "NV8"],
	[[9954, 9954], "valid", [], "NV8"],
	[[9955, 9955], "valid", [], "NV8"],
	[[9956, 9959], "valid", [], "NV8"],
	[[9960, 9983], "valid", [], "NV8"],
	[[9984, 9984], "valid", [], "NV8"],
	[[9985, 9988], "valid", [], "NV8"],
	[[9989, 9989], "valid", [], "NV8"],
	[[9990, 9993], "valid", [], "NV8"],
	[[9994, 9995], "valid", [], "NV8"],
	[[9996, 10023], "valid", [], "NV8"],
	[[10024, 10024], "valid", [], "NV8"],
	[[10025, 10059], "valid", [], "NV8"],
	[[10060, 10060], "valid", [], "NV8"],
	[[10061, 10061], "valid", [], "NV8"],
	[[10062, 10062], "valid", [], "NV8"],
	[[10063, 10066], "valid", [], "NV8"],
	[[10067, 10069], "valid", [], "NV8"],
	[[10070, 10070], "valid", [], "NV8"],
	[[10071, 10071], "valid", [], "NV8"],
	[[10072, 10078], "valid", [], "NV8"],
	[[10079, 10080], "valid", [], "NV8"],
	[[10081, 10087], "valid", [], "NV8"],
	[[10088, 10101], "valid", [], "NV8"],
	[[10102, 10132], "valid", [], "NV8"],
	[[10133, 10135], "valid", [], "NV8"],
	[[10136, 10159], "valid", [], "NV8"],
	[[10160, 10160], "valid", [], "NV8"],
	[[10161, 10174], "valid", [], "NV8"],
	[[10175, 10175], "valid", [], "NV8"],
	[[10176, 10182], "valid", [], "NV8"],
	[[10183, 10186], "valid", [], "NV8"],
	[[10187, 10187], "valid", [], "NV8"],
	[[10188, 10188], "valid", [], "NV8"],
	[[10189, 10189], "valid", [], "NV8"],
	[[10190, 10191], "valid", [], "NV8"],
	[[10192, 10219], "valid", [], "NV8"],
	[[10220, 10223], "valid", [], "NV8"],
	[[10224, 10239], "valid", [], "NV8"],
	[[10240, 10495], "valid", [], "NV8"],
	[[10496, 10763], "valid", [], "NV8"],
	[[10764, 10764], "mapped", [8747, 8747, 8747, 8747]],
	[[10765, 10867], "valid", [], "NV8"],
	[[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]],
	[[10869, 10869], "disallowed_STD3_mapped", [61, 61]],
	[[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]],
	[[10871, 10971], "valid", [], "NV8"],
	[[10972, 10972], "mapped", [10973, 824]],
	[[10973, 11007], "valid", [], "NV8"],
	[[11008, 11021], "valid", [], "NV8"],
	[[11022, 11027], "valid", [], "NV8"],
	[[11028, 11034], "valid", [], "NV8"],
	[[11035, 11039], "valid", [], "NV8"],
	[[11040, 11043], "valid", [], "NV8"],
	[[11044, 11084], "valid", [], "NV8"],
	[[11085, 11087], "valid", [], "NV8"],
	[[11088, 11092], "valid", [], "NV8"],
	[[11093, 11097], "valid", [], "NV8"],
	[[11098, 11123], "valid", [], "NV8"],
	[[11124, 11125], "disallowed"],
	[[11126, 11157], "valid", [], "NV8"],
	[[11158, 11159], "disallowed"],
	[[11160, 11193], "valid", [], "NV8"],
	[[11194, 11196], "disallowed"],
	[[11197, 11208], "valid", [], "NV8"],
	[[11209, 11209], "disallowed"],
	[[11210, 11217], "valid", [], "NV8"],
	[[11218, 11243], "disallowed"],
	[[11244, 11247], "valid", [], "NV8"],
	[[11248, 11263], "disallowed"],
	[[11264, 11264], "mapped", [11312]],
	[[11265, 11265], "mapped", [11313]],
	[[11266, 11266], "mapped", [11314]],
	[[11267, 11267], "mapped", [11315]],
	[[11268, 11268], "mapped", [11316]],
	[[11269, 11269], "mapped", [11317]],
	[[11270, 11270], "mapped", [11318]],
	[[11271, 11271], "mapped", [11319]],
	[[11272, 11272], "mapped", [11320]],
	[[11273, 11273], "mapped", [11321]],
	[[11274, 11274], "mapped", [11322]],
	[[11275, 11275], "mapped", [11323]],
	[[11276, 11276], "mapped", [11324]],
	[[11277, 11277], "mapped", [11325]],
	[[11278, 11278], "mapped", [11326]],
	[[11279, 11279], "mapped", [11327]],
	[[11280, 11280], "mapped", [11328]],
	[[11281, 11281], "mapped", [11329]],
	[[11282, 11282], "mapped", [11330]],
	[[11283, 11283], "mapped", [11331]],
	[[11284, 11284], "mapped", [11332]],
	[[11285, 11285], "mapped", [11333]],
	[[11286, 11286], "mapped", [11334]],
	[[11287, 11287], "mapped", [11335]],
	[[11288, 11288], "mapped", [11336]],
	[[11289, 11289], "mapped", [11337]],
	[[11290, 11290], "mapped", [11338]],
	[[11291, 11291], "mapped", [11339]],
	[[11292, 11292], "mapped", [11340]],
	[[11293, 11293], "mapped", [11341]],
	[[11294, 11294], "mapped", [11342]],
	[[11295, 11295], "mapped", [11343]],
	[[11296, 11296], "mapped", [11344]],
	[[11297, 11297], "mapped", [11345]],
	[[11298, 11298], "mapped", [11346]],
	[[11299, 11299], "mapped", [11347]],
	[[11300, 11300], "mapped", [11348]],
	[[11301, 11301], "mapped", [11349]],
	[[11302, 11302], "mapped", [11350]],
	[[11303, 11303], "mapped", [11351]],
	[[11304, 11304], "mapped", [11352]],
	[[11305, 11305], "mapped", [11353]],
	[[11306, 11306], "mapped", [11354]],
	[[11307, 11307], "mapped", [11355]],
	[[11308, 11308], "mapped", [11356]],
	[[11309, 11309], "mapped", [11357]],
	[[11310, 11310], "mapped", [11358]],
	[[11311, 11311], "disallowed"],
	[[11312, 11358], "valid"],
	[[11359, 11359], "disallowed"],
	[[11360, 11360], "mapped", [11361]],
	[[11361, 11361], "valid"],
	[[11362, 11362], "mapped", [619]],
	[[11363, 11363], "mapped", [7549]],
	[[11364, 11364], "mapped", [637]],
	[[11365, 11366], "valid"],
	[[11367, 11367], "mapped", [11368]],
	[[11368, 11368], "valid"],
	[[11369, 11369], "mapped", [11370]],
	[[11370, 11370], "valid"],
	[[11371, 11371], "mapped", [11372]],
	[[11372, 11372], "valid"],
	[[11373, 11373], "mapped", [593]],
	[[11374, 11374], "mapped", [625]],
	[[11375, 11375], "mapped", [592]],
	[[11376, 11376], "mapped", [594]],
	[[11377, 11377], "valid"],
	[[11378, 11378], "mapped", [11379]],
	[[11379, 11379], "valid"],
	[[11380, 11380], "valid"],
	[[11381, 11381], "mapped", [11382]],
	[[11382, 11383], "valid"],
	[[11384, 11387], "valid"],
	[[11388, 11388], "mapped", [106]],
	[[11389, 11389], "mapped", [118]],
	[[11390, 11390], "mapped", [575]],
	[[11391, 11391], "mapped", [576]],
	[[11392, 11392], "mapped", [11393]],
	[[11393, 11393], "valid"],
	[[11394, 11394], "mapped", [11395]],
	[[11395, 11395], "valid"],
	[[11396, 11396], "mapped", [11397]],
	[[11397, 11397], "valid"],
	[[11398, 11398], "mapped", [11399]],
	[[11399, 11399], "valid"],
	[[11400, 11400], "mapped", [11401]],
	[[11401, 11401], "valid"],
	[[11402, 11402], "mapped", [11403]],
	[[11403, 11403], "valid"],
	[[11404, 11404], "mapped", [11405]],
	[[11405, 11405], "valid"],
	[[11406, 11406], "mapped", [11407]],
	[[11407, 11407], "valid"],
	[[11408, 11408], "mapped", [11409]],
	[[11409, 11409], "valid"],
	[[11410, 11410], "mapped", [11411]],
	[[11411, 11411], "valid"],
	[[11412, 11412], "mapped", [11413]],
	[[11413, 11413], "valid"],
	[[11414, 11414], "mapped", [11415]],
	[[11415, 11415], "valid"],
	[[11416, 11416], "mapped", [11417]],
	[[11417, 11417], "valid"],
	[[11418, 11418], "mapped", [11419]],
	[[11419, 11419], "valid"],
	[[11420, 11420], "mapped", [11421]],
	[[11421, 11421], "valid"],
	[[11422, 11422], "mapped", [11423]],
	[[11423, 11423], "valid"],
	[[11424, 11424], "mapped", [11425]],
	[[11425, 11425], "valid"],
	[[11426, 11426], "mapped", [11427]],
	[[11427, 11427], "valid"],
	[[11428, 11428], "mapped", [11429]],
	[[11429, 11429], "valid"],
	[[11430, 11430], "mapped", [11431]],
	[[11431, 11431], "valid"],
	[[11432, 11432], "mapped", [11433]],
	[[11433, 11433], "valid"],
	[[11434, 11434], "mapped", [11435]],
	[[11435, 11435], "valid"],
	[[11436, 11436], "mapped", [11437]],
	[[11437, 11437], "valid"],
	[[11438, 11438], "mapped", [11439]],
	[[11439, 11439], "valid"],
	[[11440, 11440], "mapped", [11441]],
	[[11441, 11441], "valid"],
	[[11442, 11442], "mapped", [11443]],
	[[11443, 11443], "valid"],
	[[11444, 11444], "mapped", [11445]],
	[[11445, 11445], "valid"],
	[[11446, 11446], "mapped", [11447]],
	[[11447, 11447], "valid"],
	[[11448, 11448], "mapped", [11449]],
	[[11449, 11449], "valid"],
	[[11450, 11450], "mapped", [11451]],
	[[11451, 11451], "valid"],
	[[11452, 11452], "mapped", [11453]],
	[[11453, 11453], "valid"],
	[[11454, 11454], "mapped", [11455]],
	[[11455, 11455], "valid"],
	[[11456, 11456], "mapped", [11457]],
	[[11457, 11457], "valid"],
	[[11458, 11458], "mapped", [11459]],
	[[11459, 11459], "valid"],
	[[11460, 11460], "mapped", [11461]],
	[[11461, 11461], "valid"],
	[[11462, 11462], "mapped", [11463]],
	[[11463, 11463], "valid"],
	[[11464, 11464], "mapped", [11465]],
	[[11465, 11465], "valid"],
	[[11466, 11466], "mapped", [11467]],
	[[11467, 11467], "valid"],
	[[11468, 11468], "mapped", [11469]],
	[[11469, 11469], "valid"],
	[[11470, 11470], "mapped", [11471]],
	[[11471, 11471], "valid"],
	[[11472, 11472], "mapped", [11473]],
	[[11473, 11473], "valid"],
	[[11474, 11474], "mapped", [11475]],
	[[11475, 11475], "valid"],
	[[11476, 11476], "mapped", [11477]],
	[[11477, 11477], "valid"],
	[[11478, 11478], "mapped", [11479]],
	[[11479, 11479], "valid"],
	[[11480, 11480], "mapped", [11481]],
	[[11481, 11481], "valid"],
	[[11482, 11482], "mapped", [11483]],
	[[11483, 11483], "valid"],
	[[11484, 11484], "mapped", [11485]],
	[[11485, 11485], "valid"],
	[[11486, 11486], "mapped", [11487]],
	[[11487, 11487], "valid"],
	[[11488, 11488], "mapped", [11489]],
	[[11489, 11489], "valid"],
	[[11490, 11490], "mapped", [11491]],
	[[11491, 11492], "valid"],
	[[11493, 11498], "valid", [], "NV8"],
	[[11499, 11499], "mapped", [11500]],
	[[11500, 11500], "valid"],
	[[11501, 11501], "mapped", [11502]],
	[[11502, 11505], "valid"],
	[[11506, 11506], "mapped", [11507]],
	[[11507, 11507], "valid"],
	[[11508, 11512], "disallowed"],
	[[11513, 11519], "valid", [], "NV8"],
	[[11520, 11557], "valid"],
	[[11558, 11558], "disallowed"],
	[[11559, 11559], "valid"],
	[[11560, 11564], "disallowed"],
	[[11565, 11565], "valid"],
	[[11566, 11567], "disallowed"],
	[[11568, 11621], "valid"],
	[[11622, 11623], "valid"],
	[[11624, 11630], "disallowed"],
	[[11631, 11631], "mapped", [11617]],
	[[11632, 11632], "valid", [], "NV8"],
	[[11633, 11646], "disallowed"],
	[[11647, 11647], "valid"],
	[[11648, 11670], "valid"],
	[[11671, 11679], "disallowed"],
	[[11680, 11686], "valid"],
	[[11687, 11687], "disallowed"],
	[[11688, 11694], "valid"],
	[[11695, 11695], "disallowed"],
	[[11696, 11702], "valid"],
	[[11703, 11703], "disallowed"],
	[[11704, 11710], "valid"],
	[[11711, 11711], "disallowed"],
	[[11712, 11718], "valid"],
	[[11719, 11719], "disallowed"],
	[[11720, 11726], "valid"],
	[[11727, 11727], "disallowed"],
	[[11728, 11734], "valid"],
	[[11735, 11735], "disallowed"],
	[[11736, 11742], "valid"],
	[[11743, 11743], "disallowed"],
	[[11744, 11775], "valid"],
	[[11776, 11799], "valid", [], "NV8"],
	[[11800, 11803], "valid", [], "NV8"],
	[[11804, 11805], "valid", [], "NV8"],
	[[11806, 11822], "valid", [], "NV8"],
	[[11823, 11823], "valid"],
	[[11824, 11824], "valid", [], "NV8"],
	[[11825, 11825], "valid", [], "NV8"],
	[[11826, 11835], "valid", [], "NV8"],
	[[11836, 11842], "valid", [], "NV8"],
	[[11843, 11903], "disallowed"],
	[[11904, 11929], "valid", [], "NV8"],
	[[11930, 11930], "disallowed"],
	[[11931, 11934], "valid", [], "NV8"],
	[[11935, 11935], "mapped", [27597]],
	[[11936, 12018], "valid", [], "NV8"],
	[[12019, 12019], "mapped", [40863]],
	[[12020, 12031], "disallowed"],
	[[12032, 12032], "mapped", [19968]],
	[[12033, 12033], "mapped", [20008]],
	[[12034, 12034], "mapped", [20022]],
	[[12035, 12035], "mapped", [20031]],
	[[12036, 12036], "mapped", [20057]],
	[[12037, 12037], "mapped", [20101]],
	[[12038, 12038], "mapped", [20108]],
	[[12039, 12039], "mapped", [20128]],
	[[12040, 12040], "mapped", [20154]],
	[[12041, 12041], "mapped", [20799]],
	[[12042, 12042], "mapped", [20837]],
	[[12043, 12043], "mapped", [20843]],
	[[12044, 12044], "mapped", [20866]],
	[[12045, 12045], "mapped", [20886]],
	[[12046, 12046], "mapped", [20907]],
	[[12047, 12047], "mapped", [20960]],
	[[12048, 12048], "mapped", [20981]],
	[[12049, 12049], "mapped", [20992]],
	[[12050, 12050], "mapped", [21147]],
	[[12051, 12051], "mapped", [21241]],
	[[12052, 12052], "mapped", [21269]],
	[[12053, 12053], "mapped", [21274]],
	[[12054, 12054], "mapped", [21304]],
	[[12055, 12055], "mapped", [21313]],
	[[12056, 12056], "mapped", [21340]],
	[[12057, 12057], "mapped", [21353]],
	[[12058, 12058], "mapped", [21378]],
	[[12059, 12059], "mapped", [21430]],
	[[12060, 12060], "mapped", [21448]],
	[[12061, 12061], "mapped", [21475]],
	[[12062, 12062], "mapped", [22231]],
	[[12063, 12063], "mapped", [22303]],
	[[12064, 12064], "mapped", [22763]],
	[[12065, 12065], "mapped", [22786]],
	[[12066, 12066], "mapped", [22794]],
	[[12067, 12067], "mapped", [22805]],
	[[12068, 12068], "mapped", [22823]],
	[[12069, 12069], "mapped", [22899]],
	[[12070, 12070], "mapped", [23376]],
	[[12071, 12071], "mapped", [23424]],
	[[12072, 12072], "mapped", [23544]],
	[[12073, 12073], "mapped", [23567]],
	[[12074, 12074], "mapped", [23586]],
	[[12075, 12075], "mapped", [23608]],
	[[12076, 12076], "mapped", [23662]],
	[[12077, 12077], "mapped", [23665]],
	[[12078, 12078], "mapped", [24027]],
	[[12079, 12079], "mapped", [24037]],
	[[12080, 12080], "mapped", [24049]],
	[[12081, 12081], "mapped", [24062]],
	[[12082, 12082], "mapped", [24178]],
	[[12083, 12083], "mapped", [24186]],
	[[12084, 12084], "mapped", [24191]],
	[[12085, 12085], "mapped", [24308]],
	[[12086, 12086], "mapped", [24318]],
	[[12087, 12087], "mapped", [24331]],
	[[12088, 12088], "mapped", [24339]],
	[[12089, 12089], "mapped", [24400]],
	[[12090, 12090], "mapped", [24417]],
	[[12091, 12091], "mapped", [24435]],
	[[12092, 12092], "mapped", [24515]],
	[[12093, 12093], "mapped", [25096]],
	[[12094, 12094], "mapped", [25142]],
	[[12095, 12095], "mapped", [25163]],
	[[12096, 12096], "mapped", [25903]],
	[[12097, 12097], "mapped", [25908]],
	[[12098, 12098], "mapped", [25991]],
	[[12099, 12099], "mapped", [26007]],
	[[12100, 12100], "mapped", [26020]],
	[[12101, 12101], "mapped", [26041]],
	[[12102, 12102], "mapped", [26080]],
	[[12103, 12103], "mapped", [26085]],
	[[12104, 12104], "mapped", [26352]],
	[[12105, 12105], "mapped", [26376]],
	[[12106, 12106], "mapped", [26408]],
	[[12107, 12107], "mapped", [27424]],
	[[12108, 12108], "mapped", [27490]],
	[[12109, 12109], "mapped", [27513]],
	[[12110, 12110], "mapped", [27571]],
	[[12111, 12111], "mapped", [27595]],
	[[12112, 12112], "mapped", [27604]],
	[[12113, 12113], "mapped", [27611]],
	[[12114, 12114], "mapped", [27663]],
	[[12115, 12115], "mapped", [27668]],
	[[12116, 12116], "mapped", [27700]],
	[[12117, 12117], "mapped", [28779]],
	[[12118, 12118], "mapped", [29226]],
	[[12119, 12119], "mapped", [29238]],
	[[12120, 12120], "mapped", [29243]],
	[[12121, 12121], "mapped", [29247]],
	[[12122, 12122], "mapped", [29255]],
	[[12123, 12123], "mapped", [29273]],
	[[12124, 12124], "mapped", [29275]],
	[[12125, 12125], "mapped", [29356]],
	[[12126, 12126], "mapped", [29572]],
	[[12127, 12127], "mapped", [29577]],
	[[12128, 12128], "mapped", [29916]],
	[[12129, 12129], "mapped", [29926]],
	[[12130, 12130], "mapped", [29976]],
	[[12131, 12131], "mapped", [29983]],
	[[12132, 12132], "mapped", [29992]],
	[[12133, 12133], "mapped", [30000]],
	[[12134, 12134], "mapped", [30091]],
	[[12135, 12135], "mapped", [30098]],
	[[12136, 12136], "mapped", [30326]],
	[[12137, 12137], "mapped", [30333]],
	[[12138, 12138], "mapped", [30382]],
	[[12139, 12139], "mapped", [30399]],
	[[12140, 12140], "mapped", [30446]],
	[[12141, 12141], "mapped", [30683]],
	[[12142, 12142], "mapped", [30690]],
	[[12143, 12143], "mapped", [30707]],
	[[12144, 12144], "mapped", [31034]],
	[[12145, 12145], "mapped", [31160]],
	[[12146, 12146], "mapped", [31166]],
	[[12147, 12147], "mapped", [31348]],
	[[12148, 12148], "mapped", [31435]],
	[[12149, 12149], "mapped", [31481]],
	[[12150, 12150], "mapped", [31859]],
	[[12151, 12151], "mapped", [31992]],
	[[12152, 12152], "mapped", [32566]],
	[[12153, 12153], "mapped", [32593]],
	[[12154, 12154], "mapped", [32650]],
	[[12155, 12155], "mapped", [32701]],
	[[12156, 12156], "mapped", [32769]],
	[[12157, 12157], "mapped", [32780]],
	[[12158, 12158], "mapped", [32786]],
	[[12159, 12159], "mapped", [32819]],
	[[12160, 12160], "mapped", [32895]],
	[[12161, 12161], "mapped", [32905]],
	[[12162, 12162], "mapped", [33251]],
	[[12163, 12163], "mapped", [33258]],
	[[12164, 12164], "mapped", [33267]],
	[[12165, 12165], "mapped", [33276]],
	[[12166, 12166], "mapped", [33292]],
	[[12167, 12167], "mapped", [33307]],
	[[12168, 12168], "mapped", [33311]],
	[[12169, 12169], "mapped", [33390]],
	[[12170, 12170], "mapped", [33394]],
	[[12171, 12171], "mapped", [33400]],
	[[12172, 12172], "mapped", [34381]],
	[[12173, 12173], "mapped", [34411]],
	[[12174, 12174], "mapped", [34880]],
	[[12175, 12175], "mapped", [34892]],
	[[12176, 12176], "mapped", [34915]],
	[[12177, 12177], "mapped", [35198]],
	[[12178, 12178], "mapped", [35211]],
	[[12179, 12179], "mapped", [35282]],
	[[12180, 12180], "mapped", [35328]],
	[[12181, 12181], "mapped", [35895]],
	[[12182, 12182], "mapped", [35910]],
	[[12183, 12183], "mapped", [35925]],
	[[12184, 12184], "mapped", [35960]],
	[[12185, 12185], "mapped", [35997]],
	[[12186, 12186], "mapped", [36196]],
	[[12187, 12187], "mapped", [36208]],
	[[12188, 12188], "mapped", [36275]],
	[[12189, 12189], "mapped", [36523]],
	[[12190, 12190], "mapped", [36554]],
	[[12191, 12191], "mapped", [36763]],
	[[12192, 12192], "mapped", [36784]],
	[[12193, 12193], "mapped", [36789]],
	[[12194, 12194], "mapped", [37009]],
	[[12195, 12195], "mapped", [37193]],
	[[12196, 12196], "mapped", [37318]],
	[[12197, 12197], "mapped", [37324]],
	[[12198, 12198], "mapped", [37329]],
	[[12199, 12199], "mapped", [38263]],
	[[12200, 12200], "mapped", [38272]],
	[[12201, 12201], "mapped", [38428]],
	[[12202, 12202], "mapped", [38582]],
	[[12203, 12203], "mapped", [38585]],
	[[12204, 12204], "mapped", [38632]],
	[[12205, 12205], "mapped", [38737]],
	[[12206, 12206], "mapped", [38750]],
	[[12207, 12207], "mapped", [38754]],
	[[12208, 12208], "mapped", [38761]],
	[[12209, 12209], "mapped", [38859]],
	[[12210, 12210], "mapped", [38893]],
	[[12211, 12211], "mapped", [38899]],
	[[12212, 12212], "mapped", [38913]],
	[[12213, 12213], "mapped", [39080]],
	[[12214, 12214], "mapped", [39131]],
	[[12215, 12215], "mapped", [39135]],
	[[12216, 12216], "mapped", [39318]],
	[[12217, 12217], "mapped", [39321]],
	[[12218, 12218], "mapped", [39340]],
	[[12219, 12219], "mapped", [39592]],
	[[12220, 12220], "mapped", [39640]],
	[[12221, 12221], "mapped", [39647]],
	[[12222, 12222], "mapped", [39717]],
	[[12223, 12223], "mapped", [39727]],
	[[12224, 12224], "mapped", [39730]],
	[[12225, 12225], "mapped", [39740]],
	[[12226, 12226], "mapped", [39770]],
	[[12227, 12227], "mapped", [40165]],
	[[12228, 12228], "mapped", [40565]],
	[[12229, 12229], "mapped", [40575]],
	[[12230, 12230], "mapped", [40613]],
	[[12231, 12231], "mapped", [40635]],
	[[12232, 12232], "mapped", [40643]],
	[[12233, 12233], "mapped", [40653]],
	[[12234, 12234], "mapped", [40657]],
	[[12235, 12235], "mapped", [40697]],
	[[12236, 12236], "mapped", [40701]],
	[[12237, 12237], "mapped", [40718]],
	[[12238, 12238], "mapped", [40723]],
	[[12239, 12239], "mapped", [40736]],
	[[12240, 12240], "mapped", [40763]],
	[[12241, 12241], "mapped", [40778]],
	[[12242, 12242], "mapped", [40786]],
	[[12243, 12243], "mapped", [40845]],
	[[12244, 12244], "mapped", [40860]],
	[[12245, 12245], "mapped", [40864]],
	[[12246, 12271], "disallowed"],
	[[12272, 12283], "disallowed"],
	[[12284, 12287], "disallowed"],
	[[12288, 12288], "disallowed_STD3_mapped", [32]],
	[[12289, 12289], "valid", [], "NV8"],
	[[12290, 12290], "mapped", [46]],
	[[12291, 12292], "valid", [], "NV8"],
	[[12293, 12295], "valid"],
	[[12296, 12329], "valid", [], "NV8"],
	[[12330, 12333], "valid"],
	[[12334, 12341], "valid", [], "NV8"],
	[[12342, 12342], "mapped", [12306]],
	[[12343, 12343], "valid", [], "NV8"],
	[[12344, 12344], "mapped", [21313]],
	[[12345, 12345], "mapped", [21316]],
	[[12346, 12346], "mapped", [21317]],
	[[12347, 12347], "valid", [], "NV8"],
	[[12348, 12348], "valid"],
	[[12349, 12349], "valid", [], "NV8"],
	[[12350, 12350], "valid", [], "NV8"],
	[[12351, 12351], "valid", [], "NV8"],
	[[12352, 12352], "disallowed"],
	[[12353, 12436], "valid"],
	[[12437, 12438], "valid"],
	[[12439, 12440], "disallowed"],
	[[12441, 12442], "valid"],
	[[12443, 12443], "disallowed_STD3_mapped", [32, 12441]],
	[[12444, 12444], "disallowed_STD3_mapped", [32, 12442]],
	[[12445, 12446], "valid"],
	[[12447, 12447], "mapped", [12424, 12426]],
	[[12448, 12448], "valid", [], "NV8"],
	[[12449, 12542], "valid"],
	[[12543, 12543], "mapped", [12467, 12488]],
	[[12544, 12548], "disallowed"],
	[[12549, 12588], "valid"],
	[[12589, 12589], "valid"],
	[[12590, 12592], "disallowed"],
	[[12593, 12593], "mapped", [4352]],
	[[12594, 12594], "mapped", [4353]],
	[[12595, 12595], "mapped", [4522]],
	[[12596, 12596], "mapped", [4354]],
	[[12597, 12597], "mapped", [4524]],
	[[12598, 12598], "mapped", [4525]],
	[[12599, 12599], "mapped", [4355]],
	[[12600, 12600], "mapped", [4356]],
	[[12601, 12601], "mapped", [4357]],
	[[12602, 12602], "mapped", [4528]],
	[[12603, 12603], "mapped", [4529]],
	[[12604, 12604], "mapped", [4530]],
	[[12605, 12605], "mapped", [4531]],
	[[12606, 12606], "mapped", [4532]],
	[[12607, 12607], "mapped", [4533]],
	[[12608, 12608], "mapped", [4378]],
	[[12609, 12609], "mapped", [4358]],
	[[12610, 12610], "mapped", [4359]],
	[[12611, 12611], "mapped", [4360]],
	[[12612, 12612], "mapped", [4385]],
	[[12613, 12613], "mapped", [4361]],
	[[12614, 12614], "mapped", [4362]],
	[[12615, 12615], "mapped", [4363]],
	[[12616, 12616], "mapped", [4364]],
	[[12617, 12617], "mapped", [4365]],
	[[12618, 12618], "mapped", [4366]],
	[[12619, 12619], "mapped", [4367]],
	[[12620, 12620], "mapped", [4368]],
	[[12621, 12621], "mapped", [4369]],
	[[12622, 12622], "mapped", [4370]],
	[[12623, 12623], "mapped", [4449]],
	[[12624, 12624], "mapped", [4450]],
	[[12625, 12625], "mapped", [4451]],
	[[12626, 12626], "mapped", [4452]],
	[[12627, 12627], "mapped", [4453]],
	[[12628, 12628], "mapped", [4454]],
	[[12629, 12629], "mapped", [4455]],
	[[12630, 12630], "mapped", [4456]],
	[[12631, 12631], "mapped", [4457]],
	[[12632, 12632], "mapped", [4458]],
	[[12633, 12633], "mapped", [4459]],
	[[12634, 12634], "mapped", [4460]],
	[[12635, 12635], "mapped", [4461]],
	[[12636, 12636], "mapped", [4462]],
	[[12637, 12637], "mapped", [4463]],
	[[12638, 12638], "mapped", [4464]],
	[[12639, 12639], "mapped", [4465]],
	[[12640, 12640], "mapped", [4466]],
	[[12641, 12641], "mapped", [4467]],
	[[12642, 12642], "mapped", [4468]],
	[[12643, 12643], "mapped", [4469]],
	[[12644, 12644], "disallowed"],
	[[12645, 12645], "mapped", [4372]],
	[[12646, 12646], "mapped", [4373]],
	[[12647, 12647], "mapped", [4551]],
	[[12648, 12648], "mapped", [4552]],
	[[12649, 12649], "mapped", [4556]],
	[[12650, 12650], "mapped", [4558]],
	[[12651, 12651], "mapped", [4563]],
	[[12652, 12652], "mapped", [4567]],
	[[12653, 12653], "mapped", [4569]],
	[[12654, 12654], "mapped", [4380]],
	[[12655, 12655], "mapped", [4573]],
	[[12656, 12656], "mapped", [4575]],
	[[12657, 12657], "mapped", [4381]],
	[[12658, 12658], "mapped", [4382]],
	[[12659, 12659], "mapped", [4384]],
	[[12660, 12660], "mapped", [4386]],
	[[12661, 12661], "mapped", [4387]],
	[[12662, 12662], "mapped", [4391]],
	[[12663, 12663], "mapped", [4393]],
	[[12664, 12664], "mapped", [4395]],
	[[12665, 12665], "mapped", [4396]],
	[[12666, 12666], "mapped", [4397]],
	[[12667, 12667], "mapped", [4398]],
	[[12668, 12668], "mapped", [4399]],
	[[12669, 12669], "mapped", [4402]],
	[[12670, 12670], "mapped", [4406]],
	[[12671, 12671], "mapped", [4416]],
	[[12672, 12672], "mapped", [4423]],
	[[12673, 12673], "mapped", [4428]],
	[[12674, 12674], "mapped", [4593]],
	[[12675, 12675], "mapped", [4594]],
	[[12676, 12676], "mapped", [4439]],
	[[12677, 12677], "mapped", [4440]],
	[[12678, 12678], "mapped", [4441]],
	[[12679, 12679], "mapped", [4484]],
	[[12680, 12680], "mapped", [4485]],
	[[12681, 12681], "mapped", [4488]],
	[[12682, 12682], "mapped", [4497]],
	[[12683, 12683], "mapped", [4498]],
	[[12684, 12684], "mapped", [4500]],
	[[12685, 12685], "mapped", [4510]],
	[[12686, 12686], "mapped", [4513]],
	[[12687, 12687], "disallowed"],
	[[12688, 12689], "valid", [], "NV8"],
	[[12690, 12690], "mapped", [19968]],
	[[12691, 12691], "mapped", [20108]],
	[[12692, 12692], "mapped", [19977]],
	[[12693, 12693], "mapped", [22235]],
	[[12694, 12694], "mapped", [19978]],
	[[12695, 12695], "mapped", [20013]],
	[[12696, 12696], "mapped", [19979]],
	[[12697, 12697], "mapped", [30002]],
	[[12698, 12698], "mapped", [20057]],
	[[12699, 12699], "mapped", [19993]],
	[[12700, 12700], "mapped", [19969]],
	[[12701, 12701], "mapped", [22825]],
	[[12702, 12702], "mapped", [22320]],
	[[12703, 12703], "mapped", [20154]],
	[[12704, 12727], "valid"],
	[[12728, 12730], "valid"],
	[[12731, 12735], "disallowed"],
	[[12736, 12751], "valid", [], "NV8"],
	[[12752, 12771], "valid", [], "NV8"],
	[[12772, 12783], "disallowed"],
	[[12784, 12799], "valid"],
	[[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]],
	[[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]],
	[[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]],
	[[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]],
	[[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]],
	[[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]],
	[[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]],
	[[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]],
	[[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]],
	[[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]],
	[[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]],
	[[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]],
	[[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]],
	[[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]],
	[[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]],
	[[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]],
	[[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]],
	[[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]],
	[[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]],
	[[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]],
	[[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]],
	[[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]],
	[[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]],
	[[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]],
	[[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]],
	[[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]],
	[[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]],
	[[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]],
	[[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]],
	[[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]],
	[[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]],
	[[12831, 12831], "disallowed"],
	[[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]],
	[[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]],
	[[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]],
	[[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]],
	[[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]],
	[[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]],
	[[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]],
	[[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]],
	[[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]],
	[[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]],
	[[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]],
	[[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]],
	[[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]],
	[[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]],
	[[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]],
	[[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]],
	[[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]],
	[[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]],
	[[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]],
	[[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]],
	[[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]],
	[[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]],
	[[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]],
	[[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]],
	[[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]],
	[[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]],
	[[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]],
	[[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]],
	[[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]],
	[[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]],
	[[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]],
	[[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]],
	[[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]],
	[[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]],
	[[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]],
	[[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]],
	[[12868, 12868], "mapped", [21839]],
	[[12869, 12869], "mapped", [24188]],
	[[12870, 12870], "mapped", [25991]],
	[[12871, 12871], "mapped", [31631]],
	[[12872, 12879], "valid", [], "NV8"],
	[[12880, 12880], "mapped", [112, 116, 101]],
	[[12881, 12881], "mapped", [50, 49]],
	[[12882, 12882], "mapped", [50, 50]],
	[[12883, 12883], "mapped", [50, 51]],
	[[12884, 12884], "mapped", [50, 52]],
	[[12885, 12885], "mapped", [50, 53]],
	[[12886, 12886], "mapped", [50, 54]],
	[[12887, 12887], "mapped", [50, 55]],
	[[12888, 12888], "mapped", [50, 56]],
	[[12889, 12889], "mapped", [50, 57]],
	[[12890, 12890], "mapped", [51, 48]],
	[[12891, 12891], "mapped", [51, 49]],
	[[12892, 12892], "mapped", [51, 50]],
	[[12893, 12893], "mapped", [51, 51]],
	[[12894, 12894], "mapped", [51, 52]],
	[[12895, 12895], "mapped", [51, 53]],
	[[12896, 12896], "mapped", [4352]],
	[[12897, 12897], "mapped", [4354]],
	[[12898, 12898], "mapped", [4355]],
	[[12899, 12899], "mapped", [4357]],
	[[12900, 12900], "mapped", [4358]],
	[[12901, 12901], "mapped", [4359]],
	[[12902, 12902], "mapped", [4361]],
	[[12903, 12903], "mapped", [4363]],
	[[12904, 12904], "mapped", [4364]],
	[[12905, 12905], "mapped", [4366]],
	[[12906, 12906], "mapped", [4367]],
	[[12907, 12907], "mapped", [4368]],
	[[12908, 12908], "mapped", [4369]],
	[[12909, 12909], "mapped", [4370]],
	[[12910, 12910], "mapped", [44032]],
	[[12911, 12911], "mapped", [45208]],
	[[12912, 12912], "mapped", [45796]],
	[[12913, 12913], "mapped", [46972]],
	[[12914, 12914], "mapped", [47560]],
	[[12915, 12915], "mapped", [48148]],
	[[12916, 12916], "mapped", [49324]],
	[[12917, 12917], "mapped", [50500]],
	[[12918, 12918], "mapped", [51088]],
	[[12919, 12919], "mapped", [52264]],
	[[12920, 12920], "mapped", [52852]],
	[[12921, 12921], "mapped", [53440]],
	[[12922, 12922], "mapped", [54028]],
	[[12923, 12923], "mapped", [54616]],
	[[12924, 12924], "mapped", [52280, 44256]],
	[[12925, 12925], "mapped", [51452, 51032]],
	[[12926, 12926], "mapped", [50864]],
	[[12927, 12927], "valid", [], "NV8"],
	[[12928, 12928], "mapped", [19968]],
	[[12929, 12929], "mapped", [20108]],
	[[12930, 12930], "mapped", [19977]],
	[[12931, 12931], "mapped", [22235]],
	[[12932, 12932], "mapped", [20116]],
	[[12933, 12933], "mapped", [20845]],
	[[12934, 12934], "mapped", [19971]],
	[[12935, 12935], "mapped", [20843]],
	[[12936, 12936], "mapped", [20061]],
	[[12937, 12937], "mapped", [21313]],
	[[12938, 12938], "mapped", [26376]],
	[[12939, 12939], "mapped", [28779]],
	[[12940, 12940], "mapped", [27700]],
	[[12941, 12941], "mapped", [26408]],
	[[12942, 12942], "mapped", [37329]],
	[[12943, 12943], "mapped", [22303]],
	[[12944, 12944], "mapped", [26085]],
	[[12945, 12945], "mapped", [26666]],
	[[12946, 12946], "mapped", [26377]],
	[[12947, 12947], "mapped", [31038]],
	[[12948, 12948], "mapped", [21517]],
	[[12949, 12949], "mapped", [29305]],
	[[12950, 12950], "mapped", [36001]],
	[[12951, 12951], "mapped", [31069]],
	[[12952, 12952], "mapped", [21172]],
	[[12953, 12953], "mapped", [31192]],
	[[12954, 12954], "mapped", [30007]],
	[[12955, 12955], "mapped", [22899]],
	[[12956, 12956], "mapped", [36969]],
	[[12957, 12957], "mapped", [20778]],
	[[12958, 12958], "mapped", [21360]],
	[[12959, 12959], "mapped", [27880]],
	[[12960, 12960], "mapped", [38917]],
	[[12961, 12961], "mapped", [20241]],
	[[12962, 12962], "mapped", [20889]],
	[[12963, 12963], "mapped", [27491]],
	[[12964, 12964], "mapped", [19978]],
	[[12965, 12965], "mapped", [20013]],
	[[12966, 12966], "mapped", [19979]],
	[[12967, 12967], "mapped", [24038]],
	[[12968, 12968], "mapped", [21491]],
	[[12969, 12969], "mapped", [21307]],
	[[12970, 12970], "mapped", [23447]],
	[[12971, 12971], "mapped", [23398]],
	[[12972, 12972], "mapped", [30435]],
	[[12973, 12973], "mapped", [20225]],
	[[12974, 12974], "mapped", [36039]],
	[[12975, 12975], "mapped", [21332]],
	[[12976, 12976], "mapped", [22812]],
	[[12977, 12977], "mapped", [51, 54]],
	[[12978, 12978], "mapped", [51, 55]],
	[[12979, 12979], "mapped", [51, 56]],
	[[12980, 12980], "mapped", [51, 57]],
	[[12981, 12981], "mapped", [52, 48]],
	[[12982, 12982], "mapped", [52, 49]],
	[[12983, 12983], "mapped", [52, 50]],
	[[12984, 12984], "mapped", [52, 51]],
	[[12985, 12985], "mapped", [52, 52]],
	[[12986, 12986], "mapped", [52, 53]],
	[[12987, 12987], "mapped", [52, 54]],
	[[12988, 12988], "mapped", [52, 55]],
	[[12989, 12989], "mapped", [52, 56]],
	[[12990, 12990], "mapped", [52, 57]],
	[[12991, 12991], "mapped", [53, 48]],
	[[12992, 12992], "mapped", [49, 26376]],
	[[12993, 12993], "mapped", [50, 26376]],
	[[12994, 12994], "mapped", [51, 26376]],
	[[12995, 12995], "mapped", [52, 26376]],
	[[12996, 12996], "mapped", [53, 26376]],
	[[12997, 12997], "mapped", [54, 26376]],
	[[12998, 12998], "mapped", [55, 26376]],
	[[12999, 12999], "mapped", [56, 26376]],
	[[13000, 13000], "mapped", [57, 26376]],
	[[13001, 13001], "mapped", [49, 48, 26376]],
	[[13002, 13002], "mapped", [49, 49, 26376]],
	[[13003, 13003], "mapped", [49, 50, 26376]],
	[[13004, 13004], "mapped", [104, 103]],
	[[13005, 13005], "mapped", [101, 114, 103]],
	[[13006, 13006], "mapped", [101, 118]],
	[[13007, 13007], "mapped", [108, 116, 100]],
	[[13008, 13008], "mapped", [12450]],
	[[13009, 13009], "mapped", [12452]],
	[[13010, 13010], "mapped", [12454]],
	[[13011, 13011], "mapped", [12456]],
	[[13012, 13012], "mapped", [12458]],
	[[13013, 13013], "mapped", [12459]],
	[[13014, 13014], "mapped", [12461]],
	[[13015, 13015], "mapped", [12463]],
	[[13016, 13016], "mapped", [12465]],
	[[13017, 13017], "mapped", [12467]],
	[[13018, 13018], "mapped", [12469]],
	[[13019, 13019], "mapped", [12471]],
	[[13020, 13020], "mapped", [12473]],
	[[13021, 13021], "mapped", [12475]],
	[[13022, 13022], "mapped", [12477]],
	[[13023, 13023], "mapped", [12479]],
	[[13024, 13024], "mapped", [12481]],
	[[13025, 13025], "mapped", [12484]],
	[[13026, 13026], "mapped", [12486]],
	[[13027, 13027], "mapped", [12488]],
	[[13028, 13028], "mapped", [12490]],
	[[13029, 13029], "mapped", [12491]],
	[[13030, 13030], "mapped", [12492]],
	[[13031, 13031], "mapped", [12493]],
	[[13032, 13032], "mapped", [12494]],
	[[13033, 13033], "mapped", [12495]],
	[[13034, 13034], "mapped", [12498]],
	[[13035, 13035], "mapped", [12501]],
	[[13036, 13036], "mapped", [12504]],
	[[13037, 13037], "mapped", [12507]],
	[[13038, 13038], "mapped", [12510]],
	[[13039, 13039], "mapped", [12511]],
	[[13040, 13040], "mapped", [12512]],
	[[13041, 13041], "mapped", [12513]],
	[[13042, 13042], "mapped", [12514]],
	[[13043, 13043], "mapped", [12516]],
	[[13044, 13044], "mapped", [12518]],
	[[13045, 13045], "mapped", [12520]],
	[[13046, 13046], "mapped", [12521]],
	[[13047, 13047], "mapped", [12522]],
	[[13048, 13048], "mapped", [12523]],
	[[13049, 13049], "mapped", [12524]],
	[[13050, 13050], "mapped", [12525]],
	[[13051, 13051], "mapped", [12527]],
	[[13052, 13052], "mapped", [12528]],
	[[13053, 13053], "mapped", [12529]],
	[[13054, 13054], "mapped", [12530]],
	[[13055, 13055], "disallowed"],
	[[13056, 13056], "mapped", [12450, 12497, 12540, 12488]],
	[[13057, 13057], "mapped", [12450, 12523, 12501, 12449]],
	[[13058, 13058], "mapped", [12450, 12531, 12506, 12450]],
	[[13059, 13059], "mapped", [12450, 12540, 12523]],
	[[13060, 13060], "mapped", [12452, 12491, 12531, 12464]],
	[[13061, 13061], "mapped", [12452, 12531, 12481]],
	[[13062, 13062], "mapped", [12454, 12457, 12531]],
	[[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]],
	[[13064, 13064], "mapped", [12456, 12540, 12459, 12540]],
	[[13065, 13065], "mapped", [12458, 12531, 12473]],
	[[13066, 13066], "mapped", [12458, 12540, 12512]],
	[[13067, 13067], "mapped", [12459, 12452, 12522]],
	[[13068, 13068], "mapped", [12459, 12521, 12483, 12488]],
	[[13069, 13069], "mapped", [12459, 12525, 12522, 12540]],
	[[13070, 13070], "mapped", [12460, 12525, 12531]],
	[[13071, 13071], "mapped", [12460, 12531, 12510]],
	[[13072, 13072], "mapped", [12462, 12460]],
	[[13073, 13073], "mapped", [12462, 12491, 12540]],
	[[13074, 13074], "mapped", [12461, 12517, 12522, 12540]],
	[[13075, 13075], "mapped", [12462, 12523, 12480, 12540]],
	[[13076, 13076], "mapped", [12461, 12525]],
	[[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]],
	[[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]],
	[[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]],
	[[13080, 13080], "mapped", [12464, 12521, 12512]],
	[[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]],
	[[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]],
	[[13083, 13083], "mapped", [12463, 12525, 12540, 12493]],
	[[13084, 13084], "mapped", [12465, 12540, 12473]],
	[[13085, 13085], "mapped", [12467, 12523, 12490]],
	[[13086, 13086], "mapped", [12467, 12540, 12509]],
	[[13087, 13087], "mapped", [12469, 12452, 12463, 12523]],
	[[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]],
	[[13089, 13089], "mapped", [12471, 12522, 12531, 12464]],
	[[13090, 13090], "mapped", [12475, 12531, 12481]],
	[[13091, 13091], "mapped", [12475, 12531, 12488]],
	[[13092, 13092], "mapped", [12480, 12540, 12473]],
	[[13093, 13093], "mapped", [12487, 12471]],
	[[13094, 13094], "mapped", [12489, 12523]],
	[[13095, 13095], "mapped", [12488, 12531]],
	[[13096, 13096], "mapped", [12490, 12494]],
	[[13097, 13097], "mapped", [12494, 12483, 12488]],
	[[13098, 13098], "mapped", [12495, 12452, 12484]],
	[[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]],
	[[13100, 13100], "mapped", [12497, 12540, 12484]],
	[[13101, 13101], "mapped", [12496, 12540, 12524, 12523]],
	[[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]],
	[[13103, 13103], "mapped", [12500, 12463, 12523]],
	[[13104, 13104], "mapped", [12500, 12467]],
	[[13105, 13105], "mapped", [12499, 12523]],
	[[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]],
	[[13107, 13107], "mapped", [12501, 12451, 12540, 12488]],
	[[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]],
	[[13109, 13109], "mapped", [12501, 12521, 12531]],
	[[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]],
	[[13111, 13111], "mapped", [12506, 12477]],
	[[13112, 13112], "mapped", [12506, 12491, 12498]],
	[[13113, 13113], "mapped", [12504, 12523, 12484]],
	[[13114, 13114], "mapped", [12506, 12531, 12473]],
	[[13115, 13115], "mapped", [12506, 12540, 12472]],
	[[13116, 13116], "mapped", [12505, 12540, 12479]],
	[[13117, 13117], "mapped", [12509, 12452, 12531, 12488]],
	[[13118, 13118], "mapped", [12508, 12523, 12488]],
	[[13119, 13119], "mapped", [12507, 12531]],
	[[13120, 13120], "mapped", [12509, 12531, 12489]],
	[[13121, 13121], "mapped", [12507, 12540, 12523]],
	[[13122, 13122], "mapped", [12507, 12540, 12531]],
	[[13123, 13123], "mapped", [12510, 12452, 12463, 12525]],
	[[13124, 13124], "mapped", [12510, 12452, 12523]],
	[[13125, 13125], "mapped", [12510, 12483, 12495]],
	[[13126, 13126], "mapped", [12510, 12523, 12463]],
	[[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]],
	[[13128, 13128], "mapped", [12511, 12463, 12525, 12531]],
	[[13129, 13129], "mapped", [12511, 12522]],
	[[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]],
	[[13131, 13131], "mapped", [12513, 12460]],
	[[13132, 13132], "mapped", [12513, 12460, 12488, 12531]],
	[[13133, 13133], "mapped", [12513, 12540, 12488, 12523]],
	[[13134, 13134], "mapped", [12516, 12540, 12489]],
	[[13135, 13135], "mapped", [12516, 12540, 12523]],
	[[13136, 13136], "mapped", [12518, 12450, 12531]],
	[[13137, 13137], "mapped", [12522, 12483, 12488, 12523]],
	[[13138, 13138], "mapped", [12522, 12521]],
	[[13139, 13139], "mapped", [12523, 12500, 12540]],
	[[13140, 13140], "mapped", [12523, 12540, 12502, 12523]],
	[[13141, 13141], "mapped", [12524, 12512]],
	[[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]],
	[[13143, 13143], "mapped", [12527, 12483, 12488]],
	[[13144, 13144], "mapped", [48, 28857]],
	[[13145, 13145], "mapped", [49, 28857]],
	[[13146, 13146], "mapped", [50, 28857]],
	[[13147, 13147], "mapped", [51, 28857]],
	[[13148, 13148], "mapped", [52, 28857]],
	[[13149, 13149], "mapped", [53, 28857]],
	[[13150, 13150], "mapped", [54, 28857]],
	[[13151, 13151], "mapped", [55, 28857]],
	[[13152, 13152], "mapped", [56, 28857]],
	[[13153, 13153], "mapped", [57, 28857]],
	[[13154, 13154], "mapped", [49, 48, 28857]],
	[[13155, 13155], "mapped", [49, 49, 28857]],
	[[13156, 13156], "mapped", [49, 50, 28857]],
	[[13157, 13157], "mapped", [49, 51, 28857]],
	[[13158, 13158], "mapped", [49, 52, 28857]],
	[[13159, 13159], "mapped", [49, 53, 28857]],
	[[13160, 13160], "mapped", [49, 54, 28857]],
	[[13161, 13161], "mapped", [49, 55, 28857]],
	[[13162, 13162], "mapped", [49, 56, 28857]],
	[[13163, 13163], "mapped", [49, 57, 28857]],
	[[13164, 13164], "mapped", [50, 48, 28857]],
	[[13165, 13165], "mapped", [50, 49, 28857]],
	[[13166, 13166], "mapped", [50, 50, 28857]],
	[[13167, 13167], "mapped", [50, 51, 28857]],
	[[13168, 13168], "mapped", [50, 52, 28857]],
	[[13169, 13169], "mapped", [104, 112, 97]],
	[[13170, 13170], "mapped", [100, 97]],
	[[13171, 13171], "mapped", [97, 117]],
	[[13172, 13172], "mapped", [98, 97, 114]],
	[[13173, 13173], "mapped", [111, 118]],
	[[13174, 13174], "mapped", [112, 99]],
	[[13175, 13175], "mapped", [100, 109]],
	[[13176, 13176], "mapped", [100, 109, 50]],
	[[13177, 13177], "mapped", [100, 109, 51]],
	[[13178, 13178], "mapped", [105, 117]],
	[[13179, 13179], "mapped", [24179, 25104]],
	[[13180, 13180], "mapped", [26157, 21644]],
	[[13181, 13181], "mapped", [22823, 27491]],
	[[13182, 13182], "mapped", [26126, 27835]],
	[[13183, 13183], "mapped", [26666, 24335, 20250, 31038]],
	[[13184, 13184], "mapped", [112, 97]],
	[[13185, 13185], "mapped", [110, 97]],
	[[13186, 13186], "mapped", [956, 97]],
	[[13187, 13187], "mapped", [109, 97]],
	[[13188, 13188], "mapped", [107, 97]],
	[[13189, 13189], "mapped", [107, 98]],
	[[13190, 13190], "mapped", [109, 98]],
	[[13191, 13191], "mapped", [103, 98]],
	[[13192, 13192], "mapped", [99, 97, 108]],
	[[13193, 13193], "mapped", [107, 99, 97, 108]],
	[[13194, 13194], "mapped", [112, 102]],
	[[13195, 13195], "mapped", [110, 102]],
	[[13196, 13196], "mapped", [956, 102]],
	[[13197, 13197], "mapped", [956, 103]],
	[[13198, 13198], "mapped", [109, 103]],
	[[13199, 13199], "mapped", [107, 103]],
	[[13200, 13200], "mapped", [104, 122]],
	[[13201, 13201], "mapped", [107, 104, 122]],
	[[13202, 13202], "mapped", [109, 104, 122]],
	[[13203, 13203], "mapped", [103, 104, 122]],
	[[13204, 13204], "mapped", [116, 104, 122]],
	[[13205, 13205], "mapped", [956, 108]],
	[[13206, 13206], "mapped", [109, 108]],
	[[13207, 13207], "mapped", [100, 108]],
	[[13208, 13208], "mapped", [107, 108]],
	[[13209, 13209], "mapped", [102, 109]],
	[[13210, 13210], "mapped", [110, 109]],
	[[13211, 13211], "mapped", [956, 109]],
	[[13212, 13212], "mapped", [109, 109]],
	[[13213, 13213], "mapped", [99, 109]],
	[[13214, 13214], "mapped", [107, 109]],
	[[13215, 13215], "mapped", [109, 109, 50]],
	[[13216, 13216], "mapped", [99, 109, 50]],
	[[13217, 13217], "mapped", [109, 50]],
	[[13218, 13218], "mapped", [107, 109, 50]],
	[[13219, 13219], "mapped", [109, 109, 51]],
	[[13220, 13220], "mapped", [99, 109, 51]],
	[[13221, 13221], "mapped", [109, 51]],
	[[13222, 13222], "mapped", [107, 109, 51]],
	[[13223, 13223], "mapped", [109, 8725, 115]],
	[[13224, 13224], "mapped", [109, 8725, 115, 50]],
	[[13225, 13225], "mapped", [112, 97]],
	[[13226, 13226], "mapped", [107, 112, 97]],
	[[13227, 13227], "mapped", [109, 112, 97]],
	[[13228, 13228], "mapped", [103, 112, 97]],
	[[13229, 13229], "mapped", [114, 97, 100]],
	[[13230, 13230], "mapped", [114, 97, 100, 8725, 115]],
	[[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]],
	[[13232, 13232], "mapped", [112, 115]],
	[[13233, 13233], "mapped", [110, 115]],
	[[13234, 13234], "mapped", [956, 115]],
	[[13235, 13235], "mapped", [109, 115]],
	[[13236, 13236], "mapped", [112, 118]],
	[[13237, 13237], "mapped", [110, 118]],
	[[13238, 13238], "mapped", [956, 118]],
	[[13239, 13239], "mapped", [109, 118]],
	[[13240, 13240], "mapped", [107, 118]],
	[[13241, 13241], "mapped", [109, 118]],
	[[13242, 13242], "mapped", [112, 119]],
	[[13243, 13243], "mapped", [110, 119]],
	[[13244, 13244], "mapped", [956, 119]],
	[[13245, 13245], "mapped", [109, 119]],
	[[13246, 13246], "mapped", [107, 119]],
	[[13247, 13247], "mapped", [109, 119]],
	[[13248, 13248], "mapped", [107, 969]],
	[[13249, 13249], "mapped", [109, 969]],
	[[13250, 13250], "disallowed"],
	[[13251, 13251], "mapped", [98, 113]],
	[[13252, 13252], "mapped", [99, 99]],
	[[13253, 13253], "mapped", [99, 100]],
	[[13254, 13254], "mapped", [99, 8725, 107, 103]],
	[[13255, 13255], "disallowed"],
	[[13256, 13256], "mapped", [100, 98]],
	[[13257, 13257], "mapped", [103, 121]],
	[[13258, 13258], "mapped", [104, 97]],
	[[13259, 13259], "mapped", [104, 112]],
	[[13260, 13260], "mapped", [105, 110]],
	[[13261, 13261], "mapped", [107, 107]],
	[[13262, 13262], "mapped", [107, 109]],
	[[13263, 13263], "mapped", [107, 116]],
	[[13264, 13264], "mapped", [108, 109]],
	[[13265, 13265], "mapped", [108, 110]],
	[[13266, 13266], "mapped", [108, 111, 103]],
	[[13267, 13267], "mapped", [108, 120]],
	[[13268, 13268], "mapped", [109, 98]],
	[[13269, 13269], "mapped", [109, 105, 108]],
	[[13270, 13270], "mapped", [109, 111, 108]],
	[[13271, 13271], "mapped", [112, 104]],
	[[13272, 13272], "disallowed"],
	[[13273, 13273], "mapped", [112, 112, 109]],
	[[13274, 13274], "mapped", [112, 114]],
	[[13275, 13275], "mapped", [115, 114]],
	[[13276, 13276], "mapped", [115, 118]],
	[[13277, 13277], "mapped", [119, 98]],
	[[13278, 13278], "mapped", [118, 8725, 109]],
	[[13279, 13279], "mapped", [97, 8725, 109]],
	[[13280, 13280], "mapped", [49, 26085]],
	[[13281, 13281], "mapped", [50, 26085]],
	[[13282, 13282], "mapped", [51, 26085]],
	[[13283, 13283], "mapped", [52, 26085]],
	[[13284, 13284], "mapped", [53, 26085]],
	[[13285, 13285], "mapped", [54, 26085]],
	[[13286, 13286], "mapped", [55, 26085]],
	[[13287, 13287], "mapped", [56, 26085]],
	[[13288, 13288], "mapped", [57, 26085]],
	[[13289, 13289], "mapped", [49, 48, 26085]],
	[[13290, 13290], "mapped", [49, 49, 26085]],
	[[13291, 13291], "mapped", [49, 50, 26085]],
	[[13292, 13292], "mapped", [49, 51, 26085]],
	[[13293, 13293], "mapped", [49, 52, 26085]],
	[[13294, 13294], "mapped", [49, 53, 26085]],
	[[13295, 13295], "mapped", [49, 54, 26085]],
	[[13296, 13296], "mapped", [49, 55, 26085]],
	[[13297, 13297], "mapped", [49, 56, 26085]],
	[[13298, 13298], "mapped", [49, 57, 26085]],
	[[13299, 13299], "mapped", [50, 48, 26085]],
	[[13300, 13300], "mapped", [50, 49, 26085]],
	[[13301, 13301], "mapped", [50, 50, 26085]],
	[[13302, 13302], "mapped", [50, 51, 26085]],
	[[13303, 13303], "mapped", [50, 52, 26085]],
	[[13304, 13304], "mapped", [50, 53, 26085]],
	[[13305, 13305], "mapped", [50, 54, 26085]],
	[[13306, 13306], "mapped", [50, 55, 26085]],
	[[13307, 13307], "mapped", [50, 56, 26085]],
	[[13308, 13308], "mapped", [50, 57, 26085]],
	[[13309, 13309], "mapped", [51, 48, 26085]],
	[[13310, 13310], "mapped", [51, 49, 26085]],
	[[13311, 13311], "mapped", [103, 97, 108]],
	[[13312, 19893], "valid"],
	[[19894, 19903], "disallowed"],
	[[19904, 19967], "valid", [], "NV8"],
	[[19968, 40869], "valid"],
	[[40870, 40891], "valid"],
	[[40892, 40899], "valid"],
	[[40900, 40907], "valid"],
	[[40908, 40908], "valid"],
	[[40909, 40917], "valid"],
	[[40918, 40959], "disallowed"],
	[[40960, 42124], "valid"],
	[[42125, 42127], "disallowed"],
	[[42128, 42145], "valid", [], "NV8"],
	[[42146, 42147], "valid", [], "NV8"],
	[[42148, 42163], "valid", [], "NV8"],
	[[42164, 42164], "valid", [], "NV8"],
	[[42165, 42176], "valid", [], "NV8"],
	[[42177, 42177], "valid", [], "NV8"],
	[[42178, 42180], "valid", [], "NV8"],
	[[42181, 42181], "valid", [], "NV8"],
	[[42182, 42182], "valid", [], "NV8"],
	[[42183, 42191], "disallowed"],
	[[42192, 42237], "valid"],
	[[42238, 42239], "valid", [], "NV8"],
	[[42240, 42508], "valid"],
	[[42509, 42511], "valid", [], "NV8"],
	[[42512, 42539], "valid"],
	[[42540, 42559], "disallowed"],
	[[42560, 42560], "mapped", [42561]],
	[[42561, 42561], "valid"],
	[[42562, 42562], "mapped", [42563]],
	[[42563, 42563], "valid"],
	[[42564, 42564], "mapped", [42565]],
	[[42565, 42565], "valid"],
	[[42566, 42566], "mapped", [42567]],
	[[42567, 42567], "valid"],
	[[42568, 42568], "mapped", [42569]],
	[[42569, 42569], "valid"],
	[[42570, 42570], "mapped", [42571]],
	[[42571, 42571], "valid"],
	[[42572, 42572], "mapped", [42573]],
	[[42573, 42573], "valid"],
	[[42574, 42574], "mapped", [42575]],
	[[42575, 42575], "valid"],
	[[42576, 42576], "mapped", [42577]],
	[[42577, 42577], "valid"],
	[[42578, 42578], "mapped", [42579]],
	[[42579, 42579], "valid"],
	[[42580, 42580], "mapped", [42581]],
	[[42581, 42581], "valid"],
	[[42582, 42582], "mapped", [42583]],
	[[42583, 42583], "valid"],
	[[42584, 42584], "mapped", [42585]],
	[[42585, 42585], "valid"],
	[[42586, 42586], "mapped", [42587]],
	[[42587, 42587], "valid"],
	[[42588, 42588], "mapped", [42589]],
	[[42589, 42589], "valid"],
	[[42590, 42590], "mapped", [42591]],
	[[42591, 42591], "valid"],
	[[42592, 42592], "mapped", [42593]],
	[[42593, 42593], "valid"],
	[[42594, 42594], "mapped", [42595]],
	[[42595, 42595], "valid"],
	[[42596, 42596], "mapped", [42597]],
	[[42597, 42597], "valid"],
	[[42598, 42598], "mapped", [42599]],
	[[42599, 42599], "valid"],
	[[42600, 42600], "mapped", [42601]],
	[[42601, 42601], "valid"],
	[[42602, 42602], "mapped", [42603]],
	[[42603, 42603], "valid"],
	[[42604, 42604], "mapped", [42605]],
	[[42605, 42607], "valid"],
	[[42608, 42611], "valid", [], "NV8"],
	[[42612, 42619], "valid"],
	[[42620, 42621], "valid"],
	[[42622, 42622], "valid", [], "NV8"],
	[[42623, 42623], "valid"],
	[[42624, 42624], "mapped", [42625]],
	[[42625, 42625], "valid"],
	[[42626, 42626], "mapped", [42627]],
	[[42627, 42627], "valid"],
	[[42628, 42628], "mapped", [42629]],
	[[42629, 42629], "valid"],
	[[42630, 42630], "mapped", [42631]],
	[[42631, 42631], "valid"],
	[[42632, 42632], "mapped", [42633]],
	[[42633, 42633], "valid"],
	[[42634, 42634], "mapped", [42635]],
	[[42635, 42635], "valid"],
	[[42636, 42636], "mapped", [42637]],
	[[42637, 42637], "valid"],
	[[42638, 42638], "mapped", [42639]],
	[[42639, 42639], "valid"],
	[[42640, 42640], "mapped", [42641]],
	[[42641, 42641], "valid"],
	[[42642, 42642], "mapped", [42643]],
	[[42643, 42643], "valid"],
	[[42644, 42644], "mapped", [42645]],
	[[42645, 42645], "valid"],
	[[42646, 42646], "mapped", [42647]],
	[[42647, 42647], "valid"],
	[[42648, 42648], "mapped", [42649]],
	[[42649, 42649], "valid"],
	[[42650, 42650], "mapped", [42651]],
	[[42651, 42651], "valid"],
	[[42652, 42652], "mapped", [1098]],
	[[42653, 42653], "mapped", [1100]],
	[[42654, 42654], "valid"],
	[[42655, 42655], "valid"],
	[[42656, 42725], "valid"],
	[[42726, 42735], "valid", [], "NV8"],
	[[42736, 42737], "valid"],
	[[42738, 42743], "valid", [], "NV8"],
	[[42744, 42751], "disallowed"],
	[[42752, 42774], "valid", [], "NV8"],
	[[42775, 42778], "valid"],
	[[42779, 42783], "valid"],
	[[42784, 42785], "valid", [], "NV8"],
	[[42786, 42786], "mapped", [42787]],
	[[42787, 42787], "valid"],
	[[42788, 42788], "mapped", [42789]],
	[[42789, 42789], "valid"],
	[[42790, 42790], "mapped", [42791]],
	[[42791, 42791], "valid"],
	[[42792, 42792], "mapped", [42793]],
	[[42793, 42793], "valid"],
	[[42794, 42794], "mapped", [42795]],
	[[42795, 42795], "valid"],
	[[42796, 42796], "mapped", [42797]],
	[[42797, 42797], "valid"],
	[[42798, 42798], "mapped", [42799]],
	[[42799, 42801], "valid"],
	[[42802, 42802], "mapped", [42803]],
	[[42803, 42803], "valid"],
	[[42804, 42804], "mapped", [42805]],
	[[42805, 42805], "valid"],
	[[42806, 42806], "mapped", [42807]],
	[[42807, 42807], "valid"],
	[[42808, 42808], "mapped", [42809]],
	[[42809, 42809], "valid"],
	[[42810, 42810], "mapped", [42811]],
	[[42811, 42811], "valid"],
	[[42812, 42812], "mapped", [42813]],
	[[42813, 42813], "valid"],
	[[42814, 42814], "mapped", [42815]],
	[[42815, 42815], "valid"],
	[[42816, 42816], "mapped", [42817]],
	[[42817, 42817], "valid"],
	[[42818, 42818], "mapped", [42819]],
	[[42819, 42819], "valid"],
	[[42820, 42820], "mapped", [42821]],
	[[42821, 42821], "valid"],
	[[42822, 42822], "mapped", [42823]],
	[[42823, 42823], "valid"],
	[[42824, 42824], "mapped", [42825]],
	[[42825, 42825], "valid"],
	[[42826, 42826], "mapped", [42827]],
	[[42827, 42827], "valid"],
	[[42828, 42828], "mapped", [42829]],
	[[42829, 42829], "valid"],
	[[42830, 42830], "mapped", [42831]],
	[[42831, 42831], "valid"],
	[[42832, 42832], "mapped", [42833]],
	[[42833, 42833], "valid"],
	[[42834, 42834], "mapped", [42835]],
	[[42835, 42835], "valid"],
	[[42836, 42836], "mapped", [42837]],
	[[42837, 42837], "valid"],
	[[42838, 42838], "mapped", [42839]],
	[[42839, 42839], "valid"],
	[[42840, 42840], "mapped", [42841]],
	[[42841, 42841], "valid"],
	[[42842, 42842], "mapped", [42843]],
	[[42843, 42843], "valid"],
	[[42844, 42844], "mapped", [42845]],
	[[42845, 42845], "valid"],
	[[42846, 42846], "mapped", [42847]],
	[[42847, 42847], "valid"],
	[[42848, 42848], "mapped", [42849]],
	[[42849, 42849], "valid"],
	[[42850, 42850], "mapped", [42851]],
	[[42851, 42851], "valid"],
	[[42852, 42852], "mapped", [42853]],
	[[42853, 42853], "valid"],
	[[42854, 42854], "mapped", [42855]],
	[[42855, 42855], "valid"],
	[[42856, 42856], "mapped", [42857]],
	[[42857, 42857], "valid"],
	[[42858, 42858], "mapped", [42859]],
	[[42859, 42859], "valid"],
	[[42860, 42860], "mapped", [42861]],
	[[42861, 42861], "valid"],
	[[42862, 42862], "mapped", [42863]],
	[[42863, 42863], "valid"],
	[[42864, 42864], "mapped", [42863]],
	[[42865, 42872], "valid"],
	[[42873, 42873], "mapped", [42874]],
	[[42874, 42874], "valid"],
	[[42875, 42875], "mapped", [42876]],
	[[42876, 42876], "valid"],
	[[42877, 42877], "mapped", [7545]],
	[[42878, 42878], "mapped", [42879]],
	[[42879, 42879], "valid"],
	[[42880, 42880], "mapped", [42881]],
	[[42881, 42881], "valid"],
	[[42882, 42882], "mapped", [42883]],
	[[42883, 42883], "valid"],
	[[42884, 42884], "mapped", [42885]],
	[[42885, 42885], "valid"],
	[[42886, 42886], "mapped", [42887]],
	[[42887, 42888], "valid"],
	[[42889, 42890], "valid", [], "NV8"],
	[[42891, 42891], "mapped", [42892]],
	[[42892, 42892], "valid"],
	[[42893, 42893], "mapped", [613]],
	[[42894, 42894], "valid"],
	[[42895, 42895], "valid"],
	[[42896, 42896], "mapped", [42897]],
	[[42897, 42897], "valid"],
	[[42898, 42898], "mapped", [42899]],
	[[42899, 42899], "valid"],
	[[42900, 42901], "valid"],
	[[42902, 42902], "mapped", [42903]],
	[[42903, 42903], "valid"],
	[[42904, 42904], "mapped", [42905]],
	[[42905, 42905], "valid"],
	[[42906, 42906], "mapped", [42907]],
	[[42907, 42907], "valid"],
	[[42908, 42908], "mapped", [42909]],
	[[42909, 42909], "valid"],
	[[42910, 42910], "mapped", [42911]],
	[[42911, 42911], "valid"],
	[[42912, 42912], "mapped", [42913]],
	[[42913, 42913], "valid"],
	[[42914, 42914], "mapped", [42915]],
	[[42915, 42915], "valid"],
	[[42916, 42916], "mapped", [42917]],
	[[42917, 42917], "valid"],
	[[42918, 42918], "mapped", [42919]],
	[[42919, 42919], "valid"],
	[[42920, 42920], "mapped", [42921]],
	[[42921, 42921], "valid"],
	[[42922, 42922], "mapped", [614]],
	[[42923, 42923], "mapped", [604]],
	[[42924, 42924], "mapped", [609]],
	[[42925, 42925], "mapped", [620]],
	[[42926, 42927], "disallowed"],
	[[42928, 42928], "mapped", [670]],
	[[42929, 42929], "mapped", [647]],
	[[42930, 42930], "mapped", [669]],
	[[42931, 42931], "mapped", [43859]],
	[[42932, 42932], "mapped", [42933]],
	[[42933, 42933], "valid"],
	[[42934, 42934], "mapped", [42935]],
	[[42935, 42935], "valid"],
	[[42936, 42998], "disallowed"],
	[[42999, 42999], "valid"],
	[[43000, 43000], "mapped", [295]],
	[[43001, 43001], "mapped", [339]],
	[[43002, 43002], "valid"],
	[[43003, 43007], "valid"],
	[[43008, 43047], "valid"],
	[[43048, 43051], "valid", [], "NV8"],
	[[43052, 43055], "disallowed"],
	[[43056, 43065], "valid", [], "NV8"],
	[[43066, 43071], "disallowed"],
	[[43072, 43123], "valid"],
	[[43124, 43127], "valid", [], "NV8"],
	[[43128, 43135], "disallowed"],
	[[43136, 43204], "valid"],
	[[43205, 43213], "disallowed"],
	[[43214, 43215], "valid", [], "NV8"],
	[[43216, 43225], "valid"],
	[[43226, 43231], "disallowed"],
	[[43232, 43255], "valid"],
	[[43256, 43258], "valid", [], "NV8"],
	[[43259, 43259], "valid"],
	[[43260, 43260], "valid", [], "NV8"],
	[[43261, 43261], "valid"],
	[[43262, 43263], "disallowed"],
	[[43264, 43309], "valid"],
	[[43310, 43311], "valid", [], "NV8"],
	[[43312, 43347], "valid"],
	[[43348, 43358], "disallowed"],
	[[43359, 43359], "valid", [], "NV8"],
	[[43360, 43388], "valid", [], "NV8"],
	[[43389, 43391], "disallowed"],
	[[43392, 43456], "valid"],
	[[43457, 43469], "valid", [], "NV8"],
	[[43470, 43470], "disallowed"],
	[[43471, 43481], "valid"],
	[[43482, 43485], "disallowed"],
	[[43486, 43487], "valid", [], "NV8"],
	[[43488, 43518], "valid"],
	[[43519, 43519], "disallowed"],
	[[43520, 43574], "valid"],
	[[43575, 43583], "disallowed"],
	[[43584, 43597], "valid"],
	[[43598, 43599], "disallowed"],
	[[43600, 43609], "valid"],
	[[43610, 43611], "disallowed"],
	[[43612, 43615], "valid", [], "NV8"],
	[[43616, 43638], "valid"],
	[[43639, 43641], "valid", [], "NV8"],
	[[43642, 43643], "valid"],
	[[43644, 43647], "valid"],
	[[43648, 43714], "valid"],
	[[43715, 43738], "disallowed"],
	[[43739, 43741], "valid"],
	[[43742, 43743], "valid", [], "NV8"],
	[[43744, 43759], "valid"],
	[[43760, 43761], "valid", [], "NV8"],
	[[43762, 43766], "valid"],
	[[43767, 43776], "disallowed"],
	[[43777, 43782], "valid"],
	[[43783, 43784], "disallowed"],
	[[43785, 43790], "valid"],
	[[43791, 43792], "disallowed"],
	[[43793, 43798], "valid"],
	[[43799, 43807], "disallowed"],
	[[43808, 43814], "valid"],
	[[43815, 43815], "disallowed"],
	[[43816, 43822], "valid"],
	[[43823, 43823], "disallowed"],
	[[43824, 43866], "valid"],
	[[43867, 43867], "valid", [], "NV8"],
	[[43868, 43868], "mapped", [42791]],
	[[43869, 43869], "mapped", [43831]],
	[[43870, 43870], "mapped", [619]],
	[[43871, 43871], "mapped", [43858]],
	[[43872, 43875], "valid"],
	[[43876, 43877], "valid"],
	[[43878, 43887], "disallowed"],
	[[43888, 43888], "mapped", [5024]],
	[[43889, 43889], "mapped", [5025]],
	[[43890, 43890], "mapped", [5026]],
	[[43891, 43891], "mapped", [5027]],
	[[43892, 43892], "mapped", [5028]],
	[[43893, 43893], "mapped", [5029]],
	[[43894, 43894], "mapped", [5030]],
	[[43895, 43895], "mapped", [5031]],
	[[43896, 43896], "mapped", [5032]],
	[[43897, 43897], "mapped", [5033]],
	[[43898, 43898], "mapped", [5034]],
	[[43899, 43899], "mapped", [5035]],
	[[43900, 43900], "mapped", [5036]],
	[[43901, 43901], "mapped", [5037]],
	[[43902, 43902], "mapped", [5038]],
	[[43903, 43903], "mapped", [5039]],
	[[43904, 43904], "mapped", [5040]],
	[[43905, 43905], "mapped", [5041]],
	[[43906, 43906], "mapped", [5042]],
	[[43907, 43907], "mapped", [5043]],
	[[43908, 43908], "mapped", [5044]],
	[[43909, 43909], "mapped", [5045]],
	[[43910, 43910], "mapped", [5046]],
	[[43911, 43911], "mapped", [5047]],
	[[43912, 43912], "mapped", [5048]],
	[[43913, 43913], "mapped", [5049]],
	[[43914, 43914], "mapped", [5050]],
	[[43915, 43915], "mapped", [5051]],
	[[43916, 43916], "mapped", [5052]],
	[[43917, 43917], "mapped", [5053]],
	[[43918, 43918], "mapped", [5054]],
	[[43919, 43919], "mapped", [5055]],
	[[43920, 43920], "mapped", [5056]],
	[[43921, 43921], "mapped", [5057]],
	[[43922, 43922], "mapped", [5058]],
	[[43923, 43923], "mapped", [5059]],
	[[43924, 43924], "mapped", [5060]],
	[[43925, 43925], "mapped", [5061]],
	[[43926, 43926], "mapped", [5062]],
	[[43927, 43927], "mapped", [5063]],
	[[43928, 43928], "mapped", [5064]],
	[[43929, 43929], "mapped", [5065]],
	[[43930, 43930], "mapped", [5066]],
	[[43931, 43931], "mapped", [5067]],
	[[43932, 43932], "mapped", [5068]],
	[[43933, 43933], "mapped", [5069]],
	[[43934, 43934], "mapped", [5070]],
	[[43935, 43935], "mapped", [5071]],
	[[43936, 43936], "mapped", [5072]],
	[[43937, 43937], "mapped", [5073]],
	[[43938, 43938], "mapped", [5074]],
	[[43939, 43939], "mapped", [5075]],
	[[43940, 43940], "mapped", [5076]],
	[[43941, 43941], "mapped", [5077]],
	[[43942, 43942], "mapped", [5078]],
	[[43943, 43943], "mapped", [5079]],
	[[43944, 43944], "mapped", [5080]],
	[[43945, 43945], "mapped", [5081]],
	[[43946, 43946], "mapped", [5082]],
	[[43947, 43947], "mapped", [5083]],
	[[43948, 43948], "mapped", [5084]],
	[[43949, 43949], "mapped", [5085]],
	[[43950, 43950], "mapped", [5086]],
	[[43951, 43951], "mapped", [5087]],
	[[43952, 43952], "mapped", [5088]],
	[[43953, 43953], "mapped", [5089]],
	[[43954, 43954], "mapped", [5090]],
	[[43955, 43955], "mapped", [5091]],
	[[43956, 43956], "mapped", [5092]],
	[[43957, 43957], "mapped", [5093]],
	[[43958, 43958], "mapped", [5094]],
	[[43959, 43959], "mapped", [5095]],
	[[43960, 43960], "mapped", [5096]],
	[[43961, 43961], "mapped", [5097]],
	[[43962, 43962], "mapped", [5098]],
	[[43963, 43963], "mapped", [5099]],
	[[43964, 43964], "mapped", [5100]],
	[[43965, 43965], "mapped", [5101]],
	[[43966, 43966], "mapped", [5102]],
	[[43967, 43967], "mapped", [5103]],
	[[43968, 44010], "valid"],
	[[44011, 44011], "valid", [], "NV8"],
	[[44012, 44013], "valid"],
	[[44014, 44015], "disallowed"],
	[[44016, 44025], "valid"],
	[[44026, 44031], "disallowed"],
	[[44032, 55203], "valid"],
	[[55204, 55215], "disallowed"],
	[[55216, 55238], "valid", [], "NV8"],
	[[55239, 55242], "disallowed"],
	[[55243, 55291], "valid", [], "NV8"],
	[[55292, 55295], "disallowed"],
	[[55296, 57343], "disallowed"],
	[[57344, 63743], "disallowed"],
	[[63744, 63744], "mapped", [35912]],
	[[63745, 63745], "mapped", [26356]],
	[[63746, 63746], "mapped", [36554]],
	[[63747, 63747], "mapped", [36040]],
	[[63748, 63748], "mapped", [28369]],
	[[63749, 63749], "mapped", [20018]],
	[[63750, 63750], "mapped", [21477]],
	[[63751, 63752], "mapped", [40860]],
	[[63753, 63753], "mapped", [22865]],
	[[63754, 63754], "mapped", [37329]],
	[[63755, 63755], "mapped", [21895]],
	[[63756, 63756], "mapped", [22856]],
	[[63757, 63757], "mapped", [25078]],
	[[63758, 63758], "mapped", [30313]],
	[[63759, 63759], "mapped", [32645]],
	[[63760, 63760], "mapped", [34367]],
	[[63761, 63761], "mapped", [34746]],
	[[63762, 63762], "mapped", [35064]],
	[[63763, 63763], "mapped", [37007]],
	[[63764, 63764], "mapped", [27138]],
	[[63765, 63765], "mapped", [27931]],
	[[63766, 63766], "mapped", [28889]],
	[[63767, 63767], "mapped", [29662]],
	[[63768, 63768], "mapped", [33853]],
	[[63769, 63769], "mapped", [37226]],
	[[63770, 63770], "mapped", [39409]],
	[[63771, 63771], "mapped", [20098]],
	[[63772, 63772], "mapped", [21365]],
	[[63773, 63773], "mapped", [27396]],
	[[63774, 63774], "mapped", [29211]],
	[[63775, 63775], "mapped", [34349]],
	[[63776, 63776], "mapped", [40478]],
	[[63777, 63777], "mapped", [23888]],
	[[63778, 63778], "mapped", [28651]],
	[[63779, 63779], "mapped", [34253]],
	[[63780, 63780], "mapped", [35172]],
	[[63781, 63781], "mapped", [25289]],
	[[63782, 63782], "mapped", [33240]],
	[[63783, 63783], "mapped", [34847]],
	[[63784, 63784], "mapped", [24266]],
	[[63785, 63785], "mapped", [26391]],
	[[63786, 63786], "mapped", [28010]],
	[[63787, 63787], "mapped", [29436]],
	[[63788, 63788], "mapped", [37070]],
	[[63789, 63789], "mapped", [20358]],
	[[63790, 63790], "mapped", [20919]],
	[[63791, 63791], "mapped", [21214]],
	[[63792, 63792], "mapped", [25796]],
	[[63793, 63793], "mapped", [27347]],
	[[63794, 63794], "mapped", [29200]],
	[[63795, 63795], "mapped", [30439]],
	[[63796, 63796], "mapped", [32769]],
	[[63797, 63797], "mapped", [34310]],
	[[63798, 63798], "mapped", [34396]],
	[[63799, 63799], "mapped", [36335]],
	[[63800, 63800], "mapped", [38706]],
	[[63801, 63801], "mapped", [39791]],
	[[63802, 63802], "mapped", [40442]],
	[[63803, 63803], "mapped", [30860]],
	[[63804, 63804], "mapped", [31103]],
	[[63805, 63805], "mapped", [32160]],
	[[63806, 63806], "mapped", [33737]],
	[[63807, 63807], "mapped", [37636]],
	[[63808, 63808], "mapped", [40575]],
	[[63809, 63809], "mapped", [35542]],
	[[63810, 63810], "mapped", [22751]],
	[[63811, 63811], "mapped", [24324]],
	[[63812, 63812], "mapped", [31840]],
	[[63813, 63813], "mapped", [32894]],
	[[63814, 63814], "mapped", [29282]],
	[[63815, 63815], "mapped", [30922]],
	[[63816, 63816], "mapped", [36034]],
	[[63817, 63817], "mapped", [38647]],
	[[63818, 63818], "mapped", [22744]],
	[[63819, 63819], "mapped", [23650]],
	[[63820, 63820], "mapped", [27155]],
	[[63821, 63821], "mapped", [28122]],
	[[63822, 63822], "mapped", [28431]],
	[[63823, 63823], "mapped", [32047]],
	[[63824, 63824], "mapped", [32311]],
	[[63825, 63825], "mapped", [38475]],
	[[63826, 63826], "mapped", [21202]],
	[[63827, 63827], "mapped", [32907]],
	[[63828, 63828], "mapped", [20956]],
	[[63829, 63829], "mapped", [20940]],
	[[63830, 63830], "mapped", [31260]],
	[[63831, 63831], "mapped", [32190]],
	[[63832, 63832], "mapped", [33777]],
	[[63833, 63833], "mapped", [38517]],
	[[63834, 63834], "mapped", [35712]],
	[[63835, 63835], "mapped", [25295]],
	[[63836, 63836], "mapped", [27138]],
	[[63837, 63837], "mapped", [35582]],
	[[63838, 63838], "mapped", [20025]],
	[[63839, 63839], "mapped", [23527]],
	[[63840, 63840], "mapped", [24594]],
	[[63841, 63841], "mapped", [29575]],
	[[63842, 63842], "mapped", [30064]],
	[[63843, 63843], "mapped", [21271]],
	[[63844, 63844], "mapped", [30971]],
	[[63845, 63845], "mapped", [20415]],
	[[63846, 63846], "mapped", [24489]],
	[[63847, 63847], "mapped", [19981]],
	[[63848, 63848], "mapped", [27852]],
	[[63849, 63849], "mapped", [25976]],
	[[63850, 63850], "mapped", [32034]],
	[[63851, 63851], "mapped", [21443]],
	[[63852, 63852], "mapped", [22622]],
	[[63853, 63853], "mapped", [30465]],
	[[63854, 63854], "mapped", [33865]],
	[[63855, 63855], "mapped", [35498]],
	[[63856, 63856], "mapped", [27578]],
	[[63857, 63857], "mapped", [36784]],
	[[63858, 63858], "mapped", [27784]],
	[[63859, 63859], "mapped", [25342]],
	[[63860, 63860], "mapped", [33509]],
	[[63861, 63861], "mapped", [25504]],
	[[63862, 63862], "mapped", [30053]],
	[[63863, 63863], "mapped", [20142]],
	[[63864, 63864], "mapped", [20841]],
	[[63865, 63865], "mapped", [20937]],
	[[63866, 63866], "mapped", [26753]],
	[[63867, 63867], "mapped", [31975]],
	[[63868, 63868], "mapped", [33391]],
	[[63869, 63869], "mapped", [35538]],
	[[63870, 63870], "mapped", [37327]],
	[[63871, 63871], "mapped", [21237]],
	[[63872, 63872], "mapped", [21570]],
	[[63873, 63873], "mapped", [22899]],
	[[63874, 63874], "mapped", [24300]],
	[[63875, 63875], "mapped", [26053]],
	[[63876, 63876], "mapped", [28670]],
	[[63877, 63877], "mapped", [31018]],
	[[63878, 63878], "mapped", [38317]],
	[[63879, 63879], "mapped", [39530]],
	[[63880, 63880], "mapped", [40599]],
	[[63881, 63881], "mapped", [40654]],
	[[63882, 63882], "mapped", [21147]],
	[[63883, 63883], "mapped", [26310]],
	[[63884, 63884], "mapped", [27511]],
	[[63885, 63885], "mapped", [36706]],
	[[63886, 63886], "mapped", [24180]],
	[[63887, 63887], "mapped", [24976]],
	[[63888, 63888], "mapped", [25088]],
	[[63889, 63889], "mapped", [25754]],
	[[63890, 63890], "mapped", [28451]],
	[[63891, 63891], "mapped", [29001]],
	[[63892, 63892], "mapped", [29833]],
	[[63893, 63893], "mapped", [31178]],
	[[63894, 63894], "mapped", [32244]],
	[[63895, 63895], "mapped", [32879]],
	[[63896, 63896], "mapped", [36646]],
	[[63897, 63897], "mapped", [34030]],
	[[63898, 63898], "mapped", [36899]],
	[[63899, 63899], "mapped", [37706]],
	[[63900, 63900], "mapped", [21015]],
	[[63901, 63901], "mapped", [21155]],
	[[63902, 63902], "mapped", [21693]],
	[[63903, 63903], "mapped", [28872]],
	[[63904, 63904], "mapped", [35010]],
	[[63905, 63905], "mapped", [35498]],
	[[63906, 63906], "mapped", [24265]],
	[[63907, 63907], "mapped", [24565]],
	[[63908, 63908], "mapped", [25467]],
	[[63909, 63909], "mapped", [27566]],
	[[63910, 63910], "mapped", [31806]],
	[[63911, 63911], "mapped", [29557]],
	[[63912, 63912], "mapped", [20196]],
	[[63913, 63913], "mapped", [22265]],
	[[63914, 63914], "mapped", [23527]],
	[[63915, 63915], "mapped", [23994]],
	[[63916, 63916], "mapped", [24604]],
	[[63917, 63917], "mapped", [29618]],
	[[63918, 63918], "mapped", [29801]],
	[[63919, 63919], "mapped", [32666]],
	[[63920, 63920], "mapped", [32838]],
	[[63921, 63921], "mapped", [37428]],
	[[63922, 63922], "mapped", [38646]],
	[[63923, 63923], "mapped", [38728]],
	[[63924, 63924], "mapped", [38936]],
	[[63925, 63925], "mapped", [20363]],
	[[63926, 63926], "mapped", [31150]],
	[[63927, 63927], "mapped", [37300]],
	[[63928, 63928], "mapped", [38584]],
	[[63929, 63929], "mapped", [24801]],
	[[63930, 63930], "mapped", [20102]],
	[[63931, 63931], "mapped", [20698]],
	[[63932, 63932], "mapped", [23534]],
	[[63933, 63933], "mapped", [23615]],
	[[63934, 63934], "mapped", [26009]],
	[[63935, 63935], "mapped", [27138]],
	[[63936, 63936], "mapped", [29134]],
	[[63937, 63937], "mapped", [30274]],
	[[63938, 63938], "mapped", [34044]],
	[[63939, 63939], "mapped", [36988]],
	[[63940, 63940], "mapped", [40845]],
	[[63941, 63941], "mapped", [26248]],
	[[63942, 63942], "mapped", [38446]],
	[[63943, 63943], "mapped", [21129]],
	[[63944, 63944], "mapped", [26491]],
	[[63945, 63945], "mapped", [26611]],
	[[63946, 63946], "mapped", [27969]],
	[[63947, 63947], "mapped", [28316]],
	[[63948, 63948], "mapped", [29705]],
	[[63949, 63949], "mapped", [30041]],
	[[63950, 63950], "mapped", [30827]],
	[[63951, 63951], "mapped", [32016]],
	[[63952, 63952], "mapped", [39006]],
	[[63953, 63953], "mapped", [20845]],
	[[63954, 63954], "mapped", [25134]],
	[[63955, 63955], "mapped", [38520]],
	[[63956, 63956], "mapped", [20523]],
	[[63957, 63957], "mapped", [23833]],
	[[63958, 63958], "mapped", [28138]],
	[[63959, 63959], "mapped", [36650]],
	[[63960, 63960], "mapped", [24459]],
	[[63961, 63961], "mapped", [24900]],
	[[63962, 63962], "mapped", [26647]],
	[[63963, 63963], "mapped", [29575]],
	[[63964, 63964], "mapped", [38534]],
	[[63965, 63965], "mapped", [21033]],
	[[63966, 63966], "mapped", [21519]],
	[[63967, 63967], "mapped", [23653]],
	[[63968, 63968], "mapped", [26131]],
	[[63969, 63969], "mapped", [26446]],
	[[63970, 63970], "mapped", [26792]],
	[[63971, 63971], "mapped", [27877]],
	[[63972, 63972], "mapped", [29702]],
	[[63973, 63973], "mapped", [30178]],
	[[63974, 63974], "mapped", [32633]],
	[[63975, 63975], "mapped", [35023]],
	[[63976, 63976], "mapped", [35041]],
	[[63977, 63977], "mapped", [37324]],
	[[63978, 63978], "mapped", [38626]],
	[[63979, 63979], "mapped", [21311]],
	[[63980, 63980], "mapped", [28346]],
	[[63981, 63981], "mapped", [21533]],
	[[63982, 63982], "mapped", [29136]],
	[[63983, 63983], "mapped", [29848]],
	[[63984, 63984], "mapped", [34298]],
	[[63985, 63985], "mapped", [38563]],
	[[63986, 63986], "mapped", [40023]],
	[[63987, 63987], "mapped", [40607]],
	[[63988, 63988], "mapped", [26519]],
	[[63989, 63989], "mapped", [28107]],
	[[63990, 63990], "mapped", [33256]],
	[[63991, 63991], "mapped", [31435]],
	[[63992, 63992], "mapped", [31520]],
	[[63993, 63993], "mapped", [31890]],
	[[63994, 63994], "mapped", [29376]],
	[[63995, 63995], "mapped", [28825]],
	[[63996, 63996], "mapped", [35672]],
	[[63997, 63997], "mapped", [20160]],
	[[63998, 63998], "mapped", [33590]],
	[[63999, 63999], "mapped", [21050]],
	[[64000, 64000], "mapped", [20999]],
	[[64001, 64001], "mapped", [24230]],
	[[64002, 64002], "mapped", [25299]],
	[[64003, 64003], "mapped", [31958]],
	[[64004, 64004], "mapped", [23429]],
	[[64005, 64005], "mapped", [27934]],
	[[64006, 64006], "mapped", [26292]],
	[[64007, 64007], "mapped", [36667]],
	[[64008, 64008], "mapped", [34892]],
	[[64009, 64009], "mapped", [38477]],
	[[64010, 64010], "mapped", [35211]],
	[[64011, 64011], "mapped", [24275]],
	[[64012, 64012], "mapped", [20800]],
	[[64013, 64013], "mapped", [21952]],
	[[64014, 64015], "valid"],
	[[64016, 64016], "mapped", [22618]],
	[[64017, 64017], "valid"],
	[[64018, 64018], "mapped", [26228]],
	[[64019, 64020], "valid"],
	[[64021, 64021], "mapped", [20958]],
	[[64022, 64022], "mapped", [29482]],
	[[64023, 64023], "mapped", [30410]],
	[[64024, 64024], "mapped", [31036]],
	[[64025, 64025], "mapped", [31070]],
	[[64026, 64026], "mapped", [31077]],
	[[64027, 64027], "mapped", [31119]],
	[[64028, 64028], "mapped", [38742]],
	[[64029, 64029], "mapped", [31934]],
	[[64030, 64030], "mapped", [32701]],
	[[64031, 64031], "valid"],
	[[64032, 64032], "mapped", [34322]],
	[[64033, 64033], "valid"],
	[[64034, 64034], "mapped", [35576]],
	[[64035, 64036], "valid"],
	[[64037, 64037], "mapped", [36920]],
	[[64038, 64038], "mapped", [37117]],
	[[64039, 64041], "valid"],
	[[64042, 64042], "mapped", [39151]],
	[[64043, 64043], "mapped", [39164]],
	[[64044, 64044], "mapped", [39208]],
	[[64045, 64045], "mapped", [40372]],
	[[64046, 64046], "mapped", [37086]],
	[[64047, 64047], "mapped", [38583]],
	[[64048, 64048], "mapped", [20398]],
	[[64049, 64049], "mapped", [20711]],
	[[64050, 64050], "mapped", [20813]],
	[[64051, 64051], "mapped", [21193]],
	[[64052, 64052], "mapped", [21220]],
	[[64053, 64053], "mapped", [21329]],
	[[64054, 64054], "mapped", [21917]],
	[[64055, 64055], "mapped", [22022]],
	[[64056, 64056], "mapped", [22120]],
	[[64057, 64057], "mapped", [22592]],
	[[64058, 64058], "mapped", [22696]],
	[[64059, 64059], "mapped", [23652]],
	[[64060, 64060], "mapped", [23662]],
	[[64061, 64061], "mapped", [24724]],
	[[64062, 64062], "mapped", [24936]],
	[[64063, 64063], "mapped", [24974]],
	[[64064, 64064], "mapped", [25074]],
	[[64065, 64065], "mapped", [25935]],
	[[64066, 64066], "mapped", [26082]],
	[[64067, 64067], "mapped", [26257]],
	[[64068, 64068], "mapped", [26757]],
	[[64069, 64069], "mapped", [28023]],
	[[64070, 64070], "mapped", [28186]],
	[[64071, 64071], "mapped", [28450]],
	[[64072, 64072], "mapped", [29038]],
	[[64073, 64073], "mapped", [29227]],
	[[64074, 64074], "mapped", [29730]],
	[[64075, 64075], "mapped", [30865]],
	[[64076, 64076], "mapped", [31038]],
	[[64077, 64077], "mapped", [31049]],
	[[64078, 64078], "mapped", [31048]],
	[[64079, 64079], "mapped", [31056]],
	[[64080, 64080], "mapped", [31062]],
	[[64081, 64081], "mapped", [31069]],
	[[64082, 64082], "mapped", [31117]],
	[[64083, 64083], "mapped", [31118]],
	[[64084, 64084], "mapped", [31296]],
	[[64085, 64085], "mapped", [31361]],
	[[64086, 64086], "mapped", [31680]],
	[[64087, 64087], "mapped", [32244]],
	[[64088, 64088], "mapped", [32265]],
	[[64089, 64089], "mapped", [32321]],
	[[64090, 64090], "mapped", [32626]],
	[[64091, 64091], "mapped", [32773]],
	[[64092, 64092], "mapped", [33261]],
	[[64093, 64094], "mapped", [33401]],
	[[64095, 64095], "mapped", [33879]],
	[[64096, 64096], "mapped", [35088]],
	[[64097, 64097], "mapped", [35222]],
	[[64098, 64098], "mapped", [35585]],
	[[64099, 64099], "mapped", [35641]],
	[[64100, 64100], "mapped", [36051]],
	[[64101, 64101], "mapped", [36104]],
	[[64102, 64102], "mapped", [36790]],
	[[64103, 64103], "mapped", [36920]],
	[[64104, 64104], "mapped", [38627]],
	[[64105, 64105], "mapped", [38911]],
	[[64106, 64106], "mapped", [38971]],
	[[64107, 64107], "mapped", [24693]],
	[[64108, 64108], "mapped", [148206]],
	[[64109, 64109], "mapped", [33304]],
	[[64110, 64111], "disallowed"],
	[[64112, 64112], "mapped", [20006]],
	[[64113, 64113], "mapped", [20917]],
	[[64114, 64114], "mapped", [20840]],
	[[64115, 64115], "mapped", [20352]],
	[[64116, 64116], "mapped", [20805]],
	[[64117, 64117], "mapped", [20864]],
	[[64118, 64118], "mapped", [21191]],
	[[64119, 64119], "mapped", [21242]],
	[[64120, 64120], "mapped", [21917]],
	[[64121, 64121], "mapped", [21845]],
	[[64122, 64122], "mapped", [21913]],
	[[64123, 64123], "mapped", [21986]],
	[[64124, 64124], "mapped", [22618]],
	[[64125, 64125], "mapped", [22707]],
	[[64126, 64126], "mapped", [22852]],
	[[64127, 64127], "mapped", [22868]],
	[[64128, 64128], "mapped", [23138]],
	[[64129, 64129], "mapped", [23336]],
	[[64130, 64130], "mapped", [24274]],
	[[64131, 64131], "mapped", [24281]],
	[[64132, 64132], "mapped", [24425]],
	[[64133, 64133], "mapped", [24493]],
	[[64134, 64134], "mapped", [24792]],
	[[64135, 64135], "mapped", [24910]],
	[[64136, 64136], "mapped", [24840]],
	[[64137, 64137], "mapped", [24974]],
	[[64138, 64138], "mapped", [24928]],
	[[64139, 64139], "mapped", [25074]],
	[[64140, 64140], "mapped", [25140]],
	[[64141, 64141], "mapped", [25540]],
	[[64142, 64142], "mapped", [25628]],
	[[64143, 64143], "mapped", [25682]],
	[[64144, 64144], "mapped", [25942]],
	[[64145, 64145], "mapped", [26228]],
	[[64146, 64146], "mapped", [26391]],
	[[64147, 64147], "mapped", [26395]],
	[[64148, 64148], "mapped", [26454]],
	[[64149, 64149], "mapped", [27513]],
	[[64150, 64150], "mapped", [27578]],
	[[64151, 64151], "mapped", [27969]],
	[[64152, 64152], "mapped", [28379]],
	[[64153, 64153], "mapped", [28363]],
	[[64154, 64154], "mapped", [28450]],
	[[64155, 64155], "mapped", [28702]],
	[[64156, 64156], "mapped", [29038]],
	[[64157, 64157], "mapped", [30631]],
	[[64158, 64158], "mapped", [29237]],
	[[64159, 64159], "mapped", [29359]],
	[[64160, 64160], "mapped", [29482]],
	[[64161, 64161], "mapped", [29809]],
	[[64162, 64162], "mapped", [29958]],
	[[64163, 64163], "mapped", [30011]],
	[[64164, 64164], "mapped", [30237]],
	[[64165, 64165], "mapped", [30239]],
	[[64166, 64166], "mapped", [30410]],
	[[64167, 64167], "mapped", [30427]],
	[[64168, 64168], "mapped", [30452]],
	[[64169, 64169], "mapped", [30538]],
	[[64170, 64170], "mapped", [30528]],
	[[64171, 64171], "mapped", [30924]],
	[[64172, 64172], "mapped", [31409]],
	[[64173, 64173], "mapped", [31680]],
	[[64174, 64174], "mapped", [31867]],
	[[64175, 64175], "mapped", [32091]],
	[[64176, 64176], "mapped", [32244]],
	[[64177, 64177], "mapped", [32574]],
	[[64178, 64178], "mapped", [32773]],
	[[64179, 64179], "mapped", [33618]],
	[[64180, 64180], "mapped", [33775]],
	[[64181, 64181], "mapped", [34681]],
	[[64182, 64182], "mapped", [35137]],
	[[64183, 64183], "mapped", [35206]],
	[[64184, 64184], "mapped", [35222]],
	[[64185, 64185], "mapped", [35519]],
	[[64186, 64186], "mapped", [35576]],
	[[64187, 64187], "mapped", [35531]],
	[[64188, 64188], "mapped", [35585]],
	[[64189, 64189], "mapped", [35582]],
	[[64190, 64190], "mapped", [35565]],
	[[64191, 64191], "mapped", [35641]],
	[[64192, 64192], "mapped", [35722]],
	[[64193, 64193], "mapped", [36104]],
	[[64194, 64194], "mapped", [36664]],
	[[64195, 64195], "mapped", [36978]],
	[[64196, 64196], "mapped", [37273]],
	[[64197, 64197], "mapped", [37494]],
	[[64198, 64198], "mapped", [38524]],
	[[64199, 64199], "mapped", [38627]],
	[[64200, 64200], "mapped", [38742]],
	[[64201, 64201], "mapped", [38875]],
	[[64202, 64202], "mapped", [38911]],
	[[64203, 64203], "mapped", [38923]],
	[[64204, 64204], "mapped", [38971]],
	[[64205, 64205], "mapped", [39698]],
	[[64206, 64206], "mapped", [40860]],
	[[64207, 64207], "mapped", [141386]],
	[[64208, 64208], "mapped", [141380]],
	[[64209, 64209], "mapped", [144341]],
	[[64210, 64210], "mapped", [15261]],
	[[64211, 64211], "mapped", [16408]],
	[[64212, 64212], "mapped", [16441]],
	[[64213, 64213], "mapped", [152137]],
	[[64214, 64214], "mapped", [154832]],
	[[64215, 64215], "mapped", [163539]],
	[[64216, 64216], "mapped", [40771]],
	[[64217, 64217], "mapped", [40846]],
	[[64218, 64255], "disallowed"],
	[[64256, 64256], "mapped", [102, 102]],
	[[64257, 64257], "mapped", [102, 105]],
	[[64258, 64258], "mapped", [102, 108]],
	[[64259, 64259], "mapped", [102, 102, 105]],
	[[64260, 64260], "mapped", [102, 102, 108]],
	[[64261, 64262], "mapped", [115, 116]],
	[[64263, 64274], "disallowed"],
	[[64275, 64275], "mapped", [1396, 1398]],
	[[64276, 64276], "mapped", [1396, 1381]],
	[[64277, 64277], "mapped", [1396, 1387]],
	[[64278, 64278], "mapped", [1406, 1398]],
	[[64279, 64279], "mapped", [1396, 1389]],
	[[64280, 64284], "disallowed"],
	[[64285, 64285], "mapped", [1497, 1460]],
	[[64286, 64286], "valid"],
	[[64287, 64287], "mapped", [1522, 1463]],
	[[64288, 64288], "mapped", [1506]],
	[[64289, 64289], "mapped", [1488]],
	[[64290, 64290], "mapped", [1491]],
	[[64291, 64291], "mapped", [1492]],
	[[64292, 64292], "mapped", [1499]],
	[[64293, 64293], "mapped", [1500]],
	[[64294, 64294], "mapped", [1501]],
	[[64295, 64295], "mapped", [1512]],
	[[64296, 64296], "mapped", [1514]],
	[[64297, 64297], "disallowed_STD3_mapped", [43]],
	[[64298, 64298], "mapped", [1513, 1473]],
	[[64299, 64299], "mapped", [1513, 1474]],
	[[64300, 64300], "mapped", [1513, 1468, 1473]],
	[[64301, 64301], "mapped", [1513, 1468, 1474]],
	[[64302, 64302], "mapped", [1488, 1463]],
	[[64303, 64303], "mapped", [1488, 1464]],
	[[64304, 64304], "mapped", [1488, 1468]],
	[[64305, 64305], "mapped", [1489, 1468]],
	[[64306, 64306], "mapped", [1490, 1468]],
	[[64307, 64307], "mapped", [1491, 1468]],
	[[64308, 64308], "mapped", [1492, 1468]],
	[[64309, 64309], "mapped", [1493, 1468]],
	[[64310, 64310], "mapped", [1494, 1468]],
	[[64311, 64311], "disallowed"],
	[[64312, 64312], "mapped", [1496, 1468]],
	[[64313, 64313], "mapped", [1497, 1468]],
	[[64314, 64314], "mapped", [1498, 1468]],
	[[64315, 64315], "mapped", [1499, 1468]],
	[[64316, 64316], "mapped", [1500, 1468]],
	[[64317, 64317], "disallowed"],
	[[64318, 64318], "mapped", [1502, 1468]],
	[[64319, 64319], "disallowed"],
	[[64320, 64320], "mapped", [1504, 1468]],
	[[64321, 64321], "mapped", [1505, 1468]],
	[[64322, 64322], "disallowed"],
	[[64323, 64323], "mapped", [1507, 1468]],
	[[64324, 64324], "mapped", [1508, 1468]],
	[[64325, 64325], "disallowed"],
	[[64326, 64326], "mapped", [1510, 1468]],
	[[64327, 64327], "mapped", [1511, 1468]],
	[[64328, 64328], "mapped", [1512, 1468]],
	[[64329, 64329], "mapped", [1513, 1468]],
	[[64330, 64330], "mapped", [1514, 1468]],
	[[64331, 64331], "mapped", [1493, 1465]],
	[[64332, 64332], "mapped", [1489, 1471]],
	[[64333, 64333], "mapped", [1499, 1471]],
	[[64334, 64334], "mapped", [1508, 1471]],
	[[64335, 64335], "mapped", [1488, 1500]],
	[[64336, 64337], "mapped", [1649]],
	[[64338, 64341], "mapped", [1659]],
	[[64342, 64345], "mapped", [1662]],
	[[64346, 64349], "mapped", [1664]],
	[[64350, 64353], "mapped", [1658]],
	[[64354, 64357], "mapped", [1663]],
	[[64358, 64361], "mapped", [1657]],
	[[64362, 64365], "mapped", [1700]],
	[[64366, 64369], "mapped", [1702]],
	[[64370, 64373], "mapped", [1668]],
	[[64374, 64377], "mapped", [1667]],
	[[64378, 64381], "mapped", [1670]],
	[[64382, 64385], "mapped", [1671]],
	[[64386, 64387], "mapped", [1677]],
	[[64388, 64389], "mapped", [1676]],
	[[64390, 64391], "mapped", [1678]],
	[[64392, 64393], "mapped", [1672]],
	[[64394, 64395], "mapped", [1688]],
	[[64396, 64397], "mapped", [1681]],
	[[64398, 64401], "mapped", [1705]],
	[[64402, 64405], "mapped", [1711]],
	[[64406, 64409], "mapped", [1715]],
	[[64410, 64413], "mapped", [1713]],
	[[64414, 64415], "mapped", [1722]],
	[[64416, 64419], "mapped", [1723]],
	[[64420, 64421], "mapped", [1728]],
	[[64422, 64425], "mapped", [1729]],
	[[64426, 64429], "mapped", [1726]],
	[[64430, 64431], "mapped", [1746]],
	[[64432, 64433], "mapped", [1747]],
	[[64434, 64449], "valid", [], "NV8"],
	[[64450, 64466], "disallowed"],
	[[64467, 64470], "mapped", [1709]],
	[[64471, 64472], "mapped", [1735]],
	[[64473, 64474], "mapped", [1734]],
	[[64475, 64476], "mapped", [1736]],
	[[64477, 64477], "mapped", [1735, 1652]],
	[[64478, 64479], "mapped", [1739]],
	[[64480, 64481], "mapped", [1733]],
	[[64482, 64483], "mapped", [1737]],
	[[64484, 64487], "mapped", [1744]],
	[[64488, 64489], "mapped", [1609]],
	[[64490, 64491], "mapped", [1574, 1575]],
	[[64492, 64493], "mapped", [1574, 1749]],
	[[64494, 64495], "mapped", [1574, 1608]],
	[[64496, 64497], "mapped", [1574, 1735]],
	[[64498, 64499], "mapped", [1574, 1734]],
	[[64500, 64501], "mapped", [1574, 1736]],
	[[64502, 64504], "mapped", [1574, 1744]],
	[[64505, 64507], "mapped", [1574, 1609]],
	[[64508, 64511], "mapped", [1740]],
	[[64512, 64512], "mapped", [1574, 1580]],
	[[64513, 64513], "mapped", [1574, 1581]],
	[[64514, 64514], "mapped", [1574, 1605]],
	[[64515, 64515], "mapped", [1574, 1609]],
	[[64516, 64516], "mapped", [1574, 1610]],
	[[64517, 64517], "mapped", [1576, 1580]],
	[[64518, 64518], "mapped", [1576, 1581]],
	[[64519, 64519], "mapped", [1576, 1582]],
	[[64520, 64520], "mapped", [1576, 1605]],
	[[64521, 64521], "mapped", [1576, 1609]],
	[[64522, 64522], "mapped", [1576, 1610]],
	[[64523, 64523], "mapped", [1578, 1580]],
	[[64524, 64524], "mapped", [1578, 1581]],
	[[64525, 64525], "mapped", [1578, 1582]],
	[[64526, 64526], "mapped", [1578, 1605]],
	[[64527, 64527], "mapped", [1578, 1609]],
	[[64528, 64528], "mapped", [1578, 1610]],
	[[64529, 64529], "mapped", [1579, 1580]],
	[[64530, 64530], "mapped", [1579, 1605]],
	[[64531, 64531], "mapped", [1579, 1609]],
	[[64532, 64532], "mapped", [1579, 1610]],
	[[64533, 64533], "mapped", [1580, 1581]],
	[[64534, 64534], "mapped", [1580, 1605]],
	[[64535, 64535], "mapped", [1581, 1580]],
	[[64536, 64536], "mapped", [1581, 1605]],
	[[64537, 64537], "mapped", [1582, 1580]],
	[[64538, 64538], "mapped", [1582, 1581]],
	[[64539, 64539], "mapped", [1582, 1605]],
	[[64540, 64540], "mapped", [1587, 1580]],
	[[64541, 64541], "mapped", [1587, 1581]],
	[[64542, 64542], "mapped", [1587, 1582]],
	[[64543, 64543], "mapped", [1587, 1605]],
	[[64544, 64544], "mapped", [1589, 1581]],
	[[64545, 64545], "mapped", [1589, 1605]],
	[[64546, 64546], "mapped", [1590, 1580]],
	[[64547, 64547], "mapped", [1590, 1581]],
	[[64548, 64548], "mapped", [1590, 1582]],
	[[64549, 64549], "mapped", [1590, 1605]],
	[[64550, 64550], "mapped", [1591, 1581]],
	[[64551, 64551], "mapped", [1591, 1605]],
	[[64552, 64552], "mapped", [1592, 1605]],
	[[64553, 64553], "mapped", [1593, 1580]],
	[[64554, 64554], "mapped", [1593, 1605]],
	[[64555, 64555], "mapped", [1594, 1580]],
	[[64556, 64556], "mapped", [1594, 1605]],
	[[64557, 64557], "mapped", [1601, 1580]],
	[[64558, 64558], "mapped", [1601, 1581]],
	[[64559, 64559], "mapped", [1601, 1582]],
	[[64560, 64560], "mapped", [1601, 1605]],
	[[64561, 64561], "mapped", [1601, 1609]],
	[[64562, 64562], "mapped", [1601, 1610]],
	[[64563, 64563], "mapped", [1602, 1581]],
	[[64564, 64564], "mapped", [1602, 1605]],
	[[64565, 64565], "mapped", [1602, 1609]],
	[[64566, 64566], "mapped", [1602, 1610]],
	[[64567, 64567], "mapped", [1603, 1575]],
	[[64568, 64568], "mapped", [1603, 1580]],
	[[64569, 64569], "mapped", [1603, 1581]],
	[[64570, 64570], "mapped", [1603, 1582]],
	[[64571, 64571], "mapped", [1603, 1604]],
	[[64572, 64572], "mapped", [1603, 1605]],
	[[64573, 64573], "mapped", [1603, 1609]],
	[[64574, 64574], "mapped", [1603, 1610]],
	[[64575, 64575], "mapped", [1604, 1580]],
	[[64576, 64576], "mapped", [1604, 1581]],
	[[64577, 64577], "mapped", [1604, 1582]],
	[[64578, 64578], "mapped", [1604, 1605]],
	[[64579, 64579], "mapped", [1604, 1609]],
	[[64580, 64580], "mapped", [1604, 1610]],
	[[64581, 64581], "mapped", [1605, 1580]],
	[[64582, 64582], "mapped", [1605, 1581]],
	[[64583, 64583], "mapped", [1605, 1582]],
	[[64584, 64584], "mapped", [1605, 1605]],
	[[64585, 64585], "mapped", [1605, 1609]],
	[[64586, 64586], "mapped", [1605, 1610]],
	[[64587, 64587], "mapped", [1606, 1580]],
	[[64588, 64588], "mapped", [1606, 1581]],
	[[64589, 64589], "mapped", [1606, 1582]],
	[[64590, 64590], "mapped", [1606, 1605]],
	[[64591, 64591], "mapped", [1606, 1609]],
	[[64592, 64592], "mapped", [1606, 1610]],
	[[64593, 64593], "mapped", [1607, 1580]],
	[[64594, 64594], "mapped", [1607, 1605]],
	[[64595, 64595], "mapped", [1607, 1609]],
	[[64596, 64596], "mapped", [1607, 1610]],
	[[64597, 64597], "mapped", [1610, 1580]],
	[[64598, 64598], "mapped", [1610, 1581]],
	[[64599, 64599], "mapped", [1610, 1582]],
	[[64600, 64600], "mapped", [1610, 1605]],
	[[64601, 64601], "mapped", [1610, 1609]],
	[[64602, 64602], "mapped", [1610, 1610]],
	[[64603, 64603], "mapped", [1584, 1648]],
	[[64604, 64604], "mapped", [1585, 1648]],
	[[64605, 64605], "mapped", [1609, 1648]],
	[[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]],
	[[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]],
	[[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]],
	[[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]],
	[[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]],
	[[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]],
	[[64612, 64612], "mapped", [1574, 1585]],
	[[64613, 64613], "mapped", [1574, 1586]],
	[[64614, 64614], "mapped", [1574, 1605]],
	[[64615, 64615], "mapped", [1574, 1606]],
	[[64616, 64616], "mapped", [1574, 1609]],
	[[64617, 64617], "mapped", [1574, 1610]],
	[[64618, 64618], "mapped", [1576, 1585]],
	[[64619, 64619], "mapped", [1576, 1586]],
	[[64620, 64620], "mapped", [1576, 1605]],
	[[64621, 64621], "mapped", [1576, 1606]],
	[[64622, 64622], "mapped", [1576, 1609]],
	[[64623, 64623], "mapped", [1576, 1610]],
	[[64624, 64624], "mapped", [1578, 1585]],
	[[64625, 64625], "mapped", [1578, 1586]],
	[[64626, 64626], "mapped", [1578, 1605]],
	[[64627, 64627], "mapped", [1578, 1606]],
	[[64628, 64628], "mapped", [1578, 1609]],
	[[64629, 64629], "mapped", [1578, 1610]],
	[[64630, 64630], "mapped", [1579, 1585]],
	[[64631, 64631], "mapped", [1579, 1586]],
	[[64632, 64632], "mapped", [1579, 1605]],
	[[64633, 64633], "mapped", [1579, 1606]],
	[[64634, 64634], "mapped", [1579, 1609]],
	[[64635, 64635], "mapped", [1579, 1610]],
	[[64636, 64636], "mapped", [1601, 1609]],
	[[64637, 64637], "mapped", [1601, 1610]],
	[[64638, 64638], "mapped", [1602, 1609]],
	[[64639, 64639], "mapped", [1602, 1610]],
	[[64640, 64640], "mapped", [1603, 1575]],
	[[64641, 64641], "mapped", [1603, 1604]],
	[[64642, 64642], "mapped", [1603, 1605]],
	[[64643, 64643], "mapped", [1603, 1609]],
	[[64644, 64644], "mapped", [1603, 1610]],
	[[64645, 64645], "mapped", [1604, 1605]],
	[[64646, 64646], "mapped", [1604, 1609]],
	[[64647, 64647], "mapped", [1604, 1610]],
	[[64648, 64648], "mapped", [1605, 1575]],
	[[64649, 64649], "mapped", [1605, 1605]],
	[[64650, 64650], "mapped", [1606, 1585]],
	[[64651, 64651], "mapped", [1606, 1586]],
	[[64652, 64652], "mapped", [1606, 1605]],
	[[64653, 64653], "mapped", [1606, 1606]],
	[[64654, 64654], "mapped", [1606, 1609]],
	[[64655, 64655], "mapped", [1606, 1610]],
	[[64656, 64656], "mapped", [1609, 1648]],
	[[64657, 64657], "mapped", [1610, 1585]],
	[[64658, 64658], "mapped", [1610, 1586]],
	[[64659, 64659], "mapped", [1610, 1605]],
	[[64660, 64660], "mapped", [1610, 1606]],
	[[64661, 64661], "mapped", [1610, 1609]],
	[[64662, 64662], "mapped", [1610, 1610]],
	[[64663, 64663], "mapped", [1574, 1580]],
	[[64664, 64664], "mapped", [1574, 1581]],
	[[64665, 64665], "mapped", [1574, 1582]],
	[[64666, 64666], "mapped", [1574, 1605]],
	[[64667, 64667], "mapped", [1574, 1607]],
	[[64668, 64668], "mapped", [1576, 1580]],
	[[64669, 64669], "mapped", [1576, 1581]],
	[[64670, 64670], "mapped", [1576, 1582]],
	[[64671, 64671], "mapped", [1576, 1605]],
	[[64672, 64672], "mapped", [1576, 1607]],
	[[64673, 64673], "mapped", [1578, 1580]],
	[[64674, 64674], "mapped", [1578, 1581]],
	[[64675, 64675], "mapped", [1578, 1582]],
	[[64676, 64676], "mapped", [1578, 1605]],
	[[64677, 64677], "mapped", [1578, 1607]],
	[[64678, 64678], "mapped", [1579, 1605]],
	[[64679, 64679], "mapped", [1580, 1581]],
	[[64680, 64680], "mapped", [1580, 1605]],
	[[64681, 64681], "mapped", [1581, 1580]],
	[[64682, 64682], "mapped", [1581, 1605]],
	[[64683, 64683], "mapped", [1582, 1580]],
	[[64684, 64684], "mapped", [1582, 1605]],
	[[64685, 64685], "mapped", [1587, 1580]],
	[[64686, 64686], "mapped", [1587, 1581]],
	[[64687, 64687], "mapped", [1587, 1582]],
	[[64688, 64688], "mapped", [1587, 1605]],
	[[64689, 64689], "mapped", [1589, 1581]],
	[[64690, 64690], "mapped", [1589, 1582]],
	[[64691, 64691], "mapped", [1589, 1605]],
	[[64692, 64692], "mapped", [1590, 1580]],
	[[64693, 64693], "mapped", [1590, 1581]],
	[[64694, 64694], "mapped", [1590, 1582]],
	[[64695, 64695], "mapped", [1590, 1605]],
	[[64696, 64696], "mapped", [1591, 1581]],
	[[64697, 64697], "mapped", [1592, 1605]],
	[[64698, 64698], "mapped", [1593, 1580]],
	[[64699, 64699], "mapped", [1593, 1605]],
	[[64700, 64700], "mapped", [1594, 1580]],
	[[64701, 64701], "mapped", [1594, 1605]],
	[[64702, 64702], "mapped", [1601, 1580]],
	[[64703, 64703], "mapped", [1601, 1581]],
	[[64704, 64704], "mapped", [1601, 1582]],
	[[64705, 64705], "mapped", [1601, 1605]],
	[[64706, 64706], "mapped", [1602, 1581]],
	[[64707, 64707], "mapped", [1602, 1605]],
	[[64708, 64708], "mapped", [1603, 1580]],
	[[64709, 64709], "mapped", [1603, 1581]],
	[[64710, 64710], "mapped", [1603, 1582]],
	[[64711, 64711], "mapped", [1603, 1604]],
	[[64712, 64712], "mapped", [1603, 1605]],
	[[64713, 64713], "mapped", [1604, 1580]],
	[[64714, 64714], "mapped", [1604, 1581]],
	[[64715, 64715], "mapped", [1604, 1582]],
	[[64716, 64716], "mapped", [1604, 1605]],
	[[64717, 64717], "mapped", [1604, 1607]],
	[[64718, 64718], "mapped", [1605, 1580]],
	[[64719, 64719], "mapped", [1605, 1581]],
	[[64720, 64720], "mapped", [1605, 1582]],
	[[64721, 64721], "mapped", [1605, 1605]],
	[[64722, 64722], "mapped", [1606, 1580]],
	[[64723, 64723], "mapped", [1606, 1581]],
	[[64724, 64724], "mapped", [1606, 1582]],
	[[64725, 64725], "mapped", [1606, 1605]],
	[[64726, 64726], "mapped", [1606, 1607]],
	[[64727, 64727], "mapped", [1607, 1580]],
	[[64728, 64728], "mapped", [1607, 1605]],
	[[64729, 64729], "mapped", [1607, 1648]],
	[[64730, 64730], "mapped", [1610, 1580]],
	[[64731, 64731], "mapped", [1610, 1581]],
	[[64732, 64732], "mapped", [1610, 1582]],
	[[64733, 64733], "mapped", [1610, 1605]],
	[[64734, 64734], "mapped", [1610, 1607]],
	[[64735, 64735], "mapped", [1574, 1605]],
	[[64736, 64736], "mapped", [1574, 1607]],
	[[64737, 64737], "mapped", [1576, 1605]],
	[[64738, 64738], "mapped", [1576, 1607]],
	[[64739, 64739], "mapped", [1578, 1605]],
	[[64740, 64740], "mapped", [1578, 1607]],
	[[64741, 64741], "mapped", [1579, 1605]],
	[[64742, 64742], "mapped", [1579, 1607]],
	[[64743, 64743], "mapped", [1587, 1605]],
	[[64744, 64744], "mapped", [1587, 1607]],
	[[64745, 64745], "mapped", [1588, 1605]],
	[[64746, 64746], "mapped", [1588, 1607]],
	[[64747, 64747], "mapped", [1603, 1604]],
	[[64748, 64748], "mapped", [1603, 1605]],
	[[64749, 64749], "mapped", [1604, 1605]],
	[[64750, 64750], "mapped", [1606, 1605]],
	[[64751, 64751], "mapped", [1606, 1607]],
	[[64752, 64752], "mapped", [1610, 1605]],
	[[64753, 64753], "mapped", [1610, 1607]],
	[[64754, 64754], "mapped", [1600, 1614, 1617]],
	[[64755, 64755], "mapped", [1600, 1615, 1617]],
	[[64756, 64756], "mapped", [1600, 1616, 1617]],
	[[64757, 64757], "mapped", [1591, 1609]],
	[[64758, 64758], "mapped", [1591, 1610]],
	[[64759, 64759], "mapped", [1593, 1609]],
	[[64760, 64760], "mapped", [1593, 1610]],
	[[64761, 64761], "mapped", [1594, 1609]],
	[[64762, 64762], "mapped", [1594, 1610]],
	[[64763, 64763], "mapped", [1587, 1609]],
	[[64764, 64764], "mapped", [1587, 1610]],
	[[64765, 64765], "mapped", [1588, 1609]],
	[[64766, 64766], "mapped", [1588, 1610]],
	[[64767, 64767], "mapped", [1581, 1609]],
	[[64768, 64768], "mapped", [1581, 1610]],
	[[64769, 64769], "mapped", [1580, 1609]],
	[[64770, 64770], "mapped", [1580, 1610]],
	[[64771, 64771], "mapped", [1582, 1609]],
	[[64772, 64772], "mapped", [1582, 1610]],
	[[64773, 64773], "mapped", [1589, 1609]],
	[[64774, 64774], "mapped", [1589, 1610]],
	[[64775, 64775], "mapped", [1590, 1609]],
	[[64776, 64776], "mapped", [1590, 1610]],
	[[64777, 64777], "mapped", [1588, 1580]],
	[[64778, 64778], "mapped", [1588, 1581]],
	[[64779, 64779], "mapped", [1588, 1582]],
	[[64780, 64780], "mapped", [1588, 1605]],
	[[64781, 64781], "mapped", [1588, 1585]],
	[[64782, 64782], "mapped", [1587, 1585]],
	[[64783, 64783], "mapped", [1589, 1585]],
	[[64784, 64784], "mapped", [1590, 1585]],
	[[64785, 64785], "mapped", [1591, 1609]],
	[[64786, 64786], "mapped", [1591, 1610]],
	[[64787, 64787], "mapped", [1593, 1609]],
	[[64788, 64788], "mapped", [1593, 1610]],
	[[64789, 64789], "mapped", [1594, 1609]],
	[[64790, 64790], "mapped", [1594, 1610]],
	[[64791, 64791], "mapped", [1587, 1609]],
	[[64792, 64792], "mapped", [1587, 1610]],
	[[64793, 64793], "mapped", [1588, 1609]],
	[[64794, 64794], "mapped", [1588, 1610]],
	[[64795, 64795], "mapped", [1581, 1609]],
	[[64796, 64796], "mapped", [1581, 1610]],
	[[64797, 64797], "mapped", [1580, 1609]],
	[[64798, 64798], "mapped", [1580, 1610]],
	[[64799, 64799], "mapped", [1582, 1609]],
	[[64800, 64800], "mapped", [1582, 1610]],
	[[64801, 64801], "mapped", [1589, 1609]],
	[[64802, 64802], "mapped", [1589, 1610]],
	[[64803, 64803], "mapped", [1590, 1609]],
	[[64804, 64804], "mapped", [1590, 1610]],
	[[64805, 64805], "mapped", [1588, 1580]],
	[[64806, 64806], "mapped", [1588, 1581]],
	[[64807, 64807], "mapped", [1588, 1582]],
	[[64808, 64808], "mapped", [1588, 1605]],
	[[64809, 64809], "mapped", [1588, 1585]],
	[[64810, 64810], "mapped", [1587, 1585]],
	[[64811, 64811], "mapped", [1589, 1585]],
	[[64812, 64812], "mapped", [1590, 1585]],
	[[64813, 64813], "mapped", [1588, 1580]],
	[[64814, 64814], "mapped", [1588, 1581]],
	[[64815, 64815], "mapped", [1588, 1582]],
	[[64816, 64816], "mapped", [1588, 1605]],
	[[64817, 64817], "mapped", [1587, 1607]],
	[[64818, 64818], "mapped", [1588, 1607]],
	[[64819, 64819], "mapped", [1591, 1605]],
	[[64820, 64820], "mapped", [1587, 1580]],
	[[64821, 64821], "mapped", [1587, 1581]],
	[[64822, 64822], "mapped", [1587, 1582]],
	[[64823, 64823], "mapped", [1588, 1580]],
	[[64824, 64824], "mapped", [1588, 1581]],
	[[64825, 64825], "mapped", [1588, 1582]],
	[[64826, 64826], "mapped", [1591, 1605]],
	[[64827, 64827], "mapped", [1592, 1605]],
	[[64828, 64829], "mapped", [1575, 1611]],
	[[64830, 64831], "valid", [], "NV8"],
	[[64832, 64847], "disallowed"],
	[[64848, 64848], "mapped", [1578, 1580, 1605]],
	[[64849, 64850], "mapped", [1578, 1581, 1580]],
	[[64851, 64851], "mapped", [1578, 1581, 1605]],
	[[64852, 64852], "mapped", [1578, 1582, 1605]],
	[[64853, 64853], "mapped", [1578, 1605, 1580]],
	[[64854, 64854], "mapped", [1578, 1605, 1581]],
	[[64855, 64855], "mapped", [1578, 1605, 1582]],
	[[64856, 64857], "mapped", [1580, 1605, 1581]],
	[[64858, 64858], "mapped", [1581, 1605, 1610]],
	[[64859, 64859], "mapped", [1581, 1605, 1609]],
	[[64860, 64860], "mapped", [1587, 1581, 1580]],
	[[64861, 64861], "mapped", [1587, 1580, 1581]],
	[[64862, 64862], "mapped", [1587, 1580, 1609]],
	[[64863, 64864], "mapped", [1587, 1605, 1581]],
	[[64865, 64865], "mapped", [1587, 1605, 1580]],
	[[64866, 64867], "mapped", [1587, 1605, 1605]],
	[[64868, 64869], "mapped", [1589, 1581, 1581]],
	[[64870, 64870], "mapped", [1589, 1605, 1605]],
	[[64871, 64872], "mapped", [1588, 1581, 1605]],
	[[64873, 64873], "mapped", [1588, 1580, 1610]],
	[[64874, 64875], "mapped", [1588, 1605, 1582]],
	[[64876, 64877], "mapped", [1588, 1605, 1605]],
	[[64878, 64878], "mapped", [1590, 1581, 1609]],
	[[64879, 64880], "mapped", [1590, 1582, 1605]],
	[[64881, 64882], "mapped", [1591, 1605, 1581]],
	[[64883, 64883], "mapped", [1591, 1605, 1605]],
	[[64884, 64884], "mapped", [1591, 1605, 1610]],
	[[64885, 64885], "mapped", [1593, 1580, 1605]],
	[[64886, 64887], "mapped", [1593, 1605, 1605]],
	[[64888, 64888], "mapped", [1593, 1605, 1609]],
	[[64889, 64889], "mapped", [1594, 1605, 1605]],
	[[64890, 64890], "mapped", [1594, 1605, 1610]],
	[[64891, 64891], "mapped", [1594, 1605, 1609]],
	[[64892, 64893], "mapped", [1601, 1582, 1605]],
	[[64894, 64894], "mapped", [1602, 1605, 1581]],
	[[64895, 64895], "mapped", [1602, 1605, 1605]],
	[[64896, 64896], "mapped", [1604, 1581, 1605]],
	[[64897, 64897], "mapped", [1604, 1581, 1610]],
	[[64898, 64898], "mapped", [1604, 1581, 1609]],
	[[64899, 64900], "mapped", [1604, 1580, 1580]],
	[[64901, 64902], "mapped", [1604, 1582, 1605]],
	[[64903, 64904], "mapped", [1604, 1605, 1581]],
	[[64905, 64905], "mapped", [1605, 1581, 1580]],
	[[64906, 64906], "mapped", [1605, 1581, 1605]],
	[[64907, 64907], "mapped", [1605, 1581, 1610]],
	[[64908, 64908], "mapped", [1605, 1580, 1581]],
	[[64909, 64909], "mapped", [1605, 1580, 1605]],
	[[64910, 64910], "mapped", [1605, 1582, 1580]],
	[[64911, 64911], "mapped", [1605, 1582, 1605]],
	[[64912, 64913], "disallowed"],
	[[64914, 64914], "mapped", [1605, 1580, 1582]],
	[[64915, 64915], "mapped", [1607, 1605, 1580]],
	[[64916, 64916], "mapped", [1607, 1605, 1605]],
	[[64917, 64917], "mapped", [1606, 1581, 1605]],
	[[64918, 64918], "mapped", [1606, 1581, 1609]],
	[[64919, 64920], "mapped", [1606, 1580, 1605]],
	[[64921, 64921], "mapped", [1606, 1580, 1609]],
	[[64922, 64922], "mapped", [1606, 1605, 1610]],
	[[64923, 64923], "mapped", [1606, 1605, 1609]],
	[[64924, 64925], "mapped", [1610, 1605, 1605]],
	[[64926, 64926], "mapped", [1576, 1582, 1610]],
	[[64927, 64927], "mapped", [1578, 1580, 1610]],
	[[64928, 64928], "mapped", [1578, 1580, 1609]],
	[[64929, 64929], "mapped", [1578, 1582, 1610]],
	[[64930, 64930], "mapped", [1578, 1582, 1609]],
	[[64931, 64931], "mapped", [1578, 1605, 1610]],
	[[64932, 64932], "mapped", [1578, 1605, 1609]],
	[[64933, 64933], "mapped", [1580, 1605, 1610]],
	[[64934, 64934], "mapped", [1580, 1581, 1609]],
	[[64935, 64935], "mapped", [1580, 1605, 1609]],
	[[64936, 64936], "mapped", [1587, 1582, 1609]],
	[[64937, 64937], "mapped", [1589, 1581, 1610]],
	[[64938, 64938], "mapped", [1588, 1581, 1610]],
	[[64939, 64939], "mapped", [1590, 1581, 1610]],
	[[64940, 64940], "mapped", [1604, 1580, 1610]],
	[[64941, 64941], "mapped", [1604, 1605, 1610]],
	[[64942, 64942], "mapped", [1610, 1581, 1610]],
	[[64943, 64943], "mapped", [1610, 1580, 1610]],
	[[64944, 64944], "mapped", [1610, 1605, 1610]],
	[[64945, 64945], "mapped", [1605, 1605, 1610]],
	[[64946, 64946], "mapped", [1602, 1605, 1610]],
	[[64947, 64947], "mapped", [1606, 1581, 1610]],
	[[64948, 64948], "mapped", [1602, 1605, 1581]],
	[[64949, 64949], "mapped", [1604, 1581, 1605]],
	[[64950, 64950], "mapped", [1593, 1605, 1610]],
	[[64951, 64951], "mapped", [1603, 1605, 1610]],
	[[64952, 64952], "mapped", [1606, 1580, 1581]],
	[[64953, 64953], "mapped", [1605, 1582, 1610]],
	[[64954, 64954], "mapped", [1604, 1580, 1605]],
	[[64955, 64955], "mapped", [1603, 1605, 1605]],
	[[64956, 64956], "mapped", [1604, 1580, 1605]],
	[[64957, 64957], "mapped", [1606, 1580, 1581]],
	[[64958, 64958], "mapped", [1580, 1581, 1610]],
	[[64959, 64959], "mapped", [1581, 1580, 1610]],
	[[64960, 64960], "mapped", [1605, 1580, 1610]],
	[[64961, 64961], "mapped", [1601, 1605, 1610]],
	[[64962, 64962], "mapped", [1576, 1581, 1610]],
	[[64963, 64963], "mapped", [1603, 1605, 1605]],
	[[64964, 64964], "mapped", [1593, 1580, 1605]],
	[[64965, 64965], "mapped", [1589, 1605, 1605]],
	[[64966, 64966], "mapped", [1587, 1582, 1610]],
	[[64967, 64967], "mapped", [1606, 1580, 1610]],
	[[64968, 64975], "disallowed"],
	[[64976, 65007], "disallowed"],
	[[65008, 65008], "mapped", [1589, 1604, 1746]],
	[[65009, 65009], "mapped", [1602, 1604, 1746]],
	[[65010, 65010], "mapped", [1575, 1604, 1604, 1607]],
	[[65011, 65011], "mapped", [1575, 1603, 1576, 1585]],
	[[65012, 65012], "mapped", [1605, 1581, 1605, 1583]],
	[[65013, 65013], "mapped", [1589, 1604, 1593, 1605]],
	[[65014, 65014], "mapped", [1585, 1587, 1608, 1604]],
	[[65015, 65015], "mapped", [1593, 1604, 1610, 1607]],
	[[65016, 65016], "mapped", [1608, 1587, 1604, 1605]],
	[[65017, 65017], "mapped", [1589, 1604, 1609]],
	[[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]],
	[[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]],
	[[65020, 65020], "mapped", [1585, 1740, 1575, 1604]],
	[[65021, 65021], "valid", [], "NV8"],
	[[65022, 65023], "disallowed"],
	[[65024, 65039], "ignored"],
	[[65040, 65040], "disallowed_STD3_mapped", [44]],
	[[65041, 65041], "mapped", [12289]],
	[[65042, 65042], "disallowed"],
	[[65043, 65043], "disallowed_STD3_mapped", [58]],
	[[65044, 65044], "disallowed_STD3_mapped", [59]],
	[[65045, 65045], "disallowed_STD3_mapped", [33]],
	[[65046, 65046], "disallowed_STD3_mapped", [63]],
	[[65047, 65047], "mapped", [12310]],
	[[65048, 65048], "mapped", [12311]],
	[[65049, 65049], "disallowed"],
	[[65050, 65055], "disallowed"],
	[[65056, 65059], "valid"],
	[[65060, 65062], "valid"],
	[[65063, 65069], "valid"],
	[[65070, 65071], "valid"],
	[[65072, 65072], "disallowed"],
	[[65073, 65073], "mapped", [8212]],
	[[65074, 65074], "mapped", [8211]],
	[[65075, 65076], "disallowed_STD3_mapped", [95]],
	[[65077, 65077], "disallowed_STD3_mapped", [40]],
	[[65078, 65078], "disallowed_STD3_mapped", [41]],
	[[65079, 65079], "disallowed_STD3_mapped", [123]],
	[[65080, 65080], "disallowed_STD3_mapped", [125]],
	[[65081, 65081], "mapped", [12308]],
	[[65082, 65082], "mapped", [12309]],
	[[65083, 65083], "mapped", [12304]],
	[[65084, 65084], "mapped", [12305]],
	[[65085, 65085], "mapped", [12298]],
	[[65086, 65086], "mapped", [12299]],
	[[65087, 65087], "mapped", [12296]],
	[[65088, 65088], "mapped", [12297]],
	[[65089, 65089], "mapped", [12300]],
	[[65090, 65090], "mapped", [12301]],
	[[65091, 65091], "mapped", [12302]],
	[[65092, 65092], "mapped", [12303]],
	[[65093, 65094], "valid", [], "NV8"],
	[[65095, 65095], "disallowed_STD3_mapped", [91]],
	[[65096, 65096], "disallowed_STD3_mapped", [93]],
	[[65097, 65100], "disallowed_STD3_mapped", [32, 773]],
	[[65101, 65103], "disallowed_STD3_mapped", [95]],
	[[65104, 65104], "disallowed_STD3_mapped", [44]],
	[[65105, 65105], "mapped", [12289]],
	[[65106, 65106], "disallowed"],
	[[65107, 65107], "disallowed"],
	[[65108, 65108], "disallowed_STD3_mapped", [59]],
	[[65109, 65109], "disallowed_STD3_mapped", [58]],
	[[65110, 65110], "disallowed_STD3_mapped", [63]],
	[[65111, 65111], "disallowed_STD3_mapped", [33]],
	[[65112, 65112], "mapped", [8212]],
	[[65113, 65113], "disallowed_STD3_mapped", [40]],
	[[65114, 65114], "disallowed_STD3_mapped", [41]],
	[[65115, 65115], "disallowed_STD3_mapped", [123]],
	[[65116, 65116], "disallowed_STD3_mapped", [125]],
	[[65117, 65117], "mapped", [12308]],
	[[65118, 65118], "mapped", [12309]],
	[[65119, 65119], "disallowed_STD3_mapped", [35]],
	[[65120, 65120], "disallowed_STD3_mapped", [38]],
	[[65121, 65121], "disallowed_STD3_mapped", [42]],
	[[65122, 65122], "disallowed_STD3_mapped", [43]],
	[[65123, 65123], "mapped", [45]],
	[[65124, 65124], "disallowed_STD3_mapped", [60]],
	[[65125, 65125], "disallowed_STD3_mapped", [62]],
	[[65126, 65126], "disallowed_STD3_mapped", [61]],
	[[65127, 65127], "disallowed"],
	[[65128, 65128], "disallowed_STD3_mapped", [92]],
	[[65129, 65129], "disallowed_STD3_mapped", [36]],
	[[65130, 65130], "disallowed_STD3_mapped", [37]],
	[[65131, 65131], "disallowed_STD3_mapped", [64]],
	[[65132, 65135], "disallowed"],
	[[65136, 65136], "disallowed_STD3_mapped", [32, 1611]],
	[[65137, 65137], "mapped", [1600, 1611]],
	[[65138, 65138], "disallowed_STD3_mapped", [32, 1612]],
	[[65139, 65139], "valid"],
	[[65140, 65140], "disallowed_STD3_mapped", [32, 1613]],
	[[65141, 65141], "disallowed"],
	[[65142, 65142], "disallowed_STD3_mapped", [32, 1614]],
	[[65143, 65143], "mapped", [1600, 1614]],
	[[65144, 65144], "disallowed_STD3_mapped", [32, 1615]],
	[[65145, 65145], "mapped", [1600, 1615]],
	[[65146, 65146], "disallowed_STD3_mapped", [32, 1616]],
	[[65147, 65147], "mapped", [1600, 1616]],
	[[65148, 65148], "disallowed_STD3_mapped", [32, 1617]],
	[[65149, 65149], "mapped", [1600, 1617]],
	[[65150, 65150], "disallowed_STD3_mapped", [32, 1618]],
	[[65151, 65151], "mapped", [1600, 1618]],
	[[65152, 65152], "mapped", [1569]],
	[[65153, 65154], "mapped", [1570]],
	[[65155, 65156], "mapped", [1571]],
	[[65157, 65158], "mapped", [1572]],
	[[65159, 65160], "mapped", [1573]],
	[[65161, 65164], "mapped", [1574]],
	[[65165, 65166], "mapped", [1575]],
	[[65167, 65170], "mapped", [1576]],
	[[65171, 65172], "mapped", [1577]],
	[[65173, 65176], "mapped", [1578]],
	[[65177, 65180], "mapped", [1579]],
	[[65181, 65184], "mapped", [1580]],
	[[65185, 65188], "mapped", [1581]],
	[[65189, 65192], "mapped", [1582]],
	[[65193, 65194], "mapped", [1583]],
	[[65195, 65196], "mapped", [1584]],
	[[65197, 65198], "mapped", [1585]],
	[[65199, 65200], "mapped", [1586]],
	[[65201, 65204], "mapped", [1587]],
	[[65205, 65208], "mapped", [1588]],
	[[65209, 65212], "mapped", [1589]],
	[[65213, 65216], "mapped", [1590]],
	[[65217, 65220], "mapped", [1591]],
	[[65221, 65224], "mapped", [1592]],
	[[65225, 65228], "mapped", [1593]],
	[[65229, 65232], "mapped", [1594]],
	[[65233, 65236], "mapped", [1601]],
	[[65237, 65240], "mapped", [1602]],
	[[65241, 65244], "mapped", [1603]],
	[[65245, 65248], "mapped", [1604]],
	[[65249, 65252], "mapped", [1605]],
	[[65253, 65256], "mapped", [1606]],
	[[65257, 65260], "mapped", [1607]],
	[[65261, 65262], "mapped", [1608]],
	[[65263, 65264], "mapped", [1609]],
	[[65265, 65268], "mapped", [1610]],
	[[65269, 65270], "mapped", [1604, 1570]],
	[[65271, 65272], "mapped", [1604, 1571]],
	[[65273, 65274], "mapped", [1604, 1573]],
	[[65275, 65276], "mapped", [1604, 1575]],
	[[65277, 65278], "disallowed"],
	[[65279, 65279], "ignored"],
	[[65280, 65280], "disallowed"],
	[[65281, 65281], "disallowed_STD3_mapped", [33]],
	[[65282, 65282], "disallowed_STD3_mapped", [34]],
	[[65283, 65283], "disallowed_STD3_mapped", [35]],
	[[65284, 65284], "disallowed_STD3_mapped", [36]],
	[[65285, 65285], "disallowed_STD3_mapped", [37]],
	[[65286, 65286], "disallowed_STD3_mapped", [38]],
	[[65287, 65287], "disallowed_STD3_mapped", [39]],
	[[65288, 65288], "disallowed_STD3_mapped", [40]],
	[[65289, 65289], "disallowed_STD3_mapped", [41]],
	[[65290, 65290], "disallowed_STD3_mapped", [42]],
	[[65291, 65291], "disallowed_STD3_mapped", [43]],
	[[65292, 65292], "disallowed_STD3_mapped", [44]],
	[[65293, 65293], "mapped", [45]],
	[[65294, 65294], "mapped", [46]],
	[[65295, 65295], "disallowed_STD3_mapped", [47]],
	[[65296, 65296], "mapped", [48]],
	[[65297, 65297], "mapped", [49]],
	[[65298, 65298], "mapped", [50]],
	[[65299, 65299], "mapped", [51]],
	[[65300, 65300], "mapped", [52]],
	[[65301, 65301], "mapped", [53]],
	[[65302, 65302], "mapped", [54]],
	[[65303, 65303], "mapped", [55]],
	[[65304, 65304], "mapped", [56]],
	[[65305, 65305], "mapped", [57]],
	[[65306, 65306], "disallowed_STD3_mapped", [58]],
	[[65307, 65307], "disallowed_STD3_mapped", [59]],
	[[65308, 65308], "disallowed_STD3_mapped", [60]],
	[[65309, 65309], "disallowed_STD3_mapped", [61]],
	[[65310, 65310], "disallowed_STD3_mapped", [62]],
	[[65311, 65311], "disallowed_STD3_mapped", [63]],
	[[65312, 65312], "disallowed_STD3_mapped", [64]],
	[[65313, 65313], "mapped", [97]],
	[[65314, 65314], "mapped", [98]],
	[[65315, 65315], "mapped", [99]],
	[[65316, 65316], "mapped", [100]],
	[[65317, 65317], "mapped", [101]],
	[[65318, 65318], "mapped", [102]],
	[[65319, 65319], "mapped", [103]],
	[[65320, 65320], "mapped", [104]],
	[[65321, 65321], "mapped", [105]],
	[[65322, 65322], "mapped", [106]],
	[[65323, 65323], "mapped", [107]],
	[[65324, 65324], "mapped", [108]],
	[[65325, 65325], "mapped", [109]],
	[[65326, 65326], "mapped", [110]],
	[[65327, 65327], "mapped", [111]],
	[[65328, 65328], "mapped", [112]],
	[[65329, 65329], "mapped", [113]],
	[[65330, 65330], "mapped", [114]],
	[[65331, 65331], "mapped", [115]],
	[[65332, 65332], "mapped", [116]],
	[[65333, 65333], "mapped", [117]],
	[[65334, 65334], "mapped", [118]],
	[[65335, 65335], "mapped", [119]],
	[[65336, 65336], "mapped", [120]],
	[[65337, 65337], "mapped", [121]],
	[[65338, 65338], "mapped", [122]],
	[[65339, 65339], "disallowed_STD3_mapped", [91]],
	[[65340, 65340], "disallowed_STD3_mapped", [92]],
	[[65341, 65341], "disallowed_STD3_mapped", [93]],
	[[65342, 65342], "disallowed_STD3_mapped", [94]],
	[[65343, 65343], "disallowed_STD3_mapped", [95]],
	[[65344, 65344], "disallowed_STD3_mapped", [96]],
	[[65345, 65345], "mapped", [97]],
	[[65346, 65346], "mapped", [98]],
	[[65347, 65347], "mapped", [99]],
	[[65348, 65348], "mapped", [100]],
	[[65349, 65349], "mapped", [101]],
	[[65350, 65350], "mapped", [102]],
	[[65351, 65351], "mapped", [103]],
	[[65352, 65352], "mapped", [104]],
	[[65353, 65353], "mapped", [105]],
	[[65354, 65354], "mapped", [106]],
	[[65355, 65355], "mapped", [107]],
	[[65356, 65356], "mapped", [108]],
	[[65357, 65357], "mapped", [109]],
	[[65358, 65358], "mapped", [110]],
	[[65359, 65359], "mapped", [111]],
	[[65360, 65360], "mapped", [112]],
	[[65361, 65361], "mapped", [113]],
	[[65362, 65362], "mapped", [114]],
	[[65363, 65363], "mapped", [115]],
	[[65364, 65364], "mapped", [116]],
	[[65365, 65365], "mapped", [117]],
	[[65366, 65366], "mapped", [118]],
	[[65367, 65367], "mapped", [119]],
	[[65368, 65368], "mapped", [120]],
	[[65369, 65369], "mapped", [121]],
	[[65370, 65370], "mapped", [122]],
	[[65371, 65371], "disallowed_STD3_mapped", [123]],
	[[65372, 65372], "disallowed_STD3_mapped", [124]],
	[[65373, 65373], "disallowed_STD3_mapped", [125]],
	[[65374, 65374], "disallowed_STD3_mapped", [126]],
	[[65375, 65375], "mapped", [10629]],
	[[65376, 65376], "mapped", [10630]],
	[[65377, 65377], "mapped", [46]],
	[[65378, 65378], "mapped", [12300]],
	[[65379, 65379], "mapped", [12301]],
	[[65380, 65380], "mapped", [12289]],
	[[65381, 65381], "mapped", [12539]],
	[[65382, 65382], "mapped", [12530]],
	[[65383, 65383], "mapped", [12449]],
	[[65384, 65384], "mapped", [12451]],
	[[65385, 65385], "mapped", [12453]],
	[[65386, 65386], "mapped", [12455]],
	[[65387, 65387], "mapped", [12457]],
	[[65388, 65388], "mapped", [12515]],
	[[65389, 65389], "mapped", [12517]],
	[[65390, 65390], "mapped", [12519]],
	[[65391, 65391], "mapped", [12483]],
	[[65392, 65392], "mapped", [12540]],
	[[65393, 65393], "mapped", [12450]],
	[[65394, 65394], "mapped", [12452]],
	[[65395, 65395], "mapped", [12454]],
	[[65396, 65396], "mapped", [12456]],
	[[65397, 65397], "mapped", [12458]],
	[[65398, 65398], "mapped", [12459]],
	[[65399, 65399], "mapped", [12461]],
	[[65400, 65400], "mapped", [12463]],
	[[65401, 65401], "mapped", [12465]],
	[[65402, 65402], "mapped", [12467]],
	[[65403, 65403], "mapped", [12469]],
	[[65404, 65404], "mapped", [12471]],
	[[65405, 65405], "mapped", [12473]],
	[[65406, 65406], "mapped", [12475]],
	[[65407, 65407], "mapped", [12477]],
	[[65408, 65408], "mapped", [12479]],
	[[65409, 65409], "mapped", [12481]],
	[[65410, 65410], "mapped", [12484]],
	[[65411, 65411], "mapped", [12486]],
	[[65412, 65412], "mapped", [12488]],
	[[65413, 65413], "mapped", [12490]],
	[[65414, 65414], "mapped", [12491]],
	[[65415, 65415], "mapped", [12492]],
	[[65416, 65416], "mapped", [12493]],
	[[65417, 65417], "mapped", [12494]],
	[[65418, 65418], "mapped", [12495]],
	[[65419, 65419], "mapped", [12498]],
	[[65420, 65420], "mapped", [12501]],
	[[65421, 65421], "mapped", [12504]],
	[[65422, 65422], "mapped", [12507]],
	[[65423, 65423], "mapped", [12510]],
	[[65424, 65424], "mapped", [12511]],
	[[65425, 65425], "mapped", [12512]],
	[[65426, 65426], "mapped", [12513]],
	[[65427, 65427], "mapped", [12514]],
	[[65428, 65428], "mapped", [12516]],
	[[65429, 65429], "mapped", [12518]],
	[[65430, 65430], "mapped", [12520]],
	[[65431, 65431], "mapped", [12521]],
	[[65432, 65432], "mapped", [12522]],
	[[65433, 65433], "mapped", [12523]],
	[[65434, 65434], "mapped", [12524]],
	[[65435, 65435], "mapped", [12525]],
	[[65436, 65436], "mapped", [12527]],
	[[65437, 65437], "mapped", [12531]],
	[[65438, 65438], "mapped", [12441]],
	[[65439, 65439], "mapped", [12442]],
	[[65440, 65440], "disallowed"],
	[[65441, 65441], "mapped", [4352]],
	[[65442, 65442], "mapped", [4353]],
	[[65443, 65443], "mapped", [4522]],
	[[65444, 65444], "mapped", [4354]],
	[[65445, 65445], "mapped", [4524]],
	[[65446, 65446], "mapped", [4525]],
	[[65447, 65447], "mapped", [4355]],
	[[65448, 65448], "mapped", [4356]],
	[[65449, 65449], "mapped", [4357]],
	[[65450, 65450], "mapped", [4528]],
	[[65451, 65451], "mapped", [4529]],
	[[65452, 65452], "mapped", [4530]],
	[[65453, 65453], "mapped", [4531]],
	[[65454, 65454], "mapped", [4532]],
	[[65455, 65455], "mapped", [4533]],
	[[65456, 65456], "mapped", [4378]],
	[[65457, 65457], "mapped", [4358]],
	[[65458, 65458], "mapped", [4359]],
	[[65459, 65459], "mapped", [4360]],
	[[65460, 65460], "mapped", [4385]],
	[[65461, 65461], "mapped", [4361]],
	[[65462, 65462], "mapped", [4362]],
	[[65463, 65463], "mapped", [4363]],
	[[65464, 65464], "mapped", [4364]],
	[[65465, 65465], "mapped", [4365]],
	[[65466, 65466], "mapped", [4366]],
	[[65467, 65467], "mapped", [4367]],
	[[65468, 65468], "mapped", [4368]],
	[[65469, 65469], "mapped", [4369]],
	[[65470, 65470], "mapped", [4370]],
	[[65471, 65473], "disallowed"],
	[[65474, 65474], "mapped", [4449]],
	[[65475, 65475], "mapped", [4450]],
	[[65476, 65476], "mapped", [4451]],
	[[65477, 65477], "mapped", [4452]],
	[[65478, 65478], "mapped", [4453]],
	[[65479, 65479], "mapped", [4454]],
	[[65480, 65481], "disallowed"],
	[[65482, 65482], "mapped", [4455]],
	[[65483, 65483], "mapped", [4456]],
	[[65484, 65484], "mapped", [4457]],
	[[65485, 65485], "mapped", [4458]],
	[[65486, 65486], "mapped", [4459]],
	[[65487, 65487], "mapped", [4460]],
	[[65488, 65489], "disallowed"],
	[[65490, 65490], "mapped", [4461]],
	[[65491, 65491], "mapped", [4462]],
	[[65492, 65492], "mapped", [4463]],
	[[65493, 65493], "mapped", [4464]],
	[[65494, 65494], "mapped", [4465]],
	[[65495, 65495], "mapped", [4466]],
	[[65496, 65497], "disallowed"],
	[[65498, 65498], "mapped", [4467]],
	[[65499, 65499], "mapped", [4468]],
	[[65500, 65500], "mapped", [4469]],
	[[65501, 65503], "disallowed"],
	[[65504, 65504], "mapped", [162]],
	[[65505, 65505], "mapped", [163]],
	[[65506, 65506], "mapped", [172]],
	[[65507, 65507], "disallowed_STD3_mapped", [32, 772]],
	[[65508, 65508], "mapped", [166]],
	[[65509, 65509], "mapped", [165]],
	[[65510, 65510], "mapped", [8361]],
	[[65511, 65511], "disallowed"],
	[[65512, 65512], "mapped", [9474]],
	[[65513, 65513], "mapped", [8592]],
	[[65514, 65514], "mapped", [8593]],
	[[65515, 65515], "mapped", [8594]],
	[[65516, 65516], "mapped", [8595]],
	[[65517, 65517], "mapped", [9632]],
	[[65518, 65518], "mapped", [9675]],
	[[65519, 65528], "disallowed"],
	[[65529, 65531], "disallowed"],
	[[65532, 65532], "disallowed"],
	[[65533, 65533], "disallowed"],
	[[65534, 65535], "disallowed"],
	[[65536, 65547], "valid"],
	[[65548, 65548], "disallowed"],
	[[65549, 65574], "valid"],
	[[65575, 65575], "disallowed"],
	[[65576, 65594], "valid"],
	[[65595, 65595], "disallowed"],
	[[65596, 65597], "valid"],
	[[65598, 65598], "disallowed"],
	[[65599, 65613], "valid"],
	[[65614, 65615], "disallowed"],
	[[65616, 65629], "valid"],
	[[65630, 65663], "disallowed"],
	[[65664, 65786], "valid"],
	[[65787, 65791], "disallowed"],
	[[65792, 65794], "valid", [], "NV8"],
	[[65795, 65798], "disallowed"],
	[[65799, 65843], "valid", [], "NV8"],
	[[65844, 65846], "disallowed"],
	[[65847, 65855], "valid", [], "NV8"],
	[[65856, 65930], "valid", [], "NV8"],
	[[65931, 65932], "valid", [], "NV8"],
	[[65933, 65935], "disallowed"],
	[[65936, 65947], "valid", [], "NV8"],
	[[65948, 65951], "disallowed"],
	[[65952, 65952], "valid", [], "NV8"],
	[[65953, 65999], "disallowed"],
	[[66000, 66044], "valid", [], "NV8"],
	[[66045, 66045], "valid"],
	[[66046, 66175], "disallowed"],
	[[66176, 66204], "valid"],
	[[66205, 66207], "disallowed"],
	[[66208, 66256], "valid"],
	[[66257, 66271], "disallowed"],
	[[66272, 66272], "valid"],
	[[66273, 66299], "valid", [], "NV8"],
	[[66300, 66303], "disallowed"],
	[[66304, 66334], "valid"],
	[[66335, 66335], "valid"],
	[[66336, 66339], "valid", [], "NV8"],
	[[66340, 66351], "disallowed"],
	[[66352, 66368], "valid"],
	[[66369, 66369], "valid", [], "NV8"],
	[[66370, 66377], "valid"],
	[[66378, 66378], "valid", [], "NV8"],
	[[66379, 66383], "disallowed"],
	[[66384, 66426], "valid"],
	[[66427, 66431], "disallowed"],
	[[66432, 66461], "valid"],
	[[66462, 66462], "disallowed"],
	[[66463, 66463], "valid", [], "NV8"],
	[[66464, 66499], "valid"],
	[[66500, 66503], "disallowed"],
	[[66504, 66511], "valid"],
	[[66512, 66517], "valid", [], "NV8"],
	[[66518, 66559], "disallowed"],
	[[66560, 66560], "mapped", [66600]],
	[[66561, 66561], "mapped", [66601]],
	[[66562, 66562], "mapped", [66602]],
	[[66563, 66563], "mapped", [66603]],
	[[66564, 66564], "mapped", [66604]],
	[[66565, 66565], "mapped", [66605]],
	[[66566, 66566], "mapped", [66606]],
	[[66567, 66567], "mapped", [66607]],
	[[66568, 66568], "mapped", [66608]],
	[[66569, 66569], "mapped", [66609]],
	[[66570, 66570], "mapped", [66610]],
	[[66571, 66571], "mapped", [66611]],
	[[66572, 66572], "mapped", [66612]],
	[[66573, 66573], "mapped", [66613]],
	[[66574, 66574], "mapped", [66614]],
	[[66575, 66575], "mapped", [66615]],
	[[66576, 66576], "mapped", [66616]],
	[[66577, 66577], "mapped", [66617]],
	[[66578, 66578], "mapped", [66618]],
	[[66579, 66579], "mapped", [66619]],
	[[66580, 66580], "mapped", [66620]],
	[[66581, 66581], "mapped", [66621]],
	[[66582, 66582], "mapped", [66622]],
	[[66583, 66583], "mapped", [66623]],
	[[66584, 66584], "mapped", [66624]],
	[[66585, 66585], "mapped", [66625]],
	[[66586, 66586], "mapped", [66626]],
	[[66587, 66587], "mapped", [66627]],
	[[66588, 66588], "mapped", [66628]],
	[[66589, 66589], "mapped", [66629]],
	[[66590, 66590], "mapped", [66630]],
	[[66591, 66591], "mapped", [66631]],
	[[66592, 66592], "mapped", [66632]],
	[[66593, 66593], "mapped", [66633]],
	[[66594, 66594], "mapped", [66634]],
	[[66595, 66595], "mapped", [66635]],
	[[66596, 66596], "mapped", [66636]],
	[[66597, 66597], "mapped", [66637]],
	[[66598, 66598], "mapped", [66638]],
	[[66599, 66599], "mapped", [66639]],
	[[66600, 66637], "valid"],
	[[66638, 66717], "valid"],
	[[66718, 66719], "disallowed"],
	[[66720, 66729], "valid"],
	[[66730, 66815], "disallowed"],
	[[66816, 66855], "valid"],
	[[66856, 66863], "disallowed"],
	[[66864, 66915], "valid"],
	[[66916, 66926], "disallowed"],
	[[66927, 66927], "valid", [], "NV8"],
	[[66928, 67071], "disallowed"],
	[[67072, 67382], "valid"],
	[[67383, 67391], "disallowed"],
	[[67392, 67413], "valid"],
	[[67414, 67423], "disallowed"],
	[[67424, 67431], "valid"],
	[[67432, 67583], "disallowed"],
	[[67584, 67589], "valid"],
	[[67590, 67591], "disallowed"],
	[[67592, 67592], "valid"],
	[[67593, 67593], "disallowed"],
	[[67594, 67637], "valid"],
	[[67638, 67638], "disallowed"],
	[[67639, 67640], "valid"],
	[[67641, 67643], "disallowed"],
	[[67644, 67644], "valid"],
	[[67645, 67646], "disallowed"],
	[[67647, 67647], "valid"],
	[[67648, 67669], "valid"],
	[[67670, 67670], "disallowed"],
	[[67671, 67679], "valid", [], "NV8"],
	[[67680, 67702], "valid"],
	[[67703, 67711], "valid", [], "NV8"],
	[[67712, 67742], "valid"],
	[[67743, 67750], "disallowed"],
	[[67751, 67759], "valid", [], "NV8"],
	[[67760, 67807], "disallowed"],
	[[67808, 67826], "valid"],
	[[67827, 67827], "disallowed"],
	[[67828, 67829], "valid"],
	[[67830, 67834], "disallowed"],
	[[67835, 67839], "valid", [], "NV8"],
	[[67840, 67861], "valid"],
	[[67862, 67865], "valid", [], "NV8"],
	[[67866, 67867], "valid", [], "NV8"],
	[[67868, 67870], "disallowed"],
	[[67871, 67871], "valid", [], "NV8"],
	[[67872, 67897], "valid"],
	[[67898, 67902], "disallowed"],
	[[67903, 67903], "valid", [], "NV8"],
	[[67904, 67967], "disallowed"],
	[[67968, 68023], "valid"],
	[[68024, 68027], "disallowed"],
	[[68028, 68029], "valid", [], "NV8"],
	[[68030, 68031], "valid"],
	[[68032, 68047], "valid", [], "NV8"],
	[[68048, 68049], "disallowed"],
	[[68050, 68095], "valid", [], "NV8"],
	[[68096, 68099], "valid"],
	[[68100, 68100], "disallowed"],
	[[68101, 68102], "valid"],
	[[68103, 68107], "disallowed"],
	[[68108, 68115], "valid"],
	[[68116, 68116], "disallowed"],
	[[68117, 68119], "valid"],
	[[68120, 68120], "disallowed"],
	[[68121, 68147], "valid"],
	[[68148, 68151], "disallowed"],
	[[68152, 68154], "valid"],
	[[68155, 68158], "disallowed"],
	[[68159, 68159], "valid"],
	[[68160, 68167], "valid", [], "NV8"],
	[[68168, 68175], "disallowed"],
	[[68176, 68184], "valid", [], "NV8"],
	[[68185, 68191], "disallowed"],
	[[68192, 68220], "valid"],
	[[68221, 68223], "valid", [], "NV8"],
	[[68224, 68252], "valid"],
	[[68253, 68255], "valid", [], "NV8"],
	[[68256, 68287], "disallowed"],
	[[68288, 68295], "valid"],
	[[68296, 68296], "valid", [], "NV8"],
	[[68297, 68326], "valid"],
	[[68327, 68330], "disallowed"],
	[[68331, 68342], "valid", [], "NV8"],
	[[68343, 68351], "disallowed"],
	[[68352, 68405], "valid"],
	[[68406, 68408], "disallowed"],
	[[68409, 68415], "valid", [], "NV8"],
	[[68416, 68437], "valid"],
	[[68438, 68439], "disallowed"],
	[[68440, 68447], "valid", [], "NV8"],
	[[68448, 68466], "valid"],
	[[68467, 68471], "disallowed"],
	[[68472, 68479], "valid", [], "NV8"],
	[[68480, 68497], "valid"],
	[[68498, 68504], "disallowed"],
	[[68505, 68508], "valid", [], "NV8"],
	[[68509, 68520], "disallowed"],
	[[68521, 68527], "valid", [], "NV8"],
	[[68528, 68607], "disallowed"],
	[[68608, 68680], "valid"],
	[[68681, 68735], "disallowed"],
	[[68736, 68736], "mapped", [68800]],
	[[68737, 68737], "mapped", [68801]],
	[[68738, 68738], "mapped", [68802]],
	[[68739, 68739], "mapped", [68803]],
	[[68740, 68740], "mapped", [68804]],
	[[68741, 68741], "mapped", [68805]],
	[[68742, 68742], "mapped", [68806]],
	[[68743, 68743], "mapped", [68807]],
	[[68744, 68744], "mapped", [68808]],
	[[68745, 68745], "mapped", [68809]],
	[[68746, 68746], "mapped", [68810]],
	[[68747, 68747], "mapped", [68811]],
	[[68748, 68748], "mapped", [68812]],
	[[68749, 68749], "mapped", [68813]],
	[[68750, 68750], "mapped", [68814]],
	[[68751, 68751], "mapped", [68815]],
	[[68752, 68752], "mapped", [68816]],
	[[68753, 68753], "mapped", [68817]],
	[[68754, 68754], "mapped", [68818]],
	[[68755, 68755], "mapped", [68819]],
	[[68756, 68756], "mapped", [68820]],
	[[68757, 68757], "mapped", [68821]],
	[[68758, 68758], "mapped", [68822]],
	[[68759, 68759], "mapped", [68823]],
	[[68760, 68760], "mapped", [68824]],
	[[68761, 68761], "mapped", [68825]],
	[[68762, 68762], "mapped", [68826]],
	[[68763, 68763], "mapped", [68827]],
	[[68764, 68764], "mapped", [68828]],
	[[68765, 68765], "mapped", [68829]],
	[[68766, 68766], "mapped", [68830]],
	[[68767, 68767], "mapped", [68831]],
	[[68768, 68768], "mapped", [68832]],
	[[68769, 68769], "mapped", [68833]],
	[[68770, 68770], "mapped", [68834]],
	[[68771, 68771], "mapped", [68835]],
	[[68772, 68772], "mapped", [68836]],
	[[68773, 68773], "mapped", [68837]],
	[[68774, 68774], "mapped", [68838]],
	[[68775, 68775], "mapped", [68839]],
	[[68776, 68776], "mapped", [68840]],
	[[68777, 68777], "mapped", [68841]],
	[[68778, 68778], "mapped", [68842]],
	[[68779, 68779], "mapped", [68843]],
	[[68780, 68780], "mapped", [68844]],
	[[68781, 68781], "mapped", [68845]],
	[[68782, 68782], "mapped", [68846]],
	[[68783, 68783], "mapped", [68847]],
	[[68784, 68784], "mapped", [68848]],
	[[68785, 68785], "mapped", [68849]],
	[[68786, 68786], "mapped", [68850]],
	[[68787, 68799], "disallowed"],
	[[68800, 68850], "valid"],
	[[68851, 68857], "disallowed"],
	[[68858, 68863], "valid", [], "NV8"],
	[[68864, 69215], "disallowed"],
	[[69216, 69246], "valid", [], "NV8"],
	[[69247, 69631], "disallowed"],
	[[69632, 69702], "valid"],
	[[69703, 69709], "valid", [], "NV8"],
	[[69710, 69713], "disallowed"],
	[[69714, 69733], "valid", [], "NV8"],
	[[69734, 69743], "valid"],
	[[69744, 69758], "disallowed"],
	[[69759, 69759], "valid"],
	[[69760, 69818], "valid"],
	[[69819, 69820], "valid", [], "NV8"],
	[[69821, 69821], "disallowed"],
	[[69822, 69825], "valid", [], "NV8"],
	[[69826, 69839], "disallowed"],
	[[69840, 69864], "valid"],
	[[69865, 69871], "disallowed"],
	[[69872, 69881], "valid"],
	[[69882, 69887], "disallowed"],
	[[69888, 69940], "valid"],
	[[69941, 69941], "disallowed"],
	[[69942, 69951], "valid"],
	[[69952, 69955], "valid", [], "NV8"],
	[[69956, 69967], "disallowed"],
	[[69968, 70003], "valid"],
	[[70004, 70005], "valid", [], "NV8"],
	[[70006, 70006], "valid"],
	[[70007, 70015], "disallowed"],
	[[70016, 70084], "valid"],
	[[70085, 70088], "valid", [], "NV8"],
	[[70089, 70089], "valid", [], "NV8"],
	[[70090, 70092], "valid"],
	[[70093, 70093], "valid", [], "NV8"],
	[[70094, 70095], "disallowed"],
	[[70096, 70105], "valid"],
	[[70106, 70106], "valid"],
	[[70107, 70107], "valid", [], "NV8"],
	[[70108, 70108], "valid"],
	[[70109, 70111], "valid", [], "NV8"],
	[[70112, 70112], "disallowed"],
	[[70113, 70132], "valid", [], "NV8"],
	[[70133, 70143], "disallowed"],
	[[70144, 70161], "valid"],
	[[70162, 70162], "disallowed"],
	[[70163, 70199], "valid"],
	[[70200, 70205], "valid", [], "NV8"],
	[[70206, 70271], "disallowed"],
	[[70272, 70278], "valid"],
	[[70279, 70279], "disallowed"],
	[[70280, 70280], "valid"],
	[[70281, 70281], "disallowed"],
	[[70282, 70285], "valid"],
	[[70286, 70286], "disallowed"],
	[[70287, 70301], "valid"],
	[[70302, 70302], "disallowed"],
	[[70303, 70312], "valid"],
	[[70313, 70313], "valid", [], "NV8"],
	[[70314, 70319], "disallowed"],
	[[70320, 70378], "valid"],
	[[70379, 70383], "disallowed"],
	[[70384, 70393], "valid"],
	[[70394, 70399], "disallowed"],
	[[70400, 70400], "valid"],
	[[70401, 70403], "valid"],
	[[70404, 70404], "disallowed"],
	[[70405, 70412], "valid"],
	[[70413, 70414], "disallowed"],
	[[70415, 70416], "valid"],
	[[70417, 70418], "disallowed"],
	[[70419, 70440], "valid"],
	[[70441, 70441], "disallowed"],
	[[70442, 70448], "valid"],
	[[70449, 70449], "disallowed"],
	[[70450, 70451], "valid"],
	[[70452, 70452], "disallowed"],
	[[70453, 70457], "valid"],
	[[70458, 70459], "disallowed"],
	[[70460, 70468], "valid"],
	[[70469, 70470], "disallowed"],
	[[70471, 70472], "valid"],
	[[70473, 70474], "disallowed"],
	[[70475, 70477], "valid"],
	[[70478, 70479], "disallowed"],
	[[70480, 70480], "valid"],
	[[70481, 70486], "disallowed"],
	[[70487, 70487], "valid"],
	[[70488, 70492], "disallowed"],
	[[70493, 70499], "valid"],
	[[70500, 70501], "disallowed"],
	[[70502, 70508], "valid"],
	[[70509, 70511], "disallowed"],
	[[70512, 70516], "valid"],
	[[70517, 70783], "disallowed"],
	[[70784, 70853], "valid"],
	[[70854, 70854], "valid", [], "NV8"],
	[[70855, 70855], "valid"],
	[[70856, 70863], "disallowed"],
	[[70864, 70873], "valid"],
	[[70874, 71039], "disallowed"],
	[[71040, 71093], "valid"],
	[[71094, 71095], "disallowed"],
	[[71096, 71104], "valid"],
	[[71105, 71113], "valid", [], "NV8"],
	[[71114, 71127], "valid", [], "NV8"],
	[[71128, 71133], "valid"],
	[[71134, 71167], "disallowed"],
	[[71168, 71232], "valid"],
	[[71233, 71235], "valid", [], "NV8"],
	[[71236, 71236], "valid"],
	[[71237, 71247], "disallowed"],
	[[71248, 71257], "valid"],
	[[71258, 71295], "disallowed"],
	[[71296, 71351], "valid"],
	[[71352, 71359], "disallowed"],
	[[71360, 71369], "valid"],
	[[71370, 71423], "disallowed"],
	[[71424, 71449], "valid"],
	[[71450, 71452], "disallowed"],
	[[71453, 71467], "valid"],
	[[71468, 71471], "disallowed"],
	[[71472, 71481], "valid"],
	[[71482, 71487], "valid", [], "NV8"],
	[[71488, 71839], "disallowed"],
	[[71840, 71840], "mapped", [71872]],
	[[71841, 71841], "mapped", [71873]],
	[[71842, 71842], "mapped", [71874]],
	[[71843, 71843], "mapped", [71875]],
	[[71844, 71844], "mapped", [71876]],
	[[71845, 71845], "mapped", [71877]],
	[[71846, 71846], "mapped", [71878]],
	[[71847, 71847], "mapped", [71879]],
	[[71848, 71848], "mapped", [71880]],
	[[71849, 71849], "mapped", [71881]],
	[[71850, 71850], "mapped", [71882]],
	[[71851, 71851], "mapped", [71883]],
	[[71852, 71852], "mapped", [71884]],
	[[71853, 71853], "mapped", [71885]],
	[[71854, 71854], "mapped", [71886]],
	[[71855, 71855], "mapped", [71887]],
	[[71856, 71856], "mapped", [71888]],
	[[71857, 71857], "mapped", [71889]],
	[[71858, 71858], "mapped", [71890]],
	[[71859, 71859], "mapped", [71891]],
	[[71860, 71860], "mapped", [71892]],
	[[71861, 71861], "mapped", [71893]],
	[[71862, 71862], "mapped", [71894]],
	[[71863, 71863], "mapped", [71895]],
	[[71864, 71864], "mapped", [71896]],
	[[71865, 71865], "mapped", [71897]],
	[[71866, 71866], "mapped", [71898]],
	[[71867, 71867], "mapped", [71899]],
	[[71868, 71868], "mapped", [71900]],
	[[71869, 71869], "mapped", [71901]],
	[[71870, 71870], "mapped", [71902]],
	[[71871, 71871], "mapped", [71903]],
	[[71872, 71913], "valid"],
	[[71914, 71922], "valid", [], "NV8"],
	[[71923, 71934], "disallowed"],
	[[71935, 71935], "valid"],
	[[71936, 72383], "disallowed"],
	[[72384, 72440], "valid"],
	[[72441, 73727], "disallowed"],
	[[73728, 74606], "valid"],
	[[74607, 74648], "valid"],
	[[74649, 74649], "valid"],
	[[74650, 74751], "disallowed"],
	[[74752, 74850], "valid", [], "NV8"],
	[[74851, 74862], "valid", [], "NV8"],
	[[74863, 74863], "disallowed"],
	[[74864, 74867], "valid", [], "NV8"],
	[[74868, 74868], "valid", [], "NV8"],
	[[74869, 74879], "disallowed"],
	[[74880, 75075], "valid"],
	[[75076, 77823], "disallowed"],
	[[77824, 78894], "valid"],
	[[78895, 82943], "disallowed"],
	[[82944, 83526], "valid"],
	[[83527, 92159], "disallowed"],
	[[92160, 92728], "valid"],
	[[92729, 92735], "disallowed"],
	[[92736, 92766], "valid"],
	[[92767, 92767], "disallowed"],
	[[92768, 92777], "valid"],
	[[92778, 92781], "disallowed"],
	[[92782, 92783], "valid", [], "NV8"],
	[[92784, 92879], "disallowed"],
	[[92880, 92909], "valid"],
	[[92910, 92911], "disallowed"],
	[[92912, 92916], "valid"],
	[[92917, 92917], "valid", [], "NV8"],
	[[92918, 92927], "disallowed"],
	[[92928, 92982], "valid"],
	[[92983, 92991], "valid", [], "NV8"],
	[[92992, 92995], "valid"],
	[[92996, 92997], "valid", [], "NV8"],
	[[92998, 93007], "disallowed"],
	[[93008, 93017], "valid"],
	[[93018, 93018], "disallowed"],
	[[93019, 93025], "valid", [], "NV8"],
	[[93026, 93026], "disallowed"],
	[[93027, 93047], "valid"],
	[[93048, 93052], "disallowed"],
	[[93053, 93071], "valid"],
	[[93072, 93951], "disallowed"],
	[[93952, 94020], "valid"],
	[[94021, 94031], "disallowed"],
	[[94032, 94078], "valid"],
	[[94079, 94094], "disallowed"],
	[[94095, 94111], "valid"],
	[[94112, 110591], "disallowed"],
	[[110592, 110593], "valid"],
	[[110594, 113663], "disallowed"],
	[[113664, 113770], "valid"],
	[[113771, 113775], "disallowed"],
	[[113776, 113788], "valid"],
	[[113789, 113791], "disallowed"],
	[[113792, 113800], "valid"],
	[[113801, 113807], "disallowed"],
	[[113808, 113817], "valid"],
	[[113818, 113819], "disallowed"],
	[[113820, 113820], "valid", [], "NV8"],
	[[113821, 113822], "valid"],
	[[113823, 113823], "valid", [], "NV8"],
	[[113824, 113827], "ignored"],
	[[113828, 118783], "disallowed"],
	[[118784, 119029], "valid", [], "NV8"],
	[[119030, 119039], "disallowed"],
	[[119040, 119078], "valid", [], "NV8"],
	[[119079, 119080], "disallowed"],
	[[119081, 119081], "valid", [], "NV8"],
	[[119082, 119133], "valid", [], "NV8"],
	[[119134, 119134], "mapped", [119127, 119141]],
	[[119135, 119135], "mapped", [119128, 119141]],
	[[119136, 119136], "mapped", [119128, 119141, 119150]],
	[[119137, 119137], "mapped", [119128, 119141, 119151]],
	[[119138, 119138], "mapped", [119128, 119141, 119152]],
	[[119139, 119139], "mapped", [119128, 119141, 119153]],
	[[119140, 119140], "mapped", [119128, 119141, 119154]],
	[[119141, 119154], "valid", [], "NV8"],
	[[119155, 119162], "disallowed"],
	[[119163, 119226], "valid", [], "NV8"],
	[[119227, 119227], "mapped", [119225, 119141]],
	[[119228, 119228], "mapped", [119226, 119141]],
	[[119229, 119229], "mapped", [119225, 119141, 119150]],
	[[119230, 119230], "mapped", [119226, 119141, 119150]],
	[[119231, 119231], "mapped", [119225, 119141, 119151]],
	[[119232, 119232], "mapped", [119226, 119141, 119151]],
	[[119233, 119261], "valid", [], "NV8"],
	[[119262, 119272], "valid", [], "NV8"],
	[[119273, 119295], "disallowed"],
	[[119296, 119365], "valid", [], "NV8"],
	[[119366, 119551], "disallowed"],
	[[119552, 119638], "valid", [], "NV8"],
	[[119639, 119647], "disallowed"],
	[[119648, 119665], "valid", [], "NV8"],
	[[119666, 119807], "disallowed"],
	[[119808, 119808], "mapped", [97]],
	[[119809, 119809], "mapped", [98]],
	[[119810, 119810], "mapped", [99]],
	[[119811, 119811], "mapped", [100]],
	[[119812, 119812], "mapped", [101]],
	[[119813, 119813], "mapped", [102]],
	[[119814, 119814], "mapped", [103]],
	[[119815, 119815], "mapped", [104]],
	[[119816, 119816], "mapped", [105]],
	[[119817, 119817], "mapped", [106]],
	[[119818, 119818], "mapped", [107]],
	[[119819, 119819], "mapped", [108]],
	[[119820, 119820], "mapped", [109]],
	[[119821, 119821], "mapped", [110]],
	[[119822, 119822], "mapped", [111]],
	[[119823, 119823], "mapped", [112]],
	[[119824, 119824], "mapped", [113]],
	[[119825, 119825], "mapped", [114]],
	[[119826, 119826], "mapped", [115]],
	[[119827, 119827], "mapped", [116]],
	[[119828, 119828], "mapped", [117]],
	[[119829, 119829], "mapped", [118]],
	[[119830, 119830], "mapped", [119]],
	[[119831, 119831], "mapped", [120]],
	[[119832, 119832], "mapped", [121]],
	[[119833, 119833], "mapped", [122]],
	[[119834, 119834], "mapped", [97]],
	[[119835, 119835], "mapped", [98]],
	[[119836, 119836], "mapped", [99]],
	[[119837, 119837], "mapped", [100]],
	[[119838, 119838], "mapped", [101]],
	[[119839, 119839], "mapped", [102]],
	[[119840, 119840], "mapped", [103]],
	[[119841, 119841], "mapped", [104]],
	[[119842, 119842], "mapped", [105]],
	[[119843, 119843], "mapped", [106]],
	[[119844, 119844], "mapped", [107]],
	[[119845, 119845], "mapped", [108]],
	[[119846, 119846], "mapped", [109]],
	[[119847, 119847], "mapped", [110]],
	[[119848, 119848], "mapped", [111]],
	[[119849, 119849], "mapped", [112]],
	[[119850, 119850], "mapped", [113]],
	[[119851, 119851], "mapped", [114]],
	[[119852, 119852], "mapped", [115]],
	[[119853, 119853], "mapped", [116]],
	[[119854, 119854], "mapped", [117]],
	[[119855, 119855], "mapped", [118]],
	[[119856, 119856], "mapped", [119]],
	[[119857, 119857], "mapped", [120]],
	[[119858, 119858], "mapped", [121]],
	[[119859, 119859], "mapped", [122]],
	[[119860, 119860], "mapped", [97]],
	[[119861, 119861], "mapped", [98]],
	[[119862, 119862], "mapped", [99]],
	[[119863, 119863], "mapped", [100]],
	[[119864, 119864], "mapped", [101]],
	[[119865, 119865], "mapped", [102]],
	[[119866, 119866], "mapped", [103]],
	[[119867, 119867], "mapped", [104]],
	[[119868, 119868], "mapped", [105]],
	[[119869, 119869], "mapped", [106]],
	[[119870, 119870], "mapped", [107]],
	[[119871, 119871], "mapped", [108]],
	[[119872, 119872], "mapped", [109]],
	[[119873, 119873], "mapped", [110]],
	[[119874, 119874], "mapped", [111]],
	[[119875, 119875], "mapped", [112]],
	[[119876, 119876], "mapped", [113]],
	[[119877, 119877], "mapped", [114]],
	[[119878, 119878], "mapped", [115]],
	[[119879, 119879], "mapped", [116]],
	[[119880, 119880], "mapped", [117]],
	[[119881, 119881], "mapped", [118]],
	[[119882, 119882], "mapped", [119]],
	[[119883, 119883], "mapped", [120]],
	[[119884, 119884], "mapped", [121]],
	[[119885, 119885], "mapped", [122]],
	[[119886, 119886], "mapped", [97]],
	[[119887, 119887], "mapped", [98]],
	[[119888, 119888], "mapped", [99]],
	[[119889, 119889], "mapped", [100]],
	[[119890, 119890], "mapped", [101]],
	[[119891, 119891], "mapped", [102]],
	[[119892, 119892], "mapped", [103]],
	[[119893, 119893], "disallowed"],
	[[119894, 119894], "mapped", [105]],
	[[119895, 119895], "mapped", [106]],
	[[119896, 119896], "mapped", [107]],
	[[119897, 119897], "mapped", [108]],
	[[119898, 119898], "mapped", [109]],
	[[119899, 119899], "mapped", [110]],
	[[119900, 119900], "mapped", [111]],
	[[119901, 119901], "mapped", [112]],
	[[119902, 119902], "mapped", [113]],
	[[119903, 119903], "mapped", [114]],
	[[119904, 119904], "mapped", [115]],
	[[119905, 119905], "mapped", [116]],
	[[119906, 119906], "mapped", [117]],
	[[119907, 119907], "mapped", [118]],
	[[119908, 119908], "mapped", [119]],
	[[119909, 119909], "mapped", [120]],
	[[119910, 119910], "mapped", [121]],
	[[119911, 119911], "mapped", [122]],
	[[119912, 119912], "mapped", [97]],
	[[119913, 119913], "mapped", [98]],
	[[119914, 119914], "mapped", [99]],
	[[119915, 119915], "mapped", [100]],
	[[119916, 119916], "mapped", [101]],
	[[119917, 119917], "mapped", [102]],
	[[119918, 119918], "mapped", [103]],
	[[119919, 119919], "mapped", [104]],
	[[119920, 119920], "mapped", [105]],
	[[119921, 119921], "mapped", [106]],
	[[119922, 119922], "mapped", [107]],
	[[119923, 119923], "mapped", [108]],
	[[119924, 119924], "mapped", [109]],
	[[119925, 119925], "mapped", [110]],
	[[119926, 119926], "mapped", [111]],
	[[119927, 119927], "mapped", [112]],
	[[119928, 119928], "mapped", [113]],
	[[119929, 119929], "mapped", [114]],
	[[119930, 119930], "mapped", [115]],
	[[119931, 119931], "mapped", [116]],
	[[119932, 119932], "mapped", [117]],
	[[119933, 119933], "mapped", [118]],
	[[119934, 119934], "mapped", [119]],
	[[119935, 119935], "mapped", [120]],
	[[119936, 119936], "mapped", [121]],
	[[119937, 119937], "mapped", [122]],
	[[119938, 119938], "mapped", [97]],
	[[119939, 119939], "mapped", [98]],
	[[119940, 119940], "mapped", [99]],
	[[119941, 119941], "mapped", [100]],
	[[119942, 119942], "mapped", [101]],
	[[119943, 119943], "mapped", [102]],
	[[119944, 119944], "mapped", [103]],
	[[119945, 119945], "mapped", [104]],
	[[119946, 119946], "mapped", [105]],
	[[119947, 119947], "mapped", [106]],
	[[119948, 119948], "mapped", [107]],
	[[119949, 119949], "mapped", [108]],
	[[119950, 119950], "mapped", [109]],
	[[119951, 119951], "mapped", [110]],
	[[119952, 119952], "mapped", [111]],
	[[119953, 119953], "mapped", [112]],
	[[119954, 119954], "mapped", [113]],
	[[119955, 119955], "mapped", [114]],
	[[119956, 119956], "mapped", [115]],
	[[119957, 119957], "mapped", [116]],
	[[119958, 119958], "mapped", [117]],
	[[119959, 119959], "mapped", [118]],
	[[119960, 119960], "mapped", [119]],
	[[119961, 119961], "mapped", [120]],
	[[119962, 119962], "mapped", [121]],
	[[119963, 119963], "mapped", [122]],
	[[119964, 119964], "mapped", [97]],
	[[119965, 119965], "disallowed"],
	[[119966, 119966], "mapped", [99]],
	[[119967, 119967], "mapped", [100]],
	[[119968, 119969], "disallowed"],
	[[119970, 119970], "mapped", [103]],
	[[119971, 119972], "disallowed"],
	[[119973, 119973], "mapped", [106]],
	[[119974, 119974], "mapped", [107]],
	[[119975, 119976], "disallowed"],
	[[119977, 119977], "mapped", [110]],
	[[119978, 119978], "mapped", [111]],
	[[119979, 119979], "mapped", [112]],
	[[119980, 119980], "mapped", [113]],
	[[119981, 119981], "disallowed"],
	[[119982, 119982], "mapped", [115]],
	[[119983, 119983], "mapped", [116]],
	[[119984, 119984], "mapped", [117]],
	[[119985, 119985], "mapped", [118]],
	[[119986, 119986], "mapped", [119]],
	[[119987, 119987], "mapped", [120]],
	[[119988, 119988], "mapped", [121]],
	[[119989, 119989], "mapped", [122]],
	[[119990, 119990], "mapped", [97]],
	[[119991, 119991], "mapped", [98]],
	[[119992, 119992], "mapped", [99]],
	[[119993, 119993], "mapped", [100]],
	[[119994, 119994], "disallowed"],
	[[119995, 119995], "mapped", [102]],
	[[119996, 119996], "disallowed"],
	[[119997, 119997], "mapped", [104]],
	[[119998, 119998], "mapped", [105]],
	[[119999, 119999], "mapped", [106]],
	[[120000, 120000], "mapped", [107]],
	[[120001, 120001], "mapped", [108]],
	[[120002, 120002], "mapped", [109]],
	[[120003, 120003], "mapped", [110]],
	[[120004, 120004], "disallowed"],
	[[120005, 120005], "mapped", [112]],
	[[120006, 120006], "mapped", [113]],
	[[120007, 120007], "mapped", [114]],
	[[120008, 120008], "mapped", [115]],
	[[120009, 120009], "mapped", [116]],
	[[120010, 120010], "mapped", [117]],
	[[120011, 120011], "mapped", [118]],
	[[120012, 120012], "mapped", [119]],
	[[120013, 120013], "mapped", [120]],
	[[120014, 120014], "mapped", [121]],
	[[120015, 120015], "mapped", [122]],
	[[120016, 120016], "mapped", [97]],
	[[120017, 120017], "mapped", [98]],
	[[120018, 120018], "mapped", [99]],
	[[120019, 120019], "mapped", [100]],
	[[120020, 120020], "mapped", [101]],
	[[120021, 120021], "mapped", [102]],
	[[120022, 120022], "mapped", [103]],
	[[120023, 120023], "mapped", [104]],
	[[120024, 120024], "mapped", [105]],
	[[120025, 120025], "mapped", [106]],
	[[120026, 120026], "mapped", [107]],
	[[120027, 120027], "mapped", [108]],
	[[120028, 120028], "mapped", [109]],
	[[120029, 120029], "mapped", [110]],
	[[120030, 120030], "mapped", [111]],
	[[120031, 120031], "mapped", [112]],
	[[120032, 120032], "mapped", [113]],
	[[120033, 120033], "mapped", [114]],
	[[120034, 120034], "mapped", [115]],
	[[120035, 120035], "mapped", [116]],
	[[120036, 120036], "mapped", [117]],
	[[120037, 120037], "mapped", [118]],
	[[120038, 120038], "mapped", [119]],
	[[120039, 120039], "mapped", [120]],
	[[120040, 120040], "mapped", [121]],
	[[120041, 120041], "mapped", [122]],
	[[120042, 120042], "mapped", [97]],
	[[120043, 120043], "mapped", [98]],
	[[120044, 120044], "mapped", [99]],
	[[120045, 120045], "mapped", [100]],
	[[120046, 120046], "mapped", [101]],
	[[120047, 120047], "mapped", [102]],
	[[120048, 120048], "mapped", [103]],
	[[120049, 120049], "mapped", [104]],
	[[120050, 120050], "mapped", [105]],
	[[120051, 120051], "mapped", [106]],
	[[120052, 120052], "mapped", [107]],
	[[120053, 120053], "mapped", [108]],
	[[120054, 120054], "mapped", [109]],
	[[120055, 120055], "mapped", [110]],
	[[120056, 120056], "mapped", [111]],
	[[120057, 120057], "mapped", [112]],
	[[120058, 120058], "mapped", [113]],
	[[120059, 120059], "mapped", [114]],
	[[120060, 120060], "mapped", [115]],
	[[120061, 120061], "mapped", [116]],
	[[120062, 120062], "mapped", [117]],
	[[120063, 120063], "mapped", [118]],
	[[120064, 120064], "mapped", [119]],
	[[120065, 120065], "mapped", [120]],
	[[120066, 120066], "mapped", [121]],
	[[120067, 120067], "mapped", [122]],
	[[120068, 120068], "mapped", [97]],
	[[120069, 120069], "mapped", [98]],
	[[120070, 120070], "disallowed"],
	[[120071, 120071], "mapped", [100]],
	[[120072, 120072], "mapped", [101]],
	[[120073, 120073], "mapped", [102]],
	[[120074, 120074], "mapped", [103]],
	[[120075, 120076], "disallowed"],
	[[120077, 120077], "mapped", [106]],
	[[120078, 120078], "mapped", [107]],
	[[120079, 120079], "mapped", [108]],
	[[120080, 120080], "mapped", [109]],
	[[120081, 120081], "mapped", [110]],
	[[120082, 120082], "mapped", [111]],
	[[120083, 120083], "mapped", [112]],
	[[120084, 120084], "mapped", [113]],
	[[120085, 120085], "disallowed"],
	[[120086, 120086], "mapped", [115]],
	[[120087, 120087], "mapped", [116]],
	[[120088, 120088], "mapped", [117]],
	[[120089, 120089], "mapped", [118]],
	[[120090, 120090], "mapped", [119]],
	[[120091, 120091], "mapped", [120]],
	[[120092, 120092], "mapped", [121]],
	[[120093, 120093], "disallowed"],
	[[120094, 120094], "mapped", [97]],
	[[120095, 120095], "mapped", [98]],
	[[120096, 120096], "mapped", [99]],
	[[120097, 120097], "mapped", [100]],
	[[120098, 120098], "mapped", [101]],
	[[120099, 120099], "mapped", [102]],
	[[120100, 120100], "mapped", [103]],
	[[120101, 120101], "mapped", [104]],
	[[120102, 120102], "mapped", [105]],
	[[120103, 120103], "mapped", [106]],
	[[120104, 120104], "mapped", [107]],
	[[120105, 120105], "mapped", [108]],
	[[120106, 120106], "mapped", [109]],
	[[120107, 120107], "mapped", [110]],
	[[120108, 120108], "mapped", [111]],
	[[120109, 120109], "mapped", [112]],
	[[120110, 120110], "mapped", [113]],
	[[120111, 120111], "mapped", [114]],
	[[120112, 120112], "mapped", [115]],
	[[120113, 120113], "mapped", [116]],
	[[120114, 120114], "mapped", [117]],
	[[120115, 120115], "mapped", [118]],
	[[120116, 120116], "mapped", [119]],
	[[120117, 120117], "mapped", [120]],
	[[120118, 120118], "mapped", [121]],
	[[120119, 120119], "mapped", [122]],
	[[120120, 120120], "mapped", [97]],
	[[120121, 120121], "mapped", [98]],
	[[120122, 120122], "disallowed"],
	[[120123, 120123], "mapped", [100]],
	[[120124, 120124], "mapped", [101]],
	[[120125, 120125], "mapped", [102]],
	[[120126, 120126], "mapped", [103]],
	[[120127, 120127], "disallowed"],
	[[120128, 120128], "mapped", [105]],
	[[120129, 120129], "mapped", [106]],
	[[120130, 120130], "mapped", [107]],
	[[120131, 120131], "mapped", [108]],
	[[120132, 120132], "mapped", [109]],
	[[120133, 120133], "disallowed"],
	[[120134, 120134], "mapped", [111]],
	[[120135, 120137], "disallowed"],
	[[120138, 120138], "mapped", [115]],
	[[120139, 120139], "mapped", [116]],
	[[120140, 120140], "mapped", [117]],
	[[120141, 120141], "mapped", [118]],
	[[120142, 120142], "mapped", [119]],
	[[120143, 120143], "mapped", [120]],
	[[120144, 120144], "mapped", [121]],
	[[120145, 120145], "disallowed"],
	[[120146, 120146], "mapped", [97]],
	[[120147, 120147], "mapped", [98]],
	[[120148, 120148], "mapped", [99]],
	[[120149, 120149], "mapped", [100]],
	[[120150, 120150], "mapped", [101]],
	[[120151, 120151], "mapped", [102]],
	[[120152, 120152], "mapped", [103]],
	[[120153, 120153], "mapped", [104]],
	[[120154, 120154], "mapped", [105]],
	[[120155, 120155], "mapped", [106]],
	[[120156, 120156], "mapped", [107]],
	[[120157, 120157], "mapped", [108]],
	[[120158, 120158], "mapped", [109]],
	[[120159, 120159], "mapped", [110]],
	[[120160, 120160], "mapped", [111]],
	[[120161, 120161], "mapped", [112]],
	[[120162, 120162], "mapped", [113]],
	[[120163, 120163], "mapped", [114]],
	[[120164, 120164], "mapped", [115]],
	[[120165, 120165], "mapped", [116]],
	[[120166, 120166], "mapped", [117]],
	[[120167, 120167], "mapped", [118]],
	[[120168, 120168], "mapped", [119]],
	[[120169, 120169], "mapped", [120]],
	[[120170, 120170], "mapped", [121]],
	[[120171, 120171], "mapped", [122]],
	[[120172, 120172], "mapped", [97]],
	[[120173, 120173], "mapped", [98]],
	[[120174, 120174], "mapped", [99]],
	[[120175, 120175], "mapped", [100]],
	[[120176, 120176], "mapped", [101]],
	[[120177, 120177], "mapped", [102]],
	[[120178, 120178], "mapped", [103]],
	[[120179, 120179], "mapped", [104]],
	[[120180, 120180], "mapped", [105]],
	[[120181, 120181], "mapped", [106]],
	[[120182, 120182], "mapped", [107]],
	[[120183, 120183], "mapped", [108]],
	[[120184, 120184], "mapped", [109]],
	[[120185, 120185], "mapped", [110]],
	[[120186, 120186], "mapped", [111]],
	[[120187, 120187], "mapped", [112]],
	[[120188, 120188], "mapped", [113]],
	[[120189, 120189], "mapped", [114]],
	[[120190, 120190], "mapped", [115]],
	[[120191, 120191], "mapped", [116]],
	[[120192, 120192], "mapped", [117]],
	[[120193, 120193], "mapped", [118]],
	[[120194, 120194], "mapped", [119]],
	[[120195, 120195], "mapped", [120]],
	[[120196, 120196], "mapped", [121]],
	[[120197, 120197], "mapped", [122]],
	[[120198, 120198], "mapped", [97]],
	[[120199, 120199], "mapped", [98]],
	[[120200, 120200], "mapped", [99]],
	[[120201, 120201], "mapped", [100]],
	[[120202, 120202], "mapped", [101]],
	[[120203, 120203], "mapped", [102]],
	[[120204, 120204], "mapped", [103]],
	[[120205, 120205], "mapped", [104]],
	[[120206, 120206], "mapped", [105]],
	[[120207, 120207], "mapped", [106]],
	[[120208, 120208], "mapped", [107]],
	[[120209, 120209], "mapped", [108]],
	[[120210, 120210], "mapped", [109]],
	[[120211, 120211], "mapped", [110]],
	[[120212, 120212], "mapped", [111]],
	[[120213, 120213], "mapped", [112]],
	[[120214, 120214], "mapped", [113]],
	[[120215, 120215], "mapped", [114]],
	[[120216, 120216], "mapped", [115]],
	[[120217, 120217], "mapped", [116]],
	[[120218, 120218], "mapped", [117]],
	[[120219, 120219], "mapped", [118]],
	[[120220, 120220], "mapped", [119]],
	[[120221, 120221], "mapped", [120]],
	[[120222, 120222], "mapped", [121]],
	[[120223, 120223], "mapped", [122]],
	[[120224, 120224], "mapped", [97]],
	[[120225, 120225], "mapped", [98]],
	[[120226, 120226], "mapped", [99]],
	[[120227, 120227], "mapped", [100]],
	[[120228, 120228], "mapped", [101]],
	[[120229, 120229], "mapped", [102]],
	[[120230, 120230], "mapped", [103]],
	[[120231, 120231], "mapped", [104]],
	[[120232, 120232], "mapped", [105]],
	[[120233, 120233], "mapped", [106]],
	[[120234, 120234], "mapped", [107]],
	[[120235, 120235], "mapped", [108]],
	[[120236, 120236], "mapped", [109]],
	[[120237, 120237], "mapped", [110]],
	[[120238, 120238], "mapped", [111]],
	[[120239, 120239], "mapped", [112]],
	[[120240, 120240], "mapped", [113]],
	[[120241, 120241], "mapped", [114]],
	[[120242, 120242], "mapped", [115]],
	[[120243, 120243], "mapped", [116]],
	[[120244, 120244], "mapped", [117]],
	[[120245, 120245], "mapped", [118]],
	[[120246, 120246], "mapped", [119]],
	[[120247, 120247], "mapped", [120]],
	[[120248, 120248], "mapped", [121]],
	[[120249, 120249], "mapped", [122]],
	[[120250, 120250], "mapped", [97]],
	[[120251, 120251], "mapped", [98]],
	[[120252, 120252], "mapped", [99]],
	[[120253, 120253], "mapped", [100]],
	[[120254, 120254], "mapped", [101]],
	[[120255, 120255], "mapped", [102]],
	[[120256, 120256], "mapped", [103]],
	[[120257, 120257], "mapped", [104]],
	[[120258, 120258], "mapped", [105]],
	[[120259, 120259], "mapped", [106]],
	[[120260, 120260], "mapped", [107]],
	[[120261, 120261], "mapped", [108]],
	[[120262, 120262], "mapped", [109]],
	[[120263, 120263], "mapped", [110]],
	[[120264, 120264], "mapped", [111]],
	[[120265, 120265], "mapped", [112]],
	[[120266, 120266], "mapped", [113]],
	[[120267, 120267], "mapped", [114]],
	[[120268, 120268], "mapped", [115]],
	[[120269, 120269], "mapped", [116]],
	[[120270, 120270], "mapped", [117]],
	[[120271, 120271], "mapped", [118]],
	[[120272, 120272], "mapped", [119]],
	[[120273, 120273], "mapped", [120]],
	[[120274, 120274], "mapped", [121]],
	[[120275, 120275], "mapped", [122]],
	[[120276, 120276], "mapped", [97]],
	[[120277, 120277], "mapped", [98]],
	[[120278, 120278], "mapped", [99]],
	[[120279, 120279], "mapped", [100]],
	[[120280, 120280], "mapped", [101]],
	[[120281, 120281], "mapped", [102]],
	[[120282, 120282], "mapped", [103]],
	[[120283, 120283], "mapped", [104]],
	[[120284, 120284], "mapped", [105]],
	[[120285, 120285], "mapped", [106]],
	[[120286, 120286], "mapped", [107]],
	[[120287, 120287], "mapped", [108]],
	[[120288, 120288], "mapped", [109]],
	[[120289, 120289], "mapped", [110]],
	[[120290, 120290], "mapped", [111]],
	[[120291, 120291], "mapped", [112]],
	[[120292, 120292], "mapped", [113]],
	[[120293, 120293], "mapped", [114]],
	[[120294, 120294], "mapped", [115]],
	[[120295, 120295], "mapped", [116]],
	[[120296, 120296], "mapped", [117]],
	[[120297, 120297], "mapped", [118]],
	[[120298, 120298], "mapped", [119]],
	[[120299, 120299], "mapped", [120]],
	[[120300, 120300], "mapped", [121]],
	[[120301, 120301], "mapped", [122]],
	[[120302, 120302], "mapped", [97]],
	[[120303, 120303], "mapped", [98]],
	[[120304, 120304], "mapped", [99]],
	[[120305, 120305], "mapped", [100]],
	[[120306, 120306], "mapped", [101]],
	[[120307, 120307], "mapped", [102]],
	[[120308, 120308], "mapped", [103]],
	[[120309, 120309], "mapped", [104]],
	[[120310, 120310], "mapped", [105]],
	[[120311, 120311], "mapped", [106]],
	[[120312, 120312], "mapped", [107]],
	[[120313, 120313], "mapped", [108]],
	[[120314, 120314], "mapped", [109]],
	[[120315, 120315], "mapped", [110]],
	[[120316, 120316], "mapped", [111]],
	[[120317, 120317], "mapped", [112]],
	[[120318, 120318], "mapped", [113]],
	[[120319, 120319], "mapped", [114]],
	[[120320, 120320], "mapped", [115]],
	[[120321, 120321], "mapped", [116]],
	[[120322, 120322], "mapped", [117]],
	[[120323, 120323], "mapped", [118]],
	[[120324, 120324], "mapped", [119]],
	[[120325, 120325], "mapped", [120]],
	[[120326, 120326], "mapped", [121]],
	[[120327, 120327], "mapped", [122]],
	[[120328, 120328], "mapped", [97]],
	[[120329, 120329], "mapped", [98]],
	[[120330, 120330], "mapped", [99]],
	[[120331, 120331], "mapped", [100]],
	[[120332, 120332], "mapped", [101]],
	[[120333, 120333], "mapped", [102]],
	[[120334, 120334], "mapped", [103]],
	[[120335, 120335], "mapped", [104]],
	[[120336, 120336], "mapped", [105]],
	[[120337, 120337], "mapped", [106]],
	[[120338, 120338], "mapped", [107]],
	[[120339, 120339], "mapped", [108]],
	[[120340, 120340], "mapped", [109]],
	[[120341, 120341], "mapped", [110]],
	[[120342, 120342], "mapped", [111]],
	[[120343, 120343], "mapped", [112]],
	[[120344, 120344], "mapped", [113]],
	[[120345, 120345], "mapped", [114]],
	[[120346, 120346], "mapped", [115]],
	[[120347, 120347], "mapped", [116]],
	[[120348, 120348], "mapped", [117]],
	[[120349, 120349], "mapped", [118]],
	[[120350, 120350], "mapped", [119]],
	[[120351, 120351], "mapped", [120]],
	[[120352, 120352], "mapped", [121]],
	[[120353, 120353], "mapped", [122]],
	[[120354, 120354], "mapped", [97]],
	[[120355, 120355], "mapped", [98]],
	[[120356, 120356], "mapped", [99]],
	[[120357, 120357], "mapped", [100]],
	[[120358, 120358], "mapped", [101]],
	[[120359, 120359], "mapped", [102]],
	[[120360, 120360], "mapped", [103]],
	[[120361, 120361], "mapped", [104]],
	[[120362, 120362], "mapped", [105]],
	[[120363, 120363], "mapped", [106]],
	[[120364, 120364], "mapped", [107]],
	[[120365, 120365], "mapped", [108]],
	[[120366, 120366], "mapped", [109]],
	[[120367, 120367], "mapped", [110]],
	[[120368, 120368], "mapped", [111]],
	[[120369, 120369], "mapped", [112]],
	[[120370, 120370], "mapped", [113]],
	[[120371, 120371], "mapped", [114]],
	[[120372, 120372], "mapped", [115]],
	[[120373, 120373], "mapped", [116]],
	[[120374, 120374], "mapped", [117]],
	[[120375, 120375], "mapped", [118]],
	[[120376, 120376], "mapped", [119]],
	[[120377, 120377], "mapped", [120]],
	[[120378, 120378], "mapped", [121]],
	[[120379, 120379], "mapped", [122]],
	[[120380, 120380], "mapped", [97]],
	[[120381, 120381], "mapped", [98]],
	[[120382, 120382], "mapped", [99]],
	[[120383, 120383], "mapped", [100]],
	[[120384, 120384], "mapped", [101]],
	[[120385, 120385], "mapped", [102]],
	[[120386, 120386], "mapped", [103]],
	[[120387, 120387], "mapped", [104]],
	[[120388, 120388], "mapped", [105]],
	[[120389, 120389], "mapped", [106]],
	[[120390, 120390], "mapped", [107]],
	[[120391, 120391], "mapped", [108]],
	[[120392, 120392], "mapped", [109]],
	[[120393, 120393], "mapped", [110]],
	[[120394, 120394], "mapped", [111]],
	[[120395, 120395], "mapped", [112]],
	[[120396, 120396], "mapped", [113]],
	[[120397, 120397], "mapped", [114]],
	[[120398, 120398], "mapped", [115]],
	[[120399, 120399], "mapped", [116]],
	[[120400, 120400], "mapped", [117]],
	[[120401, 120401], "mapped", [118]],
	[[120402, 120402], "mapped", [119]],
	[[120403, 120403], "mapped", [120]],
	[[120404, 120404], "mapped", [121]],
	[[120405, 120405], "mapped", [122]],
	[[120406, 120406], "mapped", [97]],
	[[120407, 120407], "mapped", [98]],
	[[120408, 120408], "mapped", [99]],
	[[120409, 120409], "mapped", [100]],
	[[120410, 120410], "mapped", [101]],
	[[120411, 120411], "mapped", [102]],
	[[120412, 120412], "mapped", [103]],
	[[120413, 120413], "mapped", [104]],
	[[120414, 120414], "mapped", [105]],
	[[120415, 120415], "mapped", [106]],
	[[120416, 120416], "mapped", [107]],
	[[120417, 120417], "mapped", [108]],
	[[120418, 120418], "mapped", [109]],
	[[120419, 120419], "mapped", [110]],
	[[120420, 120420], "mapped", [111]],
	[[120421, 120421], "mapped", [112]],
	[[120422, 120422], "mapped", [113]],
	[[120423, 120423], "mapped", [114]],
	[[120424, 120424], "mapped", [115]],
	[[120425, 120425], "mapped", [116]],
	[[120426, 120426], "mapped", [117]],
	[[120427, 120427], "mapped", [118]],
	[[120428, 120428], "mapped", [119]],
	[[120429, 120429], "mapped", [120]],
	[[120430, 120430], "mapped", [121]],
	[[120431, 120431], "mapped", [122]],
	[[120432, 120432], "mapped", [97]],
	[[120433, 120433], "mapped", [98]],
	[[120434, 120434], "mapped", [99]],
	[[120435, 120435], "mapped", [100]],
	[[120436, 120436], "mapped", [101]],
	[[120437, 120437], "mapped", [102]],
	[[120438, 120438], "mapped", [103]],
	[[120439, 120439], "mapped", [104]],
	[[120440, 120440], "mapped", [105]],
	[[120441, 120441], "mapped", [106]],
	[[120442, 120442], "mapped", [107]],
	[[120443, 120443], "mapped", [108]],
	[[120444, 120444], "mapped", [109]],
	[[120445, 120445], "mapped", [110]],
	[[120446, 120446], "mapped", [111]],
	[[120447, 120447], "mapped", [112]],
	[[120448, 120448], "mapped", [113]],
	[[120449, 120449], "mapped", [114]],
	[[120450, 120450], "mapped", [115]],
	[[120451, 120451], "mapped", [116]],
	[[120452, 120452], "mapped", [117]],
	[[120453, 120453], "mapped", [118]],
	[[120454, 120454], "mapped", [119]],
	[[120455, 120455], "mapped", [120]],
	[[120456, 120456], "mapped", [121]],
	[[120457, 120457], "mapped", [122]],
	[[120458, 120458], "mapped", [97]],
	[[120459, 120459], "mapped", [98]],
	[[120460, 120460], "mapped", [99]],
	[[120461, 120461], "mapped", [100]],
	[[120462, 120462], "mapped", [101]],
	[[120463, 120463], "mapped", [102]],
	[[120464, 120464], "mapped", [103]],
	[[120465, 120465], "mapped", [104]],
	[[120466, 120466], "mapped", [105]],
	[[120467, 120467], "mapped", [106]],
	[[120468, 120468], "mapped", [107]],
	[[120469, 120469], "mapped", [108]],
	[[120470, 120470], "mapped", [109]],
	[[120471, 120471], "mapped", [110]],
	[[120472, 120472], "mapped", [111]],
	[[120473, 120473], "mapped", [112]],
	[[120474, 120474], "mapped", [113]],
	[[120475, 120475], "mapped", [114]],
	[[120476, 120476], "mapped", [115]],
	[[120477, 120477], "mapped", [116]],
	[[120478, 120478], "mapped", [117]],
	[[120479, 120479], "mapped", [118]],
	[[120480, 120480], "mapped", [119]],
	[[120481, 120481], "mapped", [120]],
	[[120482, 120482], "mapped", [121]],
	[[120483, 120483], "mapped", [122]],
	[[120484, 120484], "mapped", [305]],
	[[120485, 120485], "mapped", [567]],
	[[120486, 120487], "disallowed"],
	[[120488, 120488], "mapped", [945]],
	[[120489, 120489], "mapped", [946]],
	[[120490, 120490], "mapped", [947]],
	[[120491, 120491], "mapped", [948]],
	[[120492, 120492], "mapped", [949]],
	[[120493, 120493], "mapped", [950]],
	[[120494, 120494], "mapped", [951]],
	[[120495, 120495], "mapped", [952]],
	[[120496, 120496], "mapped", [953]],
	[[120497, 120497], "mapped", [954]],
	[[120498, 120498], "mapped", [955]],
	[[120499, 120499], "mapped", [956]],
	[[120500, 120500], "mapped", [957]],
	[[120501, 120501], "mapped", [958]],
	[[120502, 120502], "mapped", [959]],
	[[120503, 120503], "mapped", [960]],
	[[120504, 120504], "mapped", [961]],
	[[120505, 120505], "mapped", [952]],
	[[120506, 120506], "mapped", [963]],
	[[120507, 120507], "mapped", [964]],
	[[120508, 120508], "mapped", [965]],
	[[120509, 120509], "mapped", [966]],
	[[120510, 120510], "mapped", [967]],
	[[120511, 120511], "mapped", [968]],
	[[120512, 120512], "mapped", [969]],
	[[120513, 120513], "mapped", [8711]],
	[[120514, 120514], "mapped", [945]],
	[[120515, 120515], "mapped", [946]],
	[[120516, 120516], "mapped", [947]],
	[[120517, 120517], "mapped", [948]],
	[[120518, 120518], "mapped", [949]],
	[[120519, 120519], "mapped", [950]],
	[[120520, 120520], "mapped", [951]],
	[[120521, 120521], "mapped", [952]],
	[[120522, 120522], "mapped", [953]],
	[[120523, 120523], "mapped", [954]],
	[[120524, 120524], "mapped", [955]],
	[[120525, 120525], "mapped", [956]],
	[[120526, 120526], "mapped", [957]],
	[[120527, 120527], "mapped", [958]],
	[[120528, 120528], "mapped", [959]],
	[[120529, 120529], "mapped", [960]],
	[[120530, 120530], "mapped", [961]],
	[[120531, 120532], "mapped", [963]],
	[[120533, 120533], "mapped", [964]],
	[[120534, 120534], "mapped", [965]],
	[[120535, 120535], "mapped", [966]],
	[[120536, 120536], "mapped", [967]],
	[[120537, 120537], "mapped", [968]],
	[[120538, 120538], "mapped", [969]],
	[[120539, 120539], "mapped", [8706]],
	[[120540, 120540], "mapped", [949]],
	[[120541, 120541], "mapped", [952]],
	[[120542, 120542], "mapped", [954]],
	[[120543, 120543], "mapped", [966]],
	[[120544, 120544], "mapped", [961]],
	[[120545, 120545], "mapped", [960]],
	[[120546, 120546], "mapped", [945]],
	[[120547, 120547], "mapped", [946]],
	[[120548, 120548], "mapped", [947]],
	[[120549, 120549], "mapped", [948]],
	[[120550, 120550], "mapped", [949]],
	[[120551, 120551], "mapped", [950]],
	[[120552, 120552], "mapped", [951]],
	[[120553, 120553], "mapped", [952]],
	[[120554, 120554], "mapped", [953]],
	[[120555, 120555], "mapped", [954]],
	[[120556, 120556], "mapped", [955]],
	[[120557, 120557], "mapped", [956]],
	[[120558, 120558], "mapped", [957]],
	[[120559, 120559], "mapped", [958]],
	[[120560, 120560], "mapped", [959]],
	[[120561, 120561], "mapped", [960]],
	[[120562, 120562], "mapped", [961]],
	[[120563, 120563], "mapped", [952]],
	[[120564, 120564], "mapped", [963]],
	[[120565, 120565], "mapped", [964]],
	[[120566, 120566], "mapped", [965]],
	[[120567, 120567], "mapped", [966]],
	[[120568, 120568], "mapped", [967]],
	[[120569, 120569], "mapped", [968]],
	[[120570, 120570], "mapped", [969]],
	[[120571, 120571], "mapped", [8711]],
	[[120572, 120572], "mapped", [945]],
	[[120573, 120573], "mapped", [946]],
	[[120574, 120574], "mapped", [947]],
	[[120575, 120575], "mapped", [948]],
	[[120576, 120576], "mapped", [949]],
	[[120577, 120577], "mapped", [950]],
	[[120578, 120578], "mapped", [951]],
	[[120579, 120579], "mapped", [952]],
	[[120580, 120580], "mapped", [953]],
	[[120581, 120581], "mapped", [954]],
	[[120582, 120582], "mapped", [955]],
	[[120583, 120583], "mapped", [956]],
	[[120584, 120584], "mapped", [957]],
	[[120585, 120585], "mapped", [958]],
	[[120586, 120586], "mapped", [959]],
	[[120587, 120587], "mapped", [960]],
	[[120588, 120588], "mapped", [961]],
	[[120589, 120590], "mapped", [963]],
	[[120591, 120591], "mapped", [964]],
	[[120592, 120592], "mapped", [965]],
	[[120593, 120593], "mapped", [966]],
	[[120594, 120594], "mapped", [967]],
	[[120595, 120595], "mapped", [968]],
	[[120596, 120596], "mapped", [969]],
	[[120597, 120597], "mapped", [8706]],
	[[120598, 120598], "mapped", [949]],
	[[120599, 120599], "mapped", [952]],
	[[120600, 120600], "mapped", [954]],
	[[120601, 120601], "mapped", [966]],
	[[120602, 120602], "mapped", [961]],
	[[120603, 120603], "mapped", [960]],
	[[120604, 120604], "mapped", [945]],
	[[120605, 120605], "mapped", [946]],
	[[120606, 120606], "mapped", [947]],
	[[120607, 120607], "mapped", [948]],
	[[120608, 120608], "mapped", [949]],
	[[120609, 120609], "mapped", [950]],
	[[120610, 120610], "mapped", [951]],
	[[120611, 120611], "mapped", [952]],
	[[120612, 120612], "mapped", [953]],
	[[120613, 120613], "mapped", [954]],
	[[120614, 120614], "mapped", [955]],
	[[120615, 120615], "mapped", [956]],
	[[120616, 120616], "mapped", [957]],
	[[120617, 120617], "mapped", [958]],
	[[120618, 120618], "mapped", [959]],
	[[120619, 120619], "mapped", [960]],
	[[120620, 120620], "mapped", [961]],
	[[120621, 120621], "mapped", [952]],
	[[120622, 120622], "mapped", [963]],
	[[120623, 120623], "mapped", [964]],
	[[120624, 120624], "mapped", [965]],
	[[120625, 120625], "mapped", [966]],
	[[120626, 120626], "mapped", [967]],
	[[120627, 120627], "mapped", [968]],
	[[120628, 120628], "mapped", [969]],
	[[120629, 120629], "mapped", [8711]],
	[[120630, 120630], "mapped", [945]],
	[[120631, 120631], "mapped", [946]],
	[[120632, 120632], "mapped", [947]],
	[[120633, 120633], "mapped", [948]],
	[[120634, 120634], "mapped", [949]],
	[[120635, 120635], "mapped", [950]],
	[[120636, 120636], "mapped", [951]],
	[[120637, 120637], "mapped", [952]],
	[[120638, 120638], "mapped", [953]],
	[[120639, 120639], "mapped", [954]],
	[[120640, 120640], "mapped", [955]],
	[[120641, 120641], "mapped", [956]],
	[[120642, 120642], "mapped", [957]],
	[[120643, 120643], "mapped", [958]],
	[[120644, 120644], "mapped", [959]],
	[[120645, 120645], "mapped", [960]],
	[[120646, 120646], "mapped", [961]],
	[[120647, 120648], "mapped", [963]],
	[[120649, 120649], "mapped", [964]],
	[[120650, 120650], "mapped", [965]],
	[[120651, 120651], "mapped", [966]],
	[[120652, 120652], "mapped", [967]],
	[[120653, 120653], "mapped", [968]],
	[[120654, 120654], "mapped", [969]],
	[[120655, 120655], "mapped", [8706]],
	[[120656, 120656], "mapped", [949]],
	[[120657, 120657], "mapped", [952]],
	[[120658, 120658], "mapped", [954]],
	[[120659, 120659], "mapped", [966]],
	[[120660, 120660], "mapped", [961]],
	[[120661, 120661], "mapped", [960]],
	[[120662, 120662], "mapped", [945]],
	[[120663, 120663], "mapped", [946]],
	[[120664, 120664], "mapped", [947]],
	[[120665, 120665], "mapped", [948]],
	[[120666, 120666], "mapped", [949]],
	[[120667, 120667], "mapped", [950]],
	[[120668, 120668], "mapped", [951]],
	[[120669, 120669], "mapped", [952]],
	[[120670, 120670], "mapped", [953]],
	[[120671, 120671], "mapped", [954]],
	[[120672, 120672], "mapped", [955]],
	[[120673, 120673], "mapped", [956]],
	[[120674, 120674], "mapped", [957]],
	[[120675, 120675], "mapped", [958]],
	[[120676, 120676], "mapped", [959]],
	[[120677, 120677], "mapped", [960]],
	[[120678, 120678], "mapped", [961]],
	[[120679, 120679], "mapped", [952]],
	[[120680, 120680], "mapped", [963]],
	[[120681, 120681], "mapped", [964]],
	[[120682, 120682], "mapped", [965]],
	[[120683, 120683], "mapped", [966]],
	[[120684, 120684], "mapped", [967]],
	[[120685, 120685], "mapped", [968]],
	[[120686, 120686], "mapped", [969]],
	[[120687, 120687], "mapped", [8711]],
	[[120688, 120688], "mapped", [945]],
	[[120689, 120689], "mapped", [946]],
	[[120690, 120690], "mapped", [947]],
	[[120691, 120691], "mapped", [948]],
	[[120692, 120692], "mapped", [949]],
	[[120693, 120693], "mapped", [950]],
	[[120694, 120694], "mapped", [951]],
	[[120695, 120695], "mapped", [952]],
	[[120696, 120696], "mapped", [953]],
	[[120697, 120697], "mapped", [954]],
	[[120698, 120698], "mapped", [955]],
	[[120699, 120699], "mapped", [956]],
	[[120700, 120700], "mapped", [957]],
	[[120701, 120701], "mapped", [958]],
	[[120702, 120702], "mapped", [959]],
	[[120703, 120703], "mapped", [960]],
	[[120704, 120704], "mapped", [961]],
	[[120705, 120706], "mapped", [963]],
	[[120707, 120707], "mapped", [964]],
	[[120708, 120708], "mapped", [965]],
	[[120709, 120709], "mapped", [966]],
	[[120710, 120710], "mapped", [967]],
	[[120711, 120711], "mapped", [968]],
	[[120712, 120712], "mapped", [969]],
	[[120713, 120713], "mapped", [8706]],
	[[120714, 120714], "mapped", [949]],
	[[120715, 120715], "mapped", [952]],
	[[120716, 120716], "mapped", [954]],
	[[120717, 120717], "mapped", [966]],
	[[120718, 120718], "mapped", [961]],
	[[120719, 120719], "mapped", [960]],
	[[120720, 120720], "mapped", [945]],
	[[120721, 120721], "mapped", [946]],
	[[120722, 120722], "mapped", [947]],
	[[120723, 120723], "mapped", [948]],
	[[120724, 120724], "mapped", [949]],
	[[120725, 120725], "mapped", [950]],
	[[120726, 120726], "mapped", [951]],
	[[120727, 120727], "mapped", [952]],
	[[120728, 120728], "mapped", [953]],
	[[120729, 120729], "mapped", [954]],
	[[120730, 120730], "mapped", [955]],
	[[120731, 120731], "mapped", [956]],
	[[120732, 120732], "mapped", [957]],
	[[120733, 120733], "mapped", [958]],
	[[120734, 120734], "mapped", [959]],
	[[120735, 120735], "mapped", [960]],
	[[120736, 120736], "mapped", [961]],
	[[120737, 120737], "mapped", [952]],
	[[120738, 120738], "mapped", [963]],
	[[120739, 120739], "mapped", [964]],
	[[120740, 120740], "mapped", [965]],
	[[120741, 120741], "mapped", [966]],
	[[120742, 120742], "mapped", [967]],
	[[120743, 120743], "mapped", [968]],
	[[120744, 120744], "mapped", [969]],
	[[120745, 120745], "mapped", [8711]],
	[[120746, 120746], "mapped", [945]],
	[[120747, 120747], "mapped", [946]],
	[[120748, 120748], "mapped", [947]],
	[[120749, 120749], "mapped", [948]],
	[[120750, 120750], "mapped", [949]],
	[[120751, 120751], "mapped", [950]],
	[[120752, 120752], "mapped", [951]],
	[[120753, 120753], "mapped", [952]],
	[[120754, 120754], "mapped", [953]],
	[[120755, 120755], "mapped", [954]],
	[[120756, 120756], "mapped", [955]],
	[[120757, 120757], "mapped", [956]],
	[[120758, 120758], "mapped", [957]],
	[[120759, 120759], "mapped", [958]],
	[[120760, 120760], "mapped", [959]],
	[[120761, 120761], "mapped", [960]],
	[[120762, 120762], "mapped", [961]],
	[[120763, 120764], "mapped", [963]],
	[[120765, 120765], "mapped", [964]],
	[[120766, 120766], "mapped", [965]],
	[[120767, 120767], "mapped", [966]],
	[[120768, 120768], "mapped", [967]],
	[[120769, 120769], "mapped", [968]],
	[[120770, 120770], "mapped", [969]],
	[[120771, 120771], "mapped", [8706]],
	[[120772, 120772], "mapped", [949]],
	[[120773, 120773], "mapped", [952]],
	[[120774, 120774], "mapped", [954]],
	[[120775, 120775], "mapped", [966]],
	[[120776, 120776], "mapped", [961]],
	[[120777, 120777], "mapped", [960]],
	[[120778, 120779], "mapped", [989]],
	[[120780, 120781], "disallowed"],
	[[120782, 120782], "mapped", [48]],
	[[120783, 120783], "mapped", [49]],
	[[120784, 120784], "mapped", [50]],
	[[120785, 120785], "mapped", [51]],
	[[120786, 120786], "mapped", [52]],
	[[120787, 120787], "mapped", [53]],
	[[120788, 120788], "mapped", [54]],
	[[120789, 120789], "mapped", [55]],
	[[120790, 120790], "mapped", [56]],
	[[120791, 120791], "mapped", [57]],
	[[120792, 120792], "mapped", [48]],
	[[120793, 120793], "mapped", [49]],
	[[120794, 120794], "mapped", [50]],
	[[120795, 120795], "mapped", [51]],
	[[120796, 120796], "mapped", [52]],
	[[120797, 120797], "mapped", [53]],
	[[120798, 120798], "mapped", [54]],
	[[120799, 120799], "mapped", [55]],
	[[120800, 120800], "mapped", [56]],
	[[120801, 120801], "mapped", [57]],
	[[120802, 120802], "mapped", [48]],
	[[120803, 120803], "mapped", [49]],
	[[120804, 120804], "mapped", [50]],
	[[120805, 120805], "mapped", [51]],
	[[120806, 120806], "mapped", [52]],
	[[120807, 120807], "mapped", [53]],
	[[120808, 120808], "mapped", [54]],
	[[120809, 120809], "mapped", [55]],
	[[120810, 120810], "mapped", [56]],
	[[120811, 120811], "mapped", [57]],
	[[120812, 120812], "mapped", [48]],
	[[120813, 120813], "mapped", [49]],
	[[120814, 120814], "mapped", [50]],
	[[120815, 120815], "mapped", [51]],
	[[120816, 120816], "mapped", [52]],
	[[120817, 120817], "mapped", [53]],
	[[120818, 120818], "mapped", [54]],
	[[120819, 120819], "mapped", [55]],
	[[120820, 120820], "mapped", [56]],
	[[120821, 120821], "mapped", [57]],
	[[120822, 120822], "mapped", [48]],
	[[120823, 120823], "mapped", [49]],
	[[120824, 120824], "mapped", [50]],
	[[120825, 120825], "mapped", [51]],
	[[120826, 120826], "mapped", [52]],
	[[120827, 120827], "mapped", [53]],
	[[120828, 120828], "mapped", [54]],
	[[120829, 120829], "mapped", [55]],
	[[120830, 120830], "mapped", [56]],
	[[120831, 120831], "mapped", [57]],
	[[120832, 121343], "valid", [], "NV8"],
	[[121344, 121398], "valid"],
	[[121399, 121402], "valid", [], "NV8"],
	[[121403, 121452], "valid"],
	[[121453, 121460], "valid", [], "NV8"],
	[[121461, 121461], "valid"],
	[[121462, 121475], "valid", [], "NV8"],
	[[121476, 121476], "valid"],
	[[121477, 121483], "valid", [], "NV8"],
	[[121484, 121498], "disallowed"],
	[[121499, 121503], "valid"],
	[[121504, 121504], "disallowed"],
	[[121505, 121519], "valid"],
	[[121520, 124927], "disallowed"],
	[[124928, 125124], "valid"],
	[[125125, 125126], "disallowed"],
	[[125127, 125135], "valid", [], "NV8"],
	[[125136, 125142], "valid"],
	[[125143, 126463], "disallowed"],
	[[126464, 126464], "mapped", [1575]],
	[[126465, 126465], "mapped", [1576]],
	[[126466, 126466], "mapped", [1580]],
	[[126467, 126467], "mapped", [1583]],
	[[126468, 126468], "disallowed"],
	[[126469, 126469], "mapped", [1608]],
	[[126470, 126470], "mapped", [1586]],
	[[126471, 126471], "mapped", [1581]],
	[[126472, 126472], "mapped", [1591]],
	[[126473, 126473], "mapped", [1610]],
	[[126474, 126474], "mapped", [1603]],
	[[126475, 126475], "mapped", [1604]],
	[[126476, 126476], "mapped", [1605]],
	[[126477, 126477], "mapped", [1606]],
	[[126478, 126478], "mapped", [1587]],
	[[126479, 126479], "mapped", [1593]],
	[[126480, 126480], "mapped", [1601]],
	[[126481, 126481], "mapped", [1589]],
	[[126482, 126482], "mapped", [1602]],
	[[126483, 126483], "mapped", [1585]],
	[[126484, 126484], "mapped", [1588]],
	[[126485, 126485], "mapped", [1578]],
	[[126486, 126486], "mapped", [1579]],
	[[126487, 126487], "mapped", [1582]],
	[[126488, 126488], "mapped", [1584]],
	[[126489, 126489], "mapped", [1590]],
	[[126490, 126490], "mapped", [1592]],
	[[126491, 126491], "mapped", [1594]],
	[[126492, 126492], "mapped", [1646]],
	[[126493, 126493], "mapped", [1722]],
	[[126494, 126494], "mapped", [1697]],
	[[126495, 126495], "mapped", [1647]],
	[[126496, 126496], "disallowed"],
	[[126497, 126497], "mapped", [1576]],
	[[126498, 126498], "mapped", [1580]],
	[[126499, 126499], "disallowed"],
	[[126500, 126500], "mapped", [1607]],
	[[126501, 126502], "disallowed"],
	[[126503, 126503], "mapped", [1581]],
	[[126504, 126504], "disallowed"],
	[[126505, 126505], "mapped", [1610]],
	[[126506, 126506], "mapped", [1603]],
	[[126507, 126507], "mapped", [1604]],
	[[126508, 126508], "mapped", [1605]],
	[[126509, 126509], "mapped", [1606]],
	[[126510, 126510], "mapped", [1587]],
	[[126511, 126511], "mapped", [1593]],
	[[126512, 126512], "mapped", [1601]],
	[[126513, 126513], "mapped", [1589]],
	[[126514, 126514], "mapped", [1602]],
	[[126515, 126515], "disallowed"],
	[[126516, 126516], "mapped", [1588]],
	[[126517, 126517], "mapped", [1578]],
	[[126518, 126518], "mapped", [1579]],
	[[126519, 126519], "mapped", [1582]],
	[[126520, 126520], "disallowed"],
	[[126521, 126521], "mapped", [1590]],
	[[126522, 126522], "disallowed"],
	[[126523, 126523], "mapped", [1594]],
	[[126524, 126529], "disallowed"],
	[[126530, 126530], "mapped", [1580]],
	[[126531, 126534], "disallowed"],
	[[126535, 126535], "mapped", [1581]],
	[[126536, 126536], "disallowed"],
	[[126537, 126537], "mapped", [1610]],
	[[126538, 126538], "disallowed"],
	[[126539, 126539], "mapped", [1604]],
	[[126540, 126540], "disallowed"],
	[[126541, 126541], "mapped", [1606]],
	[[126542, 126542], "mapped", [1587]],
	[[126543, 126543], "mapped", [1593]],
	[[126544, 126544], "disallowed"],
	[[126545, 126545], "mapped", [1589]],
	[[126546, 126546], "mapped", [1602]],
	[[126547, 126547], "disallowed"],
	[[126548, 126548], "mapped", [1588]],
	[[126549, 126550], "disallowed"],
	[[126551, 126551], "mapped", [1582]],
	[[126552, 126552], "disallowed"],
	[[126553, 126553], "mapped", [1590]],
	[[126554, 126554], "disallowed"],
	[[126555, 126555], "mapped", [1594]],
	[[126556, 126556], "disallowed"],
	[[126557, 126557], "mapped", [1722]],
	[[126558, 126558], "disallowed"],
	[[126559, 126559], "mapped", [1647]],
	[[126560, 126560], "disallowed"],
	[[126561, 126561], "mapped", [1576]],
	[[126562, 126562], "mapped", [1580]],
	[[126563, 126563], "disallowed"],
	[[126564, 126564], "mapped", [1607]],
	[[126565, 126566], "disallowed"],
	[[126567, 126567], "mapped", [1581]],
	[[126568, 126568], "mapped", [1591]],
	[[126569, 126569], "mapped", [1610]],
	[[126570, 126570], "mapped", [1603]],
	[[126571, 126571], "disallowed"],
	[[126572, 126572], "mapped", [1605]],
	[[126573, 126573], "mapped", [1606]],
	[[126574, 126574], "mapped", [1587]],
	[[126575, 126575], "mapped", [1593]],
	[[126576, 126576], "mapped", [1601]],
	[[126577, 126577], "mapped", [1589]],
	[[126578, 126578], "mapped", [1602]],
	[[126579, 126579], "disallowed"],
	[[126580, 126580], "mapped", [1588]],
	[[126581, 126581], "mapped", [1578]],
	[[126582, 126582], "mapped", [1579]],
	[[126583, 126583], "mapped", [1582]],
	[[126584, 126584], "disallowed"],
	[[126585, 126585], "mapped", [1590]],
	[[126586, 126586], "mapped", [1592]],
	[[126587, 126587], "mapped", [1594]],
	[[126588, 126588], "mapped", [1646]],
	[[126589, 126589], "disallowed"],
	[[126590, 126590], "mapped", [1697]],
	[[126591, 126591], "disallowed"],
	[[126592, 126592], "mapped", [1575]],
	[[126593, 126593], "mapped", [1576]],
	[[126594, 126594], "mapped", [1580]],
	[[126595, 126595], "mapped", [1583]],
	[[126596, 126596], "mapped", [1607]],
	[[126597, 126597], "mapped", [1608]],
	[[126598, 126598], "mapped", [1586]],
	[[126599, 126599], "mapped", [1581]],
	[[126600, 126600], "mapped", [1591]],
	[[126601, 126601], "mapped", [1610]],
	[[126602, 126602], "disallowed"],
	[[126603, 126603], "mapped", [1604]],
	[[126604, 126604], "mapped", [1605]],
	[[126605, 126605], "mapped", [1606]],
	[[126606, 126606], "mapped", [1587]],
	[[126607, 126607], "mapped", [1593]],
	[[126608, 126608], "mapped", [1601]],
	[[126609, 126609], "mapped", [1589]],
	[[126610, 126610], "mapped", [1602]],
	[[126611, 126611], "mapped", [1585]],
	[[126612, 126612], "mapped", [1588]],
	[[126613, 126613], "mapped", [1578]],
	[[126614, 126614], "mapped", [1579]],
	[[126615, 126615], "mapped", [1582]],
	[[126616, 126616], "mapped", [1584]],
	[[126617, 126617], "mapped", [1590]],
	[[126618, 126618], "mapped", [1592]],
	[[126619, 126619], "mapped", [1594]],
	[[126620, 126624], "disallowed"],
	[[126625, 126625], "mapped", [1576]],
	[[126626, 126626], "mapped", [1580]],
	[[126627, 126627], "mapped", [1583]],
	[[126628, 126628], "disallowed"],
	[[126629, 126629], "mapped", [1608]],
	[[126630, 126630], "mapped", [1586]],
	[[126631, 126631], "mapped", [1581]],
	[[126632, 126632], "mapped", [1591]],
	[[126633, 126633], "mapped", [1610]],
	[[126634, 126634], "disallowed"],
	[[126635, 126635], "mapped", [1604]],
	[[126636, 126636], "mapped", [1605]],
	[[126637, 126637], "mapped", [1606]],
	[[126638, 126638], "mapped", [1587]],
	[[126639, 126639], "mapped", [1593]],
	[[126640, 126640], "mapped", [1601]],
	[[126641, 126641], "mapped", [1589]],
	[[126642, 126642], "mapped", [1602]],
	[[126643, 126643], "mapped", [1585]],
	[[126644, 126644], "mapped", [1588]],
	[[126645, 126645], "mapped", [1578]],
	[[126646, 126646], "mapped", [1579]],
	[[126647, 126647], "mapped", [1582]],
	[[126648, 126648], "mapped", [1584]],
	[[126649, 126649], "mapped", [1590]],
	[[126650, 126650], "mapped", [1592]],
	[[126651, 126651], "mapped", [1594]],
	[[126652, 126703], "disallowed"],
	[[126704, 126705], "valid", [], "NV8"],
	[[126706, 126975], "disallowed"],
	[[126976, 127019], "valid", [], "NV8"],
	[[127020, 127023], "disallowed"],
	[[127024, 127123], "valid", [], "NV8"],
	[[127124, 127135], "disallowed"],
	[[127136, 127150], "valid", [], "NV8"],
	[[127151, 127152], "disallowed"],
	[[127153, 127166], "valid", [], "NV8"],
	[[127167, 127167], "valid", [], "NV8"],
	[[127168, 127168], "disallowed"],
	[[127169, 127183], "valid", [], "NV8"],
	[[127184, 127184], "disallowed"],
	[[127185, 127199], "valid", [], "NV8"],
	[[127200, 127221], "valid", [], "NV8"],
	[[127222, 127231], "disallowed"],
	[[127232, 127232], "disallowed"],
	[[127233, 127233], "disallowed_STD3_mapped", [48, 44]],
	[[127234, 127234], "disallowed_STD3_mapped", [49, 44]],
	[[127235, 127235], "disallowed_STD3_mapped", [50, 44]],
	[[127236, 127236], "disallowed_STD3_mapped", [51, 44]],
	[[127237, 127237], "disallowed_STD3_mapped", [52, 44]],
	[[127238, 127238], "disallowed_STD3_mapped", [53, 44]],
	[[127239, 127239], "disallowed_STD3_mapped", [54, 44]],
	[[127240, 127240], "disallowed_STD3_mapped", [55, 44]],
	[[127241, 127241], "disallowed_STD3_mapped", [56, 44]],
	[[127242, 127242], "disallowed_STD3_mapped", [57, 44]],
	[[127243, 127244], "valid", [], "NV8"],
	[[127245, 127247], "disallowed"],
	[[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]],
	[[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]],
	[[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]],
	[[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]],
	[[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]],
	[[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]],
	[[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]],
	[[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]],
	[[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]],
	[[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]],
	[[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]],
	[[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]],
	[[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]],
	[[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]],
	[[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]],
	[[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]],
	[[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]],
	[[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]],
	[[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]],
	[[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]],
	[[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]],
	[[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]],
	[[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]],
	[[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]],
	[[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]],
	[[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]],
	[[127274, 127274], "mapped", [12308, 115, 12309]],
	[[127275, 127275], "mapped", [99]],
	[[127276, 127276], "mapped", [114]],
	[[127277, 127277], "mapped", [99, 100]],
	[[127278, 127278], "mapped", [119, 122]],
	[[127279, 127279], "disallowed"],
	[[127280, 127280], "mapped", [97]],
	[[127281, 127281], "mapped", [98]],
	[[127282, 127282], "mapped", [99]],
	[[127283, 127283], "mapped", [100]],
	[[127284, 127284], "mapped", [101]],
	[[127285, 127285], "mapped", [102]],
	[[127286, 127286], "mapped", [103]],
	[[127287, 127287], "mapped", [104]],
	[[127288, 127288], "mapped", [105]],
	[[127289, 127289], "mapped", [106]],
	[[127290, 127290], "mapped", [107]],
	[[127291, 127291], "mapped", [108]],
	[[127292, 127292], "mapped", [109]],
	[[127293, 127293], "mapped", [110]],
	[[127294, 127294], "mapped", [111]],
	[[127295, 127295], "mapped", [112]],
	[[127296, 127296], "mapped", [113]],
	[[127297, 127297], "mapped", [114]],
	[[127298, 127298], "mapped", [115]],
	[[127299, 127299], "mapped", [116]],
	[[127300, 127300], "mapped", [117]],
	[[127301, 127301], "mapped", [118]],
	[[127302, 127302], "mapped", [119]],
	[[127303, 127303], "mapped", [120]],
	[[127304, 127304], "mapped", [121]],
	[[127305, 127305], "mapped", [122]],
	[[127306, 127306], "mapped", [104, 118]],
	[[127307, 127307], "mapped", [109, 118]],
	[[127308, 127308], "mapped", [115, 100]],
	[[127309, 127309], "mapped", [115, 115]],
	[[127310, 127310], "mapped", [112, 112, 118]],
	[[127311, 127311], "mapped", [119, 99]],
	[[127312, 127318], "valid", [], "NV8"],
	[[127319, 127319], "valid", [], "NV8"],
	[[127320, 127326], "valid", [], "NV8"],
	[[127327, 127327], "valid", [], "NV8"],
	[[127328, 127337], "valid", [], "NV8"],
	[[127338, 127338], "mapped", [109, 99]],
	[[127339, 127339], "mapped", [109, 100]],
	[[127340, 127343], "disallowed"],
	[[127344, 127352], "valid", [], "NV8"],
	[[127353, 127353], "valid", [], "NV8"],
	[[127354, 127354], "valid", [], "NV8"],
	[[127355, 127356], "valid", [], "NV8"],
	[[127357, 127358], "valid", [], "NV8"],
	[[127359, 127359], "valid", [], "NV8"],
	[[127360, 127369], "valid", [], "NV8"],
	[[127370, 127373], "valid", [], "NV8"],
	[[127374, 127375], "valid", [], "NV8"],
	[[127376, 127376], "mapped", [100, 106]],
	[[127377, 127386], "valid", [], "NV8"],
	[[127387, 127461], "disallowed"],
	[[127462, 127487], "valid", [], "NV8"],
	[[127488, 127488], "mapped", [12411, 12363]],
	[[127489, 127489], "mapped", [12467, 12467]],
	[[127490, 127490], "mapped", [12469]],
	[[127491, 127503], "disallowed"],
	[[127504, 127504], "mapped", [25163]],
	[[127505, 127505], "mapped", [23383]],
	[[127506, 127506], "mapped", [21452]],
	[[127507, 127507], "mapped", [12487]],
	[[127508, 127508], "mapped", [20108]],
	[[127509, 127509], "mapped", [22810]],
	[[127510, 127510], "mapped", [35299]],
	[[127511, 127511], "mapped", [22825]],
	[[127512, 127512], "mapped", [20132]],
	[[127513, 127513], "mapped", [26144]],
	[[127514, 127514], "mapped", [28961]],
	[[127515, 127515], "mapped", [26009]],
	[[127516, 127516], "mapped", [21069]],
	[[127517, 127517], "mapped", [24460]],
	[[127518, 127518], "mapped", [20877]],
	[[127519, 127519], "mapped", [26032]],
	[[127520, 127520], "mapped", [21021]],
	[[127521, 127521], "mapped", [32066]],
	[[127522, 127522], "mapped", [29983]],
	[[127523, 127523], "mapped", [36009]],
	[[127524, 127524], "mapped", [22768]],
	[[127525, 127525], "mapped", [21561]],
	[[127526, 127526], "mapped", [28436]],
	[[127527, 127527], "mapped", [25237]],
	[[127528, 127528], "mapped", [25429]],
	[[127529, 127529], "mapped", [19968]],
	[[127530, 127530], "mapped", [19977]],
	[[127531, 127531], "mapped", [36938]],
	[[127532, 127532], "mapped", [24038]],
	[[127533, 127533], "mapped", [20013]],
	[[127534, 127534], "mapped", [21491]],
	[[127535, 127535], "mapped", [25351]],
	[[127536, 127536], "mapped", [36208]],
	[[127537, 127537], "mapped", [25171]],
	[[127538, 127538], "mapped", [31105]],
	[[127539, 127539], "mapped", [31354]],
	[[127540, 127540], "mapped", [21512]],
	[[127541, 127541], "mapped", [28288]],
	[[127542, 127542], "mapped", [26377]],
	[[127543, 127543], "mapped", [26376]],
	[[127544, 127544], "mapped", [30003]],
	[[127545, 127545], "mapped", [21106]],
	[[127546, 127546], "mapped", [21942]],
	[[127547, 127551], "disallowed"],
	[[127552, 127552], "mapped", [12308, 26412, 12309]],
	[[127553, 127553], "mapped", [12308, 19977, 12309]],
	[[127554, 127554], "mapped", [12308, 20108, 12309]],
	[[127555, 127555], "mapped", [12308, 23433, 12309]],
	[[127556, 127556], "mapped", [12308, 28857, 12309]],
	[[127557, 127557], "mapped", [12308, 25171, 12309]],
	[[127558, 127558], "mapped", [12308, 30423, 12309]],
	[[127559, 127559], "mapped", [12308, 21213, 12309]],
	[[127560, 127560], "mapped", [12308, 25943, 12309]],
	[[127561, 127567], "disallowed"],
	[[127568, 127568], "mapped", [24471]],
	[[127569, 127569], "mapped", [21487]],
	[[127570, 127743], "disallowed"],
	[[127744, 127776], "valid", [], "NV8"],
	[[127777, 127788], "valid", [], "NV8"],
	[[127789, 127791], "valid", [], "NV8"],
	[[127792, 127797], "valid", [], "NV8"],
	[[127798, 127798], "valid", [], "NV8"],
	[[127799, 127868], "valid", [], "NV8"],
	[[127869, 127869], "valid", [], "NV8"],
	[[127870, 127871], "valid", [], "NV8"],
	[[127872, 127891], "valid", [], "NV8"],
	[[127892, 127903], "valid", [], "NV8"],
	[[127904, 127940], "valid", [], "NV8"],
	[[127941, 127941], "valid", [], "NV8"],
	[[127942, 127946], "valid", [], "NV8"],
	[[127947, 127950], "valid", [], "NV8"],
	[[127951, 127955], "valid", [], "NV8"],
	[[127956, 127967], "valid", [], "NV8"],
	[[127968, 127984], "valid", [], "NV8"],
	[[127985, 127991], "valid", [], "NV8"],
	[[127992, 127999], "valid", [], "NV8"],
	[[128000, 128062], "valid", [], "NV8"],
	[[128063, 128063], "valid", [], "NV8"],
	[[128064, 128064], "valid", [], "NV8"],
	[[128065, 128065], "valid", [], "NV8"],
	[[128066, 128247], "valid", [], "NV8"],
	[[128248, 128248], "valid", [], "NV8"],
	[[128249, 128252], "valid", [], "NV8"],
	[[128253, 128254], "valid", [], "NV8"],
	[[128255, 128255], "valid", [], "NV8"],
	[[128256, 128317], "valid", [], "NV8"],
	[[128318, 128319], "valid", [], "NV8"],
	[[128320, 128323], "valid", [], "NV8"],
	[[128324, 128330], "valid", [], "NV8"],
	[[128331, 128335], "valid", [], "NV8"],
	[[128336, 128359], "valid", [], "NV8"],
	[[128360, 128377], "valid", [], "NV8"],
	[[128378, 128378], "disallowed"],
	[[128379, 128419], "valid", [], "NV8"],
	[[128420, 128420], "disallowed"],
	[[128421, 128506], "valid", [], "NV8"],
	[[128507, 128511], "valid", [], "NV8"],
	[[128512, 128512], "valid", [], "NV8"],
	[[128513, 128528], "valid", [], "NV8"],
	[[128529, 128529], "valid", [], "NV8"],
	[[128530, 128532], "valid", [], "NV8"],
	[[128533, 128533], "valid", [], "NV8"],
	[[128534, 128534], "valid", [], "NV8"],
	[[128535, 128535], "valid", [], "NV8"],
	[[128536, 128536], "valid", [], "NV8"],
	[[128537, 128537], "valid", [], "NV8"],
	[[128538, 128538], "valid", [], "NV8"],
	[[128539, 128539], "valid", [], "NV8"],
	[[128540, 128542], "valid", [], "NV8"],
	[[128543, 128543], "valid", [], "NV8"],
	[[128544, 128549], "valid", [], "NV8"],
	[[128550, 128551], "valid", [], "NV8"],
	[[128552, 128555], "valid", [], "NV8"],
	[[128556, 128556], "valid", [], "NV8"],
	[[128557, 128557], "valid", [], "NV8"],
	[[128558, 128559], "valid", [], "NV8"],
	[[128560, 128563], "valid", [], "NV8"],
	[[128564, 128564], "valid", [], "NV8"],
	[[128565, 128576], "valid", [], "NV8"],
	[[128577, 128578], "valid", [], "NV8"],
	[[128579, 128580], "valid", [], "NV8"],
	[[128581, 128591], "valid", [], "NV8"],
	[[128592, 128639], "valid", [], "NV8"],
	[[128640, 128709], "valid", [], "NV8"],
	[[128710, 128719], "valid", [], "NV8"],
	[[128720, 128720], "valid", [], "NV8"],
	[[128721, 128735], "disallowed"],
	[[128736, 128748], "valid", [], "NV8"],
	[[128749, 128751], "disallowed"],
	[[128752, 128755], "valid", [], "NV8"],
	[[128756, 128767], "disallowed"],
	[[128768, 128883], "valid", [], "NV8"],
	[[128884, 128895], "disallowed"],
	[[128896, 128980], "valid", [], "NV8"],
	[[128981, 129023], "disallowed"],
	[[129024, 129035], "valid", [], "NV8"],
	[[129036, 129039], "disallowed"],
	[[129040, 129095], "valid", [], "NV8"],
	[[129096, 129103], "disallowed"],
	[[129104, 129113], "valid", [], "NV8"],
	[[129114, 129119], "disallowed"],
	[[129120, 129159], "valid", [], "NV8"],
	[[129160, 129167], "disallowed"],
	[[129168, 129197], "valid", [], "NV8"],
	[[129198, 129295], "disallowed"],
	[[129296, 129304], "valid", [], "NV8"],
	[[129305, 129407], "disallowed"],
	[[129408, 129412], "valid", [], "NV8"],
	[[129413, 129471], "disallowed"],
	[[129472, 129472], "valid", [], "NV8"],
	[[129473, 131069], "disallowed"],
	[[131070, 131071], "disallowed"],
	[[131072, 173782], "valid"],
	[[173783, 173823], "disallowed"],
	[[173824, 177972], "valid"],
	[[177973, 177983], "disallowed"],
	[[177984, 178205], "valid"],
	[[178206, 178207], "disallowed"],
	[[178208, 183969], "valid"],
	[[183970, 194559], "disallowed"],
	[[194560, 194560], "mapped", [20029]],
	[[194561, 194561], "mapped", [20024]],
	[[194562, 194562], "mapped", [20033]],
	[[194563, 194563], "mapped", [131362]],
	[[194564, 194564], "mapped", [20320]],
	[[194565, 194565], "mapped", [20398]],
	[[194566, 194566], "mapped", [20411]],
	[[194567, 194567], "mapped", [20482]],
	[[194568, 194568], "mapped", [20602]],
	[[194569, 194569], "mapped", [20633]],
	[[194570, 194570], "mapped", [20711]],
	[[194571, 194571], "mapped", [20687]],
	[[194572, 194572], "mapped", [13470]],
	[[194573, 194573], "mapped", [132666]],
	[[194574, 194574], "mapped", [20813]],
	[[194575, 194575], "mapped", [20820]],
	[[194576, 194576], "mapped", [20836]],
	[[194577, 194577], "mapped", [20855]],
	[[194578, 194578], "mapped", [132380]],
	[[194579, 194579], "mapped", [13497]],
	[[194580, 194580], "mapped", [20839]],
	[[194581, 194581], "mapped", [20877]],
	[[194582, 194582], "mapped", [132427]],
	[[194583, 194583], "mapped", [20887]],
	[[194584, 194584], "mapped", [20900]],
	[[194585, 194585], "mapped", [20172]],
	[[194586, 194586], "mapped", [20908]],
	[[194587, 194587], "mapped", [20917]],
	[[194588, 194588], "mapped", [168415]],
	[[194589, 194589], "mapped", [20981]],
	[[194590, 194590], "mapped", [20995]],
	[[194591, 194591], "mapped", [13535]],
	[[194592, 194592], "mapped", [21051]],
	[[194593, 194593], "mapped", [21062]],
	[[194594, 194594], "mapped", [21106]],
	[[194595, 194595], "mapped", [21111]],
	[[194596, 194596], "mapped", [13589]],
	[[194597, 194597], "mapped", [21191]],
	[[194598, 194598], "mapped", [21193]],
	[[194599, 194599], "mapped", [21220]],
	[[194600, 194600], "mapped", [21242]],
	[[194601, 194601], "mapped", [21253]],
	[[194602, 194602], "mapped", [21254]],
	[[194603, 194603], "mapped", [21271]],
	[[194604, 194604], "mapped", [21321]],
	[[194605, 194605], "mapped", [21329]],
	[[194606, 194606], "mapped", [21338]],
	[[194607, 194607], "mapped", [21363]],
	[[194608, 194608], "mapped", [21373]],
	[[194609, 194611], "mapped", [21375]],
	[[194612, 194612], "mapped", [133676]],
	[[194613, 194613], "mapped", [28784]],
	[[194614, 194614], "mapped", [21450]],
	[[194615, 194615], "mapped", [21471]],
	[[194616, 194616], "mapped", [133987]],
	[[194617, 194617], "mapped", [21483]],
	[[194618, 194618], "mapped", [21489]],
	[[194619, 194619], "mapped", [21510]],
	[[194620, 194620], "mapped", [21662]],
	[[194621, 194621], "mapped", [21560]],
	[[194622, 194622], "mapped", [21576]],
	[[194623, 194623], "mapped", [21608]],
	[[194624, 194624], "mapped", [21666]],
	[[194625, 194625], "mapped", [21750]],
	[[194626, 194626], "mapped", [21776]],
	[[194627, 194627], "mapped", [21843]],
	[[194628, 194628], "mapped", [21859]],
	[[194629, 194630], "mapped", [21892]],
	[[194631, 194631], "mapped", [21913]],
	[[194632, 194632], "mapped", [21931]],
	[[194633, 194633], "mapped", [21939]],
	[[194634, 194634], "mapped", [21954]],
	[[194635, 194635], "mapped", [22294]],
	[[194636, 194636], "mapped", [22022]],
	[[194637, 194637], "mapped", [22295]],
	[[194638, 194638], "mapped", [22097]],
	[[194639, 194639], "mapped", [22132]],
	[[194640, 194640], "mapped", [20999]],
	[[194641, 194641], "mapped", [22766]],
	[[194642, 194642], "mapped", [22478]],
	[[194643, 194643], "mapped", [22516]],
	[[194644, 194644], "mapped", [22541]],
	[[194645, 194645], "mapped", [22411]],
	[[194646, 194646], "mapped", [22578]],
	[[194647, 194647], "mapped", [22577]],
	[[194648, 194648], "mapped", [22700]],
	[[194649, 194649], "mapped", [136420]],
	[[194650, 194650], "mapped", [22770]],
	[[194651, 194651], "mapped", [22775]],
	[[194652, 194652], "mapped", [22790]],
	[[194653, 194653], "mapped", [22810]],
	[[194654, 194654], "mapped", [22818]],
	[[194655, 194655], "mapped", [22882]],
	[[194656, 194656], "mapped", [136872]],
	[[194657, 194657], "mapped", [136938]],
	[[194658, 194658], "mapped", [23020]],
	[[194659, 194659], "mapped", [23067]],
	[[194660, 194660], "mapped", [23079]],
	[[194661, 194661], "mapped", [23000]],
	[[194662, 194662], "mapped", [23142]],
	[[194663, 194663], "mapped", [14062]],
	[[194664, 194664], "disallowed"],
	[[194665, 194665], "mapped", [23304]],
	[[194666, 194667], "mapped", [23358]],
	[[194668, 194668], "mapped", [137672]],
	[[194669, 194669], "mapped", [23491]],
	[[194670, 194670], "mapped", [23512]],
	[[194671, 194671], "mapped", [23527]],
	[[194672, 194672], "mapped", [23539]],
	[[194673, 194673], "mapped", [138008]],
	[[194674, 194674], "mapped", [23551]],
	[[194675, 194675], "mapped", [23558]],
	[[194676, 194676], "disallowed"],
	[[194677, 194677], "mapped", [23586]],
	[[194678, 194678], "mapped", [14209]],
	[[194679, 194679], "mapped", [23648]],
	[[194680, 194680], "mapped", [23662]],
	[[194681, 194681], "mapped", [23744]],
	[[194682, 194682], "mapped", [23693]],
	[[194683, 194683], "mapped", [138724]],
	[[194684, 194684], "mapped", [23875]],
	[[194685, 194685], "mapped", [138726]],
	[[194686, 194686], "mapped", [23918]],
	[[194687, 194687], "mapped", [23915]],
	[[194688, 194688], "mapped", [23932]],
	[[194689, 194689], "mapped", [24033]],
	[[194690, 194690], "mapped", [24034]],
	[[194691, 194691], "mapped", [14383]],
	[[194692, 194692], "mapped", [24061]],
	[[194693, 194693], "mapped", [24104]],
	[[194694, 194694], "mapped", [24125]],
	[[194695, 194695], "mapped", [24169]],
	[[194696, 194696], "mapped", [14434]],
	[[194697, 194697], "mapped", [139651]],
	[[194698, 194698], "mapped", [14460]],
	[[194699, 194699], "mapped", [24240]],
	[[194700, 194700], "mapped", [24243]],
	[[194701, 194701], "mapped", [24246]],
	[[194702, 194702], "mapped", [24266]],
	[[194703, 194703], "mapped", [172946]],
	[[194704, 194704], "mapped", [24318]],
	[[194705, 194706], "mapped", [140081]],
	[[194707, 194707], "mapped", [33281]],
	[[194708, 194709], "mapped", [24354]],
	[[194710, 194710], "mapped", [14535]],
	[[194711, 194711], "mapped", [144056]],
	[[194712, 194712], "mapped", [156122]],
	[[194713, 194713], "mapped", [24418]],
	[[194714, 194714], "mapped", [24427]],
	[[194715, 194715], "mapped", [14563]],
	[[194716, 194716], "mapped", [24474]],
	[[194717, 194717], "mapped", [24525]],
	[[194718, 194718], "mapped", [24535]],
	[[194719, 194719], "mapped", [24569]],
	[[194720, 194720], "mapped", [24705]],
	[[194721, 194721], "mapped", [14650]],
	[[194722, 194722], "mapped", [14620]],
	[[194723, 194723], "mapped", [24724]],
	[[194724, 194724], "mapped", [141012]],
	[[194725, 194725], "mapped", [24775]],
	[[194726, 194726], "mapped", [24904]],
	[[194727, 194727], "mapped", [24908]],
	[[194728, 194728], "mapped", [24910]],
	[[194729, 194729], "mapped", [24908]],
	[[194730, 194730], "mapped", [24954]],
	[[194731, 194731], "mapped", [24974]],
	[[194732, 194732], "mapped", [25010]],
	[[194733, 194733], "mapped", [24996]],
	[[194734, 194734], "mapped", [25007]],
	[[194735, 194735], "mapped", [25054]],
	[[194736, 194736], "mapped", [25074]],
	[[194737, 194737], "mapped", [25078]],
	[[194738, 194738], "mapped", [25104]],
	[[194739, 194739], "mapped", [25115]],
	[[194740, 194740], "mapped", [25181]],
	[[194741, 194741], "mapped", [25265]],
	[[194742, 194742], "mapped", [25300]],
	[[194743, 194743], "mapped", [25424]],
	[[194744, 194744], "mapped", [142092]],
	[[194745, 194745], "mapped", [25405]],
	[[194746, 194746], "mapped", [25340]],
	[[194747, 194747], "mapped", [25448]],
	[[194748, 194748], "mapped", [25475]],
	[[194749, 194749], "mapped", [25572]],
	[[194750, 194750], "mapped", [142321]],
	[[194751, 194751], "mapped", [25634]],
	[[194752, 194752], "mapped", [25541]],
	[[194753, 194753], "mapped", [25513]],
	[[194754, 194754], "mapped", [14894]],
	[[194755, 194755], "mapped", [25705]],
	[[194756, 194756], "mapped", [25726]],
	[[194757, 194757], "mapped", [25757]],
	[[194758, 194758], "mapped", [25719]],
	[[194759, 194759], "mapped", [14956]],
	[[194760, 194760], "mapped", [25935]],
	[[194761, 194761], "mapped", [25964]],
	[[194762, 194762], "mapped", [143370]],
	[[194763, 194763], "mapped", [26083]],
	[[194764, 194764], "mapped", [26360]],
	[[194765, 194765], "mapped", [26185]],
	[[194766, 194766], "mapped", [15129]],
	[[194767, 194767], "mapped", [26257]],
	[[194768, 194768], "mapped", [15112]],
	[[194769, 194769], "mapped", [15076]],
	[[194770, 194770], "mapped", [20882]],
	[[194771, 194771], "mapped", [20885]],
	[[194772, 194772], "mapped", [26368]],
	[[194773, 194773], "mapped", [26268]],
	[[194774, 194774], "mapped", [32941]],
	[[194775, 194775], "mapped", [17369]],
	[[194776, 194776], "mapped", [26391]],
	[[194777, 194777], "mapped", [26395]],
	[[194778, 194778], "mapped", [26401]],
	[[194779, 194779], "mapped", [26462]],
	[[194780, 194780], "mapped", [26451]],
	[[194781, 194781], "mapped", [144323]],
	[[194782, 194782], "mapped", [15177]],
	[[194783, 194783], "mapped", [26618]],
	[[194784, 194784], "mapped", [26501]],
	[[194785, 194785], "mapped", [26706]],
	[[194786, 194786], "mapped", [26757]],
	[[194787, 194787], "mapped", [144493]],
	[[194788, 194788], "mapped", [26766]],
	[[194789, 194789], "mapped", [26655]],
	[[194790, 194790], "mapped", [26900]],
	[[194791, 194791], "mapped", [15261]],
	[[194792, 194792], "mapped", [26946]],
	[[194793, 194793], "mapped", [27043]],
	[[194794, 194794], "mapped", [27114]],
	[[194795, 194795], "mapped", [27304]],
	[[194796, 194796], "mapped", [145059]],
	[[194797, 194797], "mapped", [27355]],
	[[194798, 194798], "mapped", [15384]],
	[[194799, 194799], "mapped", [27425]],
	[[194800, 194800], "mapped", [145575]],
	[[194801, 194801], "mapped", [27476]],
	[[194802, 194802], "mapped", [15438]],
	[[194803, 194803], "mapped", [27506]],
	[[194804, 194804], "mapped", [27551]],
	[[194805, 194805], "mapped", [27578]],
	[[194806, 194806], "mapped", [27579]],
	[[194807, 194807], "mapped", [146061]],
	[[194808, 194808], "mapped", [138507]],
	[[194809, 194809], "mapped", [146170]],
	[[194810, 194810], "mapped", [27726]],
	[[194811, 194811], "mapped", [146620]],
	[[194812, 194812], "mapped", [27839]],
	[[194813, 194813], "mapped", [27853]],
	[[194814, 194814], "mapped", [27751]],
	[[194815, 194815], "mapped", [27926]],
	[[194816, 194816], "mapped", [27966]],
	[[194817, 194817], "mapped", [28023]],
	[[194818, 194818], "mapped", [27969]],
	[[194819, 194819], "mapped", [28009]],
	[[194820, 194820], "mapped", [28024]],
	[[194821, 194821], "mapped", [28037]],
	[[194822, 194822], "mapped", [146718]],
	[[194823, 194823], "mapped", [27956]],
	[[194824, 194824], "mapped", [28207]],
	[[194825, 194825], "mapped", [28270]],
	[[194826, 194826], "mapped", [15667]],
	[[194827, 194827], "mapped", [28363]],
	[[194828, 194828], "mapped", [28359]],
	[[194829, 194829], "mapped", [147153]],
	[[194830, 194830], "mapped", [28153]],
	[[194831, 194831], "mapped", [28526]],
	[[194832, 194832], "mapped", [147294]],
	[[194833, 194833], "mapped", [147342]],
	[[194834, 194834], "mapped", [28614]],
	[[194835, 194835], "mapped", [28729]],
	[[194836, 194836], "mapped", [28702]],
	[[194837, 194837], "mapped", [28699]],
	[[194838, 194838], "mapped", [15766]],
	[[194839, 194839], "mapped", [28746]],
	[[194840, 194840], "mapped", [28797]],
	[[194841, 194841], "mapped", [28791]],
	[[194842, 194842], "mapped", [28845]],
	[[194843, 194843], "mapped", [132389]],
	[[194844, 194844], "mapped", [28997]],
	[[194845, 194845], "mapped", [148067]],
	[[194846, 194846], "mapped", [29084]],
	[[194847, 194847], "disallowed"],
	[[194848, 194848], "mapped", [29224]],
	[[194849, 194849], "mapped", [29237]],
	[[194850, 194850], "mapped", [29264]],
	[[194851, 194851], "mapped", [149000]],
	[[194852, 194852], "mapped", [29312]],
	[[194853, 194853], "mapped", [29333]],
	[[194854, 194854], "mapped", [149301]],
	[[194855, 194855], "mapped", [149524]],
	[[194856, 194856], "mapped", [29562]],
	[[194857, 194857], "mapped", [29579]],
	[[194858, 194858], "mapped", [16044]],
	[[194859, 194859], "mapped", [29605]],
	[[194860, 194861], "mapped", [16056]],
	[[194862, 194862], "mapped", [29767]],
	[[194863, 194863], "mapped", [29788]],
	[[194864, 194864], "mapped", [29809]],
	[[194865, 194865], "mapped", [29829]],
	[[194866, 194866], "mapped", [29898]],
	[[194867, 194867], "mapped", [16155]],
	[[194868, 194868], "mapped", [29988]],
	[[194869, 194869], "mapped", [150582]],
	[[194870, 194870], "mapped", [30014]],
	[[194871, 194871], "mapped", [150674]],
	[[194872, 194872], "mapped", [30064]],
	[[194873, 194873], "mapped", [139679]],
	[[194874, 194874], "mapped", [30224]],
	[[194875, 194875], "mapped", [151457]],
	[[194876, 194876], "mapped", [151480]],
	[[194877, 194877], "mapped", [151620]],
	[[194878, 194878], "mapped", [16380]],
	[[194879, 194879], "mapped", [16392]],
	[[194880, 194880], "mapped", [30452]],
	[[194881, 194881], "mapped", [151795]],
	[[194882, 194882], "mapped", [151794]],
	[[194883, 194883], "mapped", [151833]],
	[[194884, 194884], "mapped", [151859]],
	[[194885, 194885], "mapped", [30494]],
	[[194886, 194887], "mapped", [30495]],
	[[194888, 194888], "mapped", [30538]],
	[[194889, 194889], "mapped", [16441]],
	[[194890, 194890], "mapped", [30603]],
	[[194891, 194891], "mapped", [16454]],
	[[194892, 194892], "mapped", [16534]],
	[[194893, 194893], "mapped", [152605]],
	[[194894, 194894], "mapped", [30798]],
	[[194895, 194895], "mapped", [30860]],
	[[194896, 194896], "mapped", [30924]],
	[[194897, 194897], "mapped", [16611]],
	[[194898, 194898], "mapped", [153126]],
	[[194899, 194899], "mapped", [31062]],
	[[194900, 194900], "mapped", [153242]],
	[[194901, 194901], "mapped", [153285]],
	[[194902, 194902], "mapped", [31119]],
	[[194903, 194903], "mapped", [31211]],
	[[194904, 194904], "mapped", [16687]],
	[[194905, 194905], "mapped", [31296]],
	[[194906, 194906], "mapped", [31306]],
	[[194907, 194907], "mapped", [31311]],
	[[194908, 194908], "mapped", [153980]],
	[[194909, 194910], "mapped", [154279]],
	[[194911, 194911], "disallowed"],
	[[194912, 194912], "mapped", [16898]],
	[[194913, 194913], "mapped", [154539]],
	[[194914, 194914], "mapped", [31686]],
	[[194915, 194915], "mapped", [31689]],
	[[194916, 194916], "mapped", [16935]],
	[[194917, 194917], "mapped", [154752]],
	[[194918, 194918], "mapped", [31954]],
	[[194919, 194919], "mapped", [17056]],
	[[194920, 194920], "mapped", [31976]],
	[[194921, 194921], "mapped", [31971]],
	[[194922, 194922], "mapped", [32000]],
	[[194923, 194923], "mapped", [155526]],
	[[194924, 194924], "mapped", [32099]],
	[[194925, 194925], "mapped", [17153]],
	[[194926, 194926], "mapped", [32199]],
	[[194927, 194927], "mapped", [32258]],
	[[194928, 194928], "mapped", [32325]],
	[[194929, 194929], "mapped", [17204]],
	[[194930, 194930], "mapped", [156200]],
	[[194931, 194931], "mapped", [156231]],
	[[194932, 194932], "mapped", [17241]],
	[[194933, 194933], "mapped", [156377]],
	[[194934, 194934], "mapped", [32634]],
	[[194935, 194935], "mapped", [156478]],
	[[194936, 194936], "mapped", [32661]],
	[[194937, 194937], "mapped", [32762]],
	[[194938, 194938], "mapped", [32773]],
	[[194939, 194939], "mapped", [156890]],
	[[194940, 194940], "mapped", [156963]],
	[[194941, 194941], "mapped", [32864]],
	[[194942, 194942], "mapped", [157096]],
	[[194943, 194943], "mapped", [32880]],
	[[194944, 194944], "mapped", [144223]],
	[[194945, 194945], "mapped", [17365]],
	[[194946, 194946], "mapped", [32946]],
	[[194947, 194947], "mapped", [33027]],
	[[194948, 194948], "mapped", [17419]],
	[[194949, 194949], "mapped", [33086]],
	[[194950, 194950], "mapped", [23221]],
	[[194951, 194951], "mapped", [157607]],
	[[194952, 194952], "mapped", [157621]],
	[[194953, 194953], "mapped", [144275]],
	[[194954, 194954], "mapped", [144284]],
	[[194955, 194955], "mapped", [33281]],
	[[194956, 194956], "mapped", [33284]],
	[[194957, 194957], "mapped", [36766]],
	[[194958, 194958], "mapped", [17515]],
	[[194959, 194959], "mapped", [33425]],
	[[194960, 194960], "mapped", [33419]],
	[[194961, 194961], "mapped", [33437]],
	[[194962, 194962], "mapped", [21171]],
	[[194963, 194963], "mapped", [33457]],
	[[194964, 194964], "mapped", [33459]],
	[[194965, 194965], "mapped", [33469]],
	[[194966, 194966], "mapped", [33510]],
	[[194967, 194967], "mapped", [158524]],
	[[194968, 194968], "mapped", [33509]],
	[[194969, 194969], "mapped", [33565]],
	[[194970, 194970], "mapped", [33635]],
	[[194971, 194971], "mapped", [33709]],
	[[194972, 194972], "mapped", [33571]],
	[[194973, 194973], "mapped", [33725]],
	[[194974, 194974], "mapped", [33767]],
	[[194975, 194975], "mapped", [33879]],
	[[194976, 194976], "mapped", [33619]],
	[[194977, 194977], "mapped", [33738]],
	[[194978, 194978], "mapped", [33740]],
	[[194979, 194979], "mapped", [33756]],
	[[194980, 194980], "mapped", [158774]],
	[[194981, 194981], "mapped", [159083]],
	[[194982, 194982], "mapped", [158933]],
	[[194983, 194983], "mapped", [17707]],
	[[194984, 194984], "mapped", [34033]],
	[[194985, 194985], "mapped", [34035]],
	[[194986, 194986], "mapped", [34070]],
	[[194987, 194987], "mapped", [160714]],
	[[194988, 194988], "mapped", [34148]],
	[[194989, 194989], "mapped", [159532]],
	[[194990, 194990], "mapped", [17757]],
	[[194991, 194991], "mapped", [17761]],
	[[194992, 194992], "mapped", [159665]],
	[[194993, 194993], "mapped", [159954]],
	[[194994, 194994], "mapped", [17771]],
	[[194995, 194995], "mapped", [34384]],
	[[194996, 194996], "mapped", [34396]],
	[[194997, 194997], "mapped", [34407]],
	[[194998, 194998], "mapped", [34409]],
	[[194999, 194999], "mapped", [34473]],
	[[195000, 195000], "mapped", [34440]],
	[[195001, 195001], "mapped", [34574]],
	[[195002, 195002], "mapped", [34530]],
	[[195003, 195003], "mapped", [34681]],
	[[195004, 195004], "mapped", [34600]],
	[[195005, 195005], "mapped", [34667]],
	[[195006, 195006], "mapped", [34694]],
	[[195007, 195007], "disallowed"],
	[[195008, 195008], "mapped", [34785]],
	[[195009, 195009], "mapped", [34817]],
	[[195010, 195010], "mapped", [17913]],
	[[195011, 195011], "mapped", [34912]],
	[[195012, 195012], "mapped", [34915]],
	[[195013, 195013], "mapped", [161383]],
	[[195014, 195014], "mapped", [35031]],
	[[195015, 195015], "mapped", [35038]],
	[[195016, 195016], "mapped", [17973]],
	[[195017, 195017], "mapped", [35066]],
	[[195018, 195018], "mapped", [13499]],
	[[195019, 195019], "mapped", [161966]],
	[[195020, 195020], "mapped", [162150]],
	[[195021, 195021], "mapped", [18110]],
	[[195022, 195022], "mapped", [18119]],
	[[195023, 195023], "mapped", [35488]],
	[[195024, 195024], "mapped", [35565]],
	[[195025, 195025], "mapped", [35722]],
	[[195026, 195026], "mapped", [35925]],
	[[195027, 195027], "mapped", [162984]],
	[[195028, 195028], "mapped", [36011]],
	[[195029, 195029], "mapped", [36033]],
	[[195030, 195030], "mapped", [36123]],
	[[195031, 195031], "mapped", [36215]],
	[[195032, 195032], "mapped", [163631]],
	[[195033, 195033], "mapped", [133124]],
	[[195034, 195034], "mapped", [36299]],
	[[195035, 195035], "mapped", [36284]],
	[[195036, 195036], "mapped", [36336]],
	[[195037, 195037], "mapped", [133342]],
	[[195038, 195038], "mapped", [36564]],
	[[195039, 195039], "mapped", [36664]],
	[[195040, 195040], "mapped", [165330]],
	[[195041, 195041], "mapped", [165357]],
	[[195042, 195042], "mapped", [37012]],
	[[195043, 195043], "mapped", [37105]],
	[[195044, 195044], "mapped", [37137]],
	[[195045, 195045], "mapped", [165678]],
	[[195046, 195046], "mapped", [37147]],
	[[195047, 195047], "mapped", [37432]],
	[[195048, 195048], "mapped", [37591]],
	[[195049, 195049], "mapped", [37592]],
	[[195050, 195050], "mapped", [37500]],
	[[195051, 195051], "mapped", [37881]],
	[[195052, 195052], "mapped", [37909]],
	[[195053, 195053], "mapped", [166906]],
	[[195054, 195054], "mapped", [38283]],
	[[195055, 195055], "mapped", [18837]],
	[[195056, 195056], "mapped", [38327]],
	[[195057, 195057], "mapped", [167287]],
	[[195058, 195058], "mapped", [18918]],
	[[195059, 195059], "mapped", [38595]],
	[[195060, 195060], "mapped", [23986]],
	[[195061, 195061], "mapped", [38691]],
	[[195062, 195062], "mapped", [168261]],
	[[195063, 195063], "mapped", [168474]],
	[[195064, 195064], "mapped", [19054]],
	[[195065, 195065], "mapped", [19062]],
	[[195066, 195066], "mapped", [38880]],
	[[195067, 195067], "mapped", [168970]],
	[[195068, 195068], "mapped", [19122]],
	[[195069, 195069], "mapped", [169110]],
	[[195070, 195071], "mapped", [38923]],
	[[195072, 195072], "mapped", [38953]],
	[[195073, 195073], "mapped", [169398]],
	[[195074, 195074], "mapped", [39138]],
	[[195075, 195075], "mapped", [19251]],
	[[195076, 195076], "mapped", [39209]],
	[[195077, 195077], "mapped", [39335]],
	[[195078, 195078], "mapped", [39362]],
	[[195079, 195079], "mapped", [39422]],
	[[195080, 195080], "mapped", [19406]],
	[[195081, 195081], "mapped", [170800]],
	[[195082, 195082], "mapped", [39698]],
	[[195083, 195083], "mapped", [40000]],
	[[195084, 195084], "mapped", [40189]],
	[[195085, 195085], "mapped", [19662]],
	[[195086, 195086], "mapped", [19693]],
	[[195087, 195087], "mapped", [40295]],
	[[195088, 195088], "mapped", [172238]],
	[[195089, 195089], "mapped", [19704]],
	[[195090, 195090], "mapped", [172293]],
	[[195091, 195091], "mapped", [172558]],
	[[195092, 195092], "mapped", [172689]],
	[[195093, 195093], "mapped", [40635]],
	[[195094, 195094], "mapped", [19798]],
	[[195095, 195095], "mapped", [40697]],
	[[195096, 195096], "mapped", [40702]],
	[[195097, 195097], "mapped", [40709]],
	[[195098, 195098], "mapped", [40719]],
	[[195099, 195099], "mapped", [40726]],
	[[195100, 195100], "mapped", [40763]],
	[[195101, 195101], "mapped", [173568]],
	[[195102, 196605], "disallowed"],
	[[196606, 196607], "disallowed"],
	[[196608, 262141], "disallowed"],
	[[262142, 262143], "disallowed"],
	[[262144, 327677], "disallowed"],
	[[327678, 327679], "disallowed"],
	[[327680, 393213], "disallowed"],
	[[393214, 393215], "disallowed"],
	[[393216, 458749], "disallowed"],
	[[458750, 458751], "disallowed"],
	[[458752, 524285], "disallowed"],
	[[524286, 524287], "disallowed"],
	[[524288, 589821], "disallowed"],
	[[589822, 589823], "disallowed"],
	[[589824, 655357], "disallowed"],
	[[655358, 655359], "disallowed"],
	[[655360, 720893], "disallowed"],
	[[720894, 720895], "disallowed"],
	[[720896, 786429], "disallowed"],
	[[786430, 786431], "disallowed"],
	[[786432, 851965], "disallowed"],
	[[851966, 851967], "disallowed"],
	[[851968, 917501], "disallowed"],
	[[917502, 917503], "disallowed"],
	[[917504, 917504], "disallowed"],
	[[917505, 917505], "disallowed"],
	[[917506, 917535], "disallowed"],
	[[917536, 917631], "disallowed"],
	[[917632, 917759], "disallowed"],
	[[917760, 917999], "ignored"],
	[[918000, 983037], "disallowed"],
	[[983038, 983039], "disallowed"],
	[[983040, 1048573], "disallowed"],
	[[1048574, 1048575], "disallowed"],
	[[1048576, 1114109], "disallowed"],
	[[1114110, 1114111], "disallowed"],
];

var PROCESSING_OPTIONS = {
	TRANSITIONAL: 0,
	NONTRANSITIONAL: 1,
};

function normalize$1(str) {
	// fix bug in v8
	return str
		.split("\u0000")
		.map(function (s) {
			return s.normalize("NFC");
		})
		.join("\u0000");
}

function findStatus(val) {
	var start = 0;
	var end = mappingTable.length - 1;

	while (start <= end) {
		var mid = Math.floor((start + end) / 2);

		var target = mappingTable[mid];
		if (target[0][0] <= val && target[0][1] >= val) {
			return target;
		} else if (target[0][0] > val) {
			end = mid - 1;
		} else {
			start = mid + 1;
		}
	}

	return null;
}

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function countSymbols(string) {
	return (
		// then get the length
		string
			// replace every surrogate pair with a BMP symbol
			.replace(regexAstralSymbols, "_").length
	);
}

function mapChars(domain_name, useSTD3, processing_option) {
	var hasError = false;
	var processed = "";

	var len = countSymbols(domain_name);
	for (var i = 0; i < len; ++i) {
		var codePoint = domain_name.codePointAt(i);
		var status = findStatus(codePoint);

		switch (status[1]) {
			case "disallowed":
				hasError = true;
				processed += String.fromCodePoint(codePoint);
				break;
			case "ignored":
				break;
			case "mapped":
				processed += String.fromCodePoint.apply(String, status[2]);
				break;
			case "deviation":
				if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
					processed += String.fromCodePoint.apply(String, status[2]);
				} else {
					processed += String.fromCodePoint(codePoint);
				}
				break;
			case "valid":
				processed += String.fromCodePoint(codePoint);
				break;
			case "disallowed_STD3_mapped":
				if (useSTD3) {
					hasError = true;
					processed += String.fromCodePoint(codePoint);
				} else {
					processed += String.fromCodePoint.apply(String, status[2]);
				}
				break;
			case "disallowed_STD3_valid":
				if (useSTD3) {
					hasError = true;
				}

				processed += String.fromCodePoint(codePoint);
				break;
		}
	}

	return {
		string: processed,
		error: hasError,
	};
}

var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;

function validateLabel(label, processing_option) {
	if (label.substr(0, 4) === "xn--") {
		label = punycode__default["default"].toUnicode(label);
	}

	var error = false;

	if (normalize$1(label) !== label || (label[3] === "-" && label[4] === "-") || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
		error = true;
	}

	var len = countSymbols(label);
	for (var i = 0; i < len; ++i) {
		var status = findStatus(label.codePointAt(i));
		if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid") || (processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation")) {
			error = true;
			break;
		}
	}

	return {
		label: label,
		error: error,
	};
}

function processing(domain_name, useSTD3, processing_option) {
	var result = mapChars(domain_name, useSTD3, processing_option);
	result.string = normalize$1(result.string);

	var labels = result.string.split(".");
	for (var i = 0; i < labels.length; ++i) {
		try {
			var validation = validateLabel(labels[i]);
			labels[i] = validation.label;
			result.error = result.error || validation.error;
		} catch (e) {
			result.error = true;
		}
	}

	return {
		string: labels.join("."),
		error: result.error,
	};
}

var toASCII = function (domain_name, useSTD3, processing_option, verifyDnsLength) {
	var result = processing(domain_name, useSTD3, processing_option);
	var labels = result.string.split(".");
	labels = labels.map(function (l) {
		try {
			return punycode__default["default"].toASCII(l);
		} catch (e) {
			result.error = true;
			return l;
		}
	});

	if (verifyDnsLength) {
		var total = labels.slice(0, labels.length - 1).join(".").length;
		if (total.length > 253 || total.length === 0) {
			result.error = true;
		}

		for (var i = 0; i < labels.length; ++i) {
			if (labels.length > 63 || labels.length === 0) {
				result.error = true;
				break;
			}
		}
	}

	if (result.error) return null;
	return labels.join(".");
};

var toUnicode = function (domain_name, useSTD3) {
	var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);

	return {
		domain: result.string,
		error: result.error,
	};
};

var PROCESSING_OPTIONS_1 = PROCESSING_OPTIONS;

var tr46 = {
	toASCII: toASCII,
	toUnicode: toUnicode,
	PROCESSING_OPTIONS: PROCESSING_OPTIONS_1,
};

var urlStateMachine = createCommonjsModule(function (module) {
	const specialSchemes = {
		ftp: 21,
		file: null,
		gopher: 70,
		http: 80,
		https: 443,
		ws: 80,
		wss: 443,
	};

	const failure = Symbol("failure");

	function countSymbols(str) {
		return punycode__default["default"].ucs2.decode(str).length;
	}

	function at(input, idx) {
		const c = input[idx];
		return isNaN(c) ? undefined : String.fromCodePoint(c);
	}

	function isASCIIDigit(c) {
		return c >= 0x30 && c <= 0x39;
	}

	function isASCIIAlpha(c) {
		return (c >= 0x41 && c <= 0x5a) || (c >= 0x61 && c <= 0x7a);
	}

	function isASCIIAlphanumeric(c) {
		return isASCIIAlpha(c) || isASCIIDigit(c);
	}

	function isASCIIHex(c) {
		return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);
	}

	function isSingleDot(buffer) {
		return buffer === "." || buffer.toLowerCase() === "%2e";
	}

	function isDoubleDot(buffer) {
		buffer = buffer.toLowerCase();
		return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
	}

	function isWindowsDriveLetterCodePoints(cp1, cp2) {
		return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
	}

	function isWindowsDriveLetterString(string) {
		return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
	}

	function isNormalizedWindowsDriveLetterString(string) {
		return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
	}

	function containsForbiddenHostCodePoint(string) {
		return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
	}

	function containsForbiddenHostCodePointExcludingPercent(string) {
		return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
	}

	function isSpecialScheme(scheme) {
		return specialSchemes[scheme] !== undefined;
	}

	function isSpecial(url) {
		return isSpecialScheme(url.scheme);
	}

	function defaultPort(scheme) {
		return specialSchemes[scheme];
	}

	function percentEncode(c) {
		let hex = c.toString(16).toUpperCase();
		if (hex.length === 1) {
			hex = "0" + hex;
		}

		return "%" + hex;
	}

	function utf8PercentEncode(c) {
		const buf = new Buffer(c);

		let str = "";

		for (let i = 0; i < buf.length; ++i) {
			str += percentEncode(buf[i]);
		}

		return str;
	}

	function utf8PercentDecode(str) {
		const input = new Buffer(str);
		const output = [];
		for (let i = 0; i < input.length; ++i) {
			if (input[i] !== 37) {
				output.push(input[i]);
			} else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
				output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
				i += 2;
			} else {
				output.push(input[i]);
			}
		}
		return new Buffer(output).toString();
	}

	function isC0ControlPercentEncode(c) {
		return c <= 0x1f || c > 0x7e;
	}

	const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
	function isPathPercentEncode(c) {
		return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
	}

	const extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
	function isUserinfoPercentEncode(c) {
		return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
	}

	function percentEncodeChar(c, encodeSetPredicate) {
		const cStr = String.fromCodePoint(c);

		if (encodeSetPredicate(c)) {
			return utf8PercentEncode(cStr);
		}

		return cStr;
	}

	function parseIPv4Number(input) {
		let R = 10;

		if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
			input = input.substring(2);
			R = 16;
		} else if (input.length >= 2 && input.charAt(0) === "0") {
			input = input.substring(1);
			R = 8;
		}

		if (input === "") {
			return 0;
		}

		const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
		if (regex.test(input)) {
			return failure;
		}

		return parseInt(input, R);
	}

	function parseIPv4(input) {
		const parts = input.split(".");
		if (parts[parts.length - 1] === "") {
			if (parts.length > 1) {
				parts.pop();
			}
		}

		if (parts.length > 4) {
			return input;
		}

		const numbers = [];
		for (const part of parts) {
			if (part === "") {
				return input;
			}
			const n = parseIPv4Number(part);
			if (n === failure) {
				return input;
			}

			numbers.push(n);
		}

		for (let i = 0; i < numbers.length - 1; ++i) {
			if (numbers[i] > 255) {
				return failure;
			}
		}
		if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
			return failure;
		}

		let ipv4 = numbers.pop();
		let counter = 0;

		for (const n of numbers) {
			ipv4 += n * Math.pow(256, 3 - counter);
			++counter;
		}

		return ipv4;
	}

	function serializeIPv4(address) {
		let output = "";
		let n = address;

		for (let i = 1; i <= 4; ++i) {
			output = String(n % 256) + output;
			if (i !== 4) {
				output = "." + output;
			}
			n = Math.floor(n / 256);
		}

		return output;
	}

	function parseIPv6(input) {
		const address = [0, 0, 0, 0, 0, 0, 0, 0];
		let pieceIndex = 0;
		let compress = null;
		let pointer = 0;

		input = punycode__default["default"].ucs2.decode(input);

		if (input[pointer] === 58) {
			if (input[pointer + 1] !== 58) {
				return failure;
			}

			pointer += 2;
			++pieceIndex;
			compress = pieceIndex;
		}

		while (pointer < input.length) {
			if (pieceIndex === 8) {
				return failure;
			}

			if (input[pointer] === 58) {
				if (compress !== null) {
					return failure;
				}
				++pointer;
				++pieceIndex;
				compress = pieceIndex;
				continue;
			}

			let value = 0;
			let length = 0;

			while (length < 4 && isASCIIHex(input[pointer])) {
				value = value * 0x10 + parseInt(at(input, pointer), 16);
				++pointer;
				++length;
			}

			if (input[pointer] === 46) {
				if (length === 0) {
					return failure;
				}

				pointer -= length;

				if (pieceIndex > 6) {
					return failure;
				}

				let numbersSeen = 0;

				while (input[pointer] !== undefined) {
					let ipv4Piece = null;

					if (numbersSeen > 0) {
						if (input[pointer] === 46 && numbersSeen < 4) {
							++pointer;
						} else {
							return failure;
						}
					}

					if (!isASCIIDigit(input[pointer])) {
						return failure;
					}

					while (isASCIIDigit(input[pointer])) {
						const number = parseInt(at(input, pointer));
						if (ipv4Piece === null) {
							ipv4Piece = number;
						} else if (ipv4Piece === 0) {
							return failure;
						} else {
							ipv4Piece = ipv4Piece * 10 + number;
						}
						if (ipv4Piece > 255) {
							return failure;
						}
						++pointer;
					}

					address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;

					++numbersSeen;

					if (numbersSeen === 2 || numbersSeen === 4) {
						++pieceIndex;
					}
				}

				if (numbersSeen !== 4) {
					return failure;
				}

				break;
			} else if (input[pointer] === 58) {
				++pointer;
				if (input[pointer] === undefined) {
					return failure;
				}
			} else if (input[pointer] !== undefined) {
				return failure;
			}

			address[pieceIndex] = value;
			++pieceIndex;
		}

		if (compress !== null) {
			let swaps = pieceIndex - compress;
			pieceIndex = 7;
			while (pieceIndex !== 0 && swaps > 0) {
				const temp = address[compress + swaps - 1];
				address[compress + swaps - 1] = address[pieceIndex];
				address[pieceIndex] = temp;
				--pieceIndex;
				--swaps;
			}
		} else if (compress === null && pieceIndex !== 8) {
			return failure;
		}

		return address;
	}

	function serializeIPv6(address) {
		let output = "";
		const seqResult = findLongestZeroSequence(address);
		const compress = seqResult.idx;
		let ignore0 = false;

		for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
			if (ignore0 && address[pieceIndex] === 0) {
				continue;
			} else if (ignore0) {
				ignore0 = false;
			}

			if (compress === pieceIndex) {
				const separator = pieceIndex === 0 ? "::" : ":";
				output += separator;
				ignore0 = true;
				continue;
			}

			output += address[pieceIndex].toString(16);

			if (pieceIndex !== 7) {
				output += ":";
			}
		}

		return output;
	}

	function parseHost(input, isSpecialArg) {
		if (input[0] === "[") {
			if (input[input.length - 1] !== "]") {
				return failure;
			}

			return parseIPv6(input.substring(1, input.length - 1));
		}

		if (!isSpecialArg) {
			return parseOpaqueHost(input);
		}

		const domain = utf8PercentDecode(input);
		const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
		if (asciiDomain === null) {
			return failure;
		}

		if (containsForbiddenHostCodePoint(asciiDomain)) {
			return failure;
		}

		const ipv4Host = parseIPv4(asciiDomain);
		if (typeof ipv4Host === "number" || ipv4Host === failure) {
			return ipv4Host;
		}

		return asciiDomain;
	}

	function parseOpaqueHost(input) {
		if (containsForbiddenHostCodePointExcludingPercent(input)) {
			return failure;
		}

		let output = "";
		const decoded = punycode__default["default"].ucs2.decode(input);
		for (let i = 0; i < decoded.length; ++i) {
			output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
		}
		return output;
	}

	function findLongestZeroSequence(arr) {
		let maxIdx = null;
		let maxLen = 1; // only find elements > 1
		let currStart = null;
		let currLen = 0;

		for (let i = 0; i < arr.length; ++i) {
			if (arr[i] !== 0) {
				if (currLen > maxLen) {
					maxIdx = currStart;
					maxLen = currLen;
				}

				currStart = null;
				currLen = 0;
			} else {
				if (currStart === null) {
					currStart = i;
				}
				++currLen;
			}
		}

		// if trailing zeros
		if (currLen > maxLen) {
			maxIdx = currStart;
			maxLen = currLen;
		}

		return {
			idx: maxIdx,
			len: maxLen,
		};
	}

	function serializeHost(host) {
		if (typeof host === "number") {
			return serializeIPv4(host);
		}

		// IPv6 serializer
		if (host instanceof Array) {
			return "[" + serializeIPv6(host) + "]";
		}

		return host;
	}

	function trimControlChars(url) {
		return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
	}

	function trimTabAndNewline(url) {
		return url.replace(/\u0009|\u000A|\u000D/g, "");
	}

	function shortenPath(url) {
		const path = url.path;
		if (path.length === 0) {
			return;
		}
		if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
			return;
		}

		path.pop();
	}

	function includesCredentials(url) {
		return url.username !== "" || url.password !== "";
	}

	function cannotHaveAUsernamePasswordPort(url) {
		return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
	}

	function isNormalizedWindowsDriveLetter(string) {
		return /^[A-Za-z]:$/.test(string);
	}

	function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
		this.pointer = 0;
		this.input = input;
		this.base = base || null;
		this.encodingOverride = encodingOverride || "utf-8";
		this.stateOverride = stateOverride;
		this.url = url;
		this.failure = false;
		this.parseError = false;

		if (!this.url) {
			this.url = {
				scheme: "",
				username: "",
				password: "",
				host: null,
				port: null,
				path: [],
				query: null,
				fragment: null,

				cannotBeABaseURL: false,
			};

			const res = trimControlChars(this.input);
			if (res !== this.input) {
				this.parseError = true;
			}
			this.input = res;
		}

		const res = trimTabAndNewline(this.input);
		if (res !== this.input) {
			this.parseError = true;
		}
		this.input = res;

		this.state = stateOverride || "scheme start";

		this.buffer = "";
		this.atFlag = false;
		this.arrFlag = false;
		this.passwordTokenSeenFlag = false;

		this.input = punycode__default["default"].ucs2.decode(this.input);

		for (; this.pointer <= this.input.length; ++this.pointer) {
			const c = this.input[this.pointer];
			const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

			// exec state machine
			const ret = this["parse " + this.state](c, cStr);
			if (!ret) {
				break; // terminate algorithm
			} else if (ret === failure) {
				this.failure = true;
				break;
			}
		}
	}

	URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
		if (isASCIIAlpha(c)) {
			this.buffer += cStr.toLowerCase();
			this.state = "scheme";
		} else if (!this.stateOverride) {
			this.state = "no scheme";
			--this.pointer;
		} else {
			this.parseError = true;
			return failure;
		}

		return true;
	};

	URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
		if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
			this.buffer += cStr.toLowerCase();
		} else if (c === 58) {
			if (this.stateOverride) {
				if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
					return false;
				}

				if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
					return false;
				}

				if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
					return false;
				}

				if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
					return false;
				}
			}
			this.url.scheme = this.buffer;
			this.buffer = "";
			if (this.stateOverride) {
				return false;
			}
			if (this.url.scheme === "file") {
				if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
					this.parseError = true;
				}
				this.state = "file";
			} else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
				this.state = "special relative or authority";
			} else if (isSpecial(this.url)) {
				this.state = "special authority slashes";
			} else if (this.input[this.pointer + 1] === 47) {
				this.state = "path or authority";
				++this.pointer;
			} else {
				this.url.cannotBeABaseURL = true;
				this.url.path.push("");
				this.state = "cannot-be-a-base-URL path";
			}
		} else if (!this.stateOverride) {
			this.buffer = "";
			this.state = "no scheme";
			this.pointer = -1;
		} else {
			this.parseError = true;
			return failure;
		}

		return true;
	};

	URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
		if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
			return failure;
		} else if (this.base.cannotBeABaseURL && c === 35) {
			this.url.scheme = this.base.scheme;
			this.url.path = this.base.path.slice();
			this.url.query = this.base.query;
			this.url.fragment = "";
			this.url.cannotBeABaseURL = true;
			this.state = "fragment";
		} else if (this.base.scheme === "file") {
			this.state = "file";
			--this.pointer;
		} else {
			this.state = "relative";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
		if (c === 47 && this.input[this.pointer + 1] === 47) {
			this.state = "special authority ignore slashes";
			++this.pointer;
		} else {
			this.parseError = true;
			this.state = "relative";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
		if (c === 47) {
			this.state = "authority";
		} else {
			this.state = "path";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
		this.url.scheme = this.base.scheme;
		if (isNaN(c)) {
			this.url.username = this.base.username;
			this.url.password = this.base.password;
			this.url.host = this.base.host;
			this.url.port = this.base.port;
			this.url.path = this.base.path.slice();
			this.url.query = this.base.query;
		} else if (c === 47) {
			this.state = "relative slash";
		} else if (c === 63) {
			this.url.username = this.base.username;
			this.url.password = this.base.password;
			this.url.host = this.base.host;
			this.url.port = this.base.port;
			this.url.path = this.base.path.slice();
			this.url.query = "";
			this.state = "query";
		} else if (c === 35) {
			this.url.username = this.base.username;
			this.url.password = this.base.password;
			this.url.host = this.base.host;
			this.url.port = this.base.port;
			this.url.path = this.base.path.slice();
			this.url.query = this.base.query;
			this.url.fragment = "";
			this.state = "fragment";
		} else if (isSpecial(this.url) && c === 92) {
			this.parseError = true;
			this.state = "relative slash";
		} else {
			this.url.username = this.base.username;
			this.url.password = this.base.password;
			this.url.host = this.base.host;
			this.url.port = this.base.port;
			this.url.path = this.base.path.slice(0, this.base.path.length - 1);

			this.state = "path";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
		if (isSpecial(this.url) && (c === 47 || c === 92)) {
			if (c === 92) {
				this.parseError = true;
			}
			this.state = "special authority ignore slashes";
		} else if (c === 47) {
			this.state = "authority";
		} else {
			this.url.username = this.base.username;
			this.url.password = this.base.password;
			this.url.host = this.base.host;
			this.url.port = this.base.port;
			this.state = "path";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
		if (c === 47 && this.input[this.pointer + 1] === 47) {
			this.state = "special authority ignore slashes";
			++this.pointer;
		} else {
			this.parseError = true;
			this.state = "special authority ignore slashes";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
		if (c !== 47 && c !== 92) {
			this.state = "authority";
			--this.pointer;
		} else {
			this.parseError = true;
		}

		return true;
	};

	URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
		if (c === 64) {
			this.parseError = true;
			if (this.atFlag) {
				this.buffer = "%40" + this.buffer;
			}
			this.atFlag = true;

			// careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
			const len = countSymbols(this.buffer);
			for (let pointer = 0; pointer < len; ++pointer) {
				const codePoint = this.buffer.codePointAt(pointer);

				if (codePoint === 58 && !this.passwordTokenSeenFlag) {
					this.passwordTokenSeenFlag = true;
					continue;
				}
				const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
				if (this.passwordTokenSeenFlag) {
					this.url.password += encodedCodePoints;
				} else {
					this.url.username += encodedCodePoints;
				}
			}
			this.buffer = "";
		} else if (isNaN(c) || c === 47 || c === 63 || c === 35 || (isSpecial(this.url) && c === 92)) {
			if (this.atFlag && this.buffer === "") {
				this.parseError = true;
				return failure;
			}
			this.pointer -= countSymbols(this.buffer) + 1;
			this.buffer = "";
			this.state = "host";
		} else {
			this.buffer += cStr;
		}

		return true;
	};

	URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
		if (this.stateOverride && this.url.scheme === "file") {
			--this.pointer;
			this.state = "file host";
		} else if (c === 58 && !this.arrFlag) {
			if (this.buffer === "") {
				this.parseError = true;
				return failure;
			}

			const host = parseHost(this.buffer, isSpecial(this.url));
			if (host === failure) {
				return failure;
			}

			this.url.host = host;
			this.buffer = "";
			this.state = "port";
			if (this.stateOverride === "hostname") {
				return false;
			}
		} else if (isNaN(c) || c === 47 || c === 63 || c === 35 || (isSpecial(this.url) && c === 92)) {
			--this.pointer;
			if (isSpecial(this.url) && this.buffer === "") {
				this.parseError = true;
				return failure;
			} else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
				this.parseError = true;
				return false;
			}

			const host = parseHost(this.buffer, isSpecial(this.url));
			if (host === failure) {
				return failure;
			}

			this.url.host = host;
			this.buffer = "";
			this.state = "path start";
			if (this.stateOverride) {
				return false;
			}
		} else {
			if (c === 91) {
				this.arrFlag = true;
			} else if (c === 93) {
				this.arrFlag = false;
			}
			this.buffer += cStr;
		}

		return true;
	};

	URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
		if (isASCIIDigit(c)) {
			this.buffer += cStr;
		} else if (isNaN(c) || c === 47 || c === 63 || c === 35 || (isSpecial(this.url) && c === 92) || this.stateOverride) {
			if (this.buffer !== "") {
				const port = parseInt(this.buffer);
				if (port > Math.pow(2, 16) - 1) {
					this.parseError = true;
					return failure;
				}
				this.url.port = port === defaultPort(this.url.scheme) ? null : port;
				this.buffer = "";
			}
			if (this.stateOverride) {
				return false;
			}
			this.state = "path start";
			--this.pointer;
		} else {
			this.parseError = true;
			return failure;
		}

		return true;
	};

	const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

	URLStateMachine.prototype["parse file"] = function parseFile(c) {
		this.url.scheme = "file";

		if (c === 47 || c === 92) {
			if (c === 92) {
				this.parseError = true;
			}
			this.state = "file slash";
		} else if (this.base !== null && this.base.scheme === "file") {
			if (isNaN(c)) {
				this.url.host = this.base.host;
				this.url.path = this.base.path.slice();
				this.url.query = this.base.query;
			} else if (c === 63) {
				this.url.host = this.base.host;
				this.url.path = this.base.path.slice();
				this.url.query = "";
				this.state = "query";
			} else if (c === 35) {
				this.url.host = this.base.host;
				this.url.path = this.base.path.slice();
				this.url.query = this.base.query;
				this.url.fragment = "";
				this.state = "fragment";
			} else {
				if (
					this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
					!isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||
					(this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
						!fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))
				) {
					this.url.host = this.base.host;
					this.url.path = this.base.path.slice();
					shortenPath(this.url);
				} else {
					this.parseError = true;
				}

				this.state = "path";
				--this.pointer;
			}
		} else {
			this.state = "path";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
		if (c === 47 || c === 92) {
			if (c === 92) {
				this.parseError = true;
			}
			this.state = "file host";
		} else {
			if (this.base !== null && this.base.scheme === "file") {
				if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
					this.url.path.push(this.base.path[0]);
				} else {
					this.url.host = this.base.host;
				}
			}
			this.state = "path";
			--this.pointer;
		}

		return true;
	};

	URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
		if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
			--this.pointer;
			if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
				this.parseError = true;
				this.state = "path";
			} else if (this.buffer === "") {
				this.url.host = "";
				if (this.stateOverride) {
					return false;
				}
				this.state = "path start";
			} else {
				let host = parseHost(this.buffer, isSpecial(this.url));
				if (host === failure) {
					return failure;
				}
				if (host === "localhost") {
					host = "";
				}
				this.url.host = host;

				if (this.stateOverride) {
					return false;
				}

				this.buffer = "";
				this.state = "path start";
			}
		} else {
			this.buffer += cStr;
		}

		return true;
	};

	URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
		if (isSpecial(this.url)) {
			if (c === 92) {
				this.parseError = true;
			}
			this.state = "path";

			if (c !== 47 && c !== 92) {
				--this.pointer;
			}
		} else if (!this.stateOverride && c === 63) {
			this.url.query = "";
			this.state = "query";
		} else if (!this.stateOverride && c === 35) {
			this.url.fragment = "";
			this.state = "fragment";
		} else if (c !== undefined) {
			this.state = "path";
			if (c !== 47) {
				--this.pointer;
			}
		}

		return true;
	};

	URLStateMachine.prototype["parse path"] = function parsePath(c) {
		if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) || (!this.stateOverride && (c === 63 || c === 35))) {
			if (isSpecial(this.url) && c === 92) {
				this.parseError = true;
			}

			if (isDoubleDot(this.buffer)) {
				shortenPath(this.url);
				if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
					this.url.path.push("");
				}
			} else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
				this.url.path.push("");
			} else if (!isSingleDot(this.buffer)) {
				if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
					if (this.url.host !== "" && this.url.host !== null) {
						this.parseError = true;
						this.url.host = "";
					}
					this.buffer = this.buffer[0] + ":";
				}
				this.url.path.push(this.buffer);
			}
			this.buffer = "";
			if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
				while (this.url.path.length > 1 && this.url.path[0] === "") {
					this.parseError = true;
					this.url.path.shift();
				}
			}
			if (c === 63) {
				this.url.query = "";
				this.state = "query";
			}
			if (c === 35) {
				this.url.fragment = "";
				this.state = "fragment";
			}
		} else {
			// TODO: If c is not a URL code point and not "%", parse error.

			if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
				this.parseError = true;
			}

			this.buffer += percentEncodeChar(c, isPathPercentEncode);
		}

		return true;
	};

	URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
		if (c === 63) {
			this.url.query = "";
			this.state = "query";
		} else if (c === 35) {
			this.url.fragment = "";
			this.state = "fragment";
		} else {
			// TODO: Add: not a URL code point
			if (!isNaN(c) && c !== 37) {
				this.parseError = true;
			}

			if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
				this.parseError = true;
			}

			if (!isNaN(c)) {
				this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
			}
		}

		return true;
	};

	URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
		if (isNaN(c) || (!this.stateOverride && c === 35)) {
			if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
				this.encodingOverride = "utf-8";
			}

			const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
			for (let i = 0; i < buffer.length; ++i) {
				if (buffer[i] < 0x21 || buffer[i] > 0x7e || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3c || buffer[i] === 0x3e) {
					this.url.query += percentEncode(buffer[i]);
				} else {
					this.url.query += String.fromCodePoint(buffer[i]);
				}
			}

			this.buffer = "";
			if (c === 35) {
				this.url.fragment = "";
				this.state = "fragment";
			}
		} else {
			// TODO: If c is not a URL code point and not "%", parse error.
			if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
				this.parseError = true;
			}

			this.buffer += cStr;
		}

		return true;
	};

	URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
		if (isNaN(c));
		else if (c === 0x0) {
			this.parseError = true;
		} else {
			// TODO: If c is not a URL code point and not "%", parse error.
			if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
				this.parseError = true;
			}

			this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
		}

		return true;
	};

	function serializeURL(url, excludeFragment) {
		let output = url.scheme + ":";
		if (url.host !== null) {
			output += "//";

			if (url.username !== "" || url.password !== "") {
				output += url.username;
				if (url.password !== "") {
					output += ":" + url.password;
				}
				output += "@";
			}

			output += serializeHost(url.host);

			if (url.port !== null) {
				output += ":" + url.port;
			}
		} else if (url.host === null && url.scheme === "file") {
			output += "//";
		}

		if (url.cannotBeABaseURL) {
			output += url.path[0];
		} else {
			for (const string of url.path) {
				output += "/" + string;
			}
		}

		if (url.query !== null) {
			output += "?" + url.query;
		}

		if (!excludeFragment && url.fragment !== null) {
			output += "#" + url.fragment;
		}

		return output;
	}

	function serializeOrigin(tuple) {
		let result = tuple.scheme + "://";
		result += serializeHost(tuple.host);

		if (tuple.port !== null) {
			result += ":" + tuple.port;
		}

		return result;
	}

	module.exports.serializeURL = serializeURL;

	module.exports.serializeURLOrigin = function (url) {
		// https://url.spec.whatwg.org/#concept-url-origin
		switch (url.scheme) {
			case "blob":
				try {
					return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
				} catch (e) {
					// serializing an opaque origin returns "null"
					return "null";
				}
			case "ftp":
			case "gopher":
			case "http":
			case "https":
			case "ws":
			case "wss":
				return serializeOrigin({
					scheme: url.scheme,
					host: url.host,
					port: url.port,
				});
			case "file":
				// spec says "exercise to the reader", chrome says "file://"
				return "file://";
			default:
				// serializing an opaque origin returns "null"
				return "null";
		}
	};

	module.exports.basicURLParse = function (input, options) {
		if (options === undefined) {
			options = {};
		}

		const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
		if (usm.failure) {
			return "failure";
		}

		return usm.url;
	};

	module.exports.setTheUsername = function (url, username) {
		url.username = "";
		const decoded = punycode__default["default"].ucs2.decode(username);
		for (let i = 0; i < decoded.length; ++i) {
			url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
		}
	};

	module.exports.setThePassword = function (url, password) {
		url.password = "";
		const decoded = punycode__default["default"].ucs2.decode(password);
		for (let i = 0; i < decoded.length; ++i) {
			url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
		}
	};

	module.exports.serializeHost = serializeHost;

	module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

	module.exports.serializeInteger = function (integer) {
		return String(integer);
	};

	module.exports.parseURL = function (input, options) {
		if (options === undefined) {
			options = {};
		}

		// We don't handle blobs, so this just delegates:
		return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
	};
});

var implementation = class URLImpl {
	constructor(constructorArgs) {
		const url = constructorArgs[0];
		const base = constructorArgs[1];

		let parsedBase = null;
		if (base !== undefined) {
			parsedBase = urlStateMachine.basicURLParse(base);
			if (parsedBase === "failure") {
				throw new TypeError("Invalid base URL");
			}
		}

		const parsedURL = urlStateMachine.basicURLParse(url, { baseURL: parsedBase });
		if (parsedURL === "failure") {
			throw new TypeError("Invalid URL");
		}

		this._url = parsedURL;

		// TODO: query stuff
	}

	get href() {
		return urlStateMachine.serializeURL(this._url);
	}

	set href(v) {
		const parsedURL = urlStateMachine.basicURLParse(v);
		if (parsedURL === "failure") {
			throw new TypeError("Invalid URL");
		}

		this._url = parsedURL;
	}

	get origin() {
		return urlStateMachine.serializeURLOrigin(this._url);
	}

	get protocol() {
		return this._url.scheme + ":";
	}

	set protocol(v) {
		urlStateMachine.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
	}

	get username() {
		return this._url.username;
	}

	set username(v) {
		if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
			return;
		}

		urlStateMachine.setTheUsername(this._url, v);
	}

	get password() {
		return this._url.password;
	}

	set password(v) {
		if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
			return;
		}

		urlStateMachine.setThePassword(this._url, v);
	}

	get host() {
		const url = this._url;

		if (url.host === null) {
			return "";
		}

		if (url.port === null) {
			return urlStateMachine.serializeHost(url.host);
		}

		return urlStateMachine.serializeHost(url.host) + ":" + urlStateMachine.serializeInteger(url.port);
	}

	set host(v) {
		if (this._url.cannotBeABaseURL) {
			return;
		}

		urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "host" });
	}

	get hostname() {
		if (this._url.host === null) {
			return "";
		}

		return urlStateMachine.serializeHost(this._url.host);
	}

	set hostname(v) {
		if (this._url.cannotBeABaseURL) {
			return;
		}

		urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
	}

	get port() {
		if (this._url.port === null) {
			return "";
		}

		return urlStateMachine.serializeInteger(this._url.port);
	}

	set port(v) {
		if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
			return;
		}

		if (v === "") {
			this._url.port = null;
		} else {
			urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "port" });
		}
	}

	get pathname() {
		if (this._url.cannotBeABaseURL) {
			return this._url.path[0];
		}

		if (this._url.path.length === 0) {
			return "";
		}

		return "/" + this._url.path.join("/");
	}

	set pathname(v) {
		if (this._url.cannotBeABaseURL) {
			return;
		}

		this._url.path = [];
		urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "path start" });
	}

	get search() {
		if (this._url.query === null || this._url.query === "") {
			return "";
		}

		return "?" + this._url.query;
	}

	set search(v) {
		// TODO: query stuff

		const url = this._url;

		if (v === "") {
			url.query = null;
			return;
		}

		const input = v[0] === "?" ? v.substring(1) : v;
		url.query = "";
		urlStateMachine.basicURLParse(input, { url, stateOverride: "query" });
	}

	get hash() {
		if (this._url.fragment === null || this._url.fragment === "") {
			return "";
		}

		return "#" + this._url.fragment;
	}

	set hash(v) {
		if (v === "") {
			this._url.fragment = null;
			return;
		}

		const input = v[0] === "#" ? v.substring(1) : v;
		this._url.fragment = "";
		urlStateMachine.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
	}

	toJSON() {
		return this.href;
	}
};

var URLImpl_1 = {
	implementation: implementation,
};

var URL_1 = createCommonjsModule(function (module) {
	const impl = utils.implSymbol;

	function URL(url) {
		if (!this || this[impl] || !(this instanceof URL)) {
			throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
		}
		if (arguments.length < 1) {
			throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
		}
		const args = [];
		for (let i = 0; i < arguments.length && i < 2; ++i) {
			args[i] = arguments[i];
		}
		args[0] = lib$3["USVString"](args[0]);
		if (args[1] !== undefined) {
			args[1] = lib$3["USVString"](args[1]);
		}

		module.exports.setup(this, args);
	}

	URL.prototype.toJSON = function toJSON() {
		if (!this || !module.exports.is(this)) {
			throw new TypeError("Illegal invocation");
		}
		const args = [];
		for (let i = 0; i < arguments.length && i < 0; ++i) {
			args[i] = arguments[i];
		}
		return this[impl].toJSON.apply(this[impl], args);
	};
	Object.defineProperty(URL.prototype, "href", {
		get() {
			return this[impl].href;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].href = V;
		},
		enumerable: true,
		configurable: true,
	});

	URL.prototype.toString = function () {
		if (!this || !module.exports.is(this)) {
			throw new TypeError("Illegal invocation");
		}
		return this.href;
	};

	Object.defineProperty(URL.prototype, "origin", {
		get() {
			return this[impl].origin;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "protocol", {
		get() {
			return this[impl].protocol;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].protocol = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "username", {
		get() {
			return this[impl].username;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].username = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "password", {
		get() {
			return this[impl].password;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].password = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "host", {
		get() {
			return this[impl].host;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].host = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "hostname", {
		get() {
			return this[impl].hostname;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].hostname = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "port", {
		get() {
			return this[impl].port;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].port = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "pathname", {
		get() {
			return this[impl].pathname;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].pathname = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "search", {
		get() {
			return this[impl].search;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].search = V;
		},
		enumerable: true,
		configurable: true,
	});

	Object.defineProperty(URL.prototype, "hash", {
		get() {
			return this[impl].hash;
		},
		set(V) {
			V = lib$3["USVString"](V);
			this[impl].hash = V;
		},
		enumerable: true,
		configurable: true,
	});

	module.exports = {
		is(obj) {
			return !!obj && obj[impl] instanceof URLImpl_1.implementation;
		},
		create(constructorArgs, privateData) {
			let obj = Object.create(URL.prototype);
			this.setup(obj, constructorArgs, privateData);
			return obj;
		},
		setup(obj, constructorArgs, privateData) {
			if (!privateData) privateData = {};
			privateData.wrapper = obj;

			obj[impl] = new URLImpl_1.implementation(constructorArgs, privateData);
			obj[impl][utils.wrapperSymbol] = obj;
		},
		interface: URL,
		expose: {
			Window: { URL: URL },
			Worker: { URL: URL },
		},
	};
});

var URL$4 = URL_1.interface;
var serializeURL = urlStateMachine.serializeURL;
var serializeURLOrigin = urlStateMachine.serializeURLOrigin;
var basicURLParse = urlStateMachine.basicURLParse;
var setTheUsername = urlStateMachine.setTheUsername;
var setThePassword = urlStateMachine.setThePassword;
var serializeHost = urlStateMachine.serializeHost;
var serializeInteger = urlStateMachine.serializeInteger;
var parseURL$1 = urlStateMachine.parseURL;

var publicApi = {
	URL: URL$4,
	serializeURL: serializeURL,
	serializeURLOrigin: serializeURLOrigin,
	basicURLParse: basicURLParse,
	setTheUsername: setTheUsername,
	setThePassword: setThePassword,
	serializeHost: serializeHost,
	serializeInteger: serializeInteger,
	parseURL: parseURL$1,
};

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream__default["default"].Readable;

const BUFFER = Symbol("buffer");
const TYPE = Symbol("type");

class Blob {
	constructor() {
		this[TYPE] = "";

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === "string" ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return "[object Blob]";
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true },
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: "Blob",
	writable: false,
	enumerable: false,
	configurable: true,
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
	Error.call(this, message);

	this.message = message;
	this.type = type;

	// when err.type is `system`, err.code contains system error code
	if (systemError) {
		this.code = this.errno = systemError.code;
	}

	// hide custom error implementation details from end-users
	Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = "FetchError";

let convert;
try {
	convert = require("encoding").convert;
} catch (e) {}

const INTERNALS = Symbol("Body internals");

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream__default["default"].PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		_ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body));
	else if (Buffer.isBuffer(body));
	else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream__default["default"]);
	else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null,
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream__default["default"]) {
		body.on("error", function (err) {
			const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
	 * Decode response as ArrayBuffer
	 *
	 * @return  Promise
	 */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
	 * Return raw response as Blob
	 *
	 * @return Promise
	 */
	blob() {
		let ct = (this.headers && this.headers.get("content-type")) || "";
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
				// Prevent copying
				new Blob([], {
					type: ct.toLowerCase(),
				}),
				{
					[BUFFER]: buf,
				}
			);
		});
	},

	/**
	 * Decode response as json
	 *
	 * @return  Promise
	 */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
			}
		});
	},

	/**
	 * Decode response as text
	 *
	 * @return  Promise
	 */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
	 * Decode response as buffer (non-spec api)
	 *
	 * @return  Promise
	 */
	buffer() {
		return consumeBody.call(this);
	},

	/**
	 * Decode response as text, while automatically detecting the encoding and
	 * trying to decode to UTF-8 (non-spec api)
	 *
	 * @return  Promise
	 */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	},
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true },
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream__default["default"])) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on("error", function (err) {
			if (err.name === "AbortError") {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
			}
		});

		body.on("data", function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on("end", function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== "function") {
		throw new Error("The package `encoding` must be installed to use the textConverted() function");
	}

	const ct = headers.get("content-type");
	let charset = "utf-8";
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === "gb2312" || charset === "gbk") {
			charset = "gb18030";
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, "UTF-8", charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone$1(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error("cannot clone body after it is used");
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream__default["default"] && typeof body.getBoundary !== "function") {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === "string") {
		// body is string
		return "text/plain;charset=UTF-8";
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return "application/x-www-form-urlencoded;charset=UTF-8";
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === "function") {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream__default["default"]) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return "text/plain;charset=UTF-8";
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;

	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === "function") {
		// detect form data input from form-data module
		if (
			(body._lengthRetrievers && body._lengthRetrievers.length == 0) || // 1.x
			(body.hasKnownLength && body.hasKnownLength())
		) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;

	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === "") {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol("map");
class Headers {
	/**
	 * Headers class
	 *
	 * @param   Object  headers  Response headers
	 * @return  Void
	 */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null);
		else if (typeof init === "object") {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== "function") {
					throw new TypeError("Header pairs must be iterable");
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
						throw new TypeError("Each header pair must be iterable");
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError("Each header pair must be a name/value tuple");
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError("Provided initializer must be an object");
		}
	}

	/**
	 * Return combined header value given name
	 *
	 * @param   String  name  Header name
	 * @return  Mixed
	 */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(", ");
	}

	/**
	 * Iterate over all headers
	 *
	 * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
	 * @param   Boolean   thisArg   `this` context for callback function
	 * @return  Void
	 */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
				value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
	 * Overwrite header values given name
	 *
	 * @param   String  name   Header name
	 * @param   String  value  Header value
	 * @return  Void
	 */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
	 * Append a value onto existing header
	 *
	 * @param   String  name   Header name
	 * @param   String  value  Header value
	 * @return  Void
	 */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
	 * Check for header name existence
	 *
	 * @param   String   name  Header name
	 * @return  Boolean
	 */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
	 * Delete all header values given name
	 *
	 * @param   String  name  Header name
	 * @return  Void
	 */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
	 * Return raw headers (non-spec api)
	 *
	 * @return  Object
	 */
	raw() {
		return this[MAP];
	}

	/**
	 * Get an iterator on keys.
	 *
	 * @return  Iterator
	 */
	keys() {
		return createHeadersIterator(this, "key");
	}

	/**
	 * Get an iterator on values.
	 *
	 * @return  Iterator
	 */
	values() {
		return createHeadersIterator(this, "value");
	}

	/**
	 * Get an iterator on entries.
	 *
	 * This is the default iterator of the Headers object.
	 *
	 * @return  Iterator
	 */
	[Symbol.iterator]() {
		return createHeadersIterator(this, "key+value");
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: "Headers",
	writable: false,
	enumerable: false,
	configurable: true,
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true },
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "key+value";

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(
		kind === "key"
			? function (k) {
					return k.toLowerCase();
			  }
			: kind === "value"
			? function (k) {
					return headers[MAP][k].join(", ");
			  }
			: function (k) {
					return [k.toLowerCase(), headers[MAP][k].join(", ")];
			  }
	);
}

const INTERNAL = Symbol("internal");

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0,
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf(
	{
		next() {
			// istanbul ignore if
			if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
				throw new TypeError("Value of `this` is not a HeadersIterator");
			}

			var _INTERNAL = this[INTERNAL];
			const target = _INTERNAL.target,
				kind = _INTERNAL.kind,
				index = _INTERNAL.index;

			const values = getHeaders(target, kind);
			const len = values.length;
			if (index >= len) {
				return {
					value: undefined,
					done: true,
				};
			}

			this[INTERNAL].index = index + 1;

			return {
				value: values[index],
				done: false,
			};
		},
	},
	Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
);

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: "HeadersIterator",
	writable: false,
	enumerable: false,
	configurable: true,
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], "Host");
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol("Response internals");

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES$1 = http__default["default"].STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has("Content-Type")) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append("Content-Type", contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES$1[status],
			headers,
			counter: opts.counter,
		};
	}

	get url() {
		return this[INTERNALS$1].url || "";
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
	 * Convenience property representing if the request ended normally
	 */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
	 * Clone this response
	 *
	 * @return  Response
	 */
	clone() {
		return new Response(clone$1(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected,
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true },
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: "Response",
	writable: false,
	enumerable: false,
	configurable: true,
});

const INTERNALS$2 = Symbol("Request internals");
const URL$3 = url__default["default"].URL || publicApi.URL;

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = url__default["default"].parse;
const format_url = url__default["default"].format;

/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */
function parseURL(urlStr) {
	/*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */
	if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
		urlStr = new URL$3(urlStr).toString();
	}

	// Fallback to old implementation for arbitrary URLs
	return parse_url(urlStr);
}

const streamDestructionSupported = "destroy" in Stream__default["default"].Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === "AbortSignal");
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parseURL(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parseURL(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parseURL(input.url);
		}

		let method = init.method || input.method || "GET";
		method = method.toUpperCase();

		if ((init.body != null || (isRequest(input) && input.body !== null)) && (method === "GET" || method === "HEAD")) {
			throw new TypeError("Request with GET/HEAD method cannot have body");
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone$1(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0,
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has("Content-Type")) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append("Content-Type", contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ("signal" in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError("Expected signal to be an instanceof AbortSignal");
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || "follow",
			headers,
			parsedURL,
			signal,
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
	 * Clone this request
	 *
	 * @return  Request
	 */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: "Request",
	writable: false,
	enumerable: false,
	configurable: true,
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true },
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has("Accept")) {
		headers.set("Accept", "*/*");
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError("Only absolute URLs are supported");
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError("Only HTTP(S) protocols are supported");
	}

	if (request.signal && request.body instanceof Stream__default["default"].Readable && !streamDestructionSupported) {
		throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = "0";
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === "number") {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set("Content-Length", contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has("User-Agent")) {
		headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has("Accept-Encoding")) {
		headers.set("Accept-Encoding", "gzip,deflate");
	}

	let agent = request.agent;
	if (typeof agent === "function") {
		agent = agent(parsedURL);
	}

	if (!headers.has("Connection") && !agent) {
		headers.set("Connection", "close");
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent,
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
	Error.call(this, message);

	this.type = "aborted";
	this.message = message;

	// hide custom error implementation details from end-users
	Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = "AbortError";

const URL$1$1 = url__default["default"].URL || publicApi.URL;

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream__default["default"].PassThrough;

const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
	const orig = new URL$1$1(original).hostname;
	const dest = new URL$1$1(destination).hostname;

	return orig === dest || (orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest));
};

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {
	// allow custom promise
	if (!fetch.Promise) {
		throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === "https:" ? https__default["default"] : http__default["default"]).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError("The user aborted a request.");
			reject(error);
			if (request.body && request.body instanceof Stream__default["default"].Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit("error", error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener("abort", abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener("abort", abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once("socket", function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
					finalize();
				}, request.timeout);
			});
		}

		req.on("error", function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
			finalize();
		});

		req.on("response", function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get("Location");

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL$1$1(location, request.url).toString();
				} catch (err) {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== "manual") {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case "error":
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
						finalize();
						return;
					case "manual":
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set("Location", locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case "follow":
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size,
						};

						if (!isDomainOrSubdomain(request.url, locationURL)) {
							for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
								requestOpts.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || ((res.statusCode === 301 || res.statusCode === 302) && request.method === "POST")) {
							requestOpts.method = "GET";
							requestOpts.body = undefined;
							requestOpts.headers.delete("content-length");
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once("end", function () {
				if (signal) signal.removeEventListener("abort", abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter,
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get("Content-Encoding");

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib__default["default"].Z_SYNC_FLUSH,
				finishFlush: zlib__default["default"].Z_SYNC_FLUSH,
			};

			// for gzip
			if (codings == "gzip" || codings == "x-gzip") {
				body = body.pipe(zlib__default["default"].createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == "deflate" || codings == "x-deflate") {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once("data", function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0f) === 0x08) {
						body = body.pipe(zlib__default["default"].createInflate());
					} else {
						body = body.pipe(zlib__default["default"].createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == "br" && typeof zlib__default["default"].createBrotliDecompress === "function") {
				body = body.pipe(zlib__default["default"].createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

var lib$2 = /*#__PURE__*/ Object.freeze({
	__proto__: null,
	default: fetch,
	Headers: Headers,
	Request: Request,
	Response: Response,
	FetchError: FetchError,
});

var nodeFetch = /*@__PURE__*/ getAugmentedNamespace(lib$2);

var nodePonyfill = createCommonjsModule(function (module, exports) {
	const realFetch = nodeFetch.default || nodeFetch;

	const fetch = function (url, options) {
		// Support schemaless URIs on the server for parity with the browser.
		// Ex: //github.com/ -> https://github.com/
		if (/^\/\//.test(url)) {
			url = "https:" + url;
		}
		return realFetch.call(this, url, options);
	};

	fetch.ponyfill = true;

	module.exports = exports = fetch;
	exports.fetch = fetch;
	exports.Headers = nodeFetch.Headers;
	exports.Request = nodeFetch.Request;
	exports.Response = nodeFetch.Response;

	// Needed for TypeScript consumers without esModuleInterop.
	exports.default = fetch;
});

const digest = (algorithm, data) => (0, crypto_1__default["default"].createHash)(algorithm).update(data).digest();
var _default$G = digest;

var digest_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$G,
	},
	"__esModule",
	{ value: true }
);

var digest_js_1 = digest_1;

var buffer_utils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.concatKdf = exports.lengthAndInput = exports.uint32be = exports.uint64be = exports.p2s = exports.concat = exports.decoder = exports.encoder = void 0;

	exports.encoder = new TextEncoder();
	exports.decoder = new TextDecoder();
	const MAX_INT32 = 2 ** 32;
	function concat(...buffers) {
		const size = buffers.reduce((acc, { length }) => acc + length, 0);
		const buf = new Uint8Array(size);
		let i = 0;
		buffers.forEach((buffer) => {
			buf.set(buffer, i);
			i += buffer.length;
		});
		return buf;
	}
	exports.concat = concat;
	function p2s(alg, p2sInput) {
		return concat(exports.encoder.encode(alg), new Uint8Array([0]), p2sInput);
	}
	exports.p2s = p2s;
	function writeUInt32BE(buf, value, offset) {
		if (value < 0 || value >= MAX_INT32) {
			throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
		}
		buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);
	}
	function uint64be(value) {
		const high = Math.floor(value / MAX_INT32);
		const low = value % MAX_INT32;
		const buf = new Uint8Array(8);
		writeUInt32BE(buf, high, 0);
		writeUInt32BE(buf, low, 4);
		return buf;
	}
	exports.uint64be = uint64be;
	function uint32be(value) {
		const buf = new Uint8Array(4);
		writeUInt32BE(buf, value);
		return buf;
	}
	exports.uint32be = uint32be;
	function lengthAndInput(input) {
		return concat(uint32be(input.length), input);
	}
	exports.lengthAndInput = lengthAndInput;
	async function concatKdf(secret, bits, value) {
		const iterations = Math.ceil((bits >> 3) / 32);
		const res = new Uint8Array(iterations * 32);
		for (let iter = 0; iter < iterations; iter++) {
			const buf = new Uint8Array(4 + secret.length + value.length);
			buf.set(uint32be(iter + 1));
			buf.set(secret, 4);
			buf.set(value, 4 + secret.length);
			res.set(await (0, digest_js_1.default)("sha256", buf), iter * 32);
		}
		return res.slice(0, bits >> 3);
	}
	exports.concatKdf = concatKdf;
});

var buffer_utils_js_1 = buffer_utils;

var base64url$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decode = exports.encode = exports.encodeBase64 = exports.decodeBase64 = void 0;

	let encode;
	exports.encode = encode;
	function normalize(input) {
		let encoded = input;
		if (encoded instanceof Uint8Array) {
			encoded = buffer_utils_js_1.decoder.decode(encoded);
		}
		return encoded;
	}
	if (buffer_1__default["default"].Buffer.isEncoding("base64url")) {
		exports.encode = encode = (input) => buffer_1__default["default"].Buffer.from(input).toString("base64url");
	} else {
		exports.encode = encode = (input) => buffer_1__default["default"].Buffer.from(input).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	}
	const decodeBase64 = (input) => buffer_1__default["default"].Buffer.from(input, "base64");
	exports.decodeBase64 = decodeBase64;
	const encodeBase64 = (input) => buffer_1__default["default"].Buffer.from(input).toString("base64");
	exports.encodeBase64 = encodeBase64;
	const decode = (input) => buffer_1__default["default"].Buffer.from(normalize(input), "base64");
	exports.decode = decode;
});

var errors$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JWSSignatureVerificationFailed = exports.JWKSTimeout = exports.JWKSMultipleMatchingKeys = exports.JWKSNoMatchingKey = exports.JWKSInvalid = exports.JWKInvalid = exports.JWTInvalid = exports.JWSInvalid = exports.JWEInvalid = exports.JWEDecryptionFailed = exports.JOSENotSupported = exports.JOSEAlgNotAllowed = exports.JWTExpired = exports.JWTClaimValidationFailed = exports.JOSEError = void 0;
	class JOSEError extends Error {
		constructor(message) {
			var _a;
			super(message);
			this.code = "ERR_JOSE_GENERIC";
			this.name = this.constructor.name;
			(_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);
		}
		static get code() {
			return "ERR_JOSE_GENERIC";
		}
	}
	exports.JOSEError = JOSEError;
	class JWTClaimValidationFailed extends JOSEError {
		constructor(message, claim = "unspecified", reason = "unspecified") {
			super(message);
			this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
			this.claim = claim;
			this.reason = reason;
		}
		static get code() {
			return "ERR_JWT_CLAIM_VALIDATION_FAILED";
		}
	}
	exports.JWTClaimValidationFailed = JWTClaimValidationFailed;
	class JWTExpired extends JOSEError {
		constructor(message, claim = "unspecified", reason = "unspecified") {
			super(message);
			this.code = "ERR_JWT_EXPIRED";
			this.claim = claim;
			this.reason = reason;
		}
		static get code() {
			return "ERR_JWT_EXPIRED";
		}
	}
	exports.JWTExpired = JWTExpired;
	class JOSEAlgNotAllowed extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
		}
		static get code() {
			return "ERR_JOSE_ALG_NOT_ALLOWED";
		}
	}
	exports.JOSEAlgNotAllowed = JOSEAlgNotAllowed;
	class JOSENotSupported extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JOSE_NOT_SUPPORTED";
		}
		static get code() {
			return "ERR_JOSE_NOT_SUPPORTED";
		}
	}
	exports.JOSENotSupported = JOSENotSupported;
	class JWEDecryptionFailed extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWE_DECRYPTION_FAILED";
			this.message = "decryption operation failed";
		}
		static get code() {
			return "ERR_JWE_DECRYPTION_FAILED";
		}
	}
	exports.JWEDecryptionFailed = JWEDecryptionFailed;
	class JWEInvalid extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWE_INVALID";
		}
		static get code() {
			return "ERR_JWE_INVALID";
		}
	}
	exports.JWEInvalid = JWEInvalid;
	class JWSInvalid extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWS_INVALID";
		}
		static get code() {
			return "ERR_JWS_INVALID";
		}
	}
	exports.JWSInvalid = JWSInvalid;
	class JWTInvalid extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWT_INVALID";
		}
		static get code() {
			return "ERR_JWT_INVALID";
		}
	}
	exports.JWTInvalid = JWTInvalid;
	class JWKInvalid extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWK_INVALID";
		}
		static get code() {
			return "ERR_JWK_INVALID";
		}
	}
	exports.JWKInvalid = JWKInvalid;
	class JWKSInvalid extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWKS_INVALID";
		}
		static get code() {
			return "ERR_JWKS_INVALID";
		}
	}
	exports.JWKSInvalid = JWKSInvalid;
	class JWKSNoMatchingKey extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWKS_NO_MATCHING_KEY";
			this.message = "no applicable key found in the JSON Web Key Set";
		}
		static get code() {
			return "ERR_JWKS_NO_MATCHING_KEY";
		}
	}
	exports.JWKSNoMatchingKey = JWKSNoMatchingKey;
	class JWKSMultipleMatchingKeys extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
			this.message = "multiple matching keys found in the JSON Web Key Set";
		}
		static get code() {
			return "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
		}
	}
	exports.JWKSMultipleMatchingKeys = JWKSMultipleMatchingKeys;
	class JWKSTimeout extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWKS_TIMEOUT";
			this.message = "request timed out";
		}
		static get code() {
			return "ERR_JWKS_TIMEOUT";
		}
	}
	exports.JWKSTimeout = JWKSTimeout;
	class JWSSignatureVerificationFailed extends JOSEError {
		constructor() {
			super(...arguments);
			this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
			this.message = "signature verification failed";
		}
		static get code() {
			return "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
		}
	}
	exports.JWSSignatureVerificationFailed = JWSSignatureVerificationFailed;
});

var random$4 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;

	Object.defineProperty(exports, "default", {
		enumerable: true,
		get: function () {
			return crypto_1__default["default"].randomFillSync;
		},
	});
});

var require$$0 = errors$1;

var random_js_1 = random$4;

var iv = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bitLength = void 0;

	function bitLength(alg) {
		switch (alg) {
			case "A128GCM":
			case "A128GCMKW":
			case "A192GCM":
			case "A192GCMKW":
			case "A256GCM":
			case "A256GCMKW":
				return 96;
			case "A128CBC-HS256":
			case "A192CBC-HS384":
			case "A256CBC-HS512":
				return 128;
			default:
				throw new require$$0.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
		}
	}
	exports.bitLength = bitLength;
	exports.default = (alg) => (0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));
});

var iv_js_1 = iv;

const checkIvLength = (enc, iv) => {
	if (iv.length << 3 !== (0, iv_js_1.bitLength)(enc)) {
		throw new require$$0.JWEInvalid("Invalid Initialization Vector length");
	}
};
var _default$F = checkIvLength;

var check_iv_length = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$F,
	},
	"__esModule",
	{ value: true }
);

var _default$E = util_1__default["default"].types.isKeyObject ? (obj) => util_1__default["default"].types.isKeyObject(obj) : (obj) => obj != null && obj instanceof crypto_1__default["default"].KeyObject;

var is_key_object$1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$E,
	},
	"__esModule",
	{ value: true }
);

var is_key_object_js_1 = is_key_object$1;

const checkCekLength = (enc, cek) => {
	let expected;
	switch (enc) {
		case "A128CBC-HS256":
		case "A192CBC-HS384":
		case "A256CBC-HS512":
			expected = parseInt(enc.slice(-3), 10);
			break;
		case "A128GCM":
		case "A192GCM":
		case "A256GCM":
			expected = parseInt(enc.slice(1, 4), 10);
			break;
		default:
			throw new require$$0.JOSENotSupported(`Content Encryption Algorithm ${enc} is not supported either by JOSE or your javascript runtime`);
	}
	if (cek instanceof Uint8Array) {
		const actual = cek.byteLength << 3;
		if (actual !== expected) {
			throw new require$$0.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
		}
		return;
	}
	if ((0, is_key_object_js_1.default)(cek) && cek.type === "secret") {
		const actual = cek.symmetricKeySize << 3;
		if (actual !== expected) {
			throw new require$$0.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
		}
		return;
	}
	throw new TypeError("Invalid Content Encryption Key type");
};
var _default$D = checkCekLength;

var check_cek_length = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$D,
	},
	"__esModule",
	{ value: true }
);

const timingSafeEqual = crypto_1__default["default"].timingSafeEqual;
var _default$C = timingSafeEqual;

var timing_safe_equal = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$C,
	},
	"__esModule",
	{ value: true }
);

function cbcTag(aad, iv, ciphertext, macSize, macKey, keySize) {
	const macData = (0, buffer_utils_js_1.concat)(aad, iv, ciphertext, (0, buffer_utils_js_1.uint64be)(aad.length << 3));
	const hmac = (0, crypto_1__default["default"].createHmac)(`sha${macSize}`, macKey);
	hmac.update(macData);
	return hmac.digest().slice(0, keySize >> 3);
}
var _default$B = cbcTag;

var cbc_tag = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$B,
	},
	"__esModule",
	{ value: true }
);

var webcrypto_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isCryptoKey = void 0;

	const webcrypto = crypto_1__default["default"].webcrypto;
	exports.default = webcrypto;
	exports.isCryptoKey = util_1__default["default"].types.isCryptoKey ? (key) => util_1__default["default"].types.isCryptoKey(key) : (key) => false;
});

var env = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isCloudflareWorkers = void 0;
	function isCloudflareWorkers() {
		return false;
	}
	exports.isCloudflareWorkers = isCloudflareWorkers;
});

var env_js_1 = env;

var crypto_key = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkEncCryptoKey = exports.checkSigCryptoKey = void 0;

	function unusable(name, prop = "algorithm.name") {
		return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
	}
	function isAlgorithm(algorithm, name) {
		return algorithm.name === name;
	}
	function getHashLength(hash) {
		return parseInt(hash.name.slice(4), 10);
	}
	function getNamedCurve(alg) {
		switch (alg) {
			case "ES256":
				return "P-256";
			case "ES384":
				return "P-384";
			case "ES512":
				return "P-521";
			default:
				throw new Error("unreachable");
		}
	}
	function checkUsage(key, usages) {
		if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
			let msg = "CryptoKey does not support this operation, its usages must include ";
			if (usages.length > 2) {
				const last = usages.pop();
				msg += `one of ${usages.join(", ")}, or ${last}.`;
			} else if (usages.length === 2) {
				msg += `one of ${usages[0]} or ${usages[1]}.`;
			} else {
				msg += `${usages[0]}.`;
			}
			throw new TypeError(msg);
		}
	}
	function checkSigCryptoKey(key, alg, ...usages) {
		switch (alg) {
			case "HS256":
			case "HS384":
			case "HS512": {
				if (!isAlgorithm(key.algorithm, "HMAC")) throw unusable("HMAC");
				const expected = parseInt(alg.slice(2), 10);
				const actual = getHashLength(key.algorithm.hash);
				if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
				break;
			}
			case "RS256":
			case "RS384":
			case "RS512": {
				if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5")) throw unusable("RSASSA-PKCS1-v1_5");
				const expected = parseInt(alg.slice(2), 10);
				const actual = getHashLength(key.algorithm.hash);
				if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
				break;
			}
			case "PS256":
			case "PS384":
			case "PS512": {
				if (!isAlgorithm(key.algorithm, "RSA-PSS")) throw unusable("RSA-PSS");
				const expected = parseInt(alg.slice(2), 10);
				const actual = getHashLength(key.algorithm.hash);
				if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
				break;
			}
			case (0, env_js_1.isCloudflareWorkers)() && "EdDSA": {
				if (!isAlgorithm(key.algorithm, "NODE-ED25519")) throw unusable("NODE-ED25519");
				break;
			}
			case "EdDSA": {
				if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") {
					throw unusable("Ed25519 or Ed448");
				}
				break;
			}
			case "ES256":
			case "ES384":
			case "ES512": {
				if (!isAlgorithm(key.algorithm, "ECDSA")) throw unusable("ECDSA");
				const expected = getNamedCurve(alg);
				const actual = key.algorithm.namedCurve;
				if (actual !== expected) throw unusable(expected, "algorithm.namedCurve");
				break;
			}
			default:
				throw new TypeError("CryptoKey does not support this operation");
		}
		checkUsage(key, usages);
	}
	exports.checkSigCryptoKey = checkSigCryptoKey;
	function checkEncCryptoKey(key, alg, ...usages) {
		switch (alg) {
			case "A128GCM":
			case "A192GCM":
			case "A256GCM": {
				if (!isAlgorithm(key.algorithm, "AES-GCM")) throw unusable("AES-GCM");
				const expected = parseInt(alg.slice(1, 4), 10);
				const actual = key.algorithm.length;
				if (actual !== expected) throw unusable(expected, "algorithm.length");
				break;
			}
			case "A128KW":
			case "A192KW":
			case "A256KW": {
				if (!isAlgorithm(key.algorithm, "AES-KW")) throw unusable("AES-KW");
				const expected = parseInt(alg.slice(1, 4), 10);
				const actual = key.algorithm.length;
				if (actual !== expected) throw unusable(expected, "algorithm.length");
				break;
			}
			case "ECDH": {
				switch (key.algorithm.name) {
					case "ECDH":
					case "X25519":
					case "X448":
						break;
					default:
						throw unusable("ECDH, X25519, or X448");
				}
				break;
			}
			case "PBES2-HS256+A128KW":
			case "PBES2-HS384+A192KW":
			case "PBES2-HS512+A256KW":
				if (!isAlgorithm(key.algorithm, "PBKDF2")) throw unusable("PBKDF2");
				break;
			case "RSA-OAEP":
			case "RSA-OAEP-256":
			case "RSA-OAEP-384":
			case "RSA-OAEP-512": {
				if (!isAlgorithm(key.algorithm, "RSA-OAEP")) throw unusable("RSA-OAEP");
				const expected = parseInt(alg.slice(9), 10) || 1;
				const actual = getHashLength(key.algorithm.hash);
				if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
				break;
			}
			default:
				throw new TypeError("CryptoKey does not support this operation");
		}
		checkUsage(key, usages);
	}
	exports.checkEncCryptoKey = checkEncCryptoKey;
});

var invalid_key_input = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.withAlg = void 0;
	function message(msg, actual, ...types) {
		if (types.length > 2) {
			const last = types.pop();
			msg += `one of type ${types.join(", ")}, or ${last}.`;
		} else if (types.length === 2) {
			msg += `one of type ${types[0]} or ${types[1]}.`;
		} else {
			msg += `of type ${types[0]}.`;
		}
		if (actual == null) {
			msg += ` Received ${actual}`;
		} else if (typeof actual === "function" && actual.name) {
			msg += ` Received function ${actual.name}`;
		} else if (typeof actual === "object" && actual != null) {
			if (actual.constructor && actual.constructor.name) {
				msg += ` Received an instance of ${actual.constructor.name}`;
			}
		}
		return msg;
	}
	exports.default = (actual, ...types) => {
		return message("Key must be ", actual, ...types);
	};
	function withAlg(alg, actual, ...types) {
		return message(`Key for the ${alg} algorithm must be `, actual, ...types);
	}
	exports.withAlg = withAlg;
});

let ciphers;
var _default$A = (algorithm) => {
	ciphers || (ciphers = new Set((0, crypto_1__default["default"].getCiphers)()));
	return ciphers.has(algorithm);
};

var ciphers_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$A,
	},
	"__esModule",
	{ value: true }
);

var webcrypto_js_1 = webcrypto_1;

var is_key_like = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.types = void 0;

	exports.default = (key) => (0, is_key_object_js_1.default)(key) || (0, webcrypto_js_1.isCryptoKey)(key);
	const types = ["KeyObject"];
	exports.types = types;
	if (parseInt(process.versions.node) >= 16) {
		types.push("CryptoKey");
	}
});

var check_iv_length_js_1 = check_iv_length;

var check_cek_length_js_1 = check_cek_length;

var timing_safe_equal_js_1 = timing_safe_equal;

var cbc_tag_js_1 = cbc_tag;

var crypto_key_js_1 = crypto_key;

var invalid_key_input_js_1 = invalid_key_input;

var ciphers_js_1 = ciphers_1;

var is_key_like_js_1 = is_key_like;

function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
	const keySize = parseInt(enc.slice(1, 4), 10);
	if ((0, is_key_object_js_1.default)(cek)) {
		cek = cek.export();
	}
	const encKey = cek.subarray(keySize >> 3);
	const macKey = cek.subarray(0, keySize >> 3);
	const macSize = parseInt(enc.slice(-3), 10);
	const algorithm = `aes-${keySize}-cbc`;
	if (!(0, ciphers_js_1.default)(algorithm)) {
		throw new require$$0.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);
	}
	const expectedTag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);
	let macCheckPassed;
	try {
		macCheckPassed = (0, timing_safe_equal_js_1.default)(tag, expectedTag);
	} catch {}
	if (!macCheckPassed) {
		throw new require$$0.JWEDecryptionFailed();
	}
	let plaintext;
	try {
		const decipher = (0, crypto_1__default["default"].createDecipheriv)(algorithm, encKey, iv);
		plaintext = (0, buffer_utils_js_1.concat)(decipher.update(ciphertext), decipher.final());
	} catch {}
	if (!plaintext) {
		throw new require$$0.JWEDecryptionFailed();
	}
	return plaintext;
}
function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
	const keySize = parseInt(enc.slice(1, 4), 10);
	const algorithm = `aes-${keySize}-gcm`;
	if (!(0, ciphers_js_1.default)(algorithm)) {
		throw new require$$0.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);
	}
	try {
		const decipher = (0, crypto_1__default["default"].createDecipheriv)(algorithm, cek, iv, { authTagLength: 16 });
		decipher.setAuthTag(tag);
		if (aad.byteLength) {
			decipher.setAAD(aad, { plaintextLength: ciphertext.length });
		}
		const plaintext = decipher.update(ciphertext);
		decipher.final();
		return plaintext;
	} catch {
		throw new require$$0.JWEDecryptionFailed();
	}
}
const decrypt$4 = (enc, cek, ciphertext, iv, tag, aad) => {
	let key;
	if ((0, webcrypto_js_1.isCryptoKey)(cek)) {
		(0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, "decrypt");
		key = crypto_1__default["default"].KeyObject.from(cek);
	} else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {
		key = cek;
	} else {
		throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, "Uint8Array"));
	}
	(0, check_cek_length_js_1.default)(enc, key);
	(0, check_iv_length_js_1.default)(enc, iv);
	switch (enc) {
		case "A128CBC-HS256":
		case "A192CBC-HS384":
		case "A256CBC-HS512":
			return cbcDecrypt(enc, key, ciphertext, iv, tag, aad);
		case "A128GCM":
		case "A192GCM":
		case "A256GCM":
			return gcmDecrypt(enc, key, ciphertext, iv, tag, aad);
		default:
			throw new require$$0.JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
	}
};
var _default$z = decrypt$4;

var decrypt_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$z,
	},
	"__esModule",
	{ value: true }
);

var zlib = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.deflate = exports.inflate = void 0;

	const inflateRaw = (0, util_1__default["default"].promisify)(zlib__default["default"].inflateRaw);
	const deflateRaw = (0, util_1__default["default"].promisify)(zlib__default["default"].deflateRaw);
	const inflate = (input) => inflateRaw(input);
	exports.inflate = inflate;
	const deflate = (input) => deflateRaw(input);
	exports.deflate = deflate;
});

const isDisjoint = (...headers) => {
	const sources = headers.filter(Boolean);
	if (sources.length === 0 || sources.length === 1) {
		return true;
	}
	let acc;
	for (const header of sources) {
		const parameters = Object.keys(header);
		if (!acc || acc.size === 0) {
			acc = new Set(parameters);
			continue;
		}
		for (const parameter of parameters) {
			if (acc.has(parameter)) {
				return false;
			}
			acc.add(parameter);
		}
	}
	return true;
};
var _default$y = isDisjoint;

var is_disjoint = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$y,
	},
	"__esModule",
	{ value: true }
);

function isObjectLike(value) {
	return typeof value === "object" && value !== null;
}
function isObject(input) {
	if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
		return false;
	}
	if (Object.getPrototypeOf(input) === null) {
		return true;
	}
	let proto = input;
	while (Object.getPrototypeOf(proto) !== null) {
		proto = Object.getPrototypeOf(proto);
	}
	return Object.getPrototypeOf(input) === proto;
}
var _default$x = isObject;

var is_object = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$x,
	},
	"__esModule",
	{ value: true }
);

var aeskw = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.unwrap = exports.wrap = void 0;

	function checkKeySize(key, alg) {
		if (key.symmetricKeySize << 3 !== parseInt(alg.slice(1, 4), 10)) {
			throw new TypeError(`Invalid key size for alg: ${alg}`);
		}
	}
	function ensureKeyObject(key, alg, usage) {
		if ((0, is_key_object_js_1.default)(key)) {
			return key;
		}
		if (key instanceof Uint8Array) {
			return (0, crypto_1__default["default"].createSecretKey)(key);
		}
		if ((0, webcrypto_js_1.isCryptoKey)(key)) {
			(0, crypto_key_js_1.checkEncCryptoKey)(key, alg, usage);
			return crypto_1__default["default"].KeyObject.from(key);
		}
		throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, "Uint8Array"));
	}
	const wrap = (alg, key, cek) => {
		const size = parseInt(alg.slice(1, 4), 10);
		const algorithm = `aes${size}-wrap`;
		if (!(0, ciphers_js_1.default)(algorithm)) {
			throw new require$$0.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
		}
		const keyObject = ensureKeyObject(key, alg, "wrapKey");
		checkKeySize(keyObject, alg);
		const cipher = (0, crypto_1__default["default"].createCipheriv)(algorithm, keyObject, buffer_1__default["default"].Buffer.alloc(8, 0xa6));
		return (0, buffer_utils_js_1.concat)(cipher.update(cek), cipher.final());
	};
	exports.wrap = wrap;
	const unwrap = (alg, key, encryptedKey) => {
		const size = parseInt(alg.slice(1, 4), 10);
		const algorithm = `aes${size}-wrap`;
		if (!(0, ciphers_js_1.default)(algorithm)) {
			throw new require$$0.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
		}
		const keyObject = ensureKeyObject(key, alg, "unwrapKey");
		checkKeySize(keyObject, alg);
		const cipher = (0, crypto_1__default["default"].createDecipheriv)(algorithm, keyObject, buffer_1__default["default"].Buffer.alloc(8, 0xa6));
		return (0, buffer_utils_js_1.concat)(cipher.update(encryptedKey), cipher.final());
	};
	exports.unwrap = unwrap;
});

var get_named_curve = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setCurve = exports.weakMap = void 0;

	const p256 = buffer_1__default["default"].Buffer.from([42, 134, 72, 206, 61, 3, 1, 7]);
	const p384 = buffer_1__default["default"].Buffer.from([43, 129, 4, 0, 34]);
	const p521 = buffer_1__default["default"].Buffer.from([43, 129, 4, 0, 35]);
	const secp256k1 = buffer_1__default["default"].Buffer.from([43, 129, 4, 0, 10]);
	exports.weakMap = new WeakMap();
	const namedCurveToJOSE = (namedCurve) => {
		switch (namedCurve) {
			case "prime256v1":
				return "P-256";
			case "secp384r1":
				return "P-384";
			case "secp521r1":
				return "P-521";
			case "secp256k1":
				return "secp256k1";
			default:
				throw new require$$0.JOSENotSupported("Unsupported key curve for this operation");
		}
	};
	const getNamedCurve = (kee, raw) => {
		var _a;
		let key;
		if ((0, webcrypto_js_1.isCryptoKey)(kee)) {
			key = crypto_1__default["default"].KeyObject.from(kee);
		} else if ((0, is_key_object_js_1.default)(kee)) {
			key = kee;
		} else {
			throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));
		}
		if (key.type === "secret") {
			throw new TypeError('only "private" or "public" type keys can be used for this operation');
		}
		switch (key.asymmetricKeyType) {
			case "ed25519":
			case "ed448":
				return `Ed${key.asymmetricKeyType.slice(2)}`;
			case "x25519":
			case "x448":
				return `X${key.asymmetricKeyType.slice(1)}`;
			case "ec": {
				if (exports.weakMap.has(key)) {
					return exports.weakMap.get(key);
				}
				let namedCurve = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.namedCurve;
				if (!namedCurve && key.type === "private") {
					namedCurve = getNamedCurve((0, crypto_1__default["default"].createPublicKey)(key), true);
				} else if (!namedCurve) {
					const buf = key.export({ format: "der", type: "spki" });
					const i = buf[1] < 128 ? 14 : 15;
					const len = buf[i];
					const curveOid = buf.slice(i + 1, i + 1 + len);
					if (curveOid.equals(p256)) {
						namedCurve = "prime256v1";
					} else if (curveOid.equals(p384)) {
						namedCurve = "secp384r1";
					} else if (curveOid.equals(p521)) {
						namedCurve = "secp521r1";
					} else if (curveOid.equals(secp256k1)) {
						namedCurve = "secp256k1";
					} else {
						throw new require$$0.JOSENotSupported("Unsupported key curve for this operation");
					}
				}
				if (raw) return namedCurve;
				const curve = namedCurveToJOSE(namedCurve);
				exports.weakMap.set(key, curve);
				return curve;
			}
			default:
				throw new TypeError("Invalid asymmetric key type for this operation");
		}
	};
	function setCurve(keyObject, curve) {
		exports.weakMap.set(keyObject, curve);
	}
	exports.setCurve = setCurve;
	exports.default = getNamedCurve;
});

var get_named_curve_js_1 = get_named_curve;

var ecdhes = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ecdhAllowed = exports.generateEpk = exports.deriveKey = void 0;

	const generateKeyPair = (0, util_1__default["default"].promisify)(crypto_1__default["default"].generateKeyPair);
	async function deriveKey(publicKee, privateKee, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
		let publicKey;
		if ((0, webcrypto_js_1.isCryptoKey)(publicKee)) {
			(0, crypto_key_js_1.checkEncCryptoKey)(publicKee, "ECDH");
			publicKey = crypto_1__default["default"].KeyObject.from(publicKee);
		} else if ((0, is_key_object_js_1.default)(publicKee)) {
			publicKey = publicKee;
		} else {
			throw new TypeError((0, invalid_key_input_js_1.default)(publicKee, ...is_key_like_js_1.types));
		}
		let privateKey;
		if ((0, webcrypto_js_1.isCryptoKey)(privateKee)) {
			(0, crypto_key_js_1.checkEncCryptoKey)(privateKee, "ECDH", "deriveBits");
			privateKey = crypto_1__default["default"].KeyObject.from(privateKee);
		} else if ((0, is_key_object_js_1.default)(privateKee)) {
			privateKey = privateKee;
		} else {
			throw new TypeError((0, invalid_key_input_js_1.default)(privateKee, ...is_key_like_js_1.types));
		}
		const value = (0, buffer_utils_js_1.concat)((0, buffer_utils_js_1.lengthAndInput)(buffer_utils_js_1.encoder.encode(algorithm)), (0, buffer_utils_js_1.lengthAndInput)(apu), (0, buffer_utils_js_1.lengthAndInput)(apv), (0, buffer_utils_js_1.uint32be)(keyLength));
		const sharedSecret = (0, crypto_1__default["default"].diffieHellman)({ privateKey, publicKey });
		return (0, buffer_utils_js_1.concatKdf)(sharedSecret, keyLength, value);
	}
	exports.deriveKey = deriveKey;
	async function generateEpk(kee) {
		let key;
		if ((0, webcrypto_js_1.isCryptoKey)(kee)) {
			key = crypto_1__default["default"].KeyObject.from(kee);
		} else if ((0, is_key_object_js_1.default)(kee)) {
			key = kee;
		} else {
			throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));
		}
		switch (key.asymmetricKeyType) {
			case "x25519":
				return generateKeyPair("x25519");
			case "x448": {
				return generateKeyPair("x448");
			}
			case "ec": {
				const namedCurve = (0, get_named_curve_js_1.default)(key);
				return generateKeyPair("ec", { namedCurve });
			}
			default:
				throw new require$$0.JOSENotSupported("Invalid or unsupported EPK");
		}
	}
	exports.generateEpk = generateEpk;
	const ecdhAllowed = (key) => ["P-256", "P-384", "P-521", "X25519", "X448"].includes((0, get_named_curve_js_1.default)(key));
	exports.ecdhAllowed = ecdhAllowed;
});

function checkP2s(p2s) {
	if (!(p2s instanceof Uint8Array) || p2s.length < 8) {
		throw new require$$0.JWEInvalid("PBES2 Salt Input must be 8 or more octets");
	}
}
var _default$w = checkP2s;

var check_p2s = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$w,
	},
	"__esModule",
	{ value: true }
);

var base64url$1 = base64url$2;

var aeskw_js_1 = aeskw;

var check_p2s_js_1 = check_p2s;

var pbes2kw = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.encrypt = void 0;

	const pbkdf2 = (0, util_1__default["default"].promisify)(crypto_1__default["default"].pbkdf2);
	function getPassword(key, alg) {
		if ((0, is_key_object_js_1.default)(key)) {
			return key.export();
		}
		if (key instanceof Uint8Array) {
			return key;
		}
		if ((0, webcrypto_js_1.isCryptoKey)(key)) {
			(0, crypto_key_js_1.checkEncCryptoKey)(key, alg, "deriveBits", "deriveKey");
			return crypto_1__default["default"].KeyObject.from(key).export();
		}
		throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, "Uint8Array"));
	}
	const encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, random_js_1.default)(new Uint8Array(16))) => {
		(0, check_p2s_js_1.default)(p2s);
		const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);
		const keylen = parseInt(alg.slice(13, 16), 10) >> 3;
		const password = getPassword(key, alg);
		const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);
		const encryptedKey = await (0, aeskw_js_1.wrap)(alg.slice(-6), derivedKey, cek);
		return { encryptedKey, p2c, p2s: (0, base64url$1.encode)(p2s) };
	};
	exports.encrypt = encrypt;
	const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {
		(0, check_p2s_js_1.default)(p2s);
		const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);
		const keylen = parseInt(alg.slice(13, 16), 10) >> 3;
		const password = getPassword(key, alg);
		const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);
		return (0, aeskw_js_1.unwrap)(alg.slice(-6), derivedKey, encryptedKey);
	};
	exports.decrypt = decrypt;
});

var check_modulus_length = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setModulusLength = exports.weakMap = void 0;
	exports.weakMap = new WeakMap();
	const getLength = (buf, index) => {
		let len = buf.readUInt8(1);
		if ((len & 0x80) === 0) {
			if (index === 0) {
				return len;
			}
			return getLength(buf.subarray(2 + len), index - 1);
		}
		const num = len & 0x7f;
		len = 0;
		for (let i = 0; i < num; i++) {
			len <<= 8;
			const j = buf.readUInt8(2 + i);
			len |= j;
		}
		if (index === 0) {
			return len;
		}
		return getLength(buf.subarray(2 + len), index - 1);
	};
	const getLengthOfSeqIndex = (sequence, index) => {
		const len = sequence.readUInt8(1);
		if ((len & 0x80) === 0) {
			return getLength(sequence.subarray(2), index);
		}
		const num = len & 0x7f;
		return getLength(sequence.subarray(2 + num), index);
	};
	const getModulusLength = (key) => {
		var _a, _b;
		if (exports.weakMap.has(key)) {
			return exports.weakMap.get(key);
		}
		const modulusLength = (_b = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.modulusLength) !== null && _b !== void 0 ? _b : (getLengthOfSeqIndex(key.export({ format: "der", type: "pkcs1" }), key.type === "private" ? 1 : 0) - 1) << 3;
		exports.weakMap.set(key, modulusLength);
		return modulusLength;
	};
	const setModulusLength = (keyObject, modulusLength) => {
		exports.weakMap.set(keyObject, modulusLength);
	};
	exports.setModulusLength = setModulusLength;
	exports.default = (key, alg) => {
		if (getModulusLength(key) < 2048) {
			throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
		}
	};
});

var check_modulus_length_js_1 = check_modulus_length;

var rsaes = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.encrypt = void 0;

	const checkKey = (key, alg) => {
		if (key.asymmetricKeyType !== "rsa") {
			throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be rsa");
		}
		(0, check_modulus_length_js_1.default)(key, alg);
	};
	const resolvePadding = (alg) => {
		switch (alg) {
			case "RSA-OAEP":
			case "RSA-OAEP-256":
			case "RSA-OAEP-384":
			case "RSA-OAEP-512":
				return crypto_1__default["default"].constants.RSA_PKCS1_OAEP_PADDING;
			case "RSA1_5":
				return crypto_1__default["default"].constants.RSA_PKCS1_PADDING;
			default:
				return undefined;
		}
	};
	const resolveOaepHash = (alg) => {
		switch (alg) {
			case "RSA-OAEP":
				return "sha1";
			case "RSA-OAEP-256":
				return "sha256";
			case "RSA-OAEP-384":
				return "sha384";
			case "RSA-OAEP-512":
				return "sha512";
			default:
				return undefined;
		}
	};
	function ensureKeyObject(key, alg, ...usages) {
		if ((0, is_key_object_js_1.default)(key)) {
			return key;
		}
		if ((0, webcrypto_js_1.isCryptoKey)(key)) {
			(0, crypto_key_js_1.checkEncCryptoKey)(key, alg, ...usages);
			return crypto_1__default["default"].KeyObject.from(key);
		}
		throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));
	}
	const encrypt = (alg, key, cek) => {
		const padding = resolvePadding(alg);
		const oaepHash = resolveOaepHash(alg);
		const keyObject = ensureKeyObject(key, alg, "wrapKey", "encrypt");
		checkKey(keyObject, alg);
		return (0, crypto_1__default["default"].publicEncrypt)({ key: keyObject, oaepHash, padding }, cek);
	};
	exports.encrypt = encrypt;
	const decrypt = (alg, key, encryptedKey) => {
		const padding = resolvePadding(alg);
		const oaepHash = resolveOaepHash(alg);
		const keyObject = ensureKeyObject(key, alg, "unwrapKey", "decrypt");
		checkKey(keyObject, alg);
		return (0, crypto_1__default["default"].privateDecrypt)({ key: keyObject, oaepHash, padding }, encryptedKey);
	};
	exports.decrypt = decrypt;
});

var cek = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bitLength = void 0;

	function bitLength(alg) {
		switch (alg) {
			case "A128GCM":
				return 128;
			case "A192GCM":
				return 192;
			case "A256GCM":
			case "A128CBC-HS256":
				return 256;
			case "A192CBC-HS384":
				return 384;
			case "A256CBC-HS512":
				return 512;
			default:
				throw new require$$0.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
		}
	}
	exports.bitLength = bitLength;
	exports.default = (alg) => (0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));
});

var asn1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fromSPKI = exports.fromPKCS8 = exports.toPKCS8 = exports.toSPKI = void 0;

	const genericExport = (keyType, keyFormat, key) => {
		let keyObject;
		if ((0, webcrypto_js_1.isCryptoKey)(key)) {
			if (!key.extractable) {
				throw new TypeError("CryptoKey is not extractable");
			}
			keyObject = crypto_1__default["default"].KeyObject.from(key);
		} else if ((0, is_key_object_js_1.default)(key)) {
			keyObject = key;
		} else {
			throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));
		}
		if (keyObject.type !== keyType) {
			throw new TypeError(`key is not a ${keyType} key`);
		}
		return keyObject.export({ format: "pem", type: keyFormat });
	};
	const toSPKI = (key) => {
		return genericExport("public", "spki", key);
	};
	exports.toSPKI = toSPKI;
	const toPKCS8 = (key) => {
		return genericExport("private", "pkcs8", key);
	};
	exports.toPKCS8 = toPKCS8;
	const fromPKCS8 = (pem) =>
		(0, crypto_1__default["default"].createPrivateKey)({
			key: buffer_1__default["default"].Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, ""), "base64"),
			type: "pkcs8",
			format: "der",
		});
	exports.fromPKCS8 = fromPKCS8;
	const fromSPKI = (pem) =>
		(0, crypto_1__default["default"].createPublicKey)({
			key: buffer_1__default["default"].Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, ""), "base64"),
			type: "spki",
			format: "der",
		});
	exports.fromSPKI = fromSPKI;
});

const tagInteger$1 = 0x02;
const tagBitStr = 0x03;
const tagOctStr = 0x04;
const tagSequence$1 = 0x30;
const bZero = buffer_1__default["default"].Buffer.from([0x00]);
const bTagInteger = buffer_1__default["default"].Buffer.from([tagInteger$1]);
const bTagBitStr = buffer_1__default["default"].Buffer.from([tagBitStr]);
const bTagSequence = buffer_1__default["default"].Buffer.from([tagSequence$1]);
const bTagOctStr = buffer_1__default["default"].Buffer.from([tagOctStr]);
const encodeLength = (len) => {
	if (len < 128) return buffer_1__default["default"].Buffer.from([len]);
	const buffer = buffer_1__default["default"].Buffer.alloc(5);
	buffer.writeUInt32BE(len, 1);
	let offset = 1;
	while (buffer[offset] === 0) offset++;
	buffer[offset - 1] = 0x80 | (5 - offset);
	return buffer.slice(offset - 1);
};
const oids = new Map([
	["P-256", buffer_1__default["default"].Buffer.from("06 08 2A 86 48 CE 3D 03 01 07".replace(/ /g, ""), "hex")],
	["secp256k1", buffer_1__default["default"].Buffer.from("06 05 2B 81 04 00 0A".replace(/ /g, ""), "hex")],
	["P-384", buffer_1__default["default"].Buffer.from("06 05 2B 81 04 00 22".replace(/ /g, ""), "hex")],
	["P-521", buffer_1__default["default"].Buffer.from("06 05 2B 81 04 00 23".replace(/ /g, ""), "hex")],
	["ecPublicKey", buffer_1__default["default"].Buffer.from("06 07 2A 86 48 CE 3D 02 01".replace(/ /g, ""), "hex")],
	["X25519", buffer_1__default["default"].Buffer.from("06 03 2B 65 6E".replace(/ /g, ""), "hex")],
	["X448", buffer_1__default["default"].Buffer.from("06 03 2B 65 6F".replace(/ /g, ""), "hex")],
	["Ed25519", buffer_1__default["default"].Buffer.from("06 03 2B 65 70".replace(/ /g, ""), "hex")],
	["Ed448", buffer_1__default["default"].Buffer.from("06 03 2B 65 71".replace(/ /g, ""), "hex")],
]);
class DumbAsn1Encoder {
	constructor() {
		this.length = 0;
		this.elements = [];
	}
	oidFor(oid) {
		const bOid = oids.get(oid);
		if (!bOid) {
			throw new require$$0.JOSENotSupported("Invalid or unsupported OID");
		}
		this.elements.push(bOid);
		this.length += bOid.length;
	}
	zero() {
		this.elements.push(bTagInteger, buffer_1__default["default"].Buffer.from([0x01]), bZero);
		this.length += 3;
	}
	one() {
		this.elements.push(bTagInteger, buffer_1__default["default"].Buffer.from([0x01]), buffer_1__default["default"].Buffer.from([0x01]));
		this.length += 3;
	}
	unsignedInteger(integer) {
		if (integer[0] & 0x80) {
			const len = encodeLength(integer.length + 1);
			this.elements.push(bTagInteger, len, bZero, integer);
			this.length += 2 + len.length + integer.length;
		} else {
			let i = 0;
			while (integer[i] === 0 && (integer[i + 1] & 0x80) === 0) i++;
			const len = encodeLength(integer.length - i);
			this.elements.push(bTagInteger, encodeLength(integer.length - i), integer.slice(i));
			this.length += 1 + len.length + integer.length - i;
		}
	}
	octStr(octStr) {
		const len = encodeLength(octStr.length);
		this.elements.push(bTagOctStr, encodeLength(octStr.length), octStr);
		this.length += 1 + len.length + octStr.length;
	}
	bitStr(bitS) {
		const len = encodeLength(bitS.length + 1);
		this.elements.push(bTagBitStr, encodeLength(bitS.length + 1), bZero, bitS);
		this.length += 1 + len.length + bitS.length + 1;
	}
	add(seq) {
		this.elements.push(seq);
		this.length += seq.length;
	}
	end(tag = bTagSequence) {
		const len = encodeLength(this.length);
		return buffer_1__default["default"].Buffer.concat([tag, len, ...this.elements], 1 + len.length + this.length);
	}
}
var _default$v = DumbAsn1Encoder;

var asn1_sequence_encoder = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$v,
	},
	"__esModule",
	{ value: true }
);

var asn1_sequence_encoder_js_1 = asn1_sequence_encoder;

const [major$5, minor$5] = process.version
	.slice(1)
	.split(".")
	.map((str) => parseInt(str, 10));
const jwkImportSupported = major$5 >= 16 || (major$5 === 15 && minor$5 >= 12);
const parse$1 = (jwk) => {
	if (jwkImportSupported && jwk.kty !== "oct") {
		return jwk.d ? (0, crypto_1__default["default"].createPrivateKey)({ format: "jwk", key: jwk }) : (0, crypto_1__default["default"].createPublicKey)({ format: "jwk", key: jwk });
	}
	switch (jwk.kty) {
		case "oct": {
			return (0, crypto_1__default["default"].createSecretKey)((0, base64url$1.decode)(jwk.k));
		}
		case "RSA": {
			const enc = new asn1_sequence_encoder_js_1.default();
			const isPrivate = jwk.d !== undefined;
			const modulus = buffer_1__default["default"].Buffer.from(jwk.n, "base64");
			const exponent = buffer_1__default["default"].Buffer.from(jwk.e, "base64");
			if (isPrivate) {
				enc.zero();
				enc.unsignedInteger(modulus);
				enc.unsignedInteger(exponent);
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.d, "base64"));
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.p, "base64"));
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.q, "base64"));
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.dp, "base64"));
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.dq, "base64"));
				enc.unsignedInteger(buffer_1__default["default"].Buffer.from(jwk.qi, "base64"));
			} else {
				enc.unsignedInteger(modulus);
				enc.unsignedInteger(exponent);
			}
			const der = enc.end();
			const createInput = {
				key: der,
				format: "der",
				type: "pkcs1",
			};
			const keyObject = isPrivate ? (0, crypto_1__default["default"].createPrivateKey)(createInput) : (0, crypto_1__default["default"].createPublicKey)(createInput);
			(0, check_modulus_length_js_1.setModulusLength)(keyObject, modulus.length << 3);
			return keyObject;
		}
		case "EC": {
			const enc = new asn1_sequence_encoder_js_1.default();
			const isPrivate = jwk.d !== undefined;
			const pub = buffer_1__default["default"].Buffer.concat([buffer_1__default["default"].Buffer.alloc(1, 4), buffer_1__default["default"].Buffer.from(jwk.x, "base64"), buffer_1__default["default"].Buffer.from(jwk.y, "base64")]);
			if (isPrivate) {
				enc.zero();
				const enc$1 = new asn1_sequence_encoder_js_1.default();
				enc$1.oidFor("ecPublicKey");
				enc$1.oidFor(jwk.crv);
				enc.add(enc$1.end());
				const enc$2 = new asn1_sequence_encoder_js_1.default();
				enc$2.one();
				enc$2.octStr(buffer_1__default["default"].Buffer.from(jwk.d, "base64"));
				const enc$3 = new asn1_sequence_encoder_js_1.default();
				enc$3.bitStr(pub);
				const f2 = enc$3.end(buffer_1__default["default"].Buffer.from([0xa1]));
				enc$2.add(f2);
				const f = enc$2.end();
				const enc$4 = new asn1_sequence_encoder_js_1.default();
				enc$4.add(f);
				const f3 = enc$4.end(buffer_1__default["default"].Buffer.from([0x04]));
				enc.add(f3);
				const der = enc.end();
				const keyObject = (0, crypto_1__default["default"].createPrivateKey)({ key: der, format: "der", type: "pkcs8" });
				(0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);
				return keyObject;
			}
			const enc$1 = new asn1_sequence_encoder_js_1.default();
			enc$1.oidFor("ecPublicKey");
			enc$1.oidFor(jwk.crv);
			enc.add(enc$1.end());
			enc.bitStr(pub);
			const der = enc.end();
			const keyObject = (0, crypto_1__default["default"].createPublicKey)({ key: der, format: "der", type: "spki" });
			(0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);
			return keyObject;
		}
		case "OKP": {
			const enc = new asn1_sequence_encoder_js_1.default();
			const isPrivate = jwk.d !== undefined;
			if (isPrivate) {
				enc.zero();
				const enc$1 = new asn1_sequence_encoder_js_1.default();
				enc$1.oidFor(jwk.crv);
				enc.add(enc$1.end());
				const enc$2 = new asn1_sequence_encoder_js_1.default();
				enc$2.octStr(buffer_1__default["default"].Buffer.from(jwk.d, "base64"));
				const f = enc$2.end(buffer_1__default["default"].Buffer.from([0x04]));
				enc.add(f);
				const der = enc.end();
				return (0, crypto_1__default["default"].createPrivateKey)({ key: der, format: "der", type: "pkcs8" });
			}
			const enc$1 = new asn1_sequence_encoder_js_1.default();
			enc$1.oidFor(jwk.crv);
			enc.add(enc$1.end());
			enc.bitStr(buffer_1__default["default"].Buffer.from(jwk.x, "base64"));
			const der = enc.end();
			return (0, crypto_1__default["default"].createPublicKey)({ key: der, format: "der", type: "spki" });
		}
		default:
			throw new require$$0.JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
	}
};
var _default$u = parse$1;

var jwk_to_key = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$u,
	},
	"__esModule",
	{ value: true }
);

var _default$t = (b64, descriptor) => {
	const newlined = (b64.match(/.{1,64}/g) || []).join("\n");
	return `-----BEGIN ${descriptor}-----\n${newlined}\n-----END ${descriptor}-----`;
};

var format_pem = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$t,
	},
	"__esModule",
	{ value: true }
);

var asn1_js_1 = asn1;

var jwk_to_key_js_1 = jwk_to_key;

var format_pem_js_1 = format_pem;

var is_object_js_1 = is_object;

var _import = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.importJWK = exports.importPKCS8 = exports.importX509 = exports.importSPKI = void 0;

	const asn1_js_2 = asn1_js_1;

	function getElement(seq) {
		let result = [];
		let next = 0;
		while (next < seq.length) {
			let nextPart = parseElement(seq.subarray(next));
			result.push(nextPart);
			next += nextPart.byteLength;
		}
		return result;
	}
	function parseElement(bytes) {
		let position = 0;
		let tag = bytes[0] & 0x1f;
		position++;
		if (tag === 0x1f) {
			tag = 0;
			while (bytes[position] >= 0x80) {
				tag = tag * 128 + bytes[position] - 0x80;
				position++;
			}
			tag = tag * 128 + bytes[position] - 0x80;
			position++;
		}
		let length = 0;
		if (bytes[position] < 0x80) {
			length = bytes[position];
			position++;
		} else if (length === 0x80) {
			length = 0;
			while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {
				if (length > bytes.byteLength) {
					throw new TypeError("invalid indefinite form length");
				}
				length++;
			}
			const byteLength = position + length + 2;
			return {
				byteLength,
				contents: bytes.subarray(position, position + length),
				raw: bytes.subarray(0, byteLength),
			};
		} else {
			let numberOfDigits = bytes[position] & 0x7f;
			position++;
			length = 0;
			for (let i = 0; i < numberOfDigits; i++) {
				length = length * 256 + bytes[position];
				position++;
			}
		}
		const byteLength = position + length;
		return {
			byteLength,
			contents: bytes.subarray(position, byteLength),
			raw: bytes.subarray(0, byteLength),
		};
	}
	function spkiFromX509(buf) {
		const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
		return (0, base64url$1.encodeBase64)(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);
	}
	function getSPKI(x509) {
		const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, "");
		const raw = (0, base64url$1.decodeBase64)(pem);
		return (0, format_pem_js_1.default)(spkiFromX509(raw), "PUBLIC KEY");
	}
	async function importSPKI(spki, alg, options) {
		if (typeof spki !== "string" || spki.indexOf("-----BEGIN PUBLIC KEY-----") !== 0) {
			throw new TypeError('"spki" must be SPKI formatted string');
		}
		return (0, asn1_js_1.fromSPKI)(spki, alg, options);
	}
	exports.importSPKI = importSPKI;
	async function importX509(x509, alg, options) {
		if (typeof x509 !== "string" || x509.indexOf("-----BEGIN CERTIFICATE-----") !== 0) {
			throw new TypeError('"x509" must be X.509 formatted string');
		}
		let spki;
		try {
			spki = getSPKI(x509);
		} catch (cause) {
			throw new TypeError("failed to parse the X.509 certificate", { cause });
		}
		return (0, asn1_js_1.fromSPKI)(spki, alg, options);
	}
	exports.importX509 = importX509;
	async function importPKCS8(pkcs8, alg, options) {
		if (typeof pkcs8 !== "string" || pkcs8.indexOf("-----BEGIN PRIVATE KEY-----") !== 0) {
			throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
		}
		return (0, asn1_js_2.fromPKCS8)(pkcs8, alg, options);
	}
	exports.importPKCS8 = importPKCS8;
	async function importJWK(jwk, alg, octAsKeyObject) {
		var _a;
		if (!(0, is_object_js_1.default)(jwk)) {
			throw new TypeError("JWK must be an object");
		}
		alg || (alg = jwk.alg);
		if (typeof alg !== "string" || !alg) {
			throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
		}
		switch (jwk.kty) {
			case "oct":
				if (typeof jwk.k !== "string" || !jwk.k) {
					throw new TypeError('missing "k" (Key Value) Parameter value');
				}
				octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);
				if (octAsKeyObject) {
					return (0, jwk_to_key_js_1.default)({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false });
				}
				return (0, base64url$1.decode)(jwk.k);
			case "RSA":
				if (jwk.oth !== undefined) {
					throw new require$$0.JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
				}
			case "EC":
			case "OKP":
				return (0, jwk_to_key_js_1.default)({ ...jwk, alg });
			default:
				throw new require$$0.JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
		}
	}
	exports.importJWK = importJWK;
});

const symmetricTypeCheck = (alg, key) => {
	if (key instanceof Uint8Array) return;
	if (!(0, is_key_like_js_1.default)(key)) {
		throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types, "Uint8Array"));
	}
	if (key.type !== "secret") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for symmetric algorithms must be of type "secret"`);
	}
};
const asymmetricTypeCheck = (alg, key, usage) => {
	if (!(0, is_key_like_js_1.default)(key)) {
		throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types));
	}
	if (key.type === "secret") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);
	}
	if (usage === "sign" && key.type === "public") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);
	}
	if (usage === "decrypt" && key.type === "public") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);
	}
	if (key.algorithm && usage === "verify" && key.type === "private") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);
	}
	if (key.algorithm && usage === "encrypt" && key.type === "private") {
		throw new TypeError(`${is_key_like_js_1.types.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`);
	}
};
const checkKeyType = (alg, key, usage) => {
	const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
	if (symmetric) {
		symmetricTypeCheck(alg, key);
	} else {
		asymmetricTypeCheck(alg, key, usage);
	}
};
var _default$s = checkKeyType;

var check_key_type = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$s,
	},
	"__esModule",
	{ value: true }
);

function cbcEncrypt(enc, plaintext, cek, iv, aad) {
	const keySize = parseInt(enc.slice(1, 4), 10);
	if ((0, is_key_object_js_1.default)(cek)) {
		cek = cek.export();
	}
	const encKey = cek.subarray(keySize >> 3);
	const macKey = cek.subarray(0, keySize >> 3);
	const algorithm = `aes-${keySize}-cbc`;
	if (!(0, ciphers_js_1.default)(algorithm)) {
		throw new require$$0.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);
	}
	const cipher = (0, crypto_1__default["default"].createCipheriv)(algorithm, encKey, iv);
	const ciphertext = (0, buffer_utils_js_1.concat)(cipher.update(plaintext), cipher.final());
	const macSize = parseInt(enc.slice(-3), 10);
	const tag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);
	return { ciphertext, tag };
}
function gcmEncrypt(enc, plaintext, cek, iv, aad) {
	const keySize = parseInt(enc.slice(1, 4), 10);
	const algorithm = `aes-${keySize}-gcm`;
	if (!(0, ciphers_js_1.default)(algorithm)) {
		throw new require$$0.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);
	}
	const cipher = (0, crypto_1__default["default"].createCipheriv)(algorithm, cek, iv, { authTagLength: 16 });
	if (aad.byteLength) {
		cipher.setAAD(aad, { plaintextLength: plaintext.length });
	}
	const ciphertext = cipher.update(plaintext);
	cipher.final();
	const tag = cipher.getAuthTag();
	return { ciphertext, tag };
}
const encrypt$4 = (enc, plaintext, cek, iv, aad) => {
	let key;
	if ((0, webcrypto_js_1.isCryptoKey)(cek)) {
		(0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, "encrypt");
		key = crypto_1__default["default"].KeyObject.from(cek);
	} else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {
		key = cek;
	} else {
		throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, "Uint8Array"));
	}
	(0, check_cek_length_js_1.default)(enc, key);
	(0, check_iv_length_js_1.default)(enc, iv);
	switch (enc) {
		case "A128CBC-HS256":
		case "A192CBC-HS384":
		case "A256CBC-HS512":
			return cbcEncrypt(enc, plaintext, key, iv, aad);
		case "A128GCM":
		case "A192GCM":
		case "A256GCM":
			return gcmEncrypt(enc, plaintext, key, iv, aad);
		default:
			throw new require$$0.JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
	}
};
var _default$r = encrypt$4;

var encrypt_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$r,
	},
	"__esModule",
	{ value: true }
);

var encrypt_js_1$1 = encrypt_1;

var decrypt_js_1$1 = decrypt_1;

var aesgcmkw = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.unwrap = exports.wrap = void 0;

	async function wrap(alg, key, cek, iv) {
		const jweAlgorithm = alg.slice(0, 7);
		iv || (iv = (0, iv_js_1.default)(jweAlgorithm));
		const { ciphertext: encryptedKey, tag } = await (0, encrypt_js_1$1.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));
		return { encryptedKey, iv: (0, base64url$1.encode)(iv), tag: (0, base64url$1.encode)(tag) };
	}
	exports.wrap = wrap;
	async function unwrap(alg, key, encryptedKey, iv, tag) {
		const jweAlgorithm = alg.slice(0, 7);
		return (0, decrypt_js_1$1.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
	}
	exports.unwrap = unwrap;
});

var ECDH = ecdhes;

var pbes2kw_js_1 = pbes2kw;

var rsaes_js_1 = rsaes;

var cek_js_1 = cek;

var import_js_1 = _import;

var check_key_type_js_1 = check_key_type;

var aesgcmkw_js_1 = aesgcmkw;

async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
	(0, check_key_type_js_1.default)(alg, key, "decrypt");
	switch (alg) {
		case "dir": {
			if (encryptedKey !== undefined) throw new require$$0.JWEInvalid("Encountered unexpected JWE Encrypted Key");
			return key;
		}
		case "ECDH-ES":
			if (encryptedKey !== undefined) throw new require$$0.JWEInvalid("Encountered unexpected JWE Encrypted Key");
		case "ECDH-ES+A128KW":
		case "ECDH-ES+A192KW":
		case "ECDH-ES+A256KW": {
			if (!(0, is_object_js_1.default)(joseHeader.epk)) throw new require$$0.JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
			if (!ECDH.ecdhAllowed(key)) throw new require$$0.JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
			const epk = await (0, import_js_1.importJWK)(joseHeader.epk, alg);
			let partyUInfo;
			let partyVInfo;
			if (joseHeader.apu !== undefined) {
				if (typeof joseHeader.apu !== "string") throw new require$$0.JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
				partyUInfo = (0, base64url$1.decode)(joseHeader.apu);
			}
			if (joseHeader.apv !== undefined) {
				if (typeof joseHeader.apv !== "string") throw new require$$0.JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
				partyVInfo = (0, base64url$1.decode)(joseHeader.apv);
			}
			const sharedSecret = await ECDH.deriveKey(epk, key, alg === "ECDH-ES" ? joseHeader.enc : alg, alg === "ECDH-ES" ? (0, cek_js_1.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
			if (alg === "ECDH-ES") return sharedSecret;
			if (encryptedKey === undefined) throw new require$$0.JWEInvalid("JWE Encrypted Key missing");
			return (0, aeskw_js_1.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);
		}
		case "RSA1_5":
		case "RSA-OAEP":
		case "RSA-OAEP-256":
		case "RSA-OAEP-384":
		case "RSA-OAEP-512": {
			if (encryptedKey === undefined) throw new require$$0.JWEInvalid("JWE Encrypted Key missing");
			return (0, rsaes_js_1.decrypt)(alg, key, encryptedKey);
		}
		case "PBES2-HS256+A128KW":
		case "PBES2-HS384+A192KW":
		case "PBES2-HS512+A256KW": {
			if (encryptedKey === undefined) throw new require$$0.JWEInvalid("JWE Encrypted Key missing");
			if (typeof joseHeader.p2c !== "number") throw new require$$0.JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
			const p2cLimit = (options === null || options === void 0 ? void 0 : options.maxPBES2Count) || 10000;
			if (joseHeader.p2c > p2cLimit) throw new require$$0.JWEInvalid(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
			if (typeof joseHeader.p2s !== "string") throw new require$$0.JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
			return (0, pbes2kw_js_1.decrypt)(alg, key, encryptedKey, joseHeader.p2c, (0, base64url$1.decode)(joseHeader.p2s));
		}
		case "A128KW":
		case "A192KW":
		case "A256KW": {
			if (encryptedKey === undefined) throw new require$$0.JWEInvalid("JWE Encrypted Key missing");
			return (0, aeskw_js_1.unwrap)(alg, key, encryptedKey);
		}
		case "A128GCMKW":
		case "A192GCMKW":
		case "A256GCMKW": {
			if (encryptedKey === undefined) throw new require$$0.JWEInvalid("JWE Encrypted Key missing");
			if (typeof joseHeader.iv !== "string") throw new require$$0.JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
			if (typeof joseHeader.tag !== "string") throw new require$$0.JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
			const iv = (0, base64url$1.decode)(joseHeader.iv);
			const tag = (0, base64url$1.decode)(joseHeader.tag);
			return (0, aesgcmkw_js_1.unwrap)(alg, key, encryptedKey, iv, tag);
		}
		default: {
			throw new require$$0.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
		}
	}
}
var _default$q = decryptKeyManagement;

var decrypt_key_management = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$q,
	},
	"__esModule",
	{ value: true }
);

function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
	if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
		throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
	}
	if (!protectedHeader || protectedHeader.crit === undefined) {
		return new Set();
	}
	if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
		throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
	}
	let recognized;
	if (recognizedOption !== undefined) {
		recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
	} else {
		recognized = recognizedDefault;
	}
	for (const parameter of protectedHeader.crit) {
		if (!recognized.has(parameter)) {
			throw new require$$0.JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
		}
		if (joseHeader[parameter] === undefined) {
			throw new Err(`Extension Header Parameter "${parameter}" is missing`);
		} else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
			throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
		}
	}
	return new Set(protectedHeader.crit);
}
var _default$p = validateCrit;

var validate_crit = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$p,
	},
	"__esModule",
	{ value: true }
);

const validateAlgorithms = (option, algorithms) => {
	if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== "string"))) {
		throw new TypeError(`"${option}" option must be an array of strings`);
	}
	if (!algorithms) {
		return undefined;
	}
	return new Set(algorithms);
};
var _default$o = validateAlgorithms;

var validate_algorithms = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$o,
	},
	"__esModule",
	{ value: true }
);

var zlib_js_1 = zlib;

var is_disjoint_js_1 = is_disjoint;

var decrypt_key_management_js_1 = decrypt_key_management;

var validate_crit_js_1 = validate_crit;

var validate_algorithms_js_1 = validate_algorithms;

var decrypt$3 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.flattenedDecrypt = void 0;

	async function flattenedDecrypt(jwe, key, options) {
		var _a;
		if (!(0, is_object_js_1.default)(jwe)) {
			throw new require$$0.JWEInvalid("Flattened JWE must be an object");
		}
		if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {
			throw new require$$0.JWEInvalid("JOSE Header missing");
		}
		if (typeof jwe.iv !== "string") {
			throw new require$$0.JWEInvalid("JWE Initialization Vector missing or incorrect type");
		}
		if (typeof jwe.ciphertext !== "string") {
			throw new require$$0.JWEInvalid("JWE Ciphertext missing or incorrect type");
		}
		if (typeof jwe.tag !== "string") {
			throw new require$$0.JWEInvalid("JWE Authentication Tag missing or incorrect type");
		}
		if (jwe.protected !== undefined && typeof jwe.protected !== "string") {
			throw new require$$0.JWEInvalid("JWE Protected Header incorrect type");
		}
		if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== "string") {
			throw new require$$0.JWEInvalid("JWE Encrypted Key incorrect type");
		}
		if (jwe.aad !== undefined && typeof jwe.aad !== "string") {
			throw new require$$0.JWEInvalid("JWE AAD incorrect type");
		}
		if (jwe.header !== undefined && !(0, is_object_js_1.default)(jwe.header)) {
			throw new require$$0.JWEInvalid("JWE Shared Unprotected Header incorrect type");
		}
		if (jwe.unprotected !== undefined && !(0, is_object_js_1.default)(jwe.unprotected)) {
			throw new require$$0.JWEInvalid("JWE Per-Recipient Unprotected Header incorrect type");
		}
		let parsedProt;
		if (jwe.protected) {
			try {
				const protectedHeader = (0, base64url$1.decode)(jwe.protected);
				parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));
			} catch {
				throw new require$$0.JWEInvalid("JWE Protected Header is invalid");
			}
		}
		if (!(0, is_disjoint_js_1.default)(parsedProt, jwe.header, jwe.unprotected)) {
			throw new require$$0.JWEInvalid("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
		}
		const joseHeader = {
			...parsedProt,
			...jwe.header,
			...jwe.unprotected,
		};
		(0, validate_crit_js_1.default)(require$$0.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
		if (joseHeader.zip !== undefined) {
			if (!parsedProt || !parsedProt.zip) {
				throw new require$$0.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
			}
			if (joseHeader.zip !== "DEF") {
				throw new require$$0.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
			}
		}
		const { alg, enc } = joseHeader;
		if (typeof alg !== "string" || !alg) {
			throw new require$$0.JWEInvalid("missing JWE Algorithm (alg) in JWE Header");
		}
		if (typeof enc !== "string" || !enc) {
			throw new require$$0.JWEInvalid("missing JWE Encryption Algorithm (enc) in JWE Header");
		}
		const keyManagementAlgorithms = options && (0, validate_algorithms_js_1.default)("keyManagementAlgorithms", options.keyManagementAlgorithms);
		const contentEncryptionAlgorithms = options && (0, validate_algorithms_js_1.default)("contentEncryptionAlgorithms", options.contentEncryptionAlgorithms);
		if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {
			throw new require$$0.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
		}
		if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
			throw new require$$0.JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter not allowed');
		}
		let encryptedKey;
		if (jwe.encrypted_key !== undefined) {
			encryptedKey = (0, base64url$1.decode)(jwe.encrypted_key);
		}
		let resolvedKey = false;
		if (typeof key === "function") {
			key = await key(parsedProt, jwe);
			resolvedKey = true;
		}
		let cek;
		try {
			cek = await (0, decrypt_key_management_js_1.default)(alg, key, encryptedKey, joseHeader, options);
		} catch (err) {
			if (err instanceof TypeError || err instanceof require$$0.JWEInvalid || err instanceof require$$0.JOSENotSupported) {
				throw err;
			}
			cek = (0, cek_js_1.default)(enc);
		}
		const iv = (0, base64url$1.decode)(jwe.iv);
		const tag = (0, base64url$1.decode)(jwe.tag);
		const protectedHeader = buffer_utils_js_1.encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : "");
		let additionalData;
		if (jwe.aad !== undefined) {
			additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode("."), buffer_utils_js_1.encoder.encode(jwe.aad));
		} else {
			additionalData = protectedHeader;
		}
		let plaintext = await (0, decrypt_js_1$1.default)(enc, cek, (0, base64url$1.decode)(jwe.ciphertext), iv, tag, additionalData);
		if (joseHeader.zip === "DEF") {
			plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || zlib_js_1.inflate)(plaintext);
		}
		const result = { plaintext };
		if (jwe.protected !== undefined) {
			result.protectedHeader = parsedProt;
		}
		if (jwe.aad !== undefined) {
			result.additionalAuthenticatedData = (0, base64url$1.decode)(jwe.aad);
		}
		if (jwe.unprotected !== undefined) {
			result.sharedUnprotectedHeader = jwe.unprotected;
		}
		if (jwe.header !== undefined) {
			result.unprotectedHeader = jwe.header;
		}
		if (resolvedKey) {
			return { ...result, key };
		}
		return result;
	}
	exports.flattenedDecrypt = flattenedDecrypt;
});

var decrypt_js_2 = decrypt$3;

var decrypt$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.compactDecrypt = void 0;

	async function compactDecrypt(jwe, key, options) {
		if (jwe instanceof Uint8Array) {
			jwe = buffer_utils_js_1.decoder.decode(jwe);
		}
		if (typeof jwe !== "string") {
			throw new require$$0.JWEInvalid("Compact JWE must be a string or Uint8Array");
		}
		const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length } = jwe.split(".");
		if (length !== 5) {
			throw new require$$0.JWEInvalid("Invalid Compact JWE");
		}
		const decrypted = await (0, decrypt_js_2.flattenedDecrypt)(
			{
				ciphertext,
				iv: iv || undefined,
				protected: protectedHeader || undefined,
				tag: tag || undefined,
				encrypted_key: encryptedKey || undefined,
			},
			key,
			options
		);
		const result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
		if (typeof key === "function") {
			return { ...result, key: decrypted.key };
		}
		return result;
	}
	exports.compactDecrypt = compactDecrypt;
});

var decrypt$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generalDecrypt = void 0;

	async function generalDecrypt(jwe, key, options) {
		if (!(0, is_object_js_1.default)(jwe)) {
			throw new require$$0.JWEInvalid("General JWE must be an object");
		}
		if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(is_object_js_1.default)) {
			throw new require$$0.JWEInvalid("JWE Recipients missing or incorrect type");
		}
		if (!jwe.recipients.length) {
			throw new require$$0.JWEInvalid("JWE Recipients has no members");
		}
		for (const recipient of jwe.recipients) {
			try {
				return await (0, decrypt_js_2.flattenedDecrypt)(
					{
						aad: jwe.aad,
						ciphertext: jwe.ciphertext,
						encrypted_key: recipient.encrypted_key,
						header: recipient.header,
						iv: jwe.iv,
						protected: jwe.protected,
						tag: jwe.tag,
						unprotected: jwe.unprotected,
					},
					key,
					options
				);
			} catch {}
		}
		throw new require$$0.JWEDecryptionFailed();
	}
	exports.generalDecrypt = generalDecrypt;
});

const tagInteger = 0x02;
const tagSequence = 0x30;
class Asn1SequenceDecoder {
	constructor(buffer) {
		if (buffer[0] !== tagSequence) {
			throw new TypeError();
		}
		this.buffer = buffer;
		this.offset = 1;
		const len = this.decodeLength();
		if (len !== buffer.length - this.offset) {
			throw new TypeError();
		}
	}
	decodeLength() {
		let length = this.buffer[this.offset++];
		if (length & 0x80) {
			const nBytes = length & ~0x80;
			length = 0;
			for (let i = 0; i < nBytes; i++) length = (length << 8) | this.buffer[this.offset + i];
			this.offset += nBytes;
		}
		return length;
	}
	unsignedInteger() {
		if (this.buffer[this.offset++] !== tagInteger) {
			throw new TypeError();
		}
		let length = this.decodeLength();
		if (this.buffer[this.offset] === 0) {
			this.offset++;
			length--;
		}
		const result = this.buffer.slice(this.offset, this.offset + length);
		this.offset += length;
		return result;
	}
	end() {
		if (this.offset !== this.buffer.length) {
			throw new TypeError();
		}
	}
}
var _default$n = Asn1SequenceDecoder;

var asn1_sequence_decoder = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$n,
	},
	"__esModule",
	{ value: true }
);

var asn1_sequence_decoder_js_1 = asn1_sequence_decoder;

const [major$4, minor$4] = process.version
	.slice(1)
	.split(".")
	.map((str) => parseInt(str, 10));
const jwkExportSupported = major$4 >= 16 || (major$4 === 15 && minor$4 >= 9);
const keyToJWK = (key) => {
	let keyObject;
	if ((0, webcrypto_js_1.isCryptoKey)(key)) {
		if (!key.extractable) {
			throw new TypeError("CryptoKey is not extractable");
		}
		keyObject = crypto_1__default["default"].KeyObject.from(key);
	} else if ((0, is_key_object_js_1.default)(key)) {
		keyObject = key;
	} else if (key instanceof Uint8Array) {
		return {
			kty: "oct",
			k: (0, base64url$1.encode)(key),
		};
	} else {
		throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, "Uint8Array"));
	}
	if (jwkExportSupported) {
		if (keyObject.type !== "secret" && !["rsa", "ec", "ed25519", "x25519", "ed448", "x448"].includes(keyObject.asymmetricKeyType)) {
			throw new require$$0.JOSENotSupported("Unsupported key asymmetricKeyType");
		}
		return keyObject.export({ format: "jwk" });
	}
	switch (keyObject.type) {
		case "secret":
			return {
				kty: "oct",
				k: (0, base64url$1.encode)(keyObject.export()),
			};
		case "private":
		case "public": {
			switch (keyObject.asymmetricKeyType) {
				case "rsa": {
					const der = keyObject.export({ format: "der", type: "pkcs1" });
					const dec = new asn1_sequence_decoder_js_1.default(der);
					if (keyObject.type === "private") {
						dec.unsignedInteger();
					}
					const n = (0, base64url$1.encode)(dec.unsignedInteger());
					const e = (0, base64url$1.encode)(dec.unsignedInteger());
					let jwk;
					if (keyObject.type === "private") {
						jwk = {
							d: (0, base64url$1.encode)(dec.unsignedInteger()),
							p: (0, base64url$1.encode)(dec.unsignedInteger()),
							q: (0, base64url$1.encode)(dec.unsignedInteger()),
							dp: (0, base64url$1.encode)(dec.unsignedInteger()),
							dq: (0, base64url$1.encode)(dec.unsignedInteger()),
							qi: (0, base64url$1.encode)(dec.unsignedInteger()),
						};
					}
					dec.end();
					return { kty: "RSA", n, e, ...jwk };
				}
				case "ec": {
					const crv = (0, get_named_curve_js_1.default)(keyObject);
					let len;
					let offset;
					let correction;
					switch (crv) {
						case "secp256k1":
							len = 64;
							offset = 31 + 2;
							correction = -1;
							break;
						case "P-256":
							len = 64;
							offset = 34 + 2;
							correction = -1;
							break;
						case "P-384":
							len = 96;
							offset = 33 + 2;
							correction = -3;
							break;
						case "P-521":
							len = 132;
							offset = 33 + 2;
							correction = -3;
							break;
						default:
							throw new require$$0.JOSENotSupported("Unsupported curve");
					}
					if (keyObject.type === "public") {
						const der = keyObject.export({ type: "spki", format: "der" });
						return {
							kty: "EC",
							crv,
							x: (0, base64url$1.encode)(der.subarray(-len, -len / 2)),
							y: (0, base64url$1.encode)(der.subarray(-len / 2)),
						};
					}
					const der = keyObject.export({ type: "pkcs8", format: "der" });
					if (der.length < 100) {
						offset += correction;
					}
					return {
						...keyToJWK((0, crypto_1__default["default"].createPublicKey)(keyObject)),
						d: (0, base64url$1.encode)(der.subarray(offset, offset + len / 2)),
					};
				}
				case "ed25519":
				case "x25519": {
					const crv = (0, get_named_curve_js_1.default)(keyObject);
					if (keyObject.type === "public") {
						const der = keyObject.export({ type: "spki", format: "der" });
						return {
							kty: "OKP",
							crv,
							x: (0, base64url$1.encode)(der.subarray(-32)),
						};
					}
					const der = keyObject.export({ type: "pkcs8", format: "der" });
					return {
						...keyToJWK((0, crypto_1__default["default"].createPublicKey)(keyObject)),
						d: (0, base64url$1.encode)(der.subarray(-32)),
					};
				}
				case "ed448":
				case "x448": {
					const crv = (0, get_named_curve_js_1.default)(keyObject);
					if (keyObject.type === "public") {
						const der = keyObject.export({ type: "spki", format: "der" });
						return {
							kty: "OKP",
							crv,
							x: (0, base64url$1.encode)(der.subarray(crv === "Ed448" ? -57 : -56)),
						};
					}
					const der = keyObject.export({ type: "pkcs8", format: "der" });
					return {
						...keyToJWK((0, crypto_1__default["default"].createPublicKey)(keyObject)),
						d: (0, base64url$1.encode)(der.subarray(crv === "Ed448" ? -57 : -56)),
					};
				}
				default:
					throw new require$$0.JOSENotSupported("Unsupported key asymmetricKeyType");
			}
		}
		default:
			throw new require$$0.JOSENotSupported("Unsupported key type");
	}
};
var _default$m = keyToJWK;

var key_to_jwk = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$m,
	},
	"__esModule",
	{ value: true }
);

var key_to_jwk_js_1 = key_to_jwk;

var _export = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exportJWK = exports.exportPKCS8 = exports.exportSPKI = void 0;

	const asn1_js_2 = asn1_js_1;

	async function exportSPKI(key) {
		return (0, asn1_js_1.toSPKI)(key);
	}
	exports.exportSPKI = exportSPKI;
	async function exportPKCS8(key) {
		return (0, asn1_js_2.toPKCS8)(key);
	}
	exports.exportPKCS8 = exportPKCS8;
	async function exportJWK(key) {
		return (0, key_to_jwk_js_1.default)(key);
	}
	exports.exportJWK = exportJWK;
});

var export_js_1 = _export;

async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
	let encryptedKey;
	let parameters;
	let cek;
	(0, check_key_type_js_1.default)(alg, key, "encrypt");
	switch (alg) {
		case "dir": {
			cek = key;
			break;
		}
		case "ECDH-ES":
		case "ECDH-ES+A128KW":
		case "ECDH-ES+A192KW":
		case "ECDH-ES+A256KW": {
			if (!ECDH.ecdhAllowed(key)) {
				throw new require$$0.JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
			}
			const { apu, apv } = providedParameters;
			let { epk: ephemeralKey } = providedParameters;
			ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);
			const { x, y, crv, kty } = await (0, export_js_1.exportJWK)(ephemeralKey);
			const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === "ECDH-ES" ? enc : alg, alg === "ECDH-ES" ? (0, cek_js_1.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
			parameters = { epk: { x, crv, kty } };
			if (kty === "EC") parameters.epk.y = y;
			if (apu) parameters.apu = (0, base64url$1.encode)(apu);
			if (apv) parameters.apv = (0, base64url$1.encode)(apv);
			if (alg === "ECDH-ES") {
				cek = sharedSecret;
				break;
			}
			cek = providedCek || (0, cek_js_1.default)(enc);
			const kwAlg = alg.slice(-6);
			encryptedKey = await (0, aeskw_js_1.wrap)(kwAlg, sharedSecret, cek);
			break;
		}
		case "RSA1_5":
		case "RSA-OAEP":
		case "RSA-OAEP-256":
		case "RSA-OAEP-384":
		case "RSA-OAEP-512": {
			cek = providedCek || (0, cek_js_1.default)(enc);
			encryptedKey = await (0, rsaes_js_1.encrypt)(alg, key, cek);
			break;
		}
		case "PBES2-HS256+A128KW":
		case "PBES2-HS384+A192KW":
		case "PBES2-HS512+A256KW": {
			cek = providedCek || (0, cek_js_1.default)(enc);
			const { p2c, p2s } = providedParameters;
			({ encryptedKey, ...parameters } = await (0, pbes2kw_js_1.encrypt)(alg, key, cek, p2c, p2s));
			break;
		}
		case "A128KW":
		case "A192KW":
		case "A256KW": {
			cek = providedCek || (0, cek_js_1.default)(enc);
			encryptedKey = await (0, aeskw_js_1.wrap)(alg, key, cek);
			break;
		}
		case "A128GCMKW":
		case "A192GCMKW":
		case "A256GCMKW": {
			cek = providedCek || (0, cek_js_1.default)(enc);
			const { iv } = providedParameters;
			({ encryptedKey, ...parameters } = await (0, aesgcmkw_js_1.wrap)(alg, key, cek, iv));
			break;
		}
		default: {
			throw new require$$0.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
		}
	}
	return { cek, encryptedKey, parameters };
}
var _default$l = encryptKeyManagement;

var encrypt_key_management = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$l,
	},
	"__esModule",
	{ value: true }
);

var encrypt_key_management_js_1 = encrypt_key_management;

var encrypt$3 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FlattenedEncrypt = exports.unprotected = void 0;

	exports.unprotected = Symbol();
	class FlattenedEncrypt {
		constructor(plaintext) {
			if (!(plaintext instanceof Uint8Array)) {
				throw new TypeError("plaintext must be an instance of Uint8Array");
			}
			this._plaintext = plaintext;
		}
		setKeyManagementParameters(parameters) {
			if (this._keyManagementParameters) {
				throw new TypeError("setKeyManagementParameters can only be called once");
			}
			this._keyManagementParameters = parameters;
			return this;
		}
		setProtectedHeader(protectedHeader) {
			if (this._protectedHeader) {
				throw new TypeError("setProtectedHeader can only be called once");
			}
			this._protectedHeader = protectedHeader;
			return this;
		}
		setSharedUnprotectedHeader(sharedUnprotectedHeader) {
			if (this._sharedUnprotectedHeader) {
				throw new TypeError("setSharedUnprotectedHeader can only be called once");
			}
			this._sharedUnprotectedHeader = sharedUnprotectedHeader;
			return this;
		}
		setUnprotectedHeader(unprotectedHeader) {
			if (this._unprotectedHeader) {
				throw new TypeError("setUnprotectedHeader can only be called once");
			}
			this._unprotectedHeader = unprotectedHeader;
			return this;
		}
		setAdditionalAuthenticatedData(aad) {
			this._aad = aad;
			return this;
		}
		setContentEncryptionKey(cek) {
			if (this._cek) {
				throw new TypeError("setContentEncryptionKey can only be called once");
			}
			this._cek = cek;
			return this;
		}
		setInitializationVector(iv) {
			if (this._iv) {
				throw new TypeError("setInitializationVector can only be called once");
			}
			this._iv = iv;
			return this;
		}
		async encrypt(key, options) {
			if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
				throw new require$$0.JWEInvalid("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
			}
			if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
				throw new require$$0.JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
			}
			const joseHeader = {
				...this._protectedHeader,
				...this._unprotectedHeader,
				...this._sharedUnprotectedHeader,
			};
			(0, validate_crit_js_1.default)(require$$0.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
			if (joseHeader.zip !== undefined) {
				if (!this._protectedHeader || !this._protectedHeader.zip) {
					throw new require$$0.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
				}
				if (joseHeader.zip !== "DEF") {
					throw new require$$0.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
				}
			}
			const { alg, enc } = joseHeader;
			if (typeof alg !== "string" || !alg) {
				throw new require$$0.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
			}
			if (typeof enc !== "string" || !enc) {
				throw new require$$0.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
			}
			let encryptedKey;
			if (alg === "dir") {
				if (this._cek) {
					throw new TypeError("setContentEncryptionKey cannot be called when using Direct Encryption");
				}
			} else if (alg === "ECDH-ES") {
				if (this._cek) {
					throw new TypeError("setContentEncryptionKey cannot be called when using Direct Key Agreement");
				}
			}
			let cek;
			{
				let parameters;
				({ cek, encryptedKey, parameters } = await (0, encrypt_key_management_js_1.default)(alg, enc, key, this._cek, this._keyManagementParameters));
				if (parameters) {
					if (options && exports.unprotected in options) {
						if (!this._unprotectedHeader) {
							this.setUnprotectedHeader(parameters);
						} else {
							this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };
						}
					} else {
						if (!this._protectedHeader) {
							this.setProtectedHeader(parameters);
						} else {
							this._protectedHeader = { ...this._protectedHeader, ...parameters };
						}
					}
				}
			}
			this._iv || (this._iv = (0, iv_js_1.default)(enc));
			let additionalData;
			let protectedHeader;
			let aadMember;
			if (this._protectedHeader) {
				protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url$1.encode)(JSON.stringify(this._protectedHeader)));
			} else {
				protectedHeader = buffer_utils_js_1.encoder.encode("");
			}
			if (this._aad) {
				aadMember = (0, base64url$1.encode)(this._aad);
				additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode("."), buffer_utils_js_1.encoder.encode(aadMember));
			} else {
				additionalData = protectedHeader;
			}
			let ciphertext;
			let tag;
			if (joseHeader.zip === "DEF") {
				const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || zlib_js_1.deflate)(this._plaintext);
				({ ciphertext, tag } = await (0, encrypt_js_1$1.default)(enc, deflated, cek, this._iv, additionalData));
			} else {
				({ ciphertext, tag } = await (0, encrypt_js_1$1.default)(enc, this._plaintext, cek, this._iv, additionalData));
			}
			const jwe = {
				ciphertext: (0, base64url$1.encode)(ciphertext),
				iv: (0, base64url$1.encode)(this._iv),
				tag: (0, base64url$1.encode)(tag),
			};
			if (encryptedKey) {
				jwe.encrypted_key = (0, base64url$1.encode)(encryptedKey);
			}
			if (aadMember) {
				jwe.aad = aadMember;
			}
			if (this._protectedHeader) {
				jwe.protected = buffer_utils_js_1.decoder.decode(protectedHeader);
			}
			if (this._sharedUnprotectedHeader) {
				jwe.unprotected = this._sharedUnprotectedHeader;
			}
			if (this._unprotectedHeader) {
				jwe.header = this._unprotectedHeader;
			}
			return jwe;
		}
	}
	exports.FlattenedEncrypt = FlattenedEncrypt;
});

var encrypt_js_3 = encrypt$3;

var encrypt$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.GeneralEncrypt = void 0;

	class IndividualRecipient {
		constructor(enc, key, options) {
			this.parent = enc;
			this.key = key;
			this.options = options;
		}
		setUnprotectedHeader(unprotectedHeader) {
			if (this.unprotectedHeader) {
				throw new TypeError("setUnprotectedHeader can only be called once");
			}
			this.unprotectedHeader = unprotectedHeader;
			return this;
		}
		addRecipient(...args) {
			return this.parent.addRecipient(...args);
		}
		encrypt(...args) {
			return this.parent.encrypt(...args);
		}
		done() {
			return this.parent;
		}
	}
	class GeneralEncrypt {
		constructor(plaintext) {
			this._recipients = [];
			this._plaintext = plaintext;
		}
		addRecipient(key, options) {
			const recipient = new IndividualRecipient(this, key, { crit: options === null || options === void 0 ? void 0 : options.crit });
			this._recipients.push(recipient);
			return recipient;
		}
		setProtectedHeader(protectedHeader) {
			if (this._protectedHeader) {
				throw new TypeError("setProtectedHeader can only be called once");
			}
			this._protectedHeader = protectedHeader;
			return this;
		}
		setSharedUnprotectedHeader(sharedUnprotectedHeader) {
			if (this._unprotectedHeader) {
				throw new TypeError("setSharedUnprotectedHeader can only be called once");
			}
			this._unprotectedHeader = sharedUnprotectedHeader;
			return this;
		}
		setAdditionalAuthenticatedData(aad) {
			this._aad = aad;
			return this;
		}
		async encrypt(options) {
			var _a, _b, _c;
			if (!this._recipients.length) {
				throw new require$$0.JWEInvalid("at least one recipient must be added");
			}
			options = { deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw };
			if (this._recipients.length === 1) {
				const [recipient] = this._recipients;
				const flattened = await new encrypt_js_3.FlattenedEncrypt(this._plaintext)
					.setAdditionalAuthenticatedData(this._aad)
					.setProtectedHeader(this._protectedHeader)
					.setSharedUnprotectedHeader(this._unprotectedHeader)
					.setUnprotectedHeader(recipient.unprotectedHeader)
					.encrypt(recipient.key, { ...recipient.options, ...options });
				let jwe = {
					ciphertext: flattened.ciphertext,
					iv: flattened.iv,
					recipients: [{}],
					tag: flattened.tag,
				};
				if (flattened.aad) jwe.aad = flattened.aad;
				if (flattened.protected) jwe.protected = flattened.protected;
				if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
				if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;
				if (flattened.header) jwe.recipients[0].header = flattened.header;
				return jwe;
			}
			let enc;
			for (let i = 0; i < this._recipients.length; i++) {
				const recipient = this._recipients[i];
				if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
					throw new require$$0.JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
				}
				const joseHeader = {
					...this._protectedHeader,
					...this._unprotectedHeader,
					...recipient.unprotectedHeader,
				};
				const { alg } = joseHeader;
				if (typeof alg !== "string" || !alg) {
					throw new require$$0.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
				}
				if (alg === "dir" || alg === "ECDH-ES") {
					throw new require$$0.JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
				}
				if (typeof joseHeader.enc !== "string" || !joseHeader.enc) {
					throw new require$$0.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
				}
				if (!enc) {
					enc = joseHeader.enc;
				} else if (enc !== joseHeader.enc) {
					throw new require$$0.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
				}
				(0, validate_crit_js_1.default)(require$$0.JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
				if (joseHeader.zip !== undefined) {
					if (!this._protectedHeader || !this._protectedHeader.zip) {
						throw new require$$0.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
					}
				}
			}
			const cek = (0, cek_js_1.default)(enc);
			let jwe = {
				ciphertext: "",
				iv: "",
				recipients: [],
				tag: "",
			};
			for (let i = 0; i < this._recipients.length; i++) {
				const recipient = this._recipients[i];
				const target = {};
				jwe.recipients.push(target);
				const joseHeader = {
					...this._protectedHeader,
					...this._unprotectedHeader,
					...recipient.unprotectedHeader,
				};
				const p2c = joseHeader.alg.startsWith("PBES2") ? 2048 + i : undefined;
				if (i === 0) {
					const flattened = await new encrypt_js_3.FlattenedEncrypt(this._plaintext)
						.setAdditionalAuthenticatedData(this._aad)
						.setContentEncryptionKey(cek)
						.setProtectedHeader(this._protectedHeader)
						.setSharedUnprotectedHeader(this._unprotectedHeader)
						.setUnprotectedHeader(recipient.unprotectedHeader)
						.setKeyManagementParameters({ p2c })
						.encrypt(recipient.key, {
							...recipient.options,
							...options,
							[encrypt_js_3.unprotected]: true,
						});
					jwe.ciphertext = flattened.ciphertext;
					jwe.iv = flattened.iv;
					jwe.tag = flattened.tag;
					if (flattened.aad) jwe.aad = flattened.aad;
					if (flattened.protected) jwe.protected = flattened.protected;
					if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
					target.encrypted_key = flattened.encrypted_key;
					if (flattened.header) target.header = flattened.header;
					continue;
				}
				const { encryptedKey, parameters } = await (0, encrypt_key_management_js_1.default)(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, { p2c });
				target.encrypted_key = (0, base64url$1.encode)(encryptedKey);
				if (recipient.unprotectedHeader || parameters) target.header = { ...recipient.unprotectedHeader, ...parameters };
			}
			return jwe;
		}
	}
	exports.GeneralEncrypt = GeneralEncrypt;
});

function dsaDigest(alg) {
	switch (alg) {
		case "PS256":
		case "RS256":
		case "ES256":
		case "ES256K":
			return "sha256";
		case "PS384":
		case "RS384":
		case "ES384":
			return "sha384";
		case "PS512":
		case "RS512":
		case "ES512":
			return "sha512";
		case "EdDSA":
			return undefined;
		default:
			throw new require$$0.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
	}
}
var _default$k = dsaDigest;

var dsa_digest = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$k,
	},
	"__esModule",
	{ value: true }
);

const [major$3, minor$3] = process.version
	.slice(1)
	.split(".")
	.map((str) => parseInt(str, 10));
const electron = "electron" in process.versions;
const rsaPssParams$1 = !electron && (major$3 >= 17 || (major$3 === 16 && minor$3 >= 9));
const PSS = {
	padding: crypto_1__default["default"].constants.RSA_PKCS1_PSS_PADDING,
	saltLength: crypto_1__default["default"].constants.RSA_PSS_SALTLEN_DIGEST,
};
const ecCurveAlgMap = new Map([
	["ES256", "P-256"],
	["ES256K", "secp256k1"],
	["ES384", "P-384"],
	["ES512", "P-521"],
]);
function keyForCrypto(alg, key) {
	switch (alg) {
		case "EdDSA":
			if (!["ed25519", "ed448"].includes(key.asymmetricKeyType)) {
				throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be ed25519 or ed448");
			}
			return key;
		case "RS256":
		case "RS384":
		case "RS512":
			if (key.asymmetricKeyType !== "rsa") {
				throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be rsa");
			}
			(0, check_modulus_length_js_1.default)(key, alg);
			return key;
		case rsaPssParams$1 && "PS256":
		case rsaPssParams$1 && "PS384":
		case rsaPssParams$1 && "PS512":
			if (key.asymmetricKeyType === "rsa-pss") {
				const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;
				const length = parseInt(alg.slice(-3), 10);
				if (hashAlgorithm !== undefined && (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm)) {
					throw new TypeError(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${alg}`);
				}
				if (saltLength !== undefined && saltLength > length >> 3) {
					throw new TypeError(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${alg}`);
				}
			} else if (key.asymmetricKeyType !== "rsa") {
				throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be rsa or rsa-pss");
			}
			(0, check_modulus_length_js_1.default)(key, alg);
			return { key, ...PSS };
		case !rsaPssParams$1 && "PS256":
		case !rsaPssParams$1 && "PS384":
		case !rsaPssParams$1 && "PS512":
			if (key.asymmetricKeyType !== "rsa") {
				throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be rsa");
			}
			(0, check_modulus_length_js_1.default)(key, alg);
			return { key, ...PSS };
		case "ES256":
		case "ES256K":
		case "ES384":
		case "ES512": {
			if (key.asymmetricKeyType !== "ec") {
				throw new TypeError("Invalid key for this operation, its asymmetricKeyType must be ec");
			}
			const actual = (0, get_named_curve_js_1.default)(key);
			const expected = ecCurveAlgMap.get(alg);
			if (actual !== expected) {
				throw new TypeError(`Invalid key curve for the algorithm, its curve must be ${expected}, got ${actual}`);
			}
			return { dsaEncoding: "ieee-p1363", key };
		}
		default:
			throw new require$$0.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
	}
}
var _default$j = keyForCrypto;

var node_key = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$j,
	},
	"__esModule",
	{ value: true }
);

function hmacDigest(alg) {
	switch (alg) {
		case "HS256":
			return "sha256";
		case "HS384":
			return "sha384";
		case "HS512":
			return "sha512";
		default:
			throw new require$$0.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
	}
}
var _default$i = hmacDigest;

var hmac_digest = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$i,
	},
	"__esModule",
	{ value: true }
);

function getSignVerifyKey(alg, key, usage) {
	if (key instanceof Uint8Array) {
		if (!alg.startsWith("HS")) {
			throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));
		}
		return (0, crypto_1__default["default"].createSecretKey)(key);
	}
	if (key instanceof crypto_1__default["default"].KeyObject) {
		return key;
	}
	if ((0, webcrypto_js_1.isCryptoKey)(key)) {
		(0, crypto_key_js_1.checkSigCryptoKey)(key, alg, usage);
		return crypto_1__default["default"].KeyObject.from(key);
	}
	throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, "Uint8Array"));
}
var _default$h = getSignVerifyKey;

var get_sign_verify_key = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$h,
	},
	"__esModule",
	{ value: true }
);

var dsa_digest_js_1 = dsa_digest;

var hmac_digest_js_1 = hmac_digest;

var node_key_js_1 = node_key;

var get_sign_verify_key_js_1 = get_sign_verify_key;

let oneShotSign;
if (crypto_1__default["default"].sign.length > 3) {
	oneShotSign = (0, util_1__default["default"].promisify)(crypto_1__default["default"].sign);
} else {
	oneShotSign = crypto_1__default["default"].sign;
}
const sign$4 = async (alg, key, data) => {
	const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, "sign");
	if (alg.startsWith("HS")) {
		const hmac = crypto_1__default["default"].createHmac((0, hmac_digest_js_1.default)(alg), keyObject);
		hmac.update(data);
		return hmac.digest();
	}
	return oneShotSign((0, dsa_digest_js_1.default)(alg), data, (0, node_key_js_1.default)(alg, keyObject));
};
var _default$g = sign$4;

var sign_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$g,
	},
	"__esModule",
	{ value: true }
);

var sign_js_1$1 = sign_1;

const [major$2, minor$2] = process.version
	.slice(1)
	.split(".")
	.map((str) => parseInt(str, 10));
const oneShotCallbackSupported = major$2 >= 16 || (major$2 === 15 && minor$2 >= 13);
let oneShotVerify;
if (crypto_1__default["default"].verify.length > 4 && oneShotCallbackSupported) {
	oneShotVerify = (0, util_1__default["default"].promisify)(crypto_1__default["default"].verify);
} else {
	oneShotVerify = crypto_1__default["default"].verify;
}
const verify$4 = async (alg, key, signature, data) => {
	const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, "verify");
	if (alg.startsWith("HS")) {
		const expected = await (0, sign_js_1$1.default)(alg, keyObject, data);
		const actual = signature;
		try {
			return crypto_1__default["default"].timingSafeEqual(actual, expected);
		} catch {
			return false;
		}
	}
	const algorithm = (0, dsa_digest_js_1.default)(alg);
	const keyInput = (0, node_key_js_1.default)(alg, keyObject);
	try {
		return await oneShotVerify(algorithm, data, keyInput, signature);
	} catch {
		return false;
	}
};
var _default$f = verify$4;

var verify_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$f,
	},
	"__esModule",
	{ value: true }
);

var verify_js_1$1 = verify_1;

var verify$3 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.flattenedVerify = void 0;

	async function flattenedVerify(jws, key, options) {
		var _a;
		if (!(0, is_object_js_1.default)(jws)) {
			throw new require$$0.JWSInvalid("Flattened JWS must be an object");
		}
		if (jws.protected === undefined && jws.header === undefined) {
			throw new require$$0.JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
		}
		if (jws.protected !== undefined && typeof jws.protected !== "string") {
			throw new require$$0.JWSInvalid("JWS Protected Header incorrect type");
		}
		if (jws.payload === undefined) {
			throw new require$$0.JWSInvalid("JWS Payload missing");
		}
		if (typeof jws.signature !== "string") {
			throw new require$$0.JWSInvalid("JWS Signature missing or incorrect type");
		}
		if (jws.header !== undefined && !(0, is_object_js_1.default)(jws.header)) {
			throw new require$$0.JWSInvalid("JWS Unprotected Header incorrect type");
		}
		let parsedProt = {};
		if (jws.protected) {
			try {
				const protectedHeader = (0, base64url$1.decode)(jws.protected);
				parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));
			} catch {
				throw new require$$0.JWSInvalid("JWS Protected Header is invalid");
			}
		}
		if (!(0, is_disjoint_js_1.default)(parsedProt, jws.header)) {
			throw new require$$0.JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
		}
		const joseHeader = {
			...parsedProt,
			...jws.header,
		};
		const extensions = (0, validate_crit_js_1.default)(require$$0.JWSInvalid, new Map([["b64", true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
		let b64 = true;
		if (extensions.has("b64")) {
			b64 = parsedProt.b64;
			if (typeof b64 !== "boolean") {
				throw new require$$0.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
			}
		}
		const { alg } = joseHeader;
		if (typeof alg !== "string" || !alg) {
			throw new require$$0.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
		}
		const algorithms = options && (0, validate_algorithms_js_1.default)("algorithms", options.algorithms);
		if (algorithms && !algorithms.has(alg)) {
			throw new require$$0.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
		}
		if (b64) {
			if (typeof jws.payload !== "string") {
				throw new require$$0.JWSInvalid("JWS Payload must be a string");
			}
		} else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
			throw new require$$0.JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
		}
		let resolvedKey = false;
		if (typeof key === "function") {
			key = await key(parsedProt, jws);
			resolvedKey = true;
		}
		(0, check_key_type_js_1.default)(alg, key, "verify");
		const data = (0, buffer_utils_js_1.concat)(buffer_utils_js_1.encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ""), buffer_utils_js_1.encoder.encode("."), typeof jws.payload === "string" ? buffer_utils_js_1.encoder.encode(jws.payload) : jws.payload);
		const signature = (0, base64url$1.decode)(jws.signature);
		const verified = await (0, verify_js_1$1.default)(alg, key, signature, data);
		if (!verified) {
			throw new require$$0.JWSSignatureVerificationFailed();
		}
		let payload;
		if (b64) {
			payload = (0, base64url$1.decode)(jws.payload);
		} else if (typeof jws.payload === "string") {
			payload = buffer_utils_js_1.encoder.encode(jws.payload);
		} else {
			payload = jws.payload;
		}
		const result = { payload };
		if (jws.protected !== undefined) {
			result.protectedHeader = parsedProt;
		}
		if (jws.header !== undefined) {
			result.unprotectedHeader = jws.header;
		}
		if (resolvedKey) {
			return { ...result, key };
		}
		return result;
	}
	exports.flattenedVerify = flattenedVerify;
});

var verify_js_2 = verify$3;

var verify$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.compactVerify = void 0;

	async function compactVerify(jws, key, options) {
		if (jws instanceof Uint8Array) {
			jws = buffer_utils_js_1.decoder.decode(jws);
		}
		if (typeof jws !== "string") {
			throw new require$$0.JWSInvalid("Compact JWS must be a string or Uint8Array");
		}
		const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
		if (length !== 3) {
			throw new require$$0.JWSInvalid("Invalid Compact JWS");
		}
		const verified = await (0, verify_js_2.flattenedVerify)({ payload, protected: protectedHeader, signature }, key, options);
		const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
		if (typeof key === "function") {
			return { ...result, key: verified.key };
		}
		return result;
	}
	exports.compactVerify = compactVerify;
});

var verify$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generalVerify = void 0;

	async function generalVerify(jws, key, options) {
		if (!(0, is_object_js_1.default)(jws)) {
			throw new require$$0.JWSInvalid("General JWS must be an object");
		}
		if (!Array.isArray(jws.signatures) || !jws.signatures.every(is_object_js_1.default)) {
			throw new require$$0.JWSInvalid("JWS Signatures missing or incorrect type");
		}
		for (const signature of jws.signatures) {
			try {
				return await (0, verify_js_2.flattenedVerify)(
					{
						header: signature.header,
						payload: jws.payload,
						protected: signature.protected,
						signature: signature.signature,
					},
					key,
					options
				);
			} catch {}
		}
		throw new require$$0.JWSSignatureVerificationFailed();
	}
	exports.generalVerify = generalVerify;
});

var _default$e = (date) => Math.floor(date.getTime() / 1000);

var epoch = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$e,
	},
	"__esModule",
	{ value: true }
);

const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX$1 = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
var _default$d = (str) => {
	const matched = REGEX$1.exec(str);
	if (!matched) {
		throw new TypeError("Invalid time period format");
	}
	const value = parseFloat(matched[1]);
	const unit = matched[2].toLowerCase();
	switch (unit) {
		case "sec":
		case "secs":
		case "second":
		case "seconds":
		case "s":
			return Math.round(value);
		case "minute":
		case "minutes":
		case "min":
		case "mins":
		case "m":
			return Math.round(value * minute);
		case "hour":
		case "hours":
		case "hr":
		case "hrs":
		case "h":
			return Math.round(value * hour);
		case "day":
		case "days":
		case "d":
			return Math.round(value * day);
		case "week":
		case "weeks":
		case "w":
			return Math.round(value * week);
		default:
			return Math.round(value * year);
	}
};

var secs = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$d,
	},
	"__esModule",
	{ value: true }
);

var epoch_js_1 = epoch;

var secs_js_1 = secs;

const normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, "");
const checkAudiencePresence = (audPayload, audOption) => {
	if (typeof audPayload === "string") {
		return audOption.includes(audPayload);
	}
	if (Array.isArray(audPayload)) {
		return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
	}
	return false;
};
var _default$c = (protectedHeader, encodedPayload, options = {}) => {
	const { typ } = options;
	if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
		throw new require$$0.JWTClaimValidationFailed('unexpected "typ" JWT header value', "typ", "check_failed");
	}
	let payload;
	try {
		payload = JSON.parse(buffer_utils_js_1.decoder.decode(encodedPayload));
	} catch {}
	if (!(0, is_object_js_1.default)(payload)) {
		throw new require$$0.JWTInvalid("JWT Claims Set must be a top-level JSON object");
	}
	const { issuer } = options;
	if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
		throw new require$$0.JWTClaimValidationFailed('unexpected "iss" claim value', "iss", "check_failed");
	}
	const { subject } = options;
	if (subject && payload.sub !== subject) {
		throw new require$$0.JWTClaimValidationFailed('unexpected "sub" claim value', "sub", "check_failed");
	}
	const { audience } = options;
	if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [audience] : audience)) {
		throw new require$$0.JWTClaimValidationFailed('unexpected "aud" claim value', "aud", "check_failed");
	}
	let tolerance;
	switch (typeof options.clockTolerance) {
		case "string":
			tolerance = (0, secs_js_1.default)(options.clockTolerance);
			break;
		case "number":
			tolerance = options.clockTolerance;
			break;
		case "undefined":
			tolerance = 0;
			break;
		default:
			throw new TypeError("Invalid clockTolerance option type");
	}
	const { currentDate } = options;
	const now = (0, epoch_js_1.default)(currentDate || new Date());
	if ((payload.iat !== undefined || options.maxTokenAge) && typeof payload.iat !== "number") {
		throw new require$$0.JWTClaimValidationFailed('"iat" claim must be a number', "iat", "invalid");
	}
	if (payload.nbf !== undefined) {
		if (typeof payload.nbf !== "number") {
			throw new require$$0.JWTClaimValidationFailed('"nbf" claim must be a number', "nbf", "invalid");
		}
		if (payload.nbf > now + tolerance) {
			throw new require$$0.JWTClaimValidationFailed('"nbf" claim timestamp check failed', "nbf", "check_failed");
		}
	}
	if (payload.exp !== undefined) {
		if (typeof payload.exp !== "number") {
			throw new require$$0.JWTClaimValidationFailed('"exp" claim must be a number', "exp", "invalid");
		}
		if (payload.exp <= now - tolerance) {
			throw new require$$0.JWTExpired('"exp" claim timestamp check failed', "exp", "check_failed");
		}
	}
	if (options.maxTokenAge) {
		const age = now - payload.iat;
		const max = typeof options.maxTokenAge === "number" ? options.maxTokenAge : (0, secs_js_1.default)(options.maxTokenAge);
		if (age - tolerance > max) {
			throw new require$$0.JWTExpired('"iat" claim timestamp check failed (too far in the past)', "iat", "check_failed");
		}
		if (age < 0 - tolerance) {
			throw new require$$0.JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
		}
	}
	return payload;
};

var jwt_claims_set = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$c,
	},
	"__esModule",
	{ value: true }
);

var verify_js_1 = verify$2;

var jwt_claims_set_js_1 = jwt_claims_set;

var verify = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.jwtVerify = void 0;

	async function jwtVerify(jwt, key, options) {
		var _a;
		const verified = await (0, verify_js_1.compactVerify)(jwt, key, options);
		if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes("b64")) && verified.protectedHeader.b64 === false) {
			throw new require$$0.JWTInvalid("JWTs MUST NOT use unencoded payload");
		}
		const payload = (0, jwt_claims_set_js_1.default)(verified.protectedHeader, verified.payload, options);
		const result = { payload, protectedHeader: verified.protectedHeader };
		if (typeof key === "function") {
			return { ...result, key: verified.key };
		}
		return result;
	}
	exports.jwtVerify = jwtVerify;
});

var decrypt_js_1 = decrypt$2;

var decrypt = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.jwtDecrypt = void 0;

	async function jwtDecrypt(jwt, key, options) {
		const decrypted = await (0, decrypt_js_1.compactDecrypt)(jwt, key, options);
		const payload = (0, jwt_claims_set_js_1.default)(decrypted.protectedHeader, decrypted.plaintext, options);
		const { protectedHeader } = decrypted;
		if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {
			throw new require$$0.JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', "iss", "mismatch");
		}
		if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {
			throw new require$$0.JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', "sub", "mismatch");
		}
		if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
			throw new require$$0.JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', "aud", "mismatch");
		}
		const result = { payload, protectedHeader };
		if (typeof key === "function") {
			return { ...result, key: decrypted.key };
		}
		return result;
	}
	exports.jwtDecrypt = jwtDecrypt;
});

var encrypt$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CompactEncrypt = void 0;

	class CompactEncrypt {
		constructor(plaintext) {
			this._flattened = new encrypt_js_3.FlattenedEncrypt(plaintext);
		}
		setContentEncryptionKey(cek) {
			this._flattened.setContentEncryptionKey(cek);
			return this;
		}
		setInitializationVector(iv) {
			this._flattened.setInitializationVector(iv);
			return this;
		}
		setProtectedHeader(protectedHeader) {
			this._flattened.setProtectedHeader(protectedHeader);
			return this;
		}
		setKeyManagementParameters(parameters) {
			this._flattened.setKeyManagementParameters(parameters);
			return this;
		}
		async encrypt(key, options) {
			const jwe = await this._flattened.encrypt(key, options);
			return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join(".");
		}
	}
	exports.CompactEncrypt = CompactEncrypt;
});

var sign$3 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FlattenedSign = void 0;

	class FlattenedSign {
		constructor(payload) {
			if (!(payload instanceof Uint8Array)) {
				throw new TypeError("payload must be an instance of Uint8Array");
			}
			this._payload = payload;
		}
		setProtectedHeader(protectedHeader) {
			if (this._protectedHeader) {
				throw new TypeError("setProtectedHeader can only be called once");
			}
			this._protectedHeader = protectedHeader;
			return this;
		}
		setUnprotectedHeader(unprotectedHeader) {
			if (this._unprotectedHeader) {
				throw new TypeError("setUnprotectedHeader can only be called once");
			}
			this._unprotectedHeader = unprotectedHeader;
			return this;
		}
		async sign(key, options) {
			if (!this._protectedHeader && !this._unprotectedHeader) {
				throw new require$$0.JWSInvalid("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
			}
			if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader)) {
				throw new require$$0.JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
			}
			const joseHeader = {
				...this._protectedHeader,
				...this._unprotectedHeader,
			};
			const extensions = (0, validate_crit_js_1.default)(require$$0.JWSInvalid, new Map([["b64", true]]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
			let b64 = true;
			if (extensions.has("b64")) {
				b64 = this._protectedHeader.b64;
				if (typeof b64 !== "boolean") {
					throw new require$$0.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
				}
			}
			const { alg } = joseHeader;
			if (typeof alg !== "string" || !alg) {
				throw new require$$0.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
			}
			(0, check_key_type_js_1.default)(alg, key, "sign");
			let payload = this._payload;
			if (b64) {
				payload = buffer_utils_js_1.encoder.encode((0, base64url$1.encode)(payload));
			}
			let protectedHeader;
			if (this._protectedHeader) {
				protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url$1.encode)(JSON.stringify(this._protectedHeader)));
			} else {
				protectedHeader = buffer_utils_js_1.encoder.encode("");
			}
			const data = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode("."), payload);
			const signature = await (0, sign_js_1$1.default)(alg, key, data);
			const jws = {
				signature: (0, base64url$1.encode)(signature),
				payload: "",
			};
			if (b64) {
				jws.payload = buffer_utils_js_1.decoder.decode(payload);
			}
			if (this._unprotectedHeader) {
				jws.header = this._unprotectedHeader;
			}
			if (this._protectedHeader) {
				jws.protected = buffer_utils_js_1.decoder.decode(protectedHeader);
			}
			return jws;
		}
	}
	exports.FlattenedSign = FlattenedSign;
});

var sign_js_2 = sign$3;

var sign$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CompactSign = void 0;

	class CompactSign {
		constructor(payload) {
			this._flattened = new sign_js_2.FlattenedSign(payload);
		}
		setProtectedHeader(protectedHeader) {
			this._flattened.setProtectedHeader(protectedHeader);
			return this;
		}
		async sign(key, options) {
			const jws = await this._flattened.sign(key, options);
			if (jws.payload === undefined) {
				throw new TypeError("use the flattened module for creating JWS with b64: false");
			}
			return `${jws.protected}.${jws.payload}.${jws.signature}`;
		}
	}
	exports.CompactSign = CompactSign;
});

var sign$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.GeneralSign = void 0;

	class IndividualSignature {
		constructor(sig, key, options) {
			this.parent = sig;
			this.key = key;
			this.options = options;
		}
		setProtectedHeader(protectedHeader) {
			if (this.protectedHeader) {
				throw new TypeError("setProtectedHeader can only be called once");
			}
			this.protectedHeader = protectedHeader;
			return this;
		}
		setUnprotectedHeader(unprotectedHeader) {
			if (this.unprotectedHeader) {
				throw new TypeError("setUnprotectedHeader can only be called once");
			}
			this.unprotectedHeader = unprotectedHeader;
			return this;
		}
		addSignature(...args) {
			return this.parent.addSignature(...args);
		}
		sign(...args) {
			return this.parent.sign(...args);
		}
		done() {
			return this.parent;
		}
	}
	class GeneralSign {
		constructor(payload) {
			this._signatures = [];
			this._payload = payload;
		}
		addSignature(key, options) {
			const signature = new IndividualSignature(this, key, options);
			this._signatures.push(signature);
			return signature;
		}
		async sign() {
			if (!this._signatures.length) {
				throw new require$$0.JWSInvalid("at least one signature must be added");
			}
			const jws = {
				signatures: [],
				payload: "",
			};
			for (let i = 0; i < this._signatures.length; i++) {
				const signature = this._signatures[i];
				const flattened = new sign_js_2.FlattenedSign(this._payload);
				flattened.setProtectedHeader(signature.protectedHeader);
				flattened.setUnprotectedHeader(signature.unprotectedHeader);
				const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
				if (i === 0) {
					jws.payload = payload;
				} else if (jws.payload !== payload) {
					throw new require$$0.JWSInvalid("inconsistent use of JWS Unencoded Payload Option (RFC7797)");
				}
				jws.signatures.push(rest);
			}
			return jws;
		}
	}
	exports.GeneralSign = GeneralSign;
});

var produce = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ProduceJWT = void 0;

	class ProduceJWT {
		constructor(payload) {
			if (!(0, is_object_js_1.default)(payload)) {
				throw new TypeError("JWT Claims Set MUST be an object");
			}
			this._payload = payload;
		}
		setIssuer(issuer) {
			this._payload = { ...this._payload, iss: issuer };
			return this;
		}
		setSubject(subject) {
			this._payload = { ...this._payload, sub: subject };
			return this;
		}
		setAudience(audience) {
			this._payload = { ...this._payload, aud: audience };
			return this;
		}
		setJti(jwtId) {
			this._payload = { ...this._payload, jti: jwtId };
			return this;
		}
		setNotBefore(input) {
			if (typeof input === "number") {
				this._payload = { ...this._payload, nbf: input };
			} else {
				this._payload = { ...this._payload, nbf: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input) };
			}
			return this;
		}
		setExpirationTime(input) {
			if (typeof input === "number") {
				this._payload = { ...this._payload, exp: input };
			} else {
				this._payload = { ...this._payload, exp: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input) };
			}
			return this;
		}
		setIssuedAt(input) {
			if (typeof input === "undefined") {
				this._payload = { ...this._payload, iat: (0, epoch_js_1.default)(new Date()) };
			} else {
				this._payload = { ...this._payload, iat: input };
			}
			return this;
		}
	}
	exports.ProduceJWT = ProduceJWT;
});

var sign_js_1 = sign$2;

var produce_js_1 = produce;

var sign = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SignJWT = void 0;

	class SignJWT extends produce_js_1.ProduceJWT {
		setProtectedHeader(protectedHeader) {
			this._protectedHeader = protectedHeader;
			return this;
		}
		async sign(key, options) {
			var _a;
			const sig = new sign_js_1.CompactSign(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));
			sig.setProtectedHeader(this._protectedHeader);
			if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) {
				throw new require$$0.JWTInvalid("JWTs MUST NOT use unencoded payload");
			}
			return sig.sign(key, options);
		}
	}
	exports.SignJWT = SignJWT;
});

var encrypt_js_2 = encrypt$1;

var encrypt = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EncryptJWT = void 0;

	class EncryptJWT extends produce_js_1.ProduceJWT {
		setProtectedHeader(protectedHeader) {
			if (this._protectedHeader) {
				throw new TypeError("setProtectedHeader can only be called once");
			}
			this._protectedHeader = protectedHeader;
			return this;
		}
		setKeyManagementParameters(parameters) {
			if (this._keyManagementParameters) {
				throw new TypeError("setKeyManagementParameters can only be called once");
			}
			this._keyManagementParameters = parameters;
			return this;
		}
		setContentEncryptionKey(cek) {
			if (this._cek) {
				throw new TypeError("setContentEncryptionKey can only be called once");
			}
			this._cek = cek;
			return this;
		}
		setInitializationVector(iv) {
			if (this._iv) {
				throw new TypeError("setInitializationVector can only be called once");
			}
			this._iv = iv;
			return this;
		}
		replicateIssuerAsHeader() {
			this._replicateIssuerAsHeader = true;
			return this;
		}
		replicateSubjectAsHeader() {
			this._replicateSubjectAsHeader = true;
			return this;
		}
		replicateAudienceAsHeader() {
			this._replicateAudienceAsHeader = true;
			return this;
		}
		async encrypt(key, options) {
			const enc = new encrypt_js_2.CompactEncrypt(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));
			if (this._replicateIssuerAsHeader) {
				this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss };
			}
			if (this._replicateSubjectAsHeader) {
				this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub };
			}
			if (this._replicateAudienceAsHeader) {
				this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud };
			}
			enc.setProtectedHeader(this._protectedHeader);
			if (this._iv) {
				enc.setInitializationVector(this._iv);
			}
			if (this._cek) {
				enc.setContentEncryptionKey(this._cek);
			}
			if (this._keyManagementParameters) {
				enc.setKeyManagementParameters(this._keyManagementParameters);
			}
			return enc.encrypt(key, options);
		}
	}
	exports.EncryptJWT = EncryptJWT;
});

var thumbprint = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = void 0;

	const check = (value, description) => {
		if (typeof value !== "string" || !value) {
			throw new require$$0.JWKInvalid(`${description} missing or invalid`);
		}
	};
	async function calculateJwkThumbprint(jwk, digestAlgorithm) {
		if (!(0, is_object_js_1.default)(jwk)) {
			throw new TypeError("JWK must be an object");
		}
		digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : (digestAlgorithm = "sha256");
		if (digestAlgorithm !== "sha256" && digestAlgorithm !== "sha384" && digestAlgorithm !== "sha512") {
			throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
		}
		let components;
		switch (jwk.kty) {
			case "EC":
				check(jwk.crv, '"crv" (Curve) Parameter');
				check(jwk.x, '"x" (X Coordinate) Parameter');
				check(jwk.y, '"y" (Y Coordinate) Parameter');
				components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
				break;
			case "OKP":
				check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
				check(jwk.x, '"x" (Public Key) Parameter');
				components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
				break;
			case "RSA":
				check(jwk.e, '"e" (Exponent) Parameter');
				check(jwk.n, '"n" (Modulus) Parameter');
				components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
				break;
			case "oct":
				check(jwk.k, '"k" (Key Value) Parameter');
				components = { k: jwk.k, kty: jwk.kty };
				break;
			default:
				throw new require$$0.JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
		}
		const data = buffer_utils_js_1.encoder.encode(JSON.stringify(components));
		return (0, base64url$1.encode)(await (0, digest_js_1.default)(digestAlgorithm, data));
	}
	exports.calculateJwkThumbprint = calculateJwkThumbprint;
	async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
		digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : (digestAlgorithm = "sha256");
		const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
		return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
	}
	exports.calculateJwkThumbprintUri = calculateJwkThumbprintUri;
});

var embedded = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EmbeddedJWK = void 0;

	async function EmbeddedJWK(protectedHeader, token) {
		const joseHeader = {
			...protectedHeader,
			...token.header,
		};
		if (!(0, is_object_js_1.default)(joseHeader.jwk)) {
			throw new require$$0.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
		}
		const key = await (0, import_js_1.importJWK)({ ...joseHeader.jwk, ext: true }, joseHeader.alg, true);
		if (key instanceof Uint8Array || key.type !== "public") {
			throw new require$$0.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
		}
		return key;
	}
	exports.EmbeddedJWK = EmbeddedJWK;
});

var local = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createLocalJWKSet = exports.LocalJWKSet = exports.isJWKSLike = void 0;

	function getKtyFromAlg(alg) {
		switch (typeof alg === "string" && alg.slice(0, 2)) {
			case "RS":
			case "PS":
				return "RSA";
			case "ES":
				return "EC";
			case "Ed":
				return "OKP";
			default:
				throw new require$$0.JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
		}
	}
	function isJWKSLike(jwks) {
		return jwks && typeof jwks === "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
	}
	exports.isJWKSLike = isJWKSLike;
	function isJWKLike(key) {
		return (0, is_object_js_1.default)(key);
	}
	function clone(obj) {
		if (typeof structuredClone === "function") {
			return structuredClone(obj);
		}
		return JSON.parse(JSON.stringify(obj));
	}
	class LocalJWKSet {
		constructor(jwks) {
			this._cached = new WeakMap();
			if (!isJWKSLike(jwks)) {
				throw new require$$0.JWKSInvalid("JSON Web Key Set malformed");
			}
			this._jwks = clone(jwks);
		}
		async getKey(protectedHeader, token) {
			const { alg, kid } = { ...protectedHeader, ...token.header };
			const kty = getKtyFromAlg(alg);
			const candidates = this._jwks.keys.filter((jwk) => {
				let candidate = kty === jwk.kty;
				if (candidate && typeof kid === "string") {
					candidate = kid === jwk.kid;
				}
				if (candidate && typeof jwk.alg === "string") {
					candidate = alg === jwk.alg;
				}
				if (candidate && typeof jwk.use === "string") {
					candidate = jwk.use === "sig";
				}
				if (candidate && Array.isArray(jwk.key_ops)) {
					candidate = jwk.key_ops.includes("verify");
				}
				if (candidate && alg === "EdDSA") {
					candidate = jwk.crv === "Ed25519" || jwk.crv === "Ed448";
				}
				if (candidate) {
					switch (alg) {
						case "ES256":
							candidate = jwk.crv === "P-256";
							break;
						case "ES256K":
							candidate = jwk.crv === "secp256k1";
							break;
						case "ES384":
							candidate = jwk.crv === "P-384";
							break;
						case "ES512":
							candidate = jwk.crv === "P-521";
							break;
					}
				}
				return candidate;
			});
			const { 0: jwk, length } = candidates;
			if (length === 0) {
				throw new require$$0.JWKSNoMatchingKey();
			} else if (length !== 1) {
				throw new require$$0.JWKSMultipleMatchingKeys();
			}
			const cached = this._cached.get(jwk) || this._cached.set(jwk, {}).get(jwk);
			if (cached[alg] === undefined) {
				const keyObject = await (0, import_js_1.importJWK)({ ...jwk, ext: true }, alg);
				if (keyObject instanceof Uint8Array || keyObject.type !== "public") {
					throw new require$$0.JWKSInvalid("JSON Web Key Set members must be public keys");
				}
				cached[alg] = keyObject;
			}
			return cached[alg];
		}
	}
	exports.LocalJWKSet = LocalJWKSet;
	function createLocalJWKSet(jwks) {
		return LocalJWKSet.prototype.getKey.bind(new LocalJWKSet(jwks));
	}
	exports.createLocalJWKSet = createLocalJWKSet;
});

const fetchJwks$1 = async (url, timeout, options) => {
	let get;
	switch (url.protocol) {
		case "https:":
			get = https__default["default"].get;
			break;
		case "http:":
			get = http__default["default"].get;
			break;
		default:
			throw new TypeError("Unsupported URL protocol.");
	}
	const { agent, headers } = options;
	const req = get(url.href, {
		agent,
		timeout,
		headers,
	});
	const [response] = await Promise.race([(0, events_1__default["default"].once)(req, "response"), (0, events_1__default["default"].once)(req, "timeout")]);
	if (!response) {
		req.destroy();
		throw new require$$0.JWKSTimeout();
	}
	if (response.statusCode !== 200) {
		throw new require$$0.JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");
	}
	const parts = [];
	for await (const part of response) {
		parts.push(part);
	}
	try {
		return JSON.parse(buffer_utils_js_1.decoder.decode((0, buffer_utils_js_1.concat)(...parts)));
	} catch {
		throw new require$$0.JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON");
	}
};
var _default$b = fetchJwks$1;

var fetch_jwks = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$b,
	},
	"__esModule",
	{ value: true }
);

var fetch_jwks_js_1 = fetch_jwks;

var local_js_1 = local;

var remote = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createRemoteJWKSet = void 0;

	class RemoteJWKSet extends local_js_1.LocalJWKSet {
		constructor(url, options) {
			super({ keys: [] });
			this._jwks = undefined;
			if (!(url instanceof URL)) {
				throw new TypeError("url must be an instance of URL");
			}
			this._url = new URL(url.href);
			this._options = { agent: options === null || options === void 0 ? void 0 : options.agent, headers: options === null || options === void 0 ? void 0 : options.headers };
			this._timeoutDuration = typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === "number" ? (options === null || options === void 0 ? void 0 : options.timeoutDuration) : 5000;
			this._cooldownDuration = typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === "number" ? (options === null || options === void 0 ? void 0 : options.cooldownDuration) : 30000;
			this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === "number" ? (options === null || options === void 0 ? void 0 : options.cacheMaxAge) : 600000;
		}
		coolingDown() {
			return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
		}
		fresh() {
			return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
		}
		async getKey(protectedHeader, token) {
			if (!this._jwks || !this.fresh()) {
				await this.reload();
			}
			try {
				return await super.getKey(protectedHeader, token);
			} catch (err) {
				if (err instanceof require$$0.JWKSNoMatchingKey) {
					if (this.coolingDown() === false) {
						await this.reload();
						return super.getKey(protectedHeader, token);
					}
				}
				throw err;
			}
		}
		async reload() {
			if (this._pendingFetch && (0, env_js_1.isCloudflareWorkers)()) {
				return new Promise((resolve) => {
					const isDone = () => {
						if (this._pendingFetch === undefined) {
							resolve();
						} else {
							setTimeout(isDone, 5);
						}
					};
					isDone();
				});
			}
			if (!this._pendingFetch) {
				this._pendingFetch = (0, fetch_jwks_js_1.default)(this._url, this._timeoutDuration, this._options)
					.then((json) => {
						if (!(0, local_js_1.isJWKSLike)(json)) {
							throw new require$$0.JWKSInvalid("JSON Web Key Set malformed");
						}
						this._jwks = { keys: json.keys };
						this._jwksTimestamp = Date.now();
						this._pendingFetch = undefined;
					})
					.catch((err) => {
						this._pendingFetch = undefined;
						throw err;
					});
			}
			await this._pendingFetch;
		}
	}
	function createRemoteJWKSet(url, options) {
		return RemoteJWKSet.prototype.getKey.bind(new RemoteJWKSet(url, options));
	}
	exports.createRemoteJWKSet = createRemoteJWKSet;
});

var unsecured = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UnsecuredJWT = void 0;

	class UnsecuredJWT extends produce_js_1.ProduceJWT {
		encode() {
			const header = base64url$1.encode(JSON.stringify({ alg: "none" }));
			const payload = base64url$1.encode(JSON.stringify(this._payload));
			return `${header}.${payload}.`;
		}
		static decode(jwt, options) {
			if (typeof jwt !== "string") {
				throw new require$$0.JWTInvalid("Unsecured JWT must be a string");
			}
			const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split(".");
			if (length !== 3 || signature !== "") {
				throw new require$$0.JWTInvalid("Invalid Unsecured JWT");
			}
			let header;
			try {
				header = JSON.parse(buffer_utils_js_1.decoder.decode(base64url$1.decode(encodedHeader)));
				if (header.alg !== "none") throw new Error();
			} catch {
				throw new require$$0.JWTInvalid("Invalid Unsecured JWT");
			}
			const payload = (0, jwt_claims_set_js_1.default)(header, base64url$1.decode(encodedPayload), options);
			return { payload, header };
		}
	}
	exports.UnsecuredJWT = UnsecuredJWT;
});

var base64url_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decode = exports.encode = void 0;

	exports.encode = base64url$1.encode;
	exports.decode = base64url$1.decode;
});

var require$$1 = base64url_1;

var decode_protected_header = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeProtectedHeader = void 0;

	function decodeProtectedHeader(token) {
		let protectedB64u;
		if (typeof token === "string") {
			const parts = token.split(".");
			if (parts.length === 3 || parts.length === 5) {
				[protectedB64u] = parts;
			}
		} else if (typeof token === "object" && token) {
			if ("protected" in token) {
				protectedB64u = token.protected;
			} else {
				throw new TypeError("Token does not contain a Protected Header");
			}
		}
		try {
			if (typeof protectedB64u !== "string" || !protectedB64u) {
				throw new Error();
			}
			const result = JSON.parse(buffer_utils_js_1.decoder.decode((0, require$$1.decode)(protectedB64u)));
			if (!(0, is_object_js_1.default)(result)) {
				throw new Error();
			}
			return result;
		} catch {
			throw new TypeError("Invalid Token or Protected Header formatting");
		}
	}
	exports.decodeProtectedHeader = decodeProtectedHeader;
});

var decode_jwt$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeJwt = void 0;

	function decodeJwt(jwt) {
		if (typeof jwt !== "string") throw new require$$0.JWTInvalid("JWTs must use Compact JWS serialization, JWT must be a string");
		const { 1: payload, length } = jwt.split(".");
		if (length === 5) throw new require$$0.JWTInvalid("Only JWTs using Compact JWS serialization can be decoded");
		if (length !== 3) throw new require$$0.JWTInvalid("Invalid JWT");
		if (!payload) throw new require$$0.JWTInvalid("JWTs must contain a payload");
		let decoded;
		try {
			decoded = (0, require$$1.decode)(payload);
		} catch {
			throw new require$$0.JWTInvalid("Failed to parse the base64url encoded payload");
		}
		let result;
		try {
			result = JSON.parse(buffer_utils_js_1.decoder.decode(decoded));
		} catch {
			throw new require$$0.JWTInvalid("Failed to parse the decoded payload as JSON");
		}
		if (!(0, is_object_js_1.default)(result)) throw new require$$0.JWTInvalid("Invalid JWT Claims Set");
		return result;
	}
	exports.decodeJwt = decodeJwt;
});

var generate_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generateKeyPair = exports.generateSecret = void 0;

	const generate = (0, util_1__default["default"].promisify)(crypto_1__default["default"].generateKeyPair);
	async function generateSecret(alg, options) {
		let length;
		switch (alg) {
			case "HS256":
			case "HS384":
			case "HS512":
			case "A128CBC-HS256":
			case "A192CBC-HS384":
			case "A256CBC-HS512":
				length = parseInt(alg.slice(-3), 10);
				break;
			case "A128KW":
			case "A192KW":
			case "A256KW":
			case "A128GCMKW":
			case "A192GCMKW":
			case "A256GCMKW":
			case "A128GCM":
			case "A192GCM":
			case "A256GCM":
				length = parseInt(alg.slice(1, 4), 10);
				break;
			default:
				throw new require$$0.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
		}
		return (0, crypto_1__default["default"].createSecretKey)((0, random_js_1.default)(new Uint8Array(length >> 3)));
	}
	exports.generateSecret = generateSecret;
	async function generateKeyPair(alg, options) {
		var _a, _b;
		switch (alg) {
			case "RS256":
			case "RS384":
			case "RS512":
			case "PS256":
			case "PS384":
			case "PS512":
			case "RSA-OAEP":
			case "RSA-OAEP-256":
			case "RSA-OAEP-384":
			case "RSA-OAEP-512":
			case "RSA1_5": {
				const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;
				if (typeof modulusLength !== "number" || modulusLength < 2048) {
					throw new require$$0.JOSENotSupported("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
				}
				const keypair = await generate("rsa", {
					modulusLength,
					publicExponent: 0x10001,
				});
				(0, check_modulus_length_js_1.setModulusLength)(keypair.privateKey, modulusLength);
				(0, check_modulus_length_js_1.setModulusLength)(keypair.publicKey, modulusLength);
				return keypair;
			}
			case "ES256":
				return generate("ec", { namedCurve: "P-256" });
			case "ES256K":
				return generate("ec", { namedCurve: "secp256k1" });
			case "ES384":
				return generate("ec", { namedCurve: "P-384" });
			case "ES512":
				return generate("ec", { namedCurve: "P-521" });
			case "EdDSA": {
				switch (options === null || options === void 0 ? void 0 : options.crv) {
					case undefined:
					case "Ed25519":
						return generate("ed25519");
					case "Ed448":
						return generate("ed448");
					default:
						throw new require$$0.JOSENotSupported("Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448");
				}
			}
			case "ECDH-ES":
			case "ECDH-ES+A128KW":
			case "ECDH-ES+A192KW":
			case "ECDH-ES+A256KW":
				const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : "P-256";
				switch (crv) {
					case undefined:
					case "P-256":
					case "P-384":
					case "P-521":
						return generate("ec", { namedCurve: crv });
					case "X25519":
						return generate("x25519");
					case "X448":
						return generate("x448");
					default:
						throw new require$$0.JOSENotSupported("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
				}
			default:
				throw new require$$0.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
		}
	}
	exports.generateKeyPair = generateKeyPair;
});

var generate_js_1 = generate_1;

var generate_key_pair = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generateKeyPair = void 0;

	async function generateKeyPair(alg, options) {
		return (0, generate_js_1.generateKeyPair)(alg, options);
	}
	exports.generateKeyPair = generateKeyPair;
});

var generate_secret = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generateSecret = void 0;

	async function generateSecret(alg, options) {
		return (0, generate_js_1.generateSecret)(alg, options);
	}
	exports.generateSecret = generateSecret;
});

var decrypt_js_3 = decrypt$1;

var encrypt_js_1 = encrypt$2;

var verify_js_3 = verify$1;

var verify_js_4 = verify;

var decrypt_js_4 = decrypt;

var sign_js_3 = sign$1;

var sign_js_4 = sign;

var encrypt_js_4 = encrypt;

var thumbprint_js_1 = thumbprint;

var embedded_js_1 = embedded;

var remote_js_1 = remote;

var unsecured_js_1 = unsecured;

var decode_protected_header_js_1 = decode_protected_header;

var decode_jwt_js_1 = decode_jwt$1;

var generate_key_pair_js_1 = generate_key_pair;

var generate_secret_js_1 = generate_secret;

var cjs = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.base64url = exports.generateSecret = exports.generateKeyPair = exports.errors = exports.decodeJwt = exports.decodeProtectedHeader = exports.importJWK = exports.importX509 = exports.importPKCS8 = exports.importSPKI = exports.exportJWK = exports.exportSPKI = exports.exportPKCS8 = exports.UnsecuredJWT = exports.createRemoteJWKSet = exports.createLocalJWKSet = exports.EmbeddedJWK = exports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = exports.EncryptJWT = exports.SignJWT = exports.GeneralSign = exports.FlattenedSign = exports.CompactSign = exports.FlattenedEncrypt = exports.CompactEncrypt = exports.jwtDecrypt = exports.jwtVerify = exports.generalVerify = exports.flattenedVerify = exports.compactVerify = exports.GeneralEncrypt = exports.generalDecrypt = exports.flattenedDecrypt = exports.compactDecrypt = void 0;

	Object.defineProperty(exports, "compactDecrypt", {
		enumerable: true,
		get: function () {
			return decrypt_js_1.compactDecrypt;
		},
	});

	Object.defineProperty(exports, "flattenedDecrypt", {
		enumerable: true,
		get: function () {
			return decrypt_js_2.flattenedDecrypt;
		},
	});

	Object.defineProperty(exports, "generalDecrypt", {
		enumerable: true,
		get: function () {
			return decrypt_js_3.generalDecrypt;
		},
	});

	Object.defineProperty(exports, "GeneralEncrypt", {
		enumerable: true,
		get: function () {
			return encrypt_js_1.GeneralEncrypt;
		},
	});

	Object.defineProperty(exports, "compactVerify", {
		enumerable: true,
		get: function () {
			return verify_js_1.compactVerify;
		},
	});

	Object.defineProperty(exports, "flattenedVerify", {
		enumerable: true,
		get: function () {
			return verify_js_2.flattenedVerify;
		},
	});

	Object.defineProperty(exports, "generalVerify", {
		enumerable: true,
		get: function () {
			return verify_js_3.generalVerify;
		},
	});

	Object.defineProperty(exports, "jwtVerify", {
		enumerable: true,
		get: function () {
			return verify_js_4.jwtVerify;
		},
	});

	Object.defineProperty(exports, "jwtDecrypt", {
		enumerable: true,
		get: function () {
			return decrypt_js_4.jwtDecrypt;
		},
	});

	Object.defineProperty(exports, "CompactEncrypt", {
		enumerable: true,
		get: function () {
			return encrypt_js_2.CompactEncrypt;
		},
	});

	Object.defineProperty(exports, "FlattenedEncrypt", {
		enumerable: true,
		get: function () {
			return encrypt_js_3.FlattenedEncrypt;
		},
	});

	Object.defineProperty(exports, "CompactSign", {
		enumerable: true,
		get: function () {
			return sign_js_1.CompactSign;
		},
	});

	Object.defineProperty(exports, "FlattenedSign", {
		enumerable: true,
		get: function () {
			return sign_js_2.FlattenedSign;
		},
	});

	Object.defineProperty(exports, "GeneralSign", {
		enumerable: true,
		get: function () {
			return sign_js_3.GeneralSign;
		},
	});

	Object.defineProperty(exports, "SignJWT", {
		enumerable: true,
		get: function () {
			return sign_js_4.SignJWT;
		},
	});

	Object.defineProperty(exports, "EncryptJWT", {
		enumerable: true,
		get: function () {
			return encrypt_js_4.EncryptJWT;
		},
	});

	Object.defineProperty(exports, "calculateJwkThumbprint", {
		enumerable: true,
		get: function () {
			return thumbprint_js_1.calculateJwkThumbprint;
		},
	});
	Object.defineProperty(exports, "calculateJwkThumbprintUri", {
		enumerable: true,
		get: function () {
			return thumbprint_js_1.calculateJwkThumbprintUri;
		},
	});

	Object.defineProperty(exports, "EmbeddedJWK", {
		enumerable: true,
		get: function () {
			return embedded_js_1.EmbeddedJWK;
		},
	});

	Object.defineProperty(exports, "createLocalJWKSet", {
		enumerable: true,
		get: function () {
			return local_js_1.createLocalJWKSet;
		},
	});

	Object.defineProperty(exports, "createRemoteJWKSet", {
		enumerable: true,
		get: function () {
			return remote_js_1.createRemoteJWKSet;
		},
	});

	Object.defineProperty(exports, "UnsecuredJWT", {
		enumerable: true,
		get: function () {
			return unsecured_js_1.UnsecuredJWT;
		},
	});

	Object.defineProperty(exports, "exportPKCS8", {
		enumerable: true,
		get: function () {
			return export_js_1.exportPKCS8;
		},
	});
	Object.defineProperty(exports, "exportSPKI", {
		enumerable: true,
		get: function () {
			return export_js_1.exportSPKI;
		},
	});
	Object.defineProperty(exports, "exportJWK", {
		enumerable: true,
		get: function () {
			return export_js_1.exportJWK;
		},
	});

	Object.defineProperty(exports, "importSPKI", {
		enumerable: true,
		get: function () {
			return import_js_1.importSPKI;
		},
	});
	Object.defineProperty(exports, "importPKCS8", {
		enumerable: true,
		get: function () {
			return import_js_1.importPKCS8;
		},
	});
	Object.defineProperty(exports, "importX509", {
		enumerable: true,
		get: function () {
			return import_js_1.importX509;
		},
	});
	Object.defineProperty(exports, "importJWK", {
		enumerable: true,
		get: function () {
			return import_js_1.importJWK;
		},
	});

	Object.defineProperty(exports, "decodeProtectedHeader", {
		enumerable: true,
		get: function () {
			return decode_protected_header_js_1.decodeProtectedHeader;
		},
	});

	Object.defineProperty(exports, "decodeJwt", {
		enumerable: true,
		get: function () {
			return decode_jwt_js_1.decodeJwt;
		},
	});
	exports.errors = require$$0;

	Object.defineProperty(exports, "generateKeyPair", {
		enumerable: true,
		get: function () {
			return generate_key_pair_js_1.generateKeyPair;
		},
	});

	Object.defineProperty(exports, "generateSecret", {
		enumerable: true,
		get: function () {
			return generate_secret_js_1.generateSecret;
		},
	});
	exports.base64url = require$$1;
});

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
	// lazy load so that environments that need to polyfill have a chance to do so
	if (!getRandomValues) {
		// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
		getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

		if (!getRandomValues) {
			throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
		}
	}

	return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate$1(uuid) {
	return typeof uuid === "string" && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
	byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
	// Note: Be careful editing this code!  It's been tuned for performance
	// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
	return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
	const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
	// of the following:
	// - One or more input array values don't map to a hex octet (leading to
	// "undefined" in the uuid)
	// - Invalid input values for the RFC `version` or `variant` fields

	if (!validate$1(uuid)) {
		throw TypeError("Stringified UUID is invalid");
	}

	return uuid;
}

//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

let _nodeId;

let _clockseq; // Previous uuid creation time

let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
	let i = (buf && offset) || 0;
	const b = buf || new Array(16);
	options = options || {};
	let node = options.node || _nodeId;
	let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
	// specified.  We do this lazily to minimize issues related to insufficient
	// system entropy.  See #189

	if (node == null || clockseq == null) {
		const seedBytes = options.random || (options.rng || rng)();

		if (node == null) {
			// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
			node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
		}

		if (clockseq == null) {
			// Per 4.2.2, randomize (14 bit) clockseq
			clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;
		}
	} // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

	let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
	// cycle to simulate higher resolution clock

	let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

	const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

	if (dt < 0 && options.clockseq === undefined) {
		clockseq = (clockseq + 1) & 0x3fff;
	} // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	// time interval

	if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
		nsecs = 0;
	} // Per 4.2.1.2 Throw error if too many uuids are requested

	if (nsecs >= 10000) {
		throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
	}

	_lastMSecs = msecs;
	_lastNSecs = nsecs;
	_clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

	msecs += 12219292800000; // `time_low`

	const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	b[i++] = (tl >>> 24) & 0xff;
	b[i++] = (tl >>> 16) & 0xff;
	b[i++] = (tl >>> 8) & 0xff;
	b[i++] = tl & 0xff; // `time_mid`

	const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;
	b[i++] = (tmh >>> 8) & 0xff;
	b[i++] = tmh & 0xff; // `time_high_and_version`

	b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version

	b[i++] = (tmh >>> 16) & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

	b[i++] = (clockseq >>> 8) | 0x80; // `clock_seq_low`

	b[i++] = clockseq & 0xff; // `node`

	for (let n = 0; n < 6; ++n) {
		b[i + n] = node[n];
	}

	return buf || unsafeStringify(b);
}

function parse(uuid) {
	if (!validate$1(uuid)) {
		throw TypeError("Invalid UUID");
	}

	let v;
	const arr = new Uint8Array(16); // Parse ########-....-....-....-............

	arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
	arr[1] = (v >>> 16) & 0xff;
	arr[2] = (v >>> 8) & 0xff;
	arr[3] = v & 0xff; // Parse ........-####-....-....-............

	arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
	arr[5] = v & 0xff; // Parse ........-....-####-....-............

	arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
	arr[7] = v & 0xff; // Parse ........-....-....-####-............

	arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
	arr[9] = v & 0xff; // Parse ........-....-....-....-############
	// (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

	arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff;
	arr[11] = (v / 0x100000000) & 0xff;
	arr[12] = (v >>> 24) & 0xff;
	arr[13] = (v >>> 16) & 0xff;
	arr[14] = (v >>> 8) & 0xff;
	arr[15] = v & 0xff;
	return arr;
}

function stringToBytes(str) {
	str = unescape(encodeURIComponent(str)); // UTF8 escape

	const bytes = [];

	for (let i = 0; i < str.length; ++i) {
		bytes.push(str.charCodeAt(i));
	}

	return bytes;
}

const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
const URL$2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
	function generateUUID(value, namespace, buf, offset) {
		var _namespace;

		if (typeof value === "string") {
			value = stringToBytes(value);
		}

		if (typeof namespace === "string") {
			namespace = parse(namespace);
		}

		if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
			throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
		} // Compute hash of namespace and value, Per 4.3
		// Future: Use spread syntax when supported on all platforms, e.g. `bytes =
		// hashfunc([...namespace, ... value])`

		let bytes = new Uint8Array(16 + value.length);
		bytes.set(namespace);
		bytes.set(value, namespace.length);
		bytes = hashfunc(bytes);
		bytes[6] = (bytes[6] & 0x0f) | version;
		bytes[8] = (bytes[8] & 0x3f) | 0x80;

		if (buf) {
			offset = offset || 0;

			for (let i = 0; i < 16; ++i) {
				buf[offset + i] = bytes[i];
			}

			return buf;
		}

		return unsafeStringify(bytes);
	} // Function#name is not settable on some platforms (#270)

	try {
		generateUUID.name = name; // eslint-disable-next-line no-empty
	} catch (err) {} // For CommonJS default export support

	generateUUID.DNS = DNS;
	generateUUID.URL = URL$2;
	return generateUUID;
}

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
	if (typeof bytes === "string") {
		const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

		bytes = new Uint8Array(msg.length);

		for (let i = 0; i < msg.length; ++i) {
			bytes[i] = msg.charCodeAt(i);
		}
	}

	return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */

function md5ToHexEncodedArray(input) {
	const output = [];
	const length32 = input.length * 32;
	const hexTab = "0123456789abcdef";

	for (let i = 0; i < length32; i += 8) {
		const x = (input[i >> 5] >>> i % 32) & 0xff;
		const hex = parseInt(hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f), 16);
		output.push(hex);
	}

	return output;
}
/**
 * Calculate output length with padding and bit length
 */

function getOutputLength(inputLength8) {
	return (((inputLength8 + 64) >>> 9) << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */

function wordsToMd5(x, len) {
	/* append padding */
	x[len >> 5] |= 0x80 << len % 32;
	x[getOutputLength(len) - 1] = len;
	let a = 1732584193;
	let b = -271733879;
	let c = -1732584194;
	let d = 271733878;

	for (let i = 0; i < x.length; i += 16) {
		const olda = a;
		const oldb = b;
		const oldc = c;
		const oldd = d;
		a = md5ff(a, b, c, d, x[i], 7, -680876936);
		d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
		c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
		b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
		a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
		d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
		c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
		b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
		a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
		d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
		c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
		b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
		a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
		d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
		c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
		b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
		a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
		d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
		c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
		b = md5gg(b, c, d, a, x[i], 20, -373897302);
		a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
		d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
		c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
		b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
		a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
		d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
		c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
		b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
		a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
		d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
		c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
		b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
		a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
		d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
		c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
		b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
		a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
		d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
		c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
		b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
		a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
		d = md5hh(d, a, b, c, x[i], 11, -358537222);
		c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
		b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
		a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
		d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
		c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
		b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
		a = md5ii(a, b, c, d, x[i], 6, -198630844);
		d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
		c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
		b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
		a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
		d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
		c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
		b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
		a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
		d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
		c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
		b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
		a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
		d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
		c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
		b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
		a = safeAdd(a, olda);
		b = safeAdd(b, oldb);
		c = safeAdd(c, oldc);
		d = safeAdd(d, oldd);
	}

	return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */

function bytesToWords(input) {
	if (input.length === 0) {
		return [];
	}

	const length8 = input.length * 8;
	const output = new Uint32Array(getOutputLength(length8));

	for (let i = 0; i < length8; i += 8) {
		output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
	}

	return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */

function safeAdd(x, y) {
	const lsw = (x & 0xffff) + (y & 0xffff);
	const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	return (msw << 16) | (lsw & 0xffff);
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */

function bitRotateLeft(num, cnt) {
	return (num << cnt) | (num >>> (32 - cnt));
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */

function md5cmn(q, a, b, x, s, t) {
	return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
	return md5cmn((b & c) | (~b & d), a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
	return md5cmn((b & d) | (c & ~d), a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
	return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
	return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

const v3 = v35("v3", 0x30, md5);
var v3$1 = v3;

const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
	randomUUID,
};

function v4(options, buf, offset) {
	if (native.randomUUID && !buf && !options) {
		return native.randomUUID();
	}

	options = options || {};
	const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

	rnds[6] = (rnds[6] & 0x0f) | 0x40;
	rnds[8] = (rnds[8] & 0x3f) | 0x80; // Copy bytes to buffer, if provided

	if (buf) {
		offset = offset || 0;

		for (let i = 0; i < 16; ++i) {
			buf[offset + i] = rnds[i];
		}

		return buf;
	}

	return unsafeStringify(rnds);
}

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
	switch (s) {
		case 0:
			return (x & y) ^ (~x & z);

		case 1:
			return x ^ y ^ z;

		case 2:
			return (x & y) ^ (x & z) ^ (y & z);

		case 3:
			return x ^ y ^ z;
	}
}

function ROTL(x, n) {
	return (x << n) | (x >>> (32 - n));
}

function sha1(bytes) {
	const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
	const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

	if (typeof bytes === "string") {
		const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

		bytes = [];

		for (let i = 0; i < msg.length; ++i) {
			bytes.push(msg.charCodeAt(i));
		}
	} else if (!Array.isArray(bytes)) {
		// Convert Array-like to Array
		bytes = Array.prototype.slice.call(bytes);
	}

	bytes.push(0x80);
	const l = bytes.length / 4 + 2;
	const N = Math.ceil(l / 16);
	const M = new Array(N);

	for (let i = 0; i < N; ++i) {
		const arr = new Uint32Array(16);

		for (let j = 0; j < 16; ++j) {
			arr[j] = (bytes[i * 64 + j * 4] << 24) | (bytes[i * 64 + j * 4 + 1] << 16) | (bytes[i * 64 + j * 4 + 2] << 8) | bytes[i * 64 + j * 4 + 3];
		}

		M[i] = arr;
	}

	M[N - 1][14] = ((bytes.length - 1) * 8) / Math.pow(2, 32);
	M[N - 1][14] = Math.floor(M[N - 1][14]);
	M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;

	for (let i = 0; i < N; ++i) {
		const W = new Uint32Array(80);

		for (let t = 0; t < 16; ++t) {
			W[t] = M[i][t];
		}

		for (let t = 16; t < 80; ++t) {
			W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
		}

		let a = H[0];
		let b = H[1];
		let c = H[2];
		let d = H[3];
		let e = H[4];

		for (let t = 0; t < 80; ++t) {
			const s = Math.floor(t / 20);
			const T = (ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t]) >>> 0;
			e = d;
			d = c;
			c = ROTL(b, 30) >>> 0;
			b = a;
			a = T;
		}

		H[0] = (H[0] + a) >>> 0;
		H[1] = (H[1] + b) >>> 0;
		H[2] = (H[2] + c) >>> 0;
		H[3] = (H[3] + d) >>> 0;
		H[4] = (H[4] + e) >>> 0;
	}

	return [(H[0] >> 24) & 0xff, (H[0] >> 16) & 0xff, (H[0] >> 8) & 0xff, H[0] & 0xff, (H[1] >> 24) & 0xff, (H[1] >> 16) & 0xff, (H[1] >> 8) & 0xff, H[1] & 0xff, (H[2] >> 24) & 0xff, (H[2] >> 16) & 0xff, (H[2] >> 8) & 0xff, H[2] & 0xff, (H[3] >> 24) & 0xff, (H[3] >> 16) & 0xff, (H[3] >> 8) & 0xff, H[3] & 0xff, (H[4] >> 24) & 0xff, (H[4] >> 16) & 0xff, (H[4] >> 8) & 0xff, H[4] & 0xff];
}

const v5 = v35("v5", 0x50, sha1);
var v5$1 = v5;

var nil = "00000000-0000-0000-0000-000000000000";

function version$1(uuid) {
	if (!validate$1(uuid)) {
		throw TypeError("Invalid UUID");
	}

	return parseInt(uuid.slice(14, 15), 16);
}

var esmBrowser = /*#__PURE__*/ Object.freeze({
	__proto__: null,
	v1: v1,
	v3: v3$1,
	v4: v4,
	v5: v5$1,
	NIL: nil,
	version: version$1,
	validate: validate$1,
	stringify: stringify,
	parse: parse,
});

var jose_1 = cjs;

var uuid_1 = /*@__PURE__*/ getAugmentedNamespace(esmBrowser);

const SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
const PREFERRED_SIGNING_ALG = ["ES256", "RS256"];
const EVENTS = {
	ERROR: "error",
	LOGIN: "login",
	LOGOUT: "logout",
	NEW_REFRESH_TOKEN: "newRefreshToken",
	SESSION_EXPIRED: "sessionExpired",
	SESSION_EXTENDED: "sessionExtended",
	SESSION_RESTORED: "sessionRestore",
	TIMEOUT_SET: "timeoutSet",
};
const REFRESH_BEFORE_EXPIRATION_SECONDS = 5;
const SCOPE_OPENID = "openid";
const SCOPE_OFFLINE = "offline_access";
const SCOPE_WEBID = "webid";
const DEFAULT_SCOPES = [SCOPE_OPENID, SCOPE_OFFLINE, SCOPE_WEBID].join(" ");

class AggregateHandler {
	constructor(handleables) {
		this.handleables = handleables;
	}
	async getProperHandler(params) {
		const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));
		for (let i = 0; i < canHandleList.length; i += 1) {
			if (canHandleList[i]) {
				return this.handleables[i];
			}
		}
		return null;
	}
	async canHandle(...params) {
		return (await this.getProperHandler(params)) !== null;
	}
	async handle(...params) {
		const handler = await this.getProperHandler(params);
		if (handler) {
			return handler.handle(...params);
		}
		throw new Error(
			`[${this.constructor.name}] cannot find a suitable handler for: ${params
				.map((param) => {
					try {
						return JSON.stringify(param);
					} catch (err) {
						return param.toString();
					}
				})
				.join(", ")}`
		);
	}
}

async function fetchJwks(jwksIri, issuerIri) {
	const jwksResponse = await nodePonyfill.fetch(jwksIri);
	if (jwksResponse.status !== 200) {
		throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
	}
	let jwk;
	try {
		jwk = (await jwksResponse.json()).keys[0];
	} catch (e) {
		throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
	}
	return jwk;
}
async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
	const jwk = await fetchJwks(jwksIri, issuerIri);
	let payload;
	try {
		const { payload: verifiedPayload } = await jose_1.jwtVerify(idToken, await jose_1.importJWK(jwk), {
			issuer: issuerIri,
			audience: clientId,
		});
		payload = verifiedPayload;
	} catch (e) {
		throw new Error(`Token verification failed: ${e.stack}`);
	}
	if (typeof payload.webid === "string") {
		return payload.webid;
	}
	if (typeof payload.sub !== "string") {
		throw new Error(`The token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
	}
	try {
		new URL(payload.sub);
		return payload.sub;
	} catch (e) {
		throw new Error(`The token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
	}
}

function isSupportedTokenType(token) {
	return typeof token === "string" && ["DPoP", "Bearer"].includes(token);
}

const USER_SESSION_PREFIX = "solidClientAuthenticationUser";

function isValidUrl(url) {
	try {
		new URL(url);
		return true;
	} catch (_a) {
		return false;
	}
}
function determineSigningAlg(supported, preferred) {
	var _a;
	return (_a = preferred.find((signingAlg) => {
		return supported.includes(signingAlg);
	})) !== null && _a !== void 0
		? _a
		: null;
}
function determineClientType(options, issuerConfig) {
	if (options.clientId !== undefined && !isValidUrl(options.clientId)) {
		return "static";
	}
	if (issuerConfig.scopesSupported.includes("webid") && options.clientId !== undefined && isValidUrl(options.clientId)) {
		return "solid-oidc";
	}
	return "dynamic";
}
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
	const clientType = determineClientType(options, issuerConfig);
	if (clientType === "dynamic") {
		return clientRegistrar.getClient(
			{
				sessionId: options.sessionId,
				clientName: options.clientName,
				redirectUrl: options.redirectUrl,
			},
			issuerConfig
		);
	}
	await storageUtility.setForUser(options.sessionId, {
		clientId: options.clientId,
	});
	if (options.clientSecret) {
		await storageUtility.setForUser(options.sessionId, {
			clientSecret: options.clientSecret,
		});
	}
	if (options.clientName) {
		await storageUtility.setForUser(options.sessionId, {
			clientName: options.clientName,
		});
	}
	return {
		clientId: options.clientId,
		clientSecret: options.clientSecret,
		clientName: options.clientName,
		clientType,
	};
}

async function getSessionIdFromOauthState(storageUtility, oauthState) {
	return storageUtility.getForUser(oauthState, "sessionId");
}
async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
	try {
		const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
			storageUtility.getForUser(sessionId, "issuer", {
				errorIfNull: true,
			}),
			storageUtility.getForUser(sessionId, "codeVerifier"),
			storageUtility.getForUser(sessionId, "redirectUrl"),
			storageUtility.getForUser(sessionId, "dpop", { errorIfNull: true }),
		]);
		await storageUtility.deleteForUser(sessionId, "codeVerifier");
		const issuerConfig = await configFetcher.fetchConfig(issuerIri);
		return {
			codeVerifier,
			redirectUrl: storedRedirectIri,
			issuerConfig,
			dpop: dpop === "true",
		};
	} catch (e) {
		throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);
	}
}
async function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {
	if (refreshToken !== undefined) {
		await storageUtility.setForUser(sessionId, { refreshToken }, { secure });
	}
	if (webId !== undefined) {
		await storageUtility.setForUser(sessionId, { webId }, { secure });
	}
	if (isLoggedIn !== undefined) {
		await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });
	}
	if (dpopKey !== undefined) {
		await storageUtility.setForUser(
			sessionId,
			{
				publicKey: JSON.stringify(dpopKey.publicKey),
				privateKey: JSON.stringify(await jose_1.exportJWK(dpopKey.privateKey)),
			},
			{ secure }
		);
	}
}
class StorageUtility$1 {
	constructor(secureStorage, insecureStorage) {
		this.secureStorage = secureStorage;
		this.insecureStorage = insecureStorage;
	}
	getKey(userId) {
		return `solidClientAuthenticationUser:${userId}`;
	}
	async getUserData(userId, secure) {
		const stored = await (secure ? this.secureStorage : this.insecureStorage).get(this.getKey(userId));
		if (stored === undefined) {
			return {};
		}
		try {
			return JSON.parse(stored);
		} catch (err) {
			throw new Error(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
		}
	}
	async setUserData(userId, data, secure) {
		await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
	}
	async get(key, options) {
		const value = await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).get(key);
		if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
			throw new Error(`[${key}] is not stored`);
		}
		return value;
	}
	async set(key, value, options) {
		return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
	}
	async delete(key, options) {
		return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
	}
	async getForUser(userId, key, options) {
		const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
		let value;
		if (!userData || !userData[key]) {
			value = undefined;
		}
		value = userData[key];
		if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
			throw new Error(`Field [${key}] for user [${userId}] is not stored`);
		}
		return value || undefined;
	}
	async setForUser(userId, values, options) {
		let userData;
		try {
			userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
		} catch (_a) {
			userData = {};
		}
		await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);
	}
	async deleteForUser(userId, key, options) {
		const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
		delete userData[key];
		await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
	}
	async deleteAllUserData(userId, options) {
		await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
	}
}

class InMemoryStorage {
	constructor() {
		this.map = {};
	}
	async get(key) {
		return this.map[key] || undefined;
	}
	async set(key, value) {
		this.map[key] = value;
	}
	async delete(key) {
		delete this.map[key];
	}
}

class ConfigurationError extends Error {
	constructor(message) {
		super(message);
	}
}

class NotImplementedError extends Error {
	constructor(methodName) {
		super(`[${methodName}] is not implemented`);
	}
}

class InvalidResponseError extends Error {
	constructor(missingFields) {
		super(`Invalid response from OIDC provider: missing fields ${missingFields}`);
		this.missingFields = missingFields;
	}
}

class OidcProviderError extends Error {
	constructor(message, error, errorDescription) {
		super(message);
		this.error = error;
		this.errorDescription = errorDescription;
	}
}

function normalizeHTU(audience) {
	const audienceUrl = new URL(audience);
	return new URL(audienceUrl.pathname, audienceUrl.origin).toString();
}
async function createDpopHeader(audience, method, dpopKey) {
	return new jose_1.SignJWT({
		htu: normalizeHTU(audience),
		htm: method.toUpperCase(),
		jti: uuid_1.v4(),
	})
		.setProtectedHeader({
			alg: PREFERRED_SIGNING_ALG[0],
			jwk: dpopKey.publicKey,
			typ: "dpop+jwt",
		})
		.setIssuedAt()
		.sign(dpopKey.privateKey, {});
}
async function generateDpopKeyPair() {
	const { privateKey, publicKey } = await jose_1.generateKeyPair(PREFERRED_SIGNING_ALG[0]);
	const dpopKeyPair = {
		privateKey,
		publicKey: await jose_1.exportJWK(publicKey),
	};
	[dpopKeyPair.publicKey.alg] = PREFERRED_SIGNING_ALG;
	return dpopKeyPair;
}

const DEFAULT_EXPIRATION_TIME_SECONDS = 600;
function isExpectedAuthError(statusCode) {
	return [401, 403].includes(statusCode);
}
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
	var _a;
	const headers = new nodePonyfill.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
	headers.set("Authorization", `DPoP ${authToken}`);
	headers.set("DPoP", await createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey));
	return {
		...defaultOptions,
		headers,
	};
}
async function buildAuthenticatedHeaders(targetUrl, authToken, dpopKey, defaultOptions) {
	if (dpopKey !== undefined) {
		return buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions);
	}
	const headers = new nodePonyfill.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
	headers.set("Authorization", `Bearer ${authToken}`);
	return {
		...defaultOptions,
		headers,
	};
}
async function makeAuthenticatedRequest(unauthFetch, accessToken, url, defaultRequestInit, dpopKey) {
	return unauthFetch(url, await buildAuthenticatedHeaders(url.toString(), accessToken, dpopKey, defaultRequestInit));
}
async function refreshAccessToken(refreshOptions, dpopKey, eventEmitter) {
	var _a;
	const tokenSet = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
	eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.SESSION_EXTENDED, (_a = tokenSet.expiresIn) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRATION_TIME_SECONDS);
	if (typeof tokenSet.refreshToken === "string") {
		eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
	}
	return {
		accessToken: tokenSet.accessToken,
		refreshToken: tokenSet.refreshToken,
		expiresIn: tokenSet.expiresIn,
	};
}
const computeRefreshDelay = (expiresIn) => {
	if (expiresIn !== undefined) {
		return expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS > 0 ? expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS : expiresIn;
	}
	return DEFAULT_EXPIRATION_TIME_SECONDS;
};
async function buildAuthenticatedFetch(unauthFetch, accessToken, options) {
	var _a;
	let currentAccessToken = accessToken;
	let latestTimeout;
	const currentRefreshOptions = options === null || options === void 0 ? void 0 : options.refreshOptions;
	if (currentRefreshOptions !== undefined) {
		const proactivelyRefreshToken = async () => {
			var _a, _b, _c, _d;
			try {
				const { accessToken: refreshedAccessToken, refreshToken, expiresIn } = await refreshAccessToken(currentRefreshOptions, options.dpopKey, options.eventEmitter);
				currentAccessToken = refreshedAccessToken;
				if (refreshToken !== undefined) {
					currentRefreshOptions.refreshToken = refreshToken;
				}
				clearTimeout(latestTimeout);
				latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(expiresIn) * 1000);
				(_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
			} catch (e) {
				if (e instanceof OidcProviderError) {
					(_b = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _b === void 0 ? void 0 : _b.emit(EVENTS.ERROR, e.error, e.errorDescription);
					(_c = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _c === void 0 ? void 0 : _c.emit(EVENTS.SESSION_EXPIRED);
				}
				if (e instanceof InvalidResponseError && e.missingFields.includes("access_token")) {
					(_d = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _d === void 0 ? void 0 : _d.emit(EVENTS.SESSION_EXPIRED);
				}
			}
		};
		latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(options.expiresIn) * 1000);
		(_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
	} else if (options !== undefined && options.eventEmitter !== undefined) {
		const expirationTimeout = setTimeout(() => {
			options.eventEmitter.emit(EVENTS.SESSION_EXPIRED);
		}, computeRefreshDelay(options.expiresIn) * 1000);
		options.eventEmitter.emit(EVENTS.TIMEOUT_SET, expirationTimeout);
	}
	return async (url, requestInit) => {
		let response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, url, requestInit, options === null || options === void 0 ? void 0 : options.dpopKey);
		const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
		if (response.ok || failedButNotExpectedAuthError) {
			return response;
		}
		const hasBeenRedirected = response.url !== url;
		if (hasBeenRedirected && (options === null || options === void 0 ? void 0 : options.dpopKey) !== undefined) {
			response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, response.url, requestInit, options.dpopKey);
		}
		return response;
	};
}

const StorageUtilityGetResponse = "getResponse";
const StorageUtilityMock = {
	get: async (key, options) => StorageUtilityGetResponse,
	set: async (key, value) => {},
	delete: async (key) => {},
	getForUser: async (userId, key, options) => StorageUtilityGetResponse,
	setForUser: async (userId, values, options) => {},
	deleteForUser: async (userId, key, options) => {},
	deleteAllUserData: async (userId, options) => {},
};
const mockStorage = (stored) => {
	const store = stored;
	return {
		get: async (key) => {
			if (store[key] === undefined) {
				return undefined;
			}
			if (typeof store[key] === "string") {
				return store[key];
			}
			return JSON.stringify(store[key]);
		},
		set: async (key, value) => {
			store[key] = value;
		},
		delete: async (key) => {
			delete store[key];
		},
	};
};
const mockStorageUtility = (stored, isSecure = false) => {
	if (isSecure) {
		return new StorageUtility$1(mockStorage(stored), mockStorage({}));
	}
	return new StorageUtility$1(mockStorage({}), mockStorage(stored));
};

var AggregateHandler_1 = AggregateHandler;
var ConfigurationError_1 = ConfigurationError;
var DEFAULT_SCOPES_1 = DEFAULT_SCOPES;
var EVENTS_1 = EVENTS;
var InMemoryStorage_1 = InMemoryStorage;
var InvalidResponseError_1 = InvalidResponseError;
var NotImplementedError_1 = NotImplementedError;
var OidcProviderError_1 = OidcProviderError;
var PREFERRED_SIGNING_ALG_1 = PREFERRED_SIGNING_ALG;
var REFRESH_BEFORE_EXPIRATION_SECONDS_1 = REFRESH_BEFORE_EXPIRATION_SECONDS;
var SOLID_CLIENT_AUTHN_KEY_PREFIX_1 = SOLID_CLIENT_AUTHN_KEY_PREFIX;
var StorageUtility_1 = StorageUtility$1;
var StorageUtilityGetResponse_1 = StorageUtilityGetResponse;
var StorageUtilityMock_1 = StorageUtilityMock;
var USER_SESSION_PREFIX_1 = USER_SESSION_PREFIX;
var buildAuthenticatedFetch_1 = buildAuthenticatedFetch;
var createDpopHeader_1 = createDpopHeader;
var determineSigningAlg_1 = determineSigningAlg;
var fetchJwks_1 = fetchJwks;
var generateDpopKeyPair_1 = generateDpopKeyPair;
var getSessionIdFromOauthState_1 = getSessionIdFromOauthState;
var getWebidFromTokenPayload_1 = getWebidFromTokenPayload;
var handleRegistration_1 = handleRegistration;
var isSupportedTokenType_1 = isSupportedTokenType;
var loadOidcContextFromStorage_1 = loadOidcContextFromStorage;
var mockStorage_1 = mockStorage;
var mockStorageUtility_1 = mockStorageUtility;
var saveSessionInfoToStorage_1 = saveSessionInfoToStorage;

var dist$1 = {
	AggregateHandler: AggregateHandler_1,
	ConfigurationError: ConfigurationError_1,
	DEFAULT_SCOPES: DEFAULT_SCOPES_1,
	EVENTS: EVENTS_1,
	InMemoryStorage: InMemoryStorage_1,
	InvalidResponseError: InvalidResponseError_1,
	NotImplementedError: NotImplementedError_1,
	OidcProviderError: OidcProviderError_1,
	PREFERRED_SIGNING_ALG: PREFERRED_SIGNING_ALG_1,
	REFRESH_BEFORE_EXPIRATION_SECONDS: REFRESH_BEFORE_EXPIRATION_SECONDS_1,
	SOLID_CLIENT_AUTHN_KEY_PREFIX: SOLID_CLIENT_AUTHN_KEY_PREFIX_1,
	StorageUtility: StorageUtility_1,
	StorageUtilityGetResponse: StorageUtilityGetResponse_1,
	StorageUtilityMock: StorageUtilityMock_1,
	USER_SESSION_PREFIX: USER_SESSION_PREFIX_1,
	buildAuthenticatedFetch: buildAuthenticatedFetch_1,
	createDpopHeader: createDpopHeader_1,
	determineSigningAlg: determineSigningAlg_1,
	fetchJwks: fetchJwks_1,
	generateDpopKeyPair: generateDpopKeyPair_1,
	getSessionIdFromOauthState: getSessionIdFromOauthState_1,
	getWebidFromTokenPayload: getWebidFromTokenPayload_1,
	handleRegistration: handleRegistration_1,
	isSupportedTokenType: isSupportedTokenType_1,
	loadOidcContextFromStorage: loadOidcContextFromStorage_1,
	mockStorage: mockStorage_1,
	mockStorageUtility: mockStorageUtility_1,
	saveSessionInfoToStorage: saveSessionInfoToStorage_1,
};

class StorageUtilityNode extends dist$1.StorageUtility {
	constructor(secureStorage, insecureStorage) {
		super(secureStorage, insecureStorage);
	}
}
var _default$a = StorageUtilityNode;

var StorageUtility = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$a,
	},
	"__esModule",
	{ value: true }
);

class ClientAuthentication {
	constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager) {
		this.loginHandler = loginHandler;
		this.redirectHandler = redirectHandler;
		this.logoutHandler = logoutHandler;
		this.sessionInfoManager = sessionInfoManager;
		this.login = async (sessionId, options, eventEmitter) => {
			var _a, _b;
			await this.sessionInfoManager.register(sessionId);
			const loginReturn = await this.loginHandler.handle({
				sessionId,
				oidcIssuer: options.oidcIssuer,
				redirectUrl: options.redirectUrl ? new URL(options.redirectUrl).href : undefined,
				clientId: options.clientId,
				clientSecret: options.clientSecret,
				clientName: (_a = options.clientName) !== null && _a !== void 0 ? _a : options.clientId,
				refreshToken: options.refreshToken,
				handleRedirect: options.handleRedirect,
				tokenType: (_b = options.tokenType) !== null && _b !== void 0 ? _b : "DPoP",
				eventEmitter,
			});
			if (loginReturn !== undefined) {
				this.fetch = loginReturn.fetch;
				return {
					isLoggedIn: true,
					sessionId,
					webId: loginReturn.webId,
				};
			}
			return undefined;
		};
		this.fetch = nodePonyfill.fetch;
		this.logout = async (sessionId) => {
			await this.logoutHandler.handle(sessionId);
			this.fetch = nodePonyfill.fetch;
		};
		this.getSessionInfo = async (sessionId) => {
			return this.sessionInfoManager.get(sessionId);
		};
		this.getSessionIdAll = async () => {
			return this.sessionInfoManager.getRegisteredSessionIdAll();
		};
		this.registerSession = async (sessionId) => {
			return this.sessionInfoManager.register(sessionId);
		};
		this.clearSessionAll = async () => {
			return this.sessionInfoManager.clearAll();
		};
		this.getAllSessionInfo = async () => {
			return this.sessionInfoManager.getAll();
		};
		this.handleIncomingRedirect = async (url, eventEmitter) => {
			const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
			this.fetch = redirectInfo.fetch;
			return {
				isLoggedIn: redirectInfo.isLoggedIn,
				webId: redirectInfo.webId,
				sessionId: redirectInfo.sessionId,
			};
		};
	}
}
var _default$9 = ClientAuthentication;

var ClientAuthentication_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$9,
	},
	"__esModule",
	{ value: true }
);

function hasIssuer(options) {
	return typeof options.oidcIssuer === "string";
}
class OidcLoginHandler {
	constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
		this.storageUtility = storageUtility;
		this.oidcHandler = oidcHandler;
		this.issuerConfigFetcher = issuerConfigFetcher;
		this.clientRegistrar = clientRegistrar;
	}
	async canHandle(options) {
		return hasIssuer(options);
	}
	async handle(options) {
		var _a;
		if (!hasIssuer(options)) {
			throw new dist$1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
		}
		const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
		const clientInfo = await (0, dist$1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);
		const oidcOptions = {
			issuer: issuerConfig.issuer,
			dpop: options.tokenType.toLowerCase() === "dpop",
			redirectUrl: options.redirectUrl,
			issuerConfiguration: issuerConfig,
			client: clientInfo,
			sessionId: options.sessionId,
			refreshToken: (_a = options.refreshToken) !== null && _a !== void 0 ? _a : await this.storageUtility.getForUser(options.sessionId, "refreshToken"),
			handleRedirect: options.handleRedirect,
			eventEmitter: options.eventEmitter,
		};
		return this.oidcHandler.handle(oidcOptions);
	}
}
var _default$8 = OidcLoginHandler;

var OidcLoginHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$8,
	},
	"__esModule",
	{ value: true }
);

class AggregateOidcHandler extends dist$1.AggregateHandler {
	constructor(oidcLoginHandlers) {
		super(oidcLoginHandlers);
	}
}
var _default$7 = AggregateOidcHandler;

var AggregateOidcHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$7,
	},
	"__esModule",
	{ value: true }
);

const { format: format$3 } = util_1__default["default"];

class OPError$5 extends Error {
	constructor({ error_description, error, error_uri, session_state, state, scope }, response) {
		super(!error_description ? error : `${error} (${error_description})`);

		Object.assign(this, { error }, error_description && { error_description }, error_uri && { error_uri }, state && { state }, scope && { scope }, session_state && { session_state });

		if (response) {
			Object.defineProperty(this, "response", {
				value: response,
			});
		}

		this.name = this.constructor.name;
		Error.captureStackTrace(this, this.constructor);
	}
}

class RPError$8 extends Error {
	constructor(...args) {
		if (typeof args[0] === "string") {
			super(format$3(...args));
		} else {
			const { message, printf, response, ...rest } = args[0];
			if (printf) {
				super(format$3(...printf));
			} else {
				super(message);
			}
			Object.assign(this, rest);
			if (response) {
				Object.defineProperty(this, "response", {
					value: response,
				});
			}
		}

		this.name = this.constructor.name;
		Error.captureStackTrace(this, this.constructor);
	}
}

var errors = {
	OPError: OPError$5,
	RPError: RPError$8,
};

const [major$1, minor$1] = process.version
	.substr(1)
	.split(".")
	.map((x) => parseInt(x, 10));
const xofOutputLength = major$1 > 12 || (major$1 === 12 && minor$1 >= 8);
const shake256 = xofOutputLength && crypto_1__default["default"].getHashes().includes("shake256");

var shake256_1 = shake256;

const { strict: assert$2 } = require$$0__default["default"];
const { createHash: createHash$1 } = crypto_1__default["default"];
const { format: format$2 } = util_1__default["default"];

let encode$1;
if (Buffer.isEncoding("base64url")) {
	encode$1 = (input) => input.toString("base64url");
} else {
	const fromBase64 = (base64) => base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	encode$1 = (input) => fromBase64(input.toString("base64"));
}

/** SPECIFICATION
 * Its (_hash) value is the base64url encoding of the left-most half of the hash of the octets of
 * the ASCII representation of the token value, where the hash algorithm used is the hash algorithm
 * used in the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is
 * RS256, hash the token value with SHA-256, then take the left-most 128 bits and base64url encode
 * them. The _hash value is a case sensitive string.
 */

/**
 * @name getHash
 * @api private
 *
 * returns the sha length based off the JOSE alg heade value, defaults to sha256
 *
 * @param token {String} token value to generate the hash from
 * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)
 * @param [crv] {String} For EdDSA the curve decides what hash algorithm is used. Required for EdDSA
 */
function getHash(alg, crv) {
	switch (alg) {
		case "HS256":
		case "RS256":
		case "PS256":
		case "ES256":
		case "ES256K":
			return createHash$1("sha256");

		case "HS384":
		case "RS384":
		case "PS384":
		case "ES384":
			return createHash$1("sha384");

		case "HS512":
		case "RS512":
		case "PS512":
		case "ES512":
			return createHash$1("sha512");

		case "EdDSA":
			switch (crv) {
				case "Ed25519":
					return createHash$1("sha512");
				case "Ed448":
					if (!shake256_1) {
						throw new TypeError("Ed448 *_hash calculation is not supported in your Node.js runtime version");
					}

					return createHash$1("shake256", { outputLength: 114 });
				default:
					throw new TypeError("unrecognized or invalid EdDSA curve provided");
			}

		default:
			throw new TypeError("unrecognized or invalid JWS algorithm provided");
	}
}

function generate(token, alg, crv) {
	const digest = getHash(alg, crv).update(token).digest();
	return encode$1(digest.slice(0, digest.length / 2));
}

function validate(names, actual, source, alg, crv) {
	if (typeof names.claim !== "string" || !names.claim) {
		throw new TypeError("names.claim must be a non-empty string");
	}

	if (typeof names.source !== "string" || !names.source) {
		throw new TypeError("names.source must be a non-empty string");
	}

	assert$2(typeof actual === "string" && actual, `${names.claim} must be a non-empty string`);
	assert$2(typeof source === "string" && source, `${names.source} must be a non-empty string`);

	let expected;
	let msg;
	try {
		expected = generate(source, alg, crv);
	} catch (err) {
		msg = format$2("%s could not be validated (%s)", names.claim, err.message);
	}

	msg = msg || format$2("%s mismatch, expected %s, got: %s", names.claim, expected, actual);

	assert$2.equal(expected, actual, msg);
}

var lib$1 = {
	validate,
	generate,
};

var is_key_object = util_1__default["default"].types.isKeyObject || ((obj) => obj && obj instanceof crypto_1__default["default"].KeyObject);

let encode;
if (Buffer.isEncoding("base64url")) {
	encode = (input, encoding = "utf8") => Buffer.from(input, encoding).toString("base64url");
} else {
	const fromBase64 = (base64) => base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	encode = (input, encoding = "utf8") => fromBase64(Buffer.from(input, encoding).toString("base64"));
}

const decode = (input) => Buffer.from(input, "base64");

var decode_1 = decode;
var encode_1 = encode;

var base64url = {
	decode: decode_1,
	encode: encode_1,
};

var decode_jwt = (token) => {
	if (typeof token !== "string" || !token) {
		throw new TypeError("JWT must be a string");
	}

	const { 0: header, 1: payload, 2: signature, length } = token.split(".");

	if (length === 5) {
		throw new TypeError("encrypted JWTs cannot be decoded");
	}

	if (length !== 3) {
		throw new Error("JWTs must have three components");
	}

	try {
		return {
			header: JSON.parse(base64url.decode(header)),
			payload: JSON.parse(base64url.decode(payload)),
			signature,
		};
	} catch (err) {
		throw new Error("JWT is malformed");
	}
};

var is_plain_object = (a) => !!a && a.constructor === Object;

function defaults(deep, target, ...sources) {
	for (const source of sources) {
		if (!is_plain_object(source)) {
			continue;
		}
		for (const [key, value] of Object.entries(source)) {
			/* istanbul ignore if */
			if (key === "__proto__" || key === "constructor") {
				continue;
			}
			if (typeof target[key] === "undefined" && typeof value !== "undefined") {
				target[key] = value;
			}

			if (deep && is_plain_object(target[key]) && is_plain_object(value)) {
				defaults(true, target[key], value);
			}
		}
	}

	return target;
}

var defaults_1 = defaults.bind(undefined, false);
var deep = defaults.bind(undefined, true);
defaults_1.deep = deep;

const REGEXP = /(\w+)=("[^"]*")/g;

var www_authenticate_parser = (wwwAuthenticate) => {
	const params = {};
	try {
		while (REGEXP.exec(wwwAuthenticate) !== null) {
			if (RegExp.$1 && RegExp.$2) {
				params[RegExp.$1] = RegExp.$2.slice(1, -1);
			}
		}
	} catch (err) {}

	return params;
};

function assertSigningAlgValuesSupport$1(endpoint, issuer, properties) {
	if (!issuer[`${endpoint}_endpoint`]) return;

	const eam = `${endpoint}_endpoint_auth_method`;
	const easa = `${endpoint}_endpoint_auth_signing_alg`;
	const easavs = `${endpoint}_endpoint_auth_signing_alg_values_supported`;

	if (properties[eam] && properties[eam].endsWith("_jwt") && !properties[easa] && !issuer[easavs]) {
		throw new TypeError(`${easavs} must be configured on the issuer if ${easa} is not defined on a client`);
	}
}

function assertIssuerConfiguration$3(issuer, endpoint) {
	if (!issuer[endpoint]) {
		throw new TypeError(`${endpoint} must be configured on the issuer`);
	}
}

var assert$1 = {
	assertSigningAlgValuesSupport: assertSigningAlgValuesSupport$1,
	assertIssuerConfiguration: assertIssuerConfiguration$3,
};

var pick = function pick(object, ...paths) {
	const obj = {};
	for (const path of paths) {
		if (object[path] !== undefined) {
			obj[path] = object[path];
		}
	}
	return obj;
};

const { STATUS_CODES } = http__default["default"];
const { format: format$1 } = util_1__default["default"];

const { OPError: OPError$4 } = errors;

const throwAuthenticateErrors = (response) => {
	const params = www_authenticate_parser(response.headers["www-authenticate"]);

	if (params.error) {
		throw new OPError$4(params, response);
	}
};

const isStandardBodyError = (response) => {
	let result = false;
	try {
		let jsonbody;
		if (typeof response.body !== "object" || Buffer.isBuffer(response.body)) {
			jsonbody = JSON.parse(response.body);
		} else {
			jsonbody = response.body;
		}
		result = typeof jsonbody.error === "string" && jsonbody.error.length;
		if (result) Object.defineProperty(response, "body", { value: jsonbody, configurable: true });
	} catch (err) {}

	return result;
};

function processResponse(response, { statusCode = 200, body = true, bearer = false } = {}) {
	if (response.statusCode !== statusCode) {
		if (bearer) {
			throwAuthenticateErrors(response);
		}

		if (isStandardBodyError(response)) {
			throw new OPError$4(response.body, response);
		}

		throw new OPError$4(
			{
				error: format$1("expected %i %s, got: %i %s", statusCode, STATUS_CODES[statusCode], response.statusCode, STATUS_CODES[response.statusCode]),
			},
			response
		);
	}

	if (body && !response.body) {
		throw new OPError$4(
			{
				error: format$1("expected %i %s with body but no body was returned", statusCode, STATUS_CODES[statusCode]),
			},
			response
		);
	}

	return response.body;
}

var process_response = processResponse;

var unix_timestamp = () => Math.floor(Date.now() / 1000);

class TokenSet {
	constructor(values) {
		Object.assign(this, values);
		const { constructor, ...properties } = Object.getOwnPropertyDescriptors(this.constructor.prototype);

		Object.defineProperties(this, properties);
	}

	set expires_in(value) {
		this.expires_at = unix_timestamp() + Number(value);
	}

	get expires_in() {
		return Math.max.apply(null, [this.expires_at - unix_timestamp(), 0]);
	}

	expired() {
		return this.expires_in === 0;
	}

	claims() {
		if (!this.id_token) {
			throw new TypeError("id_token not present in TokenSet");
		}

		return JSON.parse(base64url.decode(this.id_token.split(".")[1]));
	}
}

var token_set = TokenSet;

const { createHash, randomBytes } = crypto_1__default["default"];

const random$3 = (bytes = 32) => base64url.encode(randomBytes(bytes));

var generators = {
	random: random$3,
	state: random$3,
	nonce: random$3,
	codeVerifier: random$3,
	codeChallenge: (codeVerifier) => base64url.encode(createHash("sha256").update(codeVerifier).digest()),
};

var iterator = function (Yallist) {
	Yallist.prototype[Symbol.iterator] = function* () {
		for (let walker = this.head; walker; walker = walker.next) {
			yield walker.value;
		}
	};
};

var yallist = Yallist;

Yallist.Node = Node;
Yallist.create = Yallist;

function Yallist(list) {
	var self = this;
	if (!(self instanceof Yallist)) {
		self = new Yallist();
	}

	self.tail = null;
	self.head = null;
	self.length = 0;

	if (list && typeof list.forEach === "function") {
		list.forEach(function (item) {
			self.push(item);
		});
	} else if (arguments.length > 0) {
		for (var i = 0, l = arguments.length; i < l; i++) {
			self.push(arguments[i]);
		}
	}

	return self;
}

Yallist.prototype.removeNode = function (node) {
	if (node.list !== this) {
		throw new Error("removing node which does not belong to this list");
	}

	var next = node.next;
	var prev = node.prev;

	if (next) {
		next.prev = prev;
	}

	if (prev) {
		prev.next = next;
	}

	if (node === this.head) {
		this.head = next;
	}
	if (node === this.tail) {
		this.tail = prev;
	}

	node.list.length--;
	node.next = null;
	node.prev = null;
	node.list = null;

	return next;
};

Yallist.prototype.unshiftNode = function (node) {
	if (node === this.head) {
		return;
	}

	if (node.list) {
		node.list.removeNode(node);
	}

	var head = this.head;
	node.list = this;
	node.next = head;
	if (head) {
		head.prev = node;
	}

	this.head = node;
	if (!this.tail) {
		this.tail = node;
	}
	this.length++;
};

Yallist.prototype.pushNode = function (node) {
	if (node === this.tail) {
		return;
	}

	if (node.list) {
		node.list.removeNode(node);
	}

	var tail = this.tail;
	node.list = this;
	node.prev = tail;
	if (tail) {
		tail.next = node;
	}

	this.tail = node;
	if (!this.head) {
		this.head = node;
	}
	this.length++;
};

Yallist.prototype.push = function () {
	for (var i = 0, l = arguments.length; i < l; i++) {
		push(this, arguments[i]);
	}
	return this.length;
};

Yallist.prototype.unshift = function () {
	for (var i = 0, l = arguments.length; i < l; i++) {
		unshift(this, arguments[i]);
	}
	return this.length;
};

Yallist.prototype.pop = function () {
	if (!this.tail) {
		return undefined;
	}

	var res = this.tail.value;
	this.tail = this.tail.prev;
	if (this.tail) {
		this.tail.next = null;
	} else {
		this.head = null;
	}
	this.length--;
	return res;
};

Yallist.prototype.shift = function () {
	if (!this.head) {
		return undefined;
	}

	var res = this.head.value;
	this.head = this.head.next;
	if (this.head) {
		this.head.prev = null;
	} else {
		this.tail = null;
	}
	this.length--;
	return res;
};

Yallist.prototype.forEach = function (fn, thisp) {
	thisp = thisp || this;
	for (var walker = this.head, i = 0; walker !== null; i++) {
		fn.call(thisp, walker.value, i, this);
		walker = walker.next;
	}
};

Yallist.prototype.forEachReverse = function (fn, thisp) {
	thisp = thisp || this;
	for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
		fn.call(thisp, walker.value, i, this);
		walker = walker.prev;
	}
};

Yallist.prototype.get = function (n) {
	for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
		// abort out of the list early if we hit a cycle
		walker = walker.next;
	}
	if (i === n && walker !== null) {
		return walker.value;
	}
};

Yallist.prototype.getReverse = function (n) {
	for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
		// abort out of the list early if we hit a cycle
		walker = walker.prev;
	}
	if (i === n && walker !== null) {
		return walker.value;
	}
};

Yallist.prototype.map = function (fn, thisp) {
	thisp = thisp || this;
	var res = new Yallist();
	for (var walker = this.head; walker !== null; ) {
		res.push(fn.call(thisp, walker.value, this));
		walker = walker.next;
	}
	return res;
};

Yallist.prototype.mapReverse = function (fn, thisp) {
	thisp = thisp || this;
	var res = new Yallist();
	for (var walker = this.tail; walker !== null; ) {
		res.push(fn.call(thisp, walker.value, this));
		walker = walker.prev;
	}
	return res;
};

Yallist.prototype.reduce = function (fn, initial) {
	var acc;
	var walker = this.head;
	if (arguments.length > 1) {
		acc = initial;
	} else if (this.head) {
		walker = this.head.next;
		acc = this.head.value;
	} else {
		throw new TypeError("Reduce of empty list with no initial value");
	}

	for (var i = 0; walker !== null; i++) {
		acc = fn(acc, walker.value, i);
		walker = walker.next;
	}

	return acc;
};

Yallist.prototype.reduceReverse = function (fn, initial) {
	var acc;
	var walker = this.tail;
	if (arguments.length > 1) {
		acc = initial;
	} else if (this.tail) {
		walker = this.tail.prev;
		acc = this.tail.value;
	} else {
		throw new TypeError("Reduce of empty list with no initial value");
	}

	for (var i = this.length - 1; walker !== null; i--) {
		acc = fn(acc, walker.value, i);
		walker = walker.prev;
	}

	return acc;
};

Yallist.prototype.toArray = function () {
	var arr = new Array(this.length);
	for (var i = 0, walker = this.head; walker !== null; i++) {
		arr[i] = walker.value;
		walker = walker.next;
	}
	return arr;
};

Yallist.prototype.toArrayReverse = function () {
	var arr = new Array(this.length);
	for (var i = 0, walker = this.tail; walker !== null; i++) {
		arr[i] = walker.value;
		walker = walker.prev;
	}
	return arr;
};

Yallist.prototype.slice = function (from, to) {
	to = to || this.length;
	if (to < 0) {
		to += this.length;
	}
	from = from || 0;
	if (from < 0) {
		from += this.length;
	}
	var ret = new Yallist();
	if (to < from || to < 0) {
		return ret;
	}
	if (from < 0) {
		from = 0;
	}
	if (to > this.length) {
		to = this.length;
	}
	for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
		walker = walker.next;
	}
	for (; walker !== null && i < to; i++, walker = walker.next) {
		ret.push(walker.value);
	}
	return ret;
};

Yallist.prototype.sliceReverse = function (from, to) {
	to = to || this.length;
	if (to < 0) {
		to += this.length;
	}
	from = from || 0;
	if (from < 0) {
		from += this.length;
	}
	var ret = new Yallist();
	if (to < from || to < 0) {
		return ret;
	}
	if (from < 0) {
		from = 0;
	}
	if (to > this.length) {
		to = this.length;
	}
	for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
		walker = walker.prev;
	}
	for (; walker !== null && i > from; i--, walker = walker.prev) {
		ret.push(walker.value);
	}
	return ret;
};

Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
	if (start > this.length) {
		start = this.length - 1;
	}
	if (start < 0) {
		start = this.length + start;
	}

	for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
		walker = walker.next;
	}

	var ret = [];
	for (var i = 0; walker && i < deleteCount; i++) {
		ret.push(walker.value);
		walker = this.removeNode(walker);
	}
	if (walker === null) {
		walker = this.tail;
	}

	if (walker !== this.head && walker !== this.tail) {
		walker = walker.prev;
	}

	for (var i = 0; i < nodes.length; i++) {
		walker = insert(this, walker, nodes[i]);
	}
	return ret;
};

Yallist.prototype.reverse = function () {
	var head = this.head;
	var tail = this.tail;
	for (var walker = head; walker !== null; walker = walker.prev) {
		var p = walker.prev;
		walker.prev = walker.next;
		walker.next = p;
	}
	this.head = tail;
	this.tail = head;
	return this;
};

function insert(self, node, value) {
	var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

	if (inserted.next === null) {
		self.tail = inserted;
	}
	if (inserted.prev === null) {
		self.head = inserted;
	}

	self.length++;

	return inserted;
}

function push(self, item) {
	self.tail = new Node(item, self.tail, null, self);
	if (!self.head) {
		self.head = self.tail;
	}
	self.length++;
}

function unshift(self, item) {
	self.head = new Node(item, null, self.head, self);
	if (!self.tail) {
		self.tail = self.head;
	}
	self.length++;
}

function Node(value, prev, next, list) {
	if (!(this instanceof Node)) {
		return new Node(value, prev, next, list);
	}

	this.list = list;
	this.value = value;

	if (prev) {
		prev.next = this;
		this.prev = prev;
	} else {
		this.prev = null;
	}

	if (next) {
		next.prev = this;
		this.next = next;
	} else {
		this.next = null;
	}
}

try {
	// add if support for Symbol.iterator is present
	iterator(Yallist);
} catch (er) {}

// A linked list to keep track of recently-used-ness

const MAX = Symbol("max");
const LENGTH = Symbol("length");
const LENGTH_CALCULATOR = Symbol("lengthCalculator");
const ALLOW_STALE = Symbol("allowStale");
const MAX_AGE = Symbol("maxAge");
const DISPOSE = Symbol("dispose");
const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
const LRU_LIST = Symbol("lruList");
const CACHE = Symbol("cache");
const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");

const naiveLength = () => 1;

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
	constructor(options) {
		if (typeof options === "number") options = { max: options };

		if (!options) options = {};

		if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
		// Kind of weird to have a default max of Infinity, but oh well.
		this[MAX] = options.max || Infinity;

		const lc = options.length || naiveLength;
		this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
		this[ALLOW_STALE] = options.stale || false;
		if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
		this[MAX_AGE] = options.maxAge || 0;
		this[DISPOSE] = options.dispose;
		this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
		this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
		this.reset();
	}

	// resize the cache when the max changes.
	set max(mL) {
		if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");

		this[MAX] = mL || Infinity;
		trim(this);
	}
	get max() {
		return this[MAX];
	}

	set allowStale(allowStale) {
		this[ALLOW_STALE] = !!allowStale;
	}
	get allowStale() {
		return this[ALLOW_STALE];
	}

	set maxAge(mA) {
		if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");

		this[MAX_AGE] = mA;
		trim(this);
	}
	get maxAge() {
		return this[MAX_AGE];
	}

	// resize the cache when the lengthCalculator changes.
	set lengthCalculator(lC) {
		if (typeof lC !== "function") lC = naiveLength;

		if (lC !== this[LENGTH_CALCULATOR]) {
			this[LENGTH_CALCULATOR] = lC;
			this[LENGTH] = 0;
			this[LRU_LIST].forEach((hit) => {
				hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
				this[LENGTH] += hit.length;
			});
		}
		trim(this);
	}
	get lengthCalculator() {
		return this[LENGTH_CALCULATOR];
	}

	get length() {
		return this[LENGTH];
	}
	get itemCount() {
		return this[LRU_LIST].length;
	}

	rforEach(fn, thisp) {
		thisp = thisp || this;
		for (let walker = this[LRU_LIST].tail; walker !== null; ) {
			const prev = walker.prev;
			forEachStep(this, fn, walker, thisp);
			walker = prev;
		}
	}

	forEach(fn, thisp) {
		thisp = thisp || this;
		for (let walker = this[LRU_LIST].head; walker !== null; ) {
			const next = walker.next;
			forEachStep(this, fn, walker, thisp);
			walker = next;
		}
	}

	keys() {
		return this[LRU_LIST].toArray().map((k) => k.key);
	}

	values() {
		return this[LRU_LIST].toArray().map((k) => k.value);
	}

	reset() {
		if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
			this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
		}

		this[CACHE] = new Map(); // hash of items by key
		this[LRU_LIST] = new yallist(); // list of items in order of use recency
		this[LENGTH] = 0; // length of items in the list
	}

	dump() {
		return this[LRU_LIST].map((hit) =>
			isStale(this, hit)
				? false
				: {
						k: hit.key,
						v: hit.value,
						e: hit.now + (hit.maxAge || 0),
				  }
		)
			.toArray()
			.filter((h) => h);
	}

	dumpLru() {
		return this[LRU_LIST];
	}

	set(key, value, maxAge) {
		maxAge = maxAge || this[MAX_AGE];

		if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");

		const now = maxAge ? Date.now() : 0;
		const len = this[LENGTH_CALCULATOR](value, key);

		if (this[CACHE].has(key)) {
			if (len > this[MAX]) {
				del(this, this[CACHE].get(key));
				return false;
			}

			const node = this[CACHE].get(key);
			const item = node.value;

			// dispose of the old one before overwriting
			// split out into 2 ifs for better coverage tracking
			if (this[DISPOSE]) {
				if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
			}

			item.now = now;
			item.maxAge = maxAge;
			item.value = value;
			this[LENGTH] += len - item.length;
			item.length = len;
			this.get(key);
			trim(this);
			return true;
		}

		const hit = new Entry(key, value, len, now, maxAge);

		// oversized objects fall out of cache automatically.
		if (hit.length > this[MAX]) {
			if (this[DISPOSE]) this[DISPOSE](key, value);

			return false;
		}

		this[LENGTH] += hit.length;
		this[LRU_LIST].unshift(hit);
		this[CACHE].set(key, this[LRU_LIST].head);
		trim(this);
		return true;
	}

	has(key) {
		if (!this[CACHE].has(key)) return false;
		const hit = this[CACHE].get(key).value;
		return !isStale(this, hit);
	}

	get(key) {
		return get(this, key, true);
	}

	peek(key) {
		return get(this, key, false);
	}

	pop() {
		const node = this[LRU_LIST].tail;
		if (!node) return null;

		del(this, node);
		return node.value;
	}

	del(key) {
		del(this, this[CACHE].get(key));
	}

	load(arr) {
		// reset the cache
		this.reset();

		const now = Date.now();
		// A previous serialized cache has the most recent items first
		for (let l = arr.length - 1; l >= 0; l--) {
			const hit = arr[l];
			const expiresAt = hit.e || 0;
			if (expiresAt === 0)
				// the item was created without expiration in a non aged cache
				this.set(hit.k, hit.v);
			else {
				const maxAge = expiresAt - now;
				// dont add already expired items
				if (maxAge > 0) {
					this.set(hit.k, hit.v, maxAge);
				}
			}
		}
	}

	prune() {
		this[CACHE].forEach((value, key) => get(this, key, false));
	}
}

const get = (self, key, doUse) => {
	const node = self[CACHE].get(key);
	if (node) {
		const hit = node.value;
		if (isStale(self, hit)) {
			del(self, node);
			if (!self[ALLOW_STALE]) return undefined;
		} else {
			if (doUse) {
				if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
				self[LRU_LIST].unshiftNode(node);
			}
		}
		return hit.value;
	}
};

const isStale = (self, hit) => {
	if (!hit || (!hit.maxAge && !self[MAX_AGE])) return false;

	const diff = Date.now() - hit.now;
	return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};

const trim = (self) => {
	if (self[LENGTH] > self[MAX]) {
		for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
			// We know that we're about to delete this one, and also
			// what the next least recently used key will be, so just
			// go ahead and set it now.
			const prev = walker.prev;
			del(self, walker);
			walker = prev;
		}
	}
};

const del = (self, node) => {
	if (node) {
		const hit = node.value;
		if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);

		self[LENGTH] -= hit.length;
		self[CACHE].delete(hit.key);
		self[LRU_LIST].removeNode(node);
	}
};

class Entry {
	constructor(key, value, length, now, maxAge) {
		this.key = key;
		this.value = value;
		this.length = length;
		this.now = now;
		this.maxAge = maxAge || 0;
	}
}

const forEachStep = (self, fn, node, thisp) => {
	let hit = node.value;
	if (isStale(self, hit)) {
		del(self, node);
		if (!self[ALLOW_STALE]) hit = undefined;
	}
	if (hit) fn.call(thisp, hit.value, hit.key, self);
};

var lruCache = LRUCache;

var name = "openid-client";
var version = "5.3.1";
var description = "OpenID Connect Relying Party (RP, Client) implementation for Node.js runtime, supports passportjs";
var keywords = ["auth", "authentication", "basic", "certified", "client", "connect", "dynamic", "electron", "hybrid", "identity", "implicit", "oauth", "oauth2", "oidc", "openid", "passport", "relying party", "strategy"];
var homepage = "https://github.com/panva/node-openid-client";
var repository = "panva/node-openid-client";
var funding = {
	url: "https://github.com/sponsors/panva",
};
var license = "MIT";
var author = "Filip Skokan <panva.ip@gmail.com>";
var exports$1 = {
	types: "./types/index.d.ts",
	import: "./lib/index.mjs",
	require: "./lib/index.js",
};
var main = "./lib/index.js";
var types = "./types/index.d.ts";
var files = ["lib", "types/index.d.ts"];
var scripts = {
	format: "npx prettier --loglevel silent --write ./lib ./test ./certification ./types",
	test: "mocha test/**/*.test.js",
};
var dependencies$1 = {
	jose: "^4.10.0",
	"lru-cache": "^6.0.0",
	"object-hash": "^2.0.1",
	"oidc-token-hash": "^5.0.1",
};
var devDependencies = {
	"@types/node": "^16.11.5",
	"@types/passport": "^1.0.7",
	base64url: "^3.0.1",
	chai: "^4.2.0",
	jose2: "npm:jose@^2.0.5",
	mocha: "^10.1.0",
	nock: "^13.0.2",
	prettier: "^2.4.1",
	"readable-mock-req": "^0.2.2",
	sinon: "^9.2.0",
	timekeeper: "^2.2.0",
};
var pkg = {
	name: name,
	version: version,
	description: description,
	keywords: keywords,
	homepage: homepage,
	repository: repository,
	funding: funding,
	license: license,
	author: author,
	exports: exports$1,
	main: main,
	types: types,
	files: files,
	scripts: scripts,
	dependencies: dependencies$1,
	devDependencies: devDependencies,
	"standard-version": {
		scripts: {
			postchangelog: "sed -i '' -e 's/### \\[/## [/g' CHANGELOG.md",
		},
		types: [
			{
				type: "feat",
				section: "Features",
			},
			{
				type: "fix",
				section: "Fixes",
			},
			{
				type: "chore",
				hidden: true,
			},
			{
				type: "docs",
				hidden: true,
			},
			{
				type: "style",
				hidden: true,
			},
			{
				type: "refactor",
				section: "Refactor",
				hidden: false,
			},
			{
				type: "perf",
				section: "Performance",
				hidden: false,
			},
			{
				type: "test",
				hidden: true,
			},
		],
	},
};

const HTTP_OPTIONS$2 = Symbol();
const CLOCK_TOLERANCE$2 = Symbol();

var consts = {
	CLOCK_TOLERANCE: CLOCK_TOLERANCE$2,
	HTTP_OPTIONS: HTTP_OPTIONS$2,
};

const { once } = events_1__default["default"];
const { URL: URL$1 } = url__default["default"];

const { RPError: RPError$7 } = errors;

const { deep: defaultsDeep } = defaults_1;
const { HTTP_OPTIONS: HTTP_OPTIONS$1 } = consts;

let DEFAULT_HTTP_OPTIONS;
const NQCHAR = /^[\x21\x23-\x5B\x5D-\x7E]+$/;

const allowed = ["agent", "ca", "cert", "crl", "headers", "key", "lookup", "passphrase", "pfx", "timeout"];

const setDefaults$1 = (props, options) => {
	DEFAULT_HTTP_OPTIONS = defaultsDeep({}, props.length ? pick(options, ...props) : options, DEFAULT_HTTP_OPTIONS);
};

setDefaults$1([], {
	headers: { "User-Agent": `${pkg.name}/${pkg.version} (${pkg.homepage})` },
	timeout: 3500,
});

function send(req, body, contentType) {
	if (contentType) {
		req.removeHeader("content-type");
		req.setHeader("content-type", contentType);
	}
	if (body) {
		req.removeHeader("content-length");
		req.setHeader("content-length", Buffer.byteLength(body));
		req.write(body);
	}
	req.end();
}

const nonces = new lruCache({ max: 100 });

var request = async function request(options, { accessToken, mTLS = false, DPoP } = {}) {
	let url;
	try {
		url = new URL$1(options.url);
		delete options.url;
		require$$0__default["default"](/^(https?:)$/.test(url.protocol));
	} catch (err) {
		throw new TypeError("only valid absolute URLs can be requested");
	}
	const optsFn = this[HTTP_OPTIONS$1];
	let opts = options;

	const nonceKey = `${url.origin}${url.pathname}`;
	if (DPoP && "dpopProof" in this) {
		opts.headers = opts.headers || {};
		opts.headers.DPoP = await this.dpopProof(
			{
				htu: `${url.origin}${url.pathname}`,
				htm: options.method,
				nonce: nonces.get(nonceKey),
			},
			DPoP,
			accessToken
		);
	}

	let userOptions;
	if (optsFn) {
		userOptions = pick(optsFn.call(this, url, defaultsDeep({}, opts, DEFAULT_HTTP_OPTIONS)), ...allowed);
	}
	opts = defaultsDeep({}, userOptions, opts, DEFAULT_HTTP_OPTIONS);

	if (mTLS && !opts.pfx && !(opts.key && opts.cert)) {
		throw new TypeError("mutual-TLS certificate and key not set");
	}

	if (opts.searchParams) {
		for (const [key, value] of Object.entries(opts.searchParams)) {
			url.searchParams.delete(key);
			url.searchParams.set(key, value);
		}
	}

	let responseType;
	let form;
	let json;
	let body;
	({ form, responseType, json, body, ...opts } = opts);

	for (const [key, value] of Object.entries(opts.headers || {})) {
		if (value === undefined) {
			delete opts.headers[key];
		}
	}

	let response;
	const req = (url.protocol === "https:" ? https__default["default"].request : http__default["default"].request)(url.href, opts);
	return (async () => {
		if (json) {
			send(req, JSON.stringify(json), "application/json");
		} else if (form) {
			send(req, querystring__default["default"].stringify(form), "application/x-www-form-urlencoded");
		} else if (body) {
			send(req, body);
		} else {
			send(req);
		}

		[response] = await Promise.race([once(req, "response"), once(req, "timeout")]);

		// timeout reached
		if (!response) {
			req.destroy();
			throw new RPError$7(`outgoing request timed out after ${opts.timeout}ms`);
		}

		const parts = [];

		for await (const part of response) {
			parts.push(part);
		}

		if (parts.length) {
			switch (responseType) {
				case "json": {
					Object.defineProperty(response, "body", {
						get() {
							let value = Buffer.concat(parts);
							try {
								value = JSON.parse(value);
							} catch (err) {
								Object.defineProperty(err, "response", { value: response });
								throw err;
							} finally {
								Object.defineProperty(response, "body", { value, configurable: true });
							}
							return value;
						},
						configurable: true,
					});
					break;
				}
				case undefined:
				case "buffer": {
					Object.defineProperty(response, "body", {
						get() {
							const value = Buffer.concat(parts);
							Object.defineProperty(response, "body", { value, configurable: true });
							return value;
						},
						configurable: true,
					});
					break;
				}
				default:
					throw new TypeError("unsupported responseType request option");
			}
		}

		return response;
	})()
		.catch((err) => {
			if (response) Object.defineProperty(err, "response", { value: response });
			throw err;
		})
		.finally(() => {
			const dpopNonce = response && response.headers["dpop-nonce"];
			if (dpopNonce && NQCHAR.test(dpopNonce)) {
				nonces.set(nonceKey, dpopNonce);
			}
		});
};

var setDefaults_1 = setDefaults$1.bind(undefined, allowed);
request.setDefaults = setDefaults_1;

var keystores$3 = new WeakMap();

var weak_cache = {
	keystores: keystores$3,
};

const clone = globalThis.structuredClone || ((value) => v8__default["default"].deserialize(v8__default["default"].serialize(value)));

const internal = Symbol();

function fauxAlg(kty) {
	switch (kty) {
		case "RSA":
			return "RSA-OAEP";
		case "EC":
			return "ECDH-ES";
		case "OKP":
			return "ECDH-ES";
		case "oct":
			return "HS256";
		default:
			return undefined;
	}
}

const keyscore = (key, { alg, use }) => {
	let score = 0;

	if (alg && key.alg) {
		score++;
	}

	if (use && key.use) {
		score++;
	}

	return score;
};

function getKtyFromAlg(alg) {
	switch (typeof alg === "string" && alg.slice(0, 2)) {
		case "RS":
		case "PS":
			return "RSA";
		case "ES":
			return "EC";
		case "Ed":
			return "OKP";
		default:
			return undefined;
	}
}

function getAlgorithms(use, alg, kty, crv) {
	// Ed25519, Ed448, and secp256k1 always have "alg"
	// OKP always has use
	if (alg) {
		return new Set([alg]);
	}

	switch (kty) {
		case "EC": {
			let algs = [];

			if (use === "enc" || use === undefined) {
				algs = algs.concat(["ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW"]);
			}

			if (use === "sig" || use === undefined) {
				algs = algs.concat([`ES${crv.slice(-3)}`.replace("21", "12")]);
			}

			return new Set(algs);
		}
		case "OKP": {
			return new Set(["ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW"]);
		}
		case "RSA": {
			let algs = [];

			if (use === "enc" || use === undefined) {
				algs = algs.concat(["RSA-OAEP", "RSA-OAEP-256", "RSA-OAEP-384", "RSA-OAEP-512", "RSA1_5"]);
			}

			if (use === "sig" || use === undefined) {
				algs = algs.concat(["PS256", "PS384", "PS512", "RS256", "RS384", "RS512"]);
			}

			return new Set(algs);
		}
		default:
			throw new Error("unreachable");
	}
}

var keystore$2 = class KeyStore {
	#keys;

	constructor(i, keys) {
		if (i !== internal) throw new Error("invalid constructor call");
		this.#keys = keys;
	}

	toJWKS() {
		return {
			keys: this.map(({ jwk: { d, p, q, dp, dq, qi, ...jwk } }) => jwk),
		};
	}

	all({ alg, kid, use } = {}) {
		if (!use || !alg) {
			throw new Error();
		}

		const kty = getKtyFromAlg(alg);

		const search = { alg, use };
		return this.filter((key) => {
			let candidate = true;

			if (candidate && kty !== undefined && key.jwk.kty !== kty) {
				candidate = false;
			}

			if (candidate && kid !== undefined && key.jwk.kid !== kid) {
				candidate = false;
			}

			if (candidate && use !== undefined && key.jwk.use !== undefined && key.jwk.use !== use) {
				candidate = false;
			}

			if (candidate && key.jwk.alg && key.jwk.alg !== alg) {
				candidate = false;
			} else if (!key.algorithms.has(alg)) {
				candidate = false;
			}

			return candidate;
		}).sort((first, second) => keyscore(second, search) - keyscore(first, search));
	}

	get(...args) {
		return this.all(...args)[0];
	}

	static async fromJWKS(jwks, { onlyPublic = false, onlyPrivate = false } = {}) {
		if (!is_plain_object(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some((k) => !is_plain_object(k) || !("kty" in k))) {
			throw new TypeError("jwks must be a JSON Web Key Set formatted object");
		}

		const keys = [];

		for (let jwk of jwks.keys) {
			jwk = clone(jwk);
			const { kty, kid, crv } = jwk;

			let { alg, use } = jwk;

			if (typeof kty !== "string" || !kty) {
				continue;
			}

			if (use !== undefined && use !== "sig" && use !== "enc") {
				continue;
			}

			if (typeof alg !== "string" && alg !== undefined) {
				continue;
			}

			if (typeof kid !== "string" && kid !== undefined) {
				continue;
			}

			if (kty === "EC" && use === "sig") {
				switch (crv) {
					case "P-256":
						alg = "ES256";
						break;
					case "P-384":
						alg = "ES384";
						break;
					case "P-521":
						alg = "ES512";
						break;
				}
			}

			if (crv === "secp256k1") {
				use = "sig";
				alg = "ES256K";
			}

			if (kty === "OKP") {
				switch (crv) {
					case "Ed25519":
					case "Ed448":
						use = "sig";
						alg = "EdDSA";
						break;
					case "X25519":
					case "X448":
						use = "enc";
						break;
				}
			}

			if (alg && !use) {
				switch (true) {
					case alg.startsWith("ECDH"):
						use = "enc";
						break;
					case alg.startsWith("RSA"):
						use = "enc";
						break;
				}
			}

			const keyObject = await jose_1.importJWK(jwk, alg || fauxAlg(jwk.kty)).catch(() => {});

			if (!keyObject) continue;

			if (keyObject instanceof Uint8Array || keyObject.type === "secret") {
				if (onlyPrivate) {
					throw new Error("jwks must only contain private keys");
				}
				continue;
			}

			if (!is_key_object(keyObject)) {
				throw new Error("what?!");
			}

			if (onlyPrivate && keyObject.type !== "private") {
				throw new Error("jwks must only contain private keys");
			}

			if (onlyPublic && keyObject.type !== "public") {
				continue;
			}

			if (kty === "RSA" && keyObject.asymmetricKeySize < 2048) {
				continue;
			}

			keys.push({
				jwk: { ...jwk, alg, use },
				keyObject,
				get algorithms() {
					Object.defineProperty(this, "algorithms", {
						value: getAlgorithms(this.jwk.use, this.jwk.alg, this.jwk.kty, this.jwk.crv),
						enumerable: true,
						configurable: false,
					});
					return this.algorithms;
				},
			});
		}

		return new this(internal, keys);
	}

	filter(...args) {
		return this.#keys.filter(...args);
	}

	find(...args) {
		return this.#keys.find(...args);
	}

	every(...args) {
		return this.#keys.every(...args);
	}

	some(...args) {
		return this.#keys.some(...args);
	}

	map(...args) {
		return this.#keys.map(...args);
	}

	forEach(...args) {
		return this.#keys.forEach(...args);
	}

	reduce(...args) {
		return this.#keys.reduce(...args);
	}

	sort(...args) {
		return this.#keys.sort(...args);
	}

	*[Symbol.iterator]() {
		for (const key of this.#keys) {
			yield key;
		}
	}
};

const { serialize, deserialize } = v8__default["default"];

var deep_clone = globalThis.structuredClone || ((obj) => deserialize(serialize(obj)));

function merge(target, ...sources) {
	for (const source of sources) {
		if (!is_plain_object(source)) {
			continue;
		}
		for (const [key, value] of Object.entries(source)) {
			/* istanbul ignore if */
			if (key === "__proto__" || key === "constructor") {
				continue;
			}
			if (is_plain_object(target[key]) && is_plain_object(value)) {
				target[key] = merge(target[key], value);
			} else if (typeof value !== "undefined") {
				target[key] = value;
			}
		}
	}

	return target;
}

var merge_1 = merge;

const { RPError: RPError$6 } = errors;

const { assertIssuerConfiguration: assertIssuerConfiguration$2 } = assert$1;
const { random: random$2 } = generators;

const { keystores: keystores$2 } = weak_cache;

const formUrlEncode = (value) => encodeURIComponent(value).replace(/%20/g, "+");

async function clientAssertion(endpoint, payload) {
	let alg = this[`${endpoint}_endpoint_auth_signing_alg`];
	if (!alg) {
		assertIssuerConfiguration$2(this.issuer, `${endpoint}_endpoint_auth_signing_alg_values_supported`);
	}

	if (this[`${endpoint}_endpoint_auth_method`] === "client_secret_jwt") {
		if (!alg) {
			const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];
			alg = Array.isArray(supported) && supported.find((signAlg) => /^HS(?:256|384|512)/.test(signAlg));
		}

		if (!alg) {
			throw new RPError$6(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);
		}

		return new jose_1.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({ alg }).sign(this.secretForAlg(alg));
	}

	const keystore = await keystores$2.get(this);

	if (!keystore) {
		throw new TypeError("no client jwks provided for signing a client assertion with");
	}

	if (!alg) {
		const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];
		alg = Array.isArray(supported) && supported.find((signAlg) => keystore.get({ alg: signAlg, use: "sig" }));
	}

	if (!alg) {
		throw new RPError$6(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);
	}

	const key = keystore.get({ alg, use: "sig" });
	if (!key) {
		throw new RPError$6(`no key found in client jwks to sign a client assertion with using alg ${alg}`);
	}

	return new jose_1.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({ alg, kid: key.jwk && key.jwk.kid }).sign(key.keyObject);
}

async function authFor(endpoint, { clientAssertionPayload } = {}) {
	const authMethod = this[`${endpoint}_endpoint_auth_method`];
	switch (authMethod) {
		case "self_signed_tls_client_auth":
		case "tls_client_auth":
		case "none":
			return { form: { client_id: this.client_id } };
		case "client_secret_post":
			if (!this.client_secret) {
				throw new TypeError("client_secret_post client authentication method requires a client_secret");
			}
			return { form: { client_id: this.client_id, client_secret: this.client_secret } };
		case "private_key_jwt":
		case "client_secret_jwt": {
			const timestamp = unix_timestamp();
			const audience = [...new Set([this.issuer.issuer, this.issuer.token_endpoint].filter(Boolean))];

			const assertion = await clientAssertion.call(this, endpoint, {
				iat: timestamp,
				exp: timestamp + 60,
				jti: random$2(),
				iss: this.client_id,
				sub: this.client_id,
				aud: audience,
				...clientAssertionPayload,
			});

			return {
				form: {
					client_id: this.client_id,
					client_assertion: assertion,
					client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
				},
			};
		}
		case "client_secret_basic": {
			// This is correct behaviour, see https://tools.ietf.org/html/rfc6749#section-2.3.1 and the
			// related appendix. (also https://github.com/panva/node-openid-client/pull/91)
			// > The client identifier is encoded using the
			// > "application/x-www-form-urlencoded" encoding algorithm per
			// > Appendix B, and the encoded value is used as the username; the client
			// > password is encoded using the same algorithm and used as the
			// > password.
			if (!this.client_secret) {
				throw new TypeError("client_secret_basic client authentication method requires a client_secret");
			}
			const encoded = `${formUrlEncode(this.client_id)}:${formUrlEncode(this.client_secret)}`;
			const value = Buffer.from(encoded).toString("base64");
			return { headers: { Authorization: `Basic ${value}` } };
		}
		default: {
			throw new TypeError(`missing, or unsupported, ${endpoint}_endpoint_auth_method`);
		}
	}
}

function resolveResponseType$2() {
	const { length, 0: value } = this.response_types;

	if (length === 1) {
		return value;
	}

	return undefined;
}

function resolveRedirectUri$2() {
	const { length, 0: value } = this.redirect_uris || [];

	if (length === 1) {
		return value;
	}

	return undefined;
}

async function authenticatedPost$1(endpoint, opts, { clientAssertionPayload, endpointAuthMethod = endpoint, DPoP } = {}) {
	const auth = await authFor.call(this, endpointAuthMethod, { clientAssertionPayload });
	const requestOpts = merge_1(opts, auth);

	const mTLS = this[`${endpointAuthMethod}_endpoint_auth_method`].includes("tls_client_auth") || (endpoint === "token" && this.tls_client_certificate_bound_access_tokens);

	let targetUrl;
	if (mTLS && this.issuer.mtls_endpoint_aliases) {
		targetUrl = this.issuer.mtls_endpoint_aliases[`${endpoint}_endpoint`];
	}

	targetUrl = targetUrl || this.issuer[`${endpoint}_endpoint`];

	if ("form" in requestOpts) {
		for (const [key, value] of Object.entries(requestOpts.form)) {
			if (typeof value === "undefined") {
				delete requestOpts.form[key];
			}
		}
	}

	return request.call(
		this,
		{
			...requestOpts,
			method: "POST",
			url: targetUrl,
			headers: {
				...(endpoint !== "revocation"
					? {
							Accept: "application/json",
					  }
					: undefined),
				...requestOpts.headers,
			},
		},
		{ mTLS, DPoP }
	);
}

var client$1 = {
	resolveResponseType: resolveResponseType$2,
	resolveRedirectUri: resolveRedirectUri$2,
	authFor,
	authenticatedPost: authenticatedPost$1,
};

var objectHash_1 = createCommonjsModule(function (module, exports) {
	/**
	 * Exported function
	 *
	 * Options:
	 *
	 *  - `algorithm` hash algo to be used by this instance: *'sha1', 'md5'
	 *  - `excludeValues` {true|*false} hash object keys, values ignored
	 *  - `encoding` hash encoding, supports 'buffer', '*hex', 'binary', 'base64'
	 *  - `ignoreUnknown` {true|*false} ignore unknown object types
	 *  - `replacer` optional function that replaces values before hashing
	 *  - `respectFunctionProperties` {*true|false} consider function properties when hashing
	 *  - `respectFunctionNames` {*true|false} consider 'name' property of functions for hashing
	 *  - `respectType` {*true|false} Respect special properties (prototype, constructor)
	 *    when hashing to distinguish between types
	 *  - `unorderedArrays` {true|*false} Sort all arrays before hashing
	 *  - `unorderedSets` {*true|false} Sort `Set` and `Map` instances before hashing
	 *  * = default
	 *
	 * @param {object} object value to hash
	 * @param {object} options hashing options
	 * @return {string} hash value
	 * @api public
	 */
	exports = module.exports = objectHash;

	function objectHash(object, options) {
		options = applyDefaults(object, options);

		return hash(object, options);
	}

	/**
	 * Exported sugar methods
	 *
	 * @param {object} object value to hash
	 * @return {string} hash value
	 * @api public
	 */
	exports.sha1 = function (object) {
		return objectHash(object);
	};
	exports.keys = function (object) {
		return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
	};
	exports.MD5 = function (object) {
		return objectHash(object, { algorithm: "md5", encoding: "hex" });
	};
	exports.keysMD5 = function (object) {
		return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
	};

	// Internals
	var hashes = crypto_1__default["default"].getHashes ? crypto_1__default["default"].getHashes().slice() : ["sha1", "md5"];
	hashes.push("passthrough");
	var encodings = ["buffer", "hex", "binary", "base64"];

	function applyDefaults(object, sourceOptions) {
		sourceOptions = sourceOptions || {};

		// create a copy rather than mutating
		var options = {};
		options.algorithm = sourceOptions.algorithm || "sha1";
		options.encoding = sourceOptions.encoding || "hex";
		options.excludeValues = sourceOptions.excludeValues ? true : false;
		options.algorithm = options.algorithm.toLowerCase();
		options.encoding = options.encoding.toLowerCase();
		options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true; // default to false
		options.respectType = sourceOptions.respectType === false ? false : true; // default to true
		options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;
		options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;
		options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true; // default to false
		options.unorderedSets = sourceOptions.unorderedSets === false ? false : true; // default to false
		options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true; // default to true
		options.replacer = sourceOptions.replacer || undefined;
		options.excludeKeys = sourceOptions.excludeKeys || undefined;

		if (typeof object === "undefined") {
			throw new Error("Object argument required.");
		}

		// if there is a case-insensitive match in the hashes list, accept it
		// (i.e. SHA256 for sha256)
		for (var i = 0; i < hashes.length; ++i) {
			if (hashes[i].toLowerCase() === options.algorithm.toLowerCase()) {
				options.algorithm = hashes[i];
			}
		}

		if (hashes.indexOf(options.algorithm) === -1) {
			throw new Error('Algorithm "' + options.algorithm + '"  not supported. ' + "supported values: " + hashes.join(", "));
		}

		if (encodings.indexOf(options.encoding) === -1 && options.algorithm !== "passthrough") {
			throw new Error('Encoding "' + options.encoding + '"  not supported. ' + "supported values: " + encodings.join(", "));
		}

		return options;
	}

	/** Check if the given function is a native function */
	function isNativeFunction(f) {
		if (typeof f !== "function") {
			return false;
		}
		var exp = /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i;
		return exp.exec(Function.prototype.toString.call(f)) != null;
	}

	function hash(object, options) {
		var hashingStream;

		if (options.algorithm !== "passthrough") {
			hashingStream = crypto_1__default["default"].createHash(options.algorithm);
		} else {
			hashingStream = new PassThrough();
		}

		if (typeof hashingStream.write === "undefined") {
			hashingStream.write = hashingStream.update;
			hashingStream.end = hashingStream.update;
		}

		var hasher = typeHasher(options, hashingStream);
		hasher.dispatch(object);
		if (!hashingStream.update) {
			hashingStream.end("");
		}

		if (hashingStream.digest) {
			return hashingStream.digest(options.encoding === "buffer" ? undefined : options.encoding);
		}

		var buf = hashingStream.read();
		if (options.encoding === "buffer") {
			return buf;
		}

		return buf.toString(options.encoding);
	}

	/**
	 * Expose streaming API
	 *
	 * @param {object} object  Value to serialize
	 * @param {object} options  Options, as for hash()
	 * @param {object} stream  A stream to write the serializiation to
	 * @api public
	 */
	exports.writeToStream = function (object, options, stream) {
		if (typeof stream === "undefined") {
			stream = options;
			options = {};
		}

		options = applyDefaults(object, options);

		return typeHasher(options, stream).dispatch(object);
	};

	function typeHasher(options, writeTo, context) {
		context = context || [];
		var write = function (str) {
			if (writeTo.update) {
				return writeTo.update(str, "utf8");
			} else {
				return writeTo.write(str, "utf8");
			}
		};

		return {
			dispatch: function (value) {
				if (options.replacer) {
					value = options.replacer(value);
				}

				var type = typeof value;
				if (value === null) {
					type = "null";
				}

				//console.log("[DEBUG] Dispatch: ", value, "->", type, " -> ", "_" + type);

				return this["_" + type](value);
			},
			_object: function (object) {
				var pattern = /\[object (.*)\]/i;
				var objString = Object.prototype.toString.call(object);
				var objType = pattern.exec(objString);
				if (!objType) {
					// object type did not match [object ...]
					objType = "unknown:[" + objString + "]";
				} else {
					objType = objType[1]; // take only the class name
				}

				objType = objType.toLowerCase();

				var objectNumber = null;

				if ((objectNumber = context.indexOf(object)) >= 0) {
					return this.dispatch("[CIRCULAR:" + objectNumber + "]");
				} else {
					context.push(object);
				}

				if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
					write("buffer:");
					return write(object);
				}

				if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
					if (this["_" + objType]) {
						this["_" + objType](object);
					} else if (options.ignoreUnknown) {
						return write("[" + objType + "]");
					} else {
						throw new Error('Unknown object type "' + objType + '"');
					}
				} else {
					var keys = Object.keys(object);
					if (options.unorderedObjects) {
						keys = keys.sort();
					}
					// Make sure to incorporate special properties, so
					// Types with different prototypes will produce
					// a different hash and objects derived from
					// different functions (`new Foo`, `new Bar`) will
					// produce different hashes.
					// We never do this for native functions since some
					// seem to break because of that.
					if (options.respectType !== false && !isNativeFunction(object)) {
						keys.splice(0, 0, "prototype", "__proto__", "constructor");
					}

					if (options.excludeKeys) {
						keys = keys.filter(function (key) {
							return !options.excludeKeys(key);
						});
					}

					write("object:" + keys.length + ":");
					var self = this;
					return keys.forEach(function (key) {
						self.dispatch(key);
						write(":");
						if (!options.excludeValues) {
							self.dispatch(object[key]);
						}
						write(",");
					});
				}
			},
			_array: function (arr, unordered) {
				unordered = typeof unordered !== "undefined" ? unordered : options.unorderedArrays !== false; // default to options.unorderedArrays

				var self = this;
				write("array:" + arr.length + ":");
				if (!unordered || arr.length <= 1) {
					return arr.forEach(function (entry) {
						return self.dispatch(entry);
					});
				}

				// the unordered case is a little more complicated:
				// since there is no canonical ordering on objects,
				// i.e. {a:1} < {a:2} and {a:1} > {a:2} are both false,
				// we first serialize each entry using a PassThrough stream
				// before sorting.
				// also: we can’t use the same context array for all entries
				// since the order of hashing should *not* matter. instead,
				// we keep track of the additions to a copy of the context array
				// and add all of them to the global context array when we’re done
				var contextAdditions = [];
				var entries = arr.map(function (entry) {
					var strm = new PassThrough();
					var localContext = context.slice(); // make copy
					var hasher = typeHasher(options, strm, localContext);
					hasher.dispatch(entry);
					// take only what was added to localContext and append it to contextAdditions
					contextAdditions = contextAdditions.concat(localContext.slice(context.length));
					return strm.read().toString();
				});
				context = context.concat(contextAdditions);
				entries.sort();
				return this._array(entries, false);
			},
			_date: function (date) {
				return write("date:" + date.toJSON());
			},
			_symbol: function (sym) {
				return write("symbol:" + sym.toString());
			},
			_error: function (err) {
				return write("error:" + err.toString());
			},
			_boolean: function (bool) {
				return write("bool:" + bool.toString());
			},
			_string: function (string) {
				write("string:" + string.length + ":");
				write(string.toString());
			},
			_function: function (fn) {
				write("fn:");
				if (isNativeFunction(fn)) {
					this.dispatch("[native]");
				} else {
					this.dispatch(fn.toString());
				}

				if (options.respectFunctionNames !== false) {
					// Make sure we can still distinguish native functions
					// by their name, otherwise String and Function will
					// have the same hash
					this.dispatch("function-name:" + String(fn.name));
				}

				if (options.respectFunctionProperties) {
					this._object(fn);
				}
			},
			_number: function (number) {
				return write("number:" + number.toString());
			},
			_xml: function (xml) {
				return write("xml:" + xml.toString());
			},
			_null: function () {
				return write("Null");
			},
			_undefined: function () {
				return write("Undefined");
			},
			_regexp: function (regex) {
				return write("regex:" + regex.toString());
			},
			_uint8array: function (arr) {
				write("uint8array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_uint8clampedarray: function (arr) {
				write("uint8clampedarray:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_int8array: function (arr) {
				write("uint8array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_uint16array: function (arr) {
				write("uint16array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_int16array: function (arr) {
				write("uint16array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_uint32array: function (arr) {
				write("uint32array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_int32array: function (arr) {
				write("uint32array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_float32array: function (arr) {
				write("float32array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_float64array: function (arr) {
				write("float64array:");
				return this.dispatch(Array.prototype.slice.call(arr));
			},
			_arraybuffer: function (arr) {
				write("arraybuffer:");
				return this.dispatch(new Uint8Array(arr));
			},
			_url: function (url) {
				return write("url:" + url.toString());
			},
			_map: function (map) {
				write("map:");
				var arr = Array.from(map);
				return this._array(arr, options.unorderedSets !== false);
			},
			_set: function (set) {
				write("set:");
				var arr = Array.from(set);
				return this._array(arr, options.unorderedSets !== false);
			},
			_file: function (file) {
				write("file:");
				return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
			},
			_blob: function () {
				if (options.ignoreUnknown) {
					return write("[blob]");
				}

				throw Error("Hashing Blob objects is currently not supported\n" + "(see https://github.com/puleos/object-hash/issues/26)\n" + 'Use "options.replacer" or "options.ignoreUnknown"\n');
			},
			_domwindow: function () {
				return write("domwindow");
			},
			_bigint: function (number) {
				return write("bigint:" + number.toString());
			},
			/* Node.js standard native objects */
			_process: function () {
				return write("process");
			},
			_timer: function () {
				return write("timer");
			},
			_pipe: function () {
				return write("pipe");
			},
			_tcp: function () {
				return write("tcp");
			},
			_udp: function () {
				return write("udp");
			},
			_tty: function () {
				return write("tty");
			},
			_statwatcher: function () {
				return write("statwatcher");
			},
			_securecontext: function () {
				return write("securecontext");
			},
			_connection: function () {
				return write("connection");
			},
			_zlib: function () {
				return write("zlib");
			},
			_context: function () {
				return write("context");
			},
			_nodescript: function () {
				return write("nodescript");
			},
			_httpparser: function () {
				return write("httpparser");
			},
			_dataview: function () {
				return write("dataview");
			},
			_signal: function () {
				return write("signal");
			},
			_fsevent: function () {
				return write("fsevent");
			},
			_tlswrap: function () {
				return write("tlswrap");
			},
		};
	}

	// Mini-implementation of stream.PassThrough
	// We are far from having need for the full implementation, and we can
	// make assumptions like "many writes, then only one final read"
	// and we can ignore encoding specifics
	function PassThrough() {
		return {
			buf: "",

			write: function (b) {
				this.buf += b;
			},

			end: function (b) {
				this.buf += b;
			},

			read: function () {
				return this.buf;
			},
		};
	}
});

const { RPError: RPError$5 } = errors;

const { assertIssuerConfiguration: assertIssuerConfiguration$1 } = assert$1;

const { keystores: keystores$1 } = weak_cache;

const inFlight = new WeakMap();
const caches = new WeakMap();
const lrus = (ctx) => {
	if (!caches.has(ctx)) {
		caches.set(ctx, new lruCache({ max: 100 }));
	}
	return caches.get(ctx);
};

async function getKeyStore(reload = false) {
	assertIssuerConfiguration$1(this, "jwks_uri");

	const keystore = keystores$1.get(this);
	const cache = lrus(this);

	if (reload || !keystore) {
		if (inFlight.has(this)) {
			return inFlight.get(this);
		}
		cache.reset();
		inFlight.set(
			this,
			(async () => {
				const response = await request
					.call(this, {
						method: "GET",
						responseType: "json",
						url: this.jwks_uri,
						headers: {
							Accept: "application/json, application/jwk-set+json",
						},
					})
					.finally(() => {
						inFlight.delete(this);
					});
				const jwks = process_response(response);

				const joseKeyStore = keystore$2.fromJWKS(jwks, { onlyPublic: true });
				cache.set("throttle", true, 60 * 1000);
				keystores$1.set(this, joseKeyStore);

				return joseKeyStore;
			})()
		);

		return inFlight.get(this);
	}

	return keystore;
}

async function queryKeyStore$1({ kid, kty, alg, use }, { allowMulti = false } = {}) {
	const cache = lrus(this);

	const def = {
		kid,
		kty,
		alg,
		use,
	};

	const defHash = objectHash_1(def, {
		algorithm: "sha256",
		ignoreUnknown: true,
		unorderedArrays: true,
		unorderedSets: true,
	});

	// refresh keystore on every unknown key but also only upto once every minute
	const freshJwksUri = cache.get(defHash) || cache.get("throttle");

	const keystore = await getKeyStore.call(this, !freshJwksUri);
	const keys = keystore.all(def);

	delete def.use;
	if (keys.length === 0) {
		throw new RPError$5({
			printf: ["no valid key found in issuer's jwks_uri for key parameters %j", def],
			jwks: keystore,
		});
	}

	if (!allowMulti && keys.length > 1 && !kid) {
		throw new RPError$5({
			printf: ["multiple matching keys found in issuer's jwks_uri for key parameters %j, kid must be provided in this case", def],
			jwks: keystore,
		});
	}

	cache.set(defHash, true);

	return keys;
}

var queryKeyStore_1 = queryKeyStore$1;
var keystore$1 = getKeyStore;

var issuer$1 = {
	queryKeyStore: queryKeyStore_1,
	keystore: keystore$1,
};

const { inspect: inspect$2 } = util_1__default["default"];

const { RPError: RPError$4, OPError: OPError$3 } = errors;

class DeviceFlowHandle {
	#aborted;
	#client;
	#clientAssertionPayload;
	#DPoP;
	#exchangeBody;
	#expires_at;
	#interval;
	#maxAge;
	#response;
	constructor({ client, exchangeBody, clientAssertionPayload, response, maxAge, DPoP }) {
		["verification_uri", "user_code", "device_code"].forEach((prop) => {
			if (typeof response[prop] !== "string" || !response[prop]) {
				throw new RPError$4(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);
			}
		});

		if (!Number.isSafeInteger(response.expires_in)) {
			throw new RPError$4("expected expires_in number to be returned by Device Authorization Response, got %j", response.expires_in);
		}

		this.#expires_at = unix_timestamp() + response.expires_in;
		this.#client = client;
		this.#DPoP = DPoP;
		this.#maxAge = maxAge;
		this.#exchangeBody = exchangeBody;
		this.#clientAssertionPayload = clientAssertionPayload;
		this.#response = response;
		this.#interval = response.interval * 1000 || 5000;
	}

	abort() {
		this.#aborted = true;
	}

	async poll({ signal } = {}) {
		if ((signal && signal.aborted) || this.#aborted) {
			throw new RPError$4("polling aborted");
		}

		if (this.expired()) {
			throw new RPError$4("the device code %j has expired and the device authorization session has concluded", this.device_code);
		}

		await new Promise((resolve) => setTimeout(resolve, this.#interval));

		let tokenset;
		try {
			tokenset = await this.#client.grant(
				{
					...this.#exchangeBody,
					grant_type: "urn:ietf:params:oauth:grant-type:device_code",
					device_code: this.device_code,
				},
				{ clientAssertionPayload: this.#clientAssertionPayload, DPoP: this.#DPoP }
			);
		} catch (err) {
			switch (err instanceof OPError$3 && err.error) {
				case "slow_down":
					this.#interval += 5000;
				case "authorization_pending":
					return this.poll({ signal });
				default:
					throw err;
			}
		}

		if ("id_token" in tokenset) {
			await this.#client.decryptIdToken(tokenset);
			await this.#client.validateIdToken(tokenset, undefined, "token", this.#maxAge);
		}

		return tokenset;
	}

	get device_code() {
		return this.#response.device_code;
	}

	get user_code() {
		return this.#response.user_code;
	}

	get verification_uri() {
		return this.#response.verification_uri;
	}

	get verification_uri_complete() {
		return this.#response.verification_uri_complete;
	}

	get expires_in() {
		return Math.max.apply(null, [this.#expires_at - unix_timestamp(), 0]);
	}

	expired() {
		return this.expires_in === 0;
	}

	/* istanbul ignore next */
	[inspect$2.custom]() {
		return `${this.constructor.name} ${inspect$2(this.#response, {
			depth: Infinity,
			colors: process.stdout.isTTY,
			compact: false,
			sorted: true,
		})}`;
	}
}

var device_flow_handle = DeviceFlowHandle;

const { inspect: inspect$1 } = util_1__default["default"];

const { strict: assert } = require$$0__default["default"];

const { assertSigningAlgValuesSupport, assertIssuerConfiguration } = assert$1;

const { OPError: OPError$2, RPError: RPError$3 } = errors;

const { random: random$1 } = generators;

const { CLOCK_TOLERANCE: CLOCK_TOLERANCE$1 } = consts;
const { keystores } = weak_cache;

const { authenticatedPost, resolveResponseType: resolveResponseType$1, resolveRedirectUri: resolveRedirectUri$1 } = client$1;
const { queryKeyStore } = issuer$1;

const [major, minor] = process.version
	.slice(1)
	.split(".")
	.map((str) => parseInt(str, 10));

const rsaPssParams = major >= 17 || (major === 16 && minor >= 9);
const retryAttempt = Symbol();
const skipNonceCheck = Symbol();
const skipMaxAgeCheck = Symbol();

function pickCb(input) {
	return pick(
		input,
		"access_token", // OAuth 2.0
		"code", // OAuth 2.0
		"error_description", // OAuth 2.0
		"error_uri", // OAuth 2.0
		"error", // OAuth 2.0
		"expires_in", // OAuth 2.0
		"id_token", // OIDC Core 1.0
		"iss", // draft-ietf-oauth-iss-auth-resp
		"response", // FAPI JARM
		"session_state", // OIDC Session Management
		"state", // OAuth 2.0
		"token_type" // OAuth 2.0
	);
}

function authorizationHeaderValue(token, tokenType = "Bearer") {
	return `${tokenType} ${token}`;
}

function verifyPresence(payload, jwt, prop) {
	if (payload[prop] === undefined) {
		throw new RPError$3({
			message: `missing required JWT property ${prop}`,
			jwt,
		});
	}
}

function authorizationParams(params) {
	const authParams = {
		client_id: this.client_id,
		scope: "openid",
		response_type: resolveResponseType$1.call(this),
		redirect_uri: resolveRedirectUri$1.call(this),
		...params,
	};

	Object.entries(authParams).forEach(([key, value]) => {
		if (value === null || value === undefined) {
			delete authParams[key];
		} else if (key === "claims" && typeof value === "object") {
			authParams[key] = JSON.stringify(value);
		} else if (key === "resource" && Array.isArray(value)) {
			authParams[key] = value;
		} else if (typeof value !== "string") {
			authParams[key] = String(value);
		}
	});

	return authParams;
}

function getKeystore(jwks) {
	if (!is_plain_object(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some((k) => !is_plain_object(k) || !("kty" in k))) {
		throw new TypeError("jwks must be a JSON Web Key Set formatted object");
	}

	return keystore$2.fromJWKS(jwks, { onlyPrivate: true });
}

// if an OP doesnt support client_secret_basic but supports client_secret_post, use it instead
// this is in place to take care of most common pitfalls when first using discovered Issuers without
// the support for default values defined by Discovery 1.0
function checkBasicSupport(client, properties) {
	try {
		const supported = client.issuer.token_endpoint_auth_methods_supported;
		if (!supported.includes(properties.token_endpoint_auth_method)) {
			if (supported.includes("client_secret_post")) {
				properties.token_endpoint_auth_method = "client_secret_post";
			}
		}
	} catch (err) {}
}

function handleCommonMistakes(client, metadata, properties) {
	if (!metadata.token_endpoint_auth_method) {
		// if no explicit value was provided
		checkBasicSupport(client, properties);
	}

	// :fp: c'mon people... RTFM
	if (metadata.redirect_uri) {
		if (metadata.redirect_uris) {
			throw new TypeError("provide a redirect_uri or redirect_uris, not both");
		}
		properties.redirect_uris = [metadata.redirect_uri];
		delete properties.redirect_uri;
	}

	if (metadata.response_type) {
		if (metadata.response_types) {
			throw new TypeError("provide a response_type or response_types, not both");
		}
		properties.response_types = [metadata.response_type];
		delete properties.response_type;
	}
}

function getDefaultsForEndpoint(endpoint, issuer, properties) {
	if (!issuer[`${endpoint}_endpoint`]) return;

	const tokenEndpointAuthMethod = properties.token_endpoint_auth_method;
	const tokenEndpointAuthSigningAlg = properties.token_endpoint_auth_signing_alg;

	const eam = `${endpoint}_endpoint_auth_method`;
	const easa = `${endpoint}_endpoint_auth_signing_alg`;

	if (properties[eam] === undefined && properties[easa] === undefined) {
		if (tokenEndpointAuthMethod !== undefined) {
			properties[eam] = tokenEndpointAuthMethod;
		}
		if (tokenEndpointAuthSigningAlg !== undefined) {
			properties[easa] = tokenEndpointAuthSigningAlg;
		}
	}
}

class BaseClient$1 {
	#metadata;
	#issuer;
	#aadIssValidation;
	#additionalAuthorizedParties;
	constructor(issuer, aadIssValidation, metadata = {}, jwks, options) {
		this.#metadata = new Map();
		this.#issuer = issuer;
		this.#aadIssValidation = aadIssValidation;

		if (typeof metadata.client_id !== "string" || !metadata.client_id) {
			throw new TypeError("client_id is required");
		}

		const properties = {
			grant_types: ["authorization_code"],
			id_token_signed_response_alg: "RS256",
			authorization_signed_response_alg: "RS256",
			response_types: ["code"],
			token_endpoint_auth_method: "client_secret_basic",
			...(this.fapi()
				? {
						grant_types: ["authorization_code", "implicit"],
						id_token_signed_response_alg: "PS256",
						authorization_signed_response_alg: "PS256",
						response_types: ["code id_token"],
						tls_client_certificate_bound_access_tokens: true,
						token_endpoint_auth_method: undefined,
				  }
				: undefined),
			...metadata,
		};

		if (this.fapi()) {
			switch (properties.token_endpoint_auth_method) {
				case "self_signed_tls_client_auth":
				case "tls_client_auth":
					break;
				case "private_key_jwt":
					if (!jwks) {
						throw new TypeError("jwks is required");
					}
					break;
				case undefined:
					throw new TypeError("token_endpoint_auth_method is required");
				default:
					throw new TypeError("invalid or unsupported token_endpoint_auth_method");
			}
		}

		handleCommonMistakes(this, metadata, properties);

		assertSigningAlgValuesSupport("token", this.issuer, properties);
		["introspection", "revocation"].forEach((endpoint) => {
			getDefaultsForEndpoint(endpoint, this.issuer, properties);
			assertSigningAlgValuesSupport(endpoint, this.issuer, properties);
		});

		Object.entries(properties).forEach(([key, value]) => {
			this.#metadata.set(key, value);
			if (!this[key]) {
				Object.defineProperty(this, key, {
					get() {
						return this.#metadata.get(key);
					},
					enumerable: true,
				});
			}
		});

		if (jwks !== undefined) {
			const keystore = getKeystore.call(this, jwks);
			keystores.set(this, keystore);
		}

		if (options != null && options.additionalAuthorizedParties) {
			this.#additionalAuthorizedParties = deep_clone(options.additionalAuthorizedParties);
		}

		this[CLOCK_TOLERANCE$1] = 0;
	}

	authorizationUrl(params = {}) {
		if (!is_plain_object(params)) {
			throw new TypeError("params must be a plain object");
		}
		assertIssuerConfiguration(this.issuer, "authorization_endpoint");
		const target = url__default["default"].parse(this.issuer.authorization_endpoint, true);
		target.search = null;
		target.query = {
			...target.query,
			...authorizationParams.call(this, params),
		};
		return url__default["default"].format(target);
	}

	authorizationPost(params = {}) {
		if (!is_plain_object(params)) {
			throw new TypeError("params must be a plain object");
		}
		const inputs = authorizationParams.call(this, params);
		const formInputs = Object.keys(inputs)
			.map((name) => `<input type="hidden" name="${name}" value="${inputs[name]}"/>`)
			.join("\n");

		return `<!DOCTYPE html>
<head>
<title>Requesting Authorization</title>
</head>
<body onload="javascript:document.forms[0].submit()">
<form method="post" action="${this.issuer.authorization_endpoint}">
  ${formInputs}
</form>
</body>
</html>`;
	}

	endSessionUrl(params = {}) {
		assertIssuerConfiguration(this.issuer, "end_session_endpoint");

		const { 0: postLogout, length } = this.post_logout_redirect_uris || [];

		const { post_logout_redirect_uri = length === 1 ? postLogout : undefined } = params;

		let id_token_hint;
		({ id_token_hint, ...params } = params);
		if (id_token_hint instanceof token_set) {
			if (!id_token_hint.id_token) {
				throw new TypeError("id_token not present in TokenSet");
			}
			id_token_hint = id_token_hint.id_token;
		}

		const target = url__default["default"].parse(this.issuer.end_session_endpoint, true);
		target.search = null;
		defaults_1(
			target.query,
			params,
			{
				post_logout_redirect_uri,
				client_id: this.client_id,
			},
			{ id_token_hint }
		);

		Object.entries(target.query).forEach(([key, value]) => {
			if (value === null || value === undefined) {
				delete target.query[key];
			}
		});

		return url__default["default"].format(target);
	}

	callbackParams(input) {
		const isIncomingMessage = input instanceof http__default["default"].IncomingMessage || (input && input.method && input.url);
		const isString = typeof input === "string";

		if (!isString && !isIncomingMessage) {
			throw new TypeError("#callbackParams only accepts string urls, http.IncomingMessage or a lookalike");
		}
		if (isIncomingMessage) {
			switch (input.method) {
				case "GET":
					return pickCb(url__default["default"].parse(input.url, true).query);
				case "POST":
					if (input.body === undefined) {
						throw new TypeError("incoming message body missing, include a body parser prior to this method call");
					}
					switch (typeof input.body) {
						case "object":
						case "string":
							if (Buffer.isBuffer(input.body)) {
								return pickCb(querystring__default["default"].parse(input.body.toString("utf-8")));
							}
							if (typeof input.body === "string") {
								return pickCb(querystring__default["default"].parse(input.body));
							}

							return pickCb(input.body);
						default:
							throw new TypeError("invalid IncomingMessage body object");
					}
				default:
					throw new TypeError("invalid IncomingMessage method");
			}
		} else {
			return pickCb(url__default["default"].parse(input, true).query);
		}
	}

	async callback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {
		let params = pickCb(parameters);

		if (checks.jarm && !("response" in parameters)) {
			throw new RPError$3({
				message: "expected a JARM response",
				checks,
				params,
			});
		} else if ("response" in parameters) {
			const decrypted = await this.decryptJARM(params.response);
			params = await this.validateJARM(decrypted);
		}

		if (this.default_max_age && !checks.max_age) {
			checks.max_age = this.default_max_age;
		}

		if (params.state && !checks.state) {
			throw new TypeError("checks.state argument is missing");
		}

		if (!params.state && checks.state) {
			throw new RPError$3({
				message: "state missing from the response",
				checks,
				params,
			});
		}

		if (checks.state !== params.state) {
			throw new RPError$3({
				printf: ["state mismatch, expected %s, got: %s", checks.state, params.state],
				checks,
				params,
			});
		}

		if ("iss" in params) {
			assertIssuerConfiguration(this.issuer, "issuer");
			if (params.iss !== this.issuer.issuer) {
				throw new RPError$3({
					printf: ["iss mismatch, expected %s, got: %s", this.issuer.issuer, params.iss],
					params,
				});
			}
		} else if (this.issuer.authorization_response_iss_parameter_supported && !("id_token" in params) && !("response" in parameters)) {
			throw new RPError$3({
				message: "iss missing from the response",
				params,
			});
		}

		if (params.error) {
			throw new OPError$2(params);
		}

		const RESPONSE_TYPE_REQUIRED_PARAMS = {
			code: ["code"],
			id_token: ["id_token"],
			token: ["access_token", "token_type"],
		};

		if (checks.response_type) {
			for (const type of checks.response_type.split(" ")) {
				if (type === "none") {
					if (params.code || params.id_token || params.access_token) {
						throw new RPError$3({
							message: 'unexpected params encountered for "none" response',
							checks,
							params,
						});
					}
				} else {
					for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]) {
						if (!params[param]) {
							throw new RPError$3({
								message: `${param} missing from response`,
								checks,
								params,
							});
						}
					}
				}
			}
		}

		if (params.id_token) {
			const tokenset = new token_set(params);
			await this.decryptIdToken(tokenset);
			await this.validateIdToken(tokenset, checks.nonce, "authorization", checks.max_age, checks.state);

			if (!params.code) {
				return tokenset;
			}
		}

		if (params.code) {
			const tokenset = await this.grant(
				{
					...exchangeBody,
					grant_type: "authorization_code",
					code: params.code,
					redirect_uri: redirectUri,
					code_verifier: checks.code_verifier,
				},
				{ clientAssertionPayload, DPoP }
			);

			await this.decryptIdToken(tokenset);
			await this.validateIdToken(tokenset, checks.nonce, "token", checks.max_age);

			if (params.session_state) {
				tokenset.session_state = params.session_state;
			}

			return tokenset;
		}

		return new token_set(params);
	}

	async oauthCallback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {
		let params = pickCb(parameters);

		if (checks.jarm && !("response" in parameters)) {
			throw new RPError$3({
				message: "expected a JARM response",
				checks,
				params,
			});
		} else if ("response" in parameters) {
			const decrypted = await this.decryptJARM(params.response);
			params = await this.validateJARM(decrypted);
		}

		if (params.state && !checks.state) {
			throw new TypeError("checks.state argument is missing");
		}

		if (!params.state && checks.state) {
			throw new RPError$3({
				message: "state missing from the response",
				checks,
				params,
			});
		}

		if (checks.state !== params.state) {
			throw new RPError$3({
				printf: ["state mismatch, expected %s, got: %s", checks.state, params.state],
				checks,
				params,
			});
		}

		if ("iss" in params) {
			assertIssuerConfiguration(this.issuer, "issuer");
			if (params.iss !== this.issuer.issuer) {
				throw new RPError$3({
					printf: ["iss mismatch, expected %s, got: %s", this.issuer.issuer, params.iss],
					params,
				});
			}
		} else if (this.issuer.authorization_response_iss_parameter_supported && !("id_token" in params) && !("response" in parameters)) {
			throw new RPError$3({
				message: "iss missing from the response",
				params,
			});
		}

		if (params.error) {
			throw new OPError$2(params);
		}

		if (typeof params.id_token === "string" && params.id_token.length) {
			throw new RPError$3({
				message: "id_token detected in the response, you must use client.callback() instead of client.oauthCallback()",
				params,
			});
		}
		delete params.id_token;

		const RESPONSE_TYPE_REQUIRED_PARAMS = {
			code: ["code"],
			token: ["access_token", "token_type"],
		};

		if (checks.response_type) {
			for (const type of checks.response_type.split(" ")) {
				if (type === "none") {
					if (params.code || params.id_token || params.access_token) {
						throw new RPError$3({
							message: 'unexpected params encountered for "none" response',
							checks,
							params,
						});
					}
				}

				if (RESPONSE_TYPE_REQUIRED_PARAMS[type]) {
					for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]) {
						if (!params[param]) {
							throw new RPError$3({
								message: `${param} missing from response`,
								checks,
								params,
							});
						}
					}
				}
			}
		}

		if (params.code) {
			const tokenset = await this.grant(
				{
					...exchangeBody,
					grant_type: "authorization_code",
					code: params.code,
					redirect_uri: redirectUri,
					code_verifier: checks.code_verifier,
				},
				{ clientAssertionPayload, DPoP }
			);

			if (typeof tokenset.id_token === "string" && tokenset.id_token.length) {
				throw new RPError$3({
					message: "id_token detected in the response, you must use client.callback() instead of client.oauthCallback()",
					params,
				});
			}
			delete tokenset.id_token;

			return tokenset;
		}

		return new token_set(params);
	}

	async decryptIdToken(token) {
		if (!this.id_token_encrypted_response_alg) {
			return token;
		}

		let idToken = token;

		if (idToken instanceof token_set) {
			if (!idToken.id_token) {
				throw new TypeError("id_token not present in TokenSet");
			}
			idToken = idToken.id_token;
		}

		const expectedAlg = this.id_token_encrypted_response_alg;
		const expectedEnc = this.id_token_encrypted_response_enc;

		const result = await this.decryptJWE(idToken, expectedAlg, expectedEnc);

		if (token instanceof token_set) {
			token.id_token = result;
			return token;
		}

		return result;
	}

	async validateJWTUserinfo(body) {
		const expectedAlg = this.userinfo_signed_response_alg;

		return this.validateJWT(body, expectedAlg, []);
	}

	async decryptJARM(response) {
		if (!this.authorization_encrypted_response_alg) {
			return response;
		}

		const expectedAlg = this.authorization_encrypted_response_alg;
		const expectedEnc = this.authorization_encrypted_response_enc;

		return this.decryptJWE(response, expectedAlg, expectedEnc);
	}

	async decryptJWTUserinfo(body) {
		if (!this.userinfo_encrypted_response_alg) {
			return body;
		}

		const expectedAlg = this.userinfo_encrypted_response_alg;
		const expectedEnc = this.userinfo_encrypted_response_enc;

		return this.decryptJWE(body, expectedAlg, expectedEnc);
	}

	async decryptJWE(jwe, expectedAlg, expectedEnc = "A128CBC-HS256") {
		const header = JSON.parse(base64url.decode(jwe.split(".")[0]));

		if (header.alg !== expectedAlg) {
			throw new RPError$3({
				printf: ["unexpected JWE alg received, expected %s, got: %s", expectedAlg, header.alg],
				jwt: jwe,
			});
		}

		if (header.enc !== expectedEnc) {
			throw new RPError$3({
				printf: ["unexpected JWE enc received, expected %s, got: %s", expectedEnc, header.enc],
				jwt: jwe,
			});
		}

		const getPlaintext = (result) => new TextDecoder().decode(result.plaintext);
		let plaintext;
		if (expectedAlg.match(/^(?:RSA|ECDH)/)) {
			const keystore = await keystores.get(this);

			for (const { keyObject: key } of keystore.all({
				...jose_1.decodeProtectedHeader(jwe),
				use: "enc",
			})) {
				plaintext = await jose_1.compactDecrypt(jwe, key).then(getPlaintext, () => {});
				if (plaintext) break;
			}
		} else {
			plaintext = await jose_1.compactDecrypt(jwe, this.secretForAlg(expectedAlg === "dir" ? expectedEnc : expectedAlg)).then(getPlaintext, () => {});
		}

		if (!plaintext) {
			throw new RPError$3({
				message: "failed to decrypt JWE",
				jwt: jwe,
			});
		}
		return plaintext;
	}

	async validateIdToken(tokenSet, nonce, returnedBy, maxAge, state) {
		let idToken = tokenSet;

		const expectedAlg = this.id_token_signed_response_alg;

		const isTokenSet = idToken instanceof token_set;

		if (isTokenSet) {
			if (!idToken.id_token) {
				throw new TypeError("id_token not present in TokenSet");
			}
			idToken = idToken.id_token;
		}

		idToken = String(idToken);

		const timestamp = unix_timestamp();
		const { protected: header, payload, key } = await this.validateJWT(idToken, expectedAlg);

		if (typeof maxAge === "number" || (maxAge !== skipMaxAgeCheck && this.require_auth_time)) {
			if (!payload.auth_time) {
				throw new RPError$3({
					message: "missing required JWT property auth_time",
					jwt: idToken,
				});
			}
			if (typeof payload.auth_time !== "number") {
				throw new RPError$3({
					message: "JWT auth_time claim must be a JSON numeric value",
					jwt: idToken,
				});
			}
		}

		if (typeof maxAge === "number" && payload.auth_time + maxAge < timestamp - this[CLOCK_TOLERANCE$1]) {
			throw new RPError$3({
				printf: ["too much time has elapsed since the last End-User authentication, max_age %i, auth_time: %i, now %i", maxAge, payload.auth_time, timestamp - this[CLOCK_TOLERANCE$1]],
				now: timestamp,
				tolerance: this[CLOCK_TOLERANCE$1],
				auth_time: payload.auth_time,
				jwt: idToken,
			});
		}

		if (nonce !== skipNonceCheck && (payload.nonce || nonce !== undefined) && payload.nonce !== nonce) {
			throw new RPError$3({
				printf: ["nonce mismatch, expected %s, got: %s", nonce, payload.nonce],
				jwt: idToken,
			});
		}

		if (returnedBy === "authorization") {
			if (!payload.at_hash && tokenSet.access_token) {
				throw new RPError$3({
					message: "missing required property at_hash",
					jwt: idToken,
				});
			}

			if (!payload.c_hash && tokenSet.code) {
				throw new RPError$3({
					message: "missing required property c_hash",
					jwt: idToken,
				});
			}

			if (this.fapi()) {
				if (!payload.s_hash && (tokenSet.state || state)) {
					throw new RPError$3({
						message: "missing required property s_hash",
						jwt: idToken,
					});
				}
			}

			if (payload.s_hash) {
				if (!state) {
					throw new TypeError('cannot verify s_hash, "checks.state" property not provided');
				}

				try {
					lib$1.validate({ claim: "s_hash", source: "state" }, payload.s_hash, state, header.alg, key.jwk && key.jwk.crv);
				} catch (err) {
					throw new RPError$3({ message: err.message, jwt: idToken });
				}
			}
		}

		if (this.fapi() && payload.iat < timestamp - 3600) {
			throw new RPError$3({
				printf: ["JWT issued too far in the past, now %i, iat %i", timestamp, payload.iat],
				now: timestamp,
				tolerance: this[CLOCK_TOLERANCE$1],
				iat: payload.iat,
				jwt: idToken,
			});
		}

		if (tokenSet.access_token && payload.at_hash !== undefined) {
			try {
				lib$1.validate({ claim: "at_hash", source: "access_token" }, payload.at_hash, tokenSet.access_token, header.alg, key.jwk && key.jwk.crv);
			} catch (err) {
				throw new RPError$3({ message: err.message, jwt: idToken });
			}
		}

		if (tokenSet.code && payload.c_hash !== undefined) {
			try {
				lib$1.validate({ claim: "c_hash", source: "code" }, payload.c_hash, tokenSet.code, header.alg, key.jwk && key.jwk.crv);
			} catch (err) {
				throw new RPError$3({ message: err.message, jwt: idToken });
			}
		}

		return tokenSet;
	}

	async validateJWT(jwt, expectedAlg, required = ["iss", "sub", "aud", "exp", "iat"]) {
		const isSelfIssued = this.issuer.issuer === "https://self-issued.me";
		const timestamp = unix_timestamp();
		let header;
		let payload;
		try {
			({ header, payload } = decode_jwt(jwt, { complete: true }));
		} catch (err) {
			throw new RPError$3({
				printf: ["failed to decode JWT (%s: %s)", err.name, err.message],
				jwt,
			});
		}

		if (header.alg !== expectedAlg) {
			throw new RPError$3({
				printf: ["unexpected JWT alg received, expected %s, got: %s", expectedAlg, header.alg],
				jwt,
			});
		}

		if (isSelfIssued) {
			required = [...required, "sub_jwk"];
		}

		required.forEach(verifyPresence.bind(undefined, payload, jwt));

		if (payload.iss !== undefined) {
			let expectedIss = this.issuer.issuer;

			if (this.#aadIssValidation) {
				expectedIss = this.issuer.issuer.replace("{tenantid}", payload.tid);
			}

			if (payload.iss !== expectedIss) {
				throw new RPError$3({
					printf: ["unexpected iss value, expected %s, got: %s", expectedIss, payload.iss],
					jwt,
				});
			}
		}

		if (payload.iat !== undefined) {
			if (typeof payload.iat !== "number") {
				throw new RPError$3({
					message: "JWT iat claim must be a JSON numeric value",
					jwt,
				});
			}
		}

		if (payload.nbf !== undefined) {
			if (typeof payload.nbf !== "number") {
				throw new RPError$3({
					message: "JWT nbf claim must be a JSON numeric value",
					jwt,
				});
			}
			if (payload.nbf > timestamp + this[CLOCK_TOLERANCE$1]) {
				throw new RPError$3({
					printf: ["JWT not active yet, now %i, nbf %i", timestamp + this[CLOCK_TOLERANCE$1], payload.nbf],
					now: timestamp,
					tolerance: this[CLOCK_TOLERANCE$1],
					nbf: payload.nbf,
					jwt,
				});
			}
		}

		if (payload.exp !== undefined) {
			if (typeof payload.exp !== "number") {
				throw new RPError$3({
					message: "JWT exp claim must be a JSON numeric value",
					jwt,
				});
			}
			if (timestamp - this[CLOCK_TOLERANCE$1] >= payload.exp) {
				throw new RPError$3({
					printf: ["JWT expired, now %i, exp %i", timestamp - this[CLOCK_TOLERANCE$1], payload.exp],
					now: timestamp,
					tolerance: this[CLOCK_TOLERANCE$1],
					exp: payload.exp,
					jwt,
				});
			}
		}

		if (payload.aud !== undefined) {
			if (Array.isArray(payload.aud)) {
				if (payload.aud.length > 1 && !payload.azp) {
					throw new RPError$3({
						message: "missing required JWT property azp",
						jwt,
					});
				}

				if (!payload.aud.includes(this.client_id)) {
					throw new RPError$3({
						printf: ["aud is missing the client_id, expected %s to be included in %j", this.client_id, payload.aud],
						jwt,
					});
				}
			} else if (payload.aud !== this.client_id) {
				throw new RPError$3({
					printf: ["aud mismatch, expected %s, got: %s", this.client_id, payload.aud],
					jwt,
				});
			}
		}

		if (payload.azp !== undefined) {
			let additionalAuthorizedParties = this.#additionalAuthorizedParties;

			if (typeof additionalAuthorizedParties === "string") {
				additionalAuthorizedParties = [this.client_id, additionalAuthorizedParties];
			} else if (Array.isArray(additionalAuthorizedParties)) {
				additionalAuthorizedParties = [this.client_id, ...additionalAuthorizedParties];
			} else {
				additionalAuthorizedParties = [this.client_id];
			}

			if (!additionalAuthorizedParties.includes(payload.azp)) {
				throw new RPError$3({
					printf: ["azp mismatch, got: %s", payload.azp],
					jwt,
				});
			}
		}

		let keys;

		if (isSelfIssued) {
			try {
				assert(is_plain_object(payload.sub_jwk));
				const key = await jose_1.importJWK(payload.sub_jwk, header.alg);
				assert.equal(key.type, "public");
				keys = [{ keyObject: key }];
			} catch (err) {
				throw new RPError$3({
					message: "failed to use sub_jwk claim as an asymmetric JSON Web Key",
					jwt,
				});
			}
			if ((await jose_1.calculateJwkThumbprint(payload.sub_jwk)) !== payload.sub) {
				throw new RPError$3({
					message: "failed to match the subject with sub_jwk",
					jwt,
				});
			}
		} else if (header.alg.startsWith("HS")) {
			keys = [this.secretForAlg(header.alg)];
		} else if (header.alg !== "none") {
			keys = await queryKeyStore.call(this.issuer, { ...header, use: "sig" });
		}

		if (!keys && header.alg === "none") {
			return { protected: header, payload };
		}

		for (const key of keys) {
			const verified = await jose_1.compactVerify(jwt, key instanceof Uint8Array ? key : key.keyObject).catch(() => {});
			if (verified) {
				return {
					payload,
					protected: verified.protectedHeader,
					key,
				};
			}
		}

		throw new RPError$3({
			message: "failed to validate JWT signature",
			jwt,
		});
	}

	async refresh(refreshToken, { exchangeBody, clientAssertionPayload, DPoP } = {}) {
		let token = refreshToken;

		if (token instanceof token_set) {
			if (!token.refresh_token) {
				throw new TypeError("refresh_token not present in TokenSet");
			}
			token = token.refresh_token;
		}

		const tokenset = await this.grant(
			{
				...exchangeBody,
				grant_type: "refresh_token",
				refresh_token: String(token),
			},
			{ clientAssertionPayload, DPoP }
		);

		if (tokenset.id_token) {
			await this.decryptIdToken(tokenset);
			await this.validateIdToken(tokenset, skipNonceCheck, "token", skipMaxAgeCheck);

			if (refreshToken instanceof token_set && refreshToken.id_token) {
				const expectedSub = refreshToken.claims().sub;
				const actualSub = tokenset.claims().sub;
				if (actualSub !== expectedSub) {
					throw new RPError$3({
						printf: ["sub mismatch, expected %s, got: %s", expectedSub, actualSub],
						jwt: tokenset.id_token,
					});
				}
			}
		}

		return tokenset;
	}

	async requestResource(resourceUrl, accessToken, { method, headers, body, DPoP, tokenType = DPoP ? "DPoP" : accessToken instanceof token_set ? accessToken.token_type : "Bearer" } = {}, retry) {
		if (accessToken instanceof token_set) {
			if (!accessToken.access_token) {
				throw new TypeError("access_token not present in TokenSet");
			}
			accessToken = accessToken.access_token;
		}

		if (!accessToken) {
			throw new TypeError("no access token provided");
		} else if (typeof accessToken !== "string") {
			throw new TypeError("invalid access token provided");
		}

		const requestOpts = {
			headers: {
				Authorization: authorizationHeaderValue(accessToken, tokenType),
				...headers,
			},
			body,
		};

		const mTLS = !!this.tls_client_certificate_bound_access_tokens;

		const response = await request.call(
			this,
			{
				...requestOpts,
				responseType: "buffer",
				method,
				url: resourceUrl,
			},
			{ accessToken, mTLS, DPoP }
		);

		const wwwAuthenticate = response.headers["www-authenticate"];
		if (retry !== retryAttempt && wwwAuthenticate && wwwAuthenticate.toLowerCase().startsWith("dpop ") && www_authenticate_parser(wwwAuthenticate).error === "use_dpop_nonce") {
			return this.requestResource(resourceUrl, accessToken, {
				method,
				headers,
				body,
				DPoP,
				tokenType,
			});
		}

		return response;
	}

	async userinfo(accessToken, { method = "GET", via = "header", tokenType, params, DPoP } = {}) {
		assertIssuerConfiguration(this.issuer, "userinfo_endpoint");
		const options = {
			tokenType,
			method: String(method).toUpperCase(),
			DPoP,
		};

		if (options.method !== "GET" && options.method !== "POST") {
			throw new TypeError("#userinfo() method can only be POST or a GET");
		}

		if (via === "body" && options.method !== "POST") {
			throw new TypeError("can only send body on POST");
		}

		const jwt = !!(this.userinfo_signed_response_alg || this.userinfo_encrypted_response_alg);

		if (jwt) {
			options.headers = { Accept: "application/jwt" };
		} else {
			options.headers = { Accept: "application/json" };
		}
		const mTLS = !!this.tls_client_certificate_bound_access_tokens;

		let targetUrl;
		if (mTLS && this.issuer.mtls_endpoint_aliases) {
			targetUrl = this.issuer.mtls_endpoint_aliases.userinfo_endpoint;
		}

		targetUrl = new url__default["default"].URL(targetUrl || this.issuer.userinfo_endpoint);

		if (via === "body") {
			options.headers.Authorization = undefined;
			options.headers["Content-Type"] = "application/x-www-form-urlencoded";
			options.body = new url__default["default"].URLSearchParams();
			options.body.append("access_token", accessToken instanceof token_set ? accessToken.access_token : accessToken);
		}

		// handle additional parameters, GET via querystring, POST via urlencoded body
		if (params) {
			if (options.method === "GET") {
				Object.entries(params).forEach(([key, value]) => {
					targetUrl.searchParams.append(key, value);
				});
			} else if (options.body) {
				// POST && via body
				Object.entries(params).forEach(([key, value]) => {
					options.body.append(key, value);
				});
			} else {
				// POST && via header
				options.body = new url__default["default"].URLSearchParams();
				options.headers["Content-Type"] = "application/x-www-form-urlencoded";
				Object.entries(params).forEach(([key, value]) => {
					options.body.append(key, value);
				});
			}
		}

		if (options.body) {
			options.body = options.body.toString();
		}

		const response = await this.requestResource(targetUrl, accessToken, options);

		let parsed = process_response(response, { bearer: true });

		if (jwt) {
			if (!/^application\/jwt/.test(response.headers["content-type"])) {
				throw new RPError$3({
					message: "expected application/jwt response from the userinfo_endpoint",
					response,
				});
			}

			const body = response.body.toString();
			const userinfo = await this.decryptJWTUserinfo(body);
			if (!this.userinfo_signed_response_alg) {
				try {
					parsed = JSON.parse(userinfo);
					assert(is_plain_object(parsed));
				} catch (err) {
					throw new RPError$3({
						message: "failed to parse userinfo JWE payload as JSON",
						jwt: userinfo,
					});
				}
			} else {
				({ payload: parsed } = await this.validateJWTUserinfo(userinfo));
			}
		} else {
			try {
				parsed = JSON.parse(response.body);
			} catch (err) {
				Object.defineProperty(err, "response", { value: response });
				throw err;
			}
		}

		if (accessToken instanceof token_set && accessToken.id_token) {
			const expectedSub = accessToken.claims().sub;
			if (parsed.sub !== expectedSub) {
				throw new RPError$3({
					printf: ["userinfo sub mismatch, expected %s, got: %s", expectedSub, parsed.sub],
					body: parsed,
					jwt: accessToken.id_token,
				});
			}
		}

		return parsed;
	}

	encryptionSecret(len) {
		const hash = len <= 256 ? "sha256" : len <= 384 ? "sha384" : len <= 512 ? "sha512" : false;
		if (!hash) {
			throw new Error("unsupported symmetric encryption key derivation");
		}

		return crypto_1__default["default"]
			.createHash(hash)
			.update(this.client_secret)
			.digest()
			.slice(0, len / 8);
	}

	secretForAlg(alg) {
		if (!this.client_secret) {
			throw new TypeError("client_secret is required");
		}

		if (/^A(\d{3})(?:GCM)?KW$/.test(alg)) {
			return this.encryptionSecret(parseInt(RegExp.$1, 10));
		}

		if (/^A(\d{3})(?:GCM|CBC-HS(\d{3}))$/.test(alg)) {
			return this.encryptionSecret(parseInt(RegExp.$2 || RegExp.$1, 10));
		}

		return new TextEncoder().encode(this.client_secret);
	}

	async grant(body, { clientAssertionPayload, DPoP } = {}, retry) {
		assertIssuerConfiguration(this.issuer, "token_endpoint");
		const response = await authenticatedPost.call(
			this,
			"token",
			{
				form: body,
				responseType: "json",
			},
			{ clientAssertionPayload, DPoP }
		);
		let responseBody;
		try {
			responseBody = process_response(response);
		} catch (err) {
			if (retry !== retryAttempt && err instanceof OPError$2 && err.error === "use_dpop_nonce") {
				return this.grant(body, { clientAssertionPayload, DPoP }, retryAttempt);
			}
			throw err;
		}

		return new token_set(responseBody);
	}

	async deviceAuthorization(params = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {
		assertIssuerConfiguration(this.issuer, "device_authorization_endpoint");
		assertIssuerConfiguration(this.issuer, "token_endpoint");

		const body = authorizationParams.call(this, {
			client_id: this.client_id,
			redirect_uri: null,
			response_type: null,
			...params,
		});

		const response = await authenticatedPost.call(
			this,
			"device_authorization",
			{
				responseType: "json",
				form: body,
			},
			{ clientAssertionPayload, endpointAuthMethod: "token" }
		);
		const responseBody = process_response(response);

		return new device_flow_handle({
			client: this,
			exchangeBody,
			clientAssertionPayload,
			response: responseBody,
			maxAge: params.max_age,
			DPoP,
		});
	}

	async revoke(token, hint, { revokeBody, clientAssertionPayload } = {}) {
		assertIssuerConfiguration(this.issuer, "revocation_endpoint");
		if (hint !== undefined && typeof hint !== "string") {
			throw new TypeError("hint must be a string");
		}

		const form = { ...revokeBody, token };

		if (hint) {
			form.token_type_hint = hint;
		}

		const response = await authenticatedPost.call(
			this,
			"revocation",
			{
				form,
			},
			{ clientAssertionPayload }
		);
		process_response(response, { body: false });
	}

	async introspect(token, hint, { introspectBody, clientAssertionPayload } = {}) {
		assertIssuerConfiguration(this.issuer, "introspection_endpoint");
		if (hint !== undefined && typeof hint !== "string") {
			throw new TypeError("hint must be a string");
		}

		const form = { ...introspectBody, token };
		if (hint) {
			form.token_type_hint = hint;
		}

		const response = await authenticatedPost.call(this, "introspection", { form, responseType: "json" }, { clientAssertionPayload });

		const responseBody = process_response(response);

		return responseBody;
	}

	static async register(metadata, options = {}) {
		const { initialAccessToken, jwks, ...clientOptions } = options;

		assertIssuerConfiguration(this.issuer, "registration_endpoint");

		if (jwks !== undefined && !(metadata.jwks || metadata.jwks_uri)) {
			const keystore = await getKeystore.call(this, jwks);
			metadata.jwks = keystore.toJWKS();
		}

		const response = await request.call(this, {
			headers: {
				Accept: "application/json",
				...(initialAccessToken
					? {
							Authorization: authorizationHeaderValue(initialAccessToken),
					  }
					: undefined),
			},
			responseType: "json",
			json: metadata,
			url: this.issuer.registration_endpoint,
			method: "POST",
		});
		const responseBody = process_response(response, { statusCode: 201, bearer: true });

		return new this(responseBody, jwks, clientOptions);
	}

	get metadata() {
		return deep_clone(Object.fromEntries(this.#metadata.entries()));
	}

	static async fromUri(registrationClientUri, registrationAccessToken, jwks, clientOptions) {
		const response = await request.call(this, {
			method: "GET",
			url: registrationClientUri,
			responseType: "json",
			headers: {
				Authorization: authorizationHeaderValue(registrationAccessToken),
				Accept: "application/json",
			},
		});
		const responseBody = process_response(response, { bearer: true });

		return new this(responseBody, jwks, clientOptions);
	}

	async requestObject(requestObject = {}, { sign: signingAlgorithm = this.request_object_signing_alg || "none", encrypt: { alg: eKeyManagement = this.request_object_encryption_alg, enc: eContentEncryption = this.request_object_encryption_enc || "A128CBC-HS256" } = {} } = {}) {
		if (!is_plain_object(requestObject)) {
			throw new TypeError("requestObject must be a plain object");
		}

		let signed;
		let key;
		const unix = unix_timestamp();
		const header = { alg: signingAlgorithm, typ: "oauth-authz-req+jwt" };
		const payload = JSON.stringify(
			defaults_1({}, requestObject, {
				iss: this.client_id,
				aud: this.issuer.issuer,
				client_id: this.client_id,
				jti: random$1(),
				iat: unix,
				exp: unix + 300,
				...(this.fapi() ? { nbf: unix } : undefined),
			})
		);
		if (signingAlgorithm === "none") {
			signed = [base64url.encode(JSON.stringify(header)), base64url.encode(payload), ""].join(".");
		} else {
			const symmetric = signingAlgorithm.startsWith("HS");
			if (symmetric) {
				key = this.secretForAlg(signingAlgorithm);
			} else {
				const keystore = await keystores.get(this);

				if (!keystore) {
					throw new TypeError(`no keystore present for client, cannot sign using alg ${signingAlgorithm}`);
				}
				key = keystore.get({ alg: signingAlgorithm, use: "sig" });
				if (!key) {
					throw new TypeError(`no key to sign with found for alg ${signingAlgorithm}`);
				}
			}

			signed = await new jose_1.CompactSign(new TextEncoder().encode(payload))
				.setProtectedHeader({
					...header,
					kid: symmetric ? undefined : key.jwk.kid,
				})
				.sign(symmetric ? key : key.keyObject);
		}

		if (!eKeyManagement) {
			return signed;
		}

		const fields = { alg: eKeyManagement, enc: eContentEncryption, cty: "oauth-authz-req+jwt" };

		if (fields.alg.match(/^(RSA|ECDH)/)) {
			[key] = await queryKeyStore.call(this.issuer, { alg: fields.alg, use: "enc" }, { allowMulti: true });
		} else {
			key = this.secretForAlg(fields.alg === "dir" ? fields.enc : fields.alg);
		}

		return new jose_1.CompactEncrypt(new TextEncoder().encode(signed))
			.setProtectedHeader({
				...fields,
				kid: key instanceof Uint8Array ? undefined : key.jwk.kid,
			})
			.encrypt(key instanceof Uint8Array ? key : key.keyObject);
	}

	async pushedAuthorizationRequest(params = {}, { clientAssertionPayload } = {}) {
		assertIssuerConfiguration(this.issuer, "pushed_authorization_request_endpoint");

		const body = {
			...("request" in params ? params : authorizationParams.call(this, params)),
			client_id: this.client_id,
		};

		const response = await authenticatedPost.call(
			this,
			"pushed_authorization_request",
			{
				responseType: "json",
				form: body,
			},
			{ clientAssertionPayload, endpointAuthMethod: "token" }
		);
		const responseBody = process_response(response, { statusCode: 201 });

		if (!("expires_in" in responseBody)) {
			throw new RPError$3({
				message: "expected expires_in in Pushed Authorization Successful Response",
				response,
			});
		}
		if (typeof responseBody.expires_in !== "number") {
			throw new RPError$3({
				message: "invalid expires_in value in Pushed Authorization Successful Response",
				response,
			});
		}
		if (!("request_uri" in responseBody)) {
			throw new RPError$3({
				message: "expected request_uri in Pushed Authorization Successful Response",
				response,
			});
		}
		if (typeof responseBody.request_uri !== "string") {
			throw new RPError$3({
				message: "invalid request_uri value in Pushed Authorization Successful Response",
				response,
			});
		}

		return responseBody;
	}

	get issuer() {
		return this.#issuer;
	}

	/* istanbul ignore next */
	[inspect$1.custom]() {
		return `${this.constructor.name} ${inspect$1(this.metadata, {
			depth: Infinity,
			colors: process.stdout.isTTY,
			compact: false,
			sorted: true,
		})}`;
	}

	fapi() {
		return this.constructor.name === "FAPI1Client";
	}

	async validateJARM(response) {
		const expectedAlg = this.authorization_signed_response_alg;
		const { payload } = await this.validateJWT(response, expectedAlg, ["iss", "exp", "aud"]);
		return pickCb(payload);
	}
}

const RSPS = /^(?:RS|PS)(?:256|384|512)$/;
function determineRsaAlgorithm(privateKey, privateKeyInput, valuesSupported) {
	if (typeof privateKeyInput === "object" && typeof privateKeyInput.key === "object" && privateKeyInput.key.alg) {
		return privateKeyInput.key.alg;
	}

	if (Array.isArray(valuesSupported)) {
		let candidates = valuesSupported.filter(RegExp.prototype.test.bind(RSPS));
		if (privateKey.asymmetricKeyType === "rsa-pss") {
			candidates = candidates.filter((value) => value.startsWith("PS"));
		}
		return ["PS256", "PS384", "PS512", "RS256", "RS384", "RS384"].find((preferred) => candidates.includes(preferred));
	}

	return "PS256";
}

const p256 = Buffer.from([42, 134, 72, 206, 61, 3, 1, 7]);
const p384 = Buffer.from([43, 129, 4, 0, 34]);
const p521 = Buffer.from([43, 129, 4, 0, 35]);
const secp256k1 = Buffer.from([43, 129, 4, 0, 10]);

function determineEcAlgorithm(privateKey, privateKeyInput) {
	// If input was a JWK
	switch (typeof privateKeyInput === "object" && typeof privateKeyInput.key === "object" && privateKeyInput.key.crv) {
		case "P-256":
			return "ES256";
		case "secp256k1":
			return "ES256K";
		case "P-384":
			return "ES384";
		case "P-512":
			return "ES512";
	}

	const buf = privateKey.export({ format: "der", type: "pkcs8" });
	const i = buf[1] < 128 ? 17 : 18;
	const len = buf[i];
	const curveOid = buf.slice(i + 1, i + 1 + len);
	if (curveOid.equals(p256)) {
		return "ES256";
	}

	if (curveOid.equals(p384)) {
		return "ES384";
	}
	if (curveOid.equals(p521)) {
		return "ES512";
	}

	if (curveOid.equals(secp256k1)) {
		return "ES256K";
	}

	throw new TypeError("unsupported DPoP private key curve");
}

const jwkCache = new WeakMap();
async function getJwk(privateKey, privateKeyInput) {
	if (typeof privateKeyInput === "object" && typeof privateKeyInput.key === "object" && privateKeyInput.key.crv) {
		return pick(privateKeyInput.key, "kty", "crv", "x", "y", "e", "n");
	}

	if (jwkCache.has(privateKeyInput)) {
		return jwkCache.get(privateKeyInput);
	}

	const jwk = pick(await jose_1.exportJWK(privateKey), "kty", "crv", "x", "y", "e", "n");

	if (is_key_object(privateKeyInput)) {
		jwkCache.set(privateKeyInput, jwk);
	}

	return jwk;
}

/**
 * @name dpopProof
 * @api private
 */
async function dpopProof(payload, privateKeyInput, accessToken) {
	if (!is_plain_object(payload)) {
		throw new TypeError("payload must be a plain object");
	}

	let privateKey;
	if (is_key_object(privateKeyInput)) {
		privateKey = privateKeyInput;
	} else {
		privateKey = crypto_1__default["default"].createPrivateKey(privateKeyInput);
	}

	if (privateKey.type !== "private") {
		throw new TypeError('"DPoP" option must be a private key');
	}
	let alg;
	switch (privateKey.asymmetricKeyType) {
		case "ed25519":
		case "ed448":
			alg = "EdDSA";
			break;
		case "ec":
			alg = determineEcAlgorithm(privateKey, privateKeyInput);
			break;
		case "rsa":
		case rsaPssParams && "rsa-pss":
			alg = determineRsaAlgorithm(privateKey, privateKeyInput, this.issuer.dpop_signing_alg_values_supported);
			break;
		default:
			throw new TypeError("unsupported DPoP private key asymmetric key type");
	}

	if (!alg) {
		throw new TypeError("could not determine DPoP JWS Algorithm");
	}

	return new jose_1.SignJWT({
		ath: accessToken ? base64url.encode(crypto_1__default["default"].createHash("sha256").update(accessToken).digest()) : undefined,
		...payload,
	})
		.setProtectedHeader({
			alg,
			typ: "dpop+jwt",
			jwk: await getJwk(privateKey, privateKeyInput),
		})
		.setIssuedAt()
		.setJti(random$1())
		.sign(privateKey);
}

Object.defineProperty(BaseClient$1.prototype, "dpopProof", {
	enumerable: true,
	configurable: true,
	value(...args) {
		process.emitWarning("The DPoP APIs implements an IETF draft (https://www.ietf.org/archive/id/draft-ietf-oauth-dpop-04.html). Breaking draft implementations are included as minor versions of the openid-client library, therefore, the ~ semver operator should be used and close attention be payed to library changelog as well as the drafts themselves.", "DraftWarning");
		Object.defineProperty(BaseClient$1.prototype, "dpopProof", {
			enumerable: true,
			configurable: true,
			value: dpopProof,
		});
		return this.dpopProof(...args);
	},
});

var client = (issuer, aadIssValidation = false) =>
	class Client extends BaseClient$1 {
		constructor(...args) {
			super(issuer, aadIssValidation, ...args);
		}

		static get issuer() {
			return issuer;
		}
	};
var BaseClient_1 = BaseClient$1;
client.BaseClient = BaseClient_1;

var issuer_registry = new lruCache({ max: 100 });

// Credit: https://github.com/rohe/pyoidc/blob/master/src/oic/utils/webfinger.py

// -- Normalization --
// A string of any other type is interpreted as a URI either the form of scheme
// "://" authority path-abempty [ "?" query ] [ "#" fragment ] or authority
// path-abempty [ "?" query ] [ "#" fragment ] per RFC 3986 [RFC3986] and is
// normalized according to the following rules:
//
// If the user input Identifier does not have an RFC 3986 [RFC3986] scheme
// portion, the string is interpreted as [userinfo "@"] host [":" port]
// path-abempty [ "?" query ] [ "#" fragment ] per RFC 3986 [RFC3986].
// If the userinfo component is present and all of the path component, query
// component, and port component are empty, the acct scheme is assumed. In this
// case, the normalized URI is formed by prefixing acct: to the string as the
// scheme. Per the 'acct' URI Scheme [I‑D.ietf‑appsawg‑acct‑uri], if there is an
// at-sign character ('@') in the userinfo component, it needs to be
// percent-encoded as described in RFC 3986 [RFC3986].
// For all other inputs without a scheme portion, the https scheme is assumed,
// and the normalized URI is formed by prefixing https:// to the string as the
// scheme.
// If the resulting URI contains a fragment portion, it MUST be stripped off
// together with the fragment delimiter character "#".
// The WebFinger [I‑D.ietf‑appsawg‑webfinger] Resource in this case is the
// resulting URI, and the WebFinger Host is the authority component.
//
// Note: Since the definition of authority in RFC 3986 [RFC3986] is
// [ userinfo "@" ] host [ ":" port ], it is legal to have a user input
// identifier like userinfo@host:port, e.g., alice@example.com:8080.

const PORT = /^\d+$/;

function hasScheme(input) {
	if (input.includes("://")) return true;

	const authority = input.replace(/(\/|\?)/g, "#").split("#")[0];
	if (authority.includes(":")) {
		const index = authority.indexOf(":");
		const hostOrPort = authority.slice(index + 1);
		if (!PORT.test(hostOrPort)) {
			return true;
		}
	}

	return false;
}

function acctSchemeAssumed(input) {
	if (!input.includes("@")) return false;
	const parts = input.split("@");
	const host = parts[parts.length - 1];
	return !(host.includes(":") || host.includes("/") || host.includes("?"));
}

function normalize(input) {
	if (typeof input !== "string") {
		throw new TypeError("input must be a string");
	}

	let output;
	if (hasScheme(input)) {
		output = input;
	} else if (acctSchemeAssumed(input)) {
		output = `acct:${input}`;
	} else {
		output = `https://${input}`;
	}

	return output.split("#")[0];
}

var webfinger_normalize = normalize;

const { inspect } = util_1__default["default"];

const { RPError: RPError$2 } = errors;

const { keystore } = issuer$1;

const AAD_MULTITENANT_DISCOVERY = ["https://login.microsoftonline.com/common/.well-known/openid-configuration", "https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration", "https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration", "https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration"];
const AAD_MULTITENANT = Symbol();
const ISSUER_DEFAULTS = {
	claim_types_supported: ["normal"],
	claims_parameter_supported: false,
	grant_types_supported: ["authorization_code", "implicit"],
	request_parameter_supported: false,
	request_uri_parameter_supported: true,
	require_request_uri_registration: false,
	response_modes_supported: ["query", "fragment"],
	token_endpoint_auth_methods_supported: ["client_secret_basic"],
};

class Issuer {
	#metadata;
	constructor(meta = {}) {
		const aadIssValidation = meta[AAD_MULTITENANT];
		delete meta[AAD_MULTITENANT];
		["introspection", "revocation"].forEach((endpoint) => {
			// if intro/revocation endpoint auth specific meta is missing use the token ones if they
			// are defined
			if (meta[`${endpoint}_endpoint`] && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined) {
				if (meta.token_endpoint_auth_methods_supported) {
					meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;
				}
				if (meta.token_endpoint_auth_signing_alg_values_supported) {
					meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;
				}
			}
		});

		this.#metadata = new Map();

		Object.entries(meta).forEach(([key, value]) => {
			this.#metadata.set(key, value);
			if (!this[key]) {
				Object.defineProperty(this, key, {
					get() {
						return this.#metadata.get(key);
					},
					enumerable: true,
				});
			}
		});

		issuer_registry.set(this.issuer, this);

		const Client = client(this, aadIssValidation);

		Object.defineProperties(this, {
			Client: { value: Client, enumerable: true },
			FAPI1Client: { value: class FAPI1Client extends Client {}, enumerable: true },
		});
	}

	get metadata() {
		return deep_clone(Object.fromEntries(this.#metadata.entries()));
	}

	static async webfinger(input) {
		const resource = webfinger_normalize(input);
		const { host } = url__default["default"].parse(resource);
		const webfingerUrl = `https://${host}/.well-known/webfinger`;

		const response = await request.call(this, {
			method: "GET",
			url: webfingerUrl,
			responseType: "json",
			searchParams: { resource, rel: "http://openid.net/specs/connect/1.0/issuer" },
			headers: {
				Accept: "application/json",
			},
		});
		const body = process_response(response);

		const location = Array.isArray(body.links) && body.links.find((link) => typeof link === "object" && link.rel === "http://openid.net/specs/connect/1.0/issuer" && link.href);

		if (!location) {
			throw new RPError$2({
				message: "no issuer found in webfinger response",
				body,
			});
		}

		if (typeof location.href !== "string" || !location.href.startsWith("https://")) {
			throw new RPError$2({
				printf: ["invalid issuer location %s", location.href],
				body,
			});
		}

		const expectedIssuer = location.href;
		if (issuer_registry.has(expectedIssuer)) {
			return issuer_registry.get(expectedIssuer);
		}

		const issuer = await this.discover(expectedIssuer);

		if (issuer.issuer !== expectedIssuer) {
			issuer_registry.del(issuer.issuer);
			throw new RPError$2("discovered issuer mismatch, expected %s, got: %s", expectedIssuer, issuer.issuer);
		}
		return issuer;
	}

	static async discover(uri) {
		const parsed = url__default["default"].parse(uri);

		if (parsed.pathname.includes("/.well-known/")) {
			const response = await request.call(this, {
				method: "GET",
				responseType: "json",
				url: uri,
				headers: {
					Accept: "application/json",
				},
			});
			const body = process_response(response);
			return new Issuer({
				...ISSUER_DEFAULTS,
				...body,
				[AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find((discoveryURL) => uri.startsWith(discoveryURL)),
			});
		}

		let pathname;
		if (parsed.pathname.endsWith("/")) {
			pathname = `${parsed.pathname}.well-known/openid-configuration`;
		} else {
			pathname = `${parsed.pathname}/.well-known/openid-configuration`;
		}

		const wellKnownUri = url__default["default"].format({ ...parsed, pathname });

		const response = await request.call(this, {
			method: "GET",
			responseType: "json",
			url: wellKnownUri,
			headers: {
				Accept: "application/json",
			},
		});
		const body = process_response(response);
		return new Issuer({
			...ISSUER_DEFAULTS,
			...body,
			[AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find((discoveryURL) => wellKnownUri.startsWith(discoveryURL)),
		});
	}

	async reloadJwksUri() {
		await keystore.call(this, true);
	}

	/* istanbul ignore next */
	[inspect.custom]() {
		return `${this.constructor.name} ${inspect(this.metadata, {
			depth: Infinity,
			colors: process.stdout.isTTY,
			compact: false,
			sorted: true,
		})}`;
	}
}

var issuer = Issuer;

const { format } = util_1__default["default"];

const { RPError: RPError$1, OPError: OPError$1 } = errors;
const { BaseClient } = client;
const { random, codeChallenge } = generators;

const { resolveResponseType, resolveRedirectUri } = client$1;

function verified(err, user, info = {}) {
	if (err) {
		this.error(err);
	} else if (!user) {
		this.fail(info);
	} else {
		this.success(user, info);
	}
}

function OpenIDConnectStrategy({ client, params = {}, passReqToCallback = false, sessionKey, usePKCE = true, extras = {} } = {}, verify) {
	if (!(client instanceof BaseClient)) {
		throw new TypeError("client must be an instance of openid-client Client");
	}

	if (typeof verify !== "function") {
		throw new TypeError("verify callback must be a function");
	}

	if (!client.issuer || !client.issuer.issuer) {
		throw new TypeError("client must have an issuer with an identifier");
	}

	this._client = client;
	this._issuer = client.issuer;
	this._verify = verify;
	this._passReqToCallback = passReqToCallback;
	this._usePKCE = usePKCE;
	this._key = sessionKey || `oidc:${url__default["default"].parse(this._issuer.issuer).hostname}`;
	this._params = deep_clone(params);
	this._extras = deep_clone(extras);

	if (!this._params.response_type) this._params.response_type = resolveResponseType.call(client);
	if (!this._params.redirect_uri) this._params.redirect_uri = resolveRedirectUri.call(client);
	if (!this._params.scope) this._params.scope = "openid";

	if (this._usePKCE === true) {
		const supportedMethods = Array.isArray(this._issuer.code_challenge_methods_supported) ? this._issuer.code_challenge_methods_supported : false;

		if (supportedMethods && supportedMethods.includes("S256")) {
			this._usePKCE = "S256";
		} else if (supportedMethods && supportedMethods.includes("plain")) {
			this._usePKCE = "plain";
		} else if (supportedMethods) {
			throw new TypeError("neither code_challenge_method supported by the client is supported by the issuer");
		} else {
			this._usePKCE = "S256";
		}
	} else if (typeof this._usePKCE === "string" && !["plain", "S256"].includes(this._usePKCE)) {
		throw new TypeError(`${this._usePKCE} is not valid/implemented PKCE code_challenge_method`);
	}

	this.name = url__default["default"].parse(client.issuer.issuer).hostname;
}

OpenIDConnectStrategy.prototype.authenticate = function authenticate(req, options) {
	(async () => {
		const client = this._client;
		if (!req.session) {
			throw new TypeError("authentication requires session support");
		}
		const reqParams = client.callbackParams(req);
		const sessionKey = this._key;

		/* start authentication request */
		if (Object.keys(reqParams).length === 0) {
			// provide options object with extra authentication parameters
			const params = {
				state: random(),
				...this._params,
				...options,
			};

			if (!params.nonce && params.response_type.includes("id_token")) {
				params.nonce = random();
			}

			req.session[sessionKey] = pick(params, "nonce", "state", "max_age", "response_type");

			if (this._usePKCE && params.response_type.includes("code")) {
				const verifier = random();
				req.session[sessionKey].code_verifier = verifier;

				switch (this._usePKCE) {
					case "S256":
						params.code_challenge = codeChallenge(verifier);
						params.code_challenge_method = "S256";
						break;
					case "plain":
						params.code_challenge = verifier;
						break;
				}
			}

			this.redirect(client.authorizationUrl(params));
			return;
		}
		/* end authentication request */

		/* start authentication response */

		const session = req.session[sessionKey];
		if (Object.keys(session || {}).length === 0) {
			throw new Error(format('did not find expected authorization request details in session, req.session["%s"] is %j', sessionKey, session));
		}

		const { state, nonce, max_age: maxAge, code_verifier: codeVerifier, response_type: responseType } = session;

		try {
			delete req.session[sessionKey];
		} catch (err) {}

		const opts = {
			redirect_uri: this._params.redirect_uri,
			...options,
		};

		const checks = {
			state,
			nonce,
			max_age: maxAge,
			code_verifier: codeVerifier,
			response_type: responseType,
		};

		const tokenset = await client.callback(opts.redirect_uri, reqParams, checks, this._extras);

		const passReq = this._passReqToCallback;
		const loadUserinfo = this._verify.length > (passReq ? 3 : 2) && client.issuer.userinfo_endpoint;

		const args = [tokenset, verified.bind(this)];

		if (loadUserinfo) {
			if (!tokenset.access_token) {
				throw new RPError$1({
					message: "expected access_token to be returned when asking for userinfo in verify callback",
					tokenset,
				});
			}
			const userinfo = await client.userinfo(tokenset);
			args.splice(1, 0, userinfo);
		}

		if (passReq) {
			args.unshift(req);
		}

		this._verify(...args);
		/* end authentication response */
	})().catch((error) => {
		if ((error instanceof OPError$1 && error.error !== "server_error" && !error.error.startsWith("invalid")) || error instanceof RPError$1) {
			this.fail(error);
		} else {
			this.error(error);
		}
	});
};

var passport_strategy = OpenIDConnectStrategy;

const { OPError, RPError } = errors;

const { CLOCK_TOLERANCE, HTTP_OPTIONS } = consts;

const { setDefaults } = request;

var lib = {
	Issuer: issuer,
	Strategy: passport_strategy,
	TokenSet: token_set,
	errors: {
		OPError,
		RPError,
	},
	custom: {
		setHttpOptionsDefaults: setDefaults,
		http_options: HTTP_OPTIONS,
		clock_tolerance: CLOCK_TOLERANCE,
	},
	generators,
};

var IssuerConfigFetcher_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.configToIssuerMetadata = exports.configFromIssuerMetadata = exports.WELL_KNOWN_OPENID_CONFIG = void 0;

	exports.WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
	function configFromIssuerMetadata(metadata) {
		if (metadata.authorization_endpoint === undefined) {
			throw new dist$1.ConfigurationError(`Issuer metadata is missing an authorization endpoint: ${JSON.stringify(metadata)}`);
		}
		if (metadata.token_endpoint === undefined) {
			throw new dist$1.ConfigurationError(`Issuer metadata is missing an token endpoint: ${JSON.stringify(metadata)}`);
		}
		if (metadata.jwks_uri === undefined) {
			throw new dist$1.ConfigurationError(`Issuer metadata is missing a keyset URI: ${JSON.stringify(metadata)}`);
		}
		if (metadata.claims_supported === undefined) {
			throw new dist$1.ConfigurationError(`Issuer metadata is missing supported claims: ${JSON.stringify(metadata)}`);
		}
		if (metadata.subject_types_supported === undefined) {
			throw new dist$1.ConfigurationError(`Issuer metadata is missing supported subject types: ${JSON.stringify(metadata)}`);
		}
		return {
			issuer: metadata.issuer,
			authorizationEndpoint: metadata.authorization_endpoint,
			subjectTypesSupported: metadata.subject_types_supported,
			claimsSupported: metadata.claims_supported,
			tokenEndpoint: metadata.token_endpoint,
			jwksUri: metadata.jwks_uri,
			userinfoEndpoint: metadata.userinfo_endpoint,
			registrationEndpoint: metadata.registration_endpoint,
			tokenEndpointAuthMethodsSupported: metadata.token_endpoint_auth_methods_supported,
			tokenEndpointAuthSigningAlgValuesSupported: metadata.token_endpoint_auth_signing_alg_values_supported,
			requestObjectSigningAlgValuesSupported: metadata.request_object_signing_alg_values_supported,
			grantTypesSupported: metadata.grant_types_supported,
			responseTypesSupported: metadata.response_types_supported,
			idTokenSigningAlgValuesSupported: metadata.id_token_signing_alg_values_supported,
			scopesSupported: metadata.scopes_supported === undefined ? ["openid"] : metadata.scopes_supported,
		};
	}
	exports.configFromIssuerMetadata = configFromIssuerMetadata;
	function configToIssuerMetadata(config) {
		return {
			issuer: config.issuer,
			authorization_endpoint: config.authorizationEndpoint,
			jwks_uri: config.jwksUri,
			token_endpoint: config.tokenEndpoint,
			registration_endpoint: config.registrationEndpoint,
			subject_types_supported: config.subjectTypesSupported,
			claims_supported: config.claimsSupported,
			token_endpoint_auth_signing_alg_values_supported: config.tokenEndpointAuthSigningAlgValuesSupported,
			userinfo_endpoint: config.userinfoEndpoint,
			token_endpoint_auth_methods_supported: config.tokenEndpointAuthMethodsSupported,
			request_object_signing_alg_values_supported: config.requestObjectSigningAlgValuesSupported,
			grant_types_supported: config.grantTypesSupported,
			response_types_supported: config.responseTypesSupported,
			id_token_signing_alg_values_supported: config.idTokenSigningAlgValuesSupported,
			scopes_supported: config.scopesSupported,
		};
	}
	exports.configToIssuerMetadata = configToIssuerMetadata;
	class IssuerConfigFetcher {
		constructor(storageUtility) {
			this.storageUtility = storageUtility;
		}
		static getLocalStorageKey(issuer) {
			return `issuerConfig:${issuer}`;
		}
		async fetchConfig(issuer) {
			const oidcIssuer = await lib.Issuer.discover(issuer);
			const issuerConfig = configFromIssuerMetadata(oidcIssuer.metadata);
			await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
			return issuerConfig;
		}
	}
	exports.default = IssuerConfigFetcher;
});

class AuthorizationCodeWithPkceOidcHandler {
	constructor(storageUtility, redirector) {
		this.storageUtility = storageUtility;
		this.redirector = redirector;
	}
	async canHandle(oidcLoginOptions) {
		return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported && oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
	}
	async handle(oidcLoginOptions) {
		const issuer = new lib.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(oidcLoginOptions.issuerConfiguration));
		const client = new issuer.Client({
			client_id: oidcLoginOptions.client.clientId,
			client_secret: oidcLoginOptions.client.clientSecret,
		});
		const codeVerifier = lib.generators.codeVerifier();
		const codeChallenge = lib.generators.codeChallenge(codeVerifier);
		const state = lib.generators.state();
		const targetUrl = client.authorizationUrl({
			code_challenge: codeChallenge,
			state,
			response_type: "code",
			redirect_uri: oidcLoginOptions.redirectUrl,
			code_challenge_method: "S256",
			prompt: "consent",
			scope: dist$1.DEFAULT_SCOPES,
		});
		await Promise.all([
			this.storageUtility.setForUser(state, {
				sessionId: oidcLoginOptions.sessionId,
			}),
			this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
				codeVerifier,
				issuer: oidcLoginOptions.issuer,
				redirectUrl: oidcLoginOptions.redirectUrl,
				dpop: oidcLoginOptions.dpop ? "true" : "false",
			}),
		]);
		this.redirector.redirect(targetUrl, {
			handleRedirect: oidcLoginOptions.handleRedirect,
		});
		return undefined;
	}
}
var _default$6 = AuthorizationCodeWithPkceOidcHandler;

var AuthorizationCodeWithPkceOidcHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$6,
	},
	"__esModule",
	{ value: true }
);

function validateOptions(oidcLoginOptions) {
	return oidcLoginOptions.refreshToken !== undefined && oidcLoginOptions.client.clientId !== undefined;
}
async function refreshAccess(refreshOptions, dpop, refreshBindingKey, eventEmitter) {
	var _a;
	try {
		let dpopKey;
		if (dpop) {
			dpopKey = refreshBindingKey || (await (0, dist$1.generateDpopKeyPair)());
			[dpopKey.publicKey.alg] = dist$1.PREFERRED_SIGNING_ALG;
		}
		const tokens = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
		const rotatedRefreshOptions = {
			...refreshOptions,
			refreshToken: (_a = tokens.refreshToken) !== null && _a !== void 0 ? _a : refreshOptions.refreshToken,
		};
		const authFetch = await (0, dist$1.buildAuthenticatedFetch)(nodePonyfill.fetch, tokens.accessToken, {
			dpopKey,
			refreshOptions: rotatedRefreshOptions,
			eventEmitter,
		});
		return Object.assign(tokens, {
			fetch: authFetch,
		});
	} catch (e) {
		throw new Error(`Invalid refresh credentials: ${e}`);
	}
}
class RefreshTokenOidcHandler {
	constructor(tokenRefresher, storageUtility) {
		this.tokenRefresher = tokenRefresher;
		this.storageUtility = storageUtility;
	}
	async canHandle(oidcLoginOptions) {
		return validateOptions(oidcLoginOptions);
	}
	async handle(oidcLoginOptions) {
		var _a;
		if (!(await this.canHandle(oidcLoginOptions))) {
			throw new Error(`RefreshTokenOidcHandler cannot handle the provided options, missing one of 'refreshToken', 'clientId' in: ${JSON.stringify(oidcLoginOptions)}`);
		}
		const refreshOptions = {
			refreshToken: oidcLoginOptions.refreshToken,
			sessionId: oidcLoginOptions.sessionId,
			tokenRefresher: this.tokenRefresher,
		};
		await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
			issuer: oidcLoginOptions.issuer,
			dpop: oidcLoginOptions.dpop ? "true" : "false",
			clientId: oidcLoginOptions.client.clientId,
			clientSecret: oidcLoginOptions.client.clientSecret,
		});
		const publicKey = await this.storageUtility.getForUser(oidcLoginOptions.sessionId, "publicKey");
		const privateKey = await this.storageUtility.getForUser(oidcLoginOptions.sessionId, "privateKey");
		let keyPair;
		if (publicKey !== undefined && privateKey !== undefined) {
			keyPair = {
				publicKey: JSON.parse(publicKey),
				privateKey: await (0, jose_1.importJWK)(JSON.parse(privateKey), dist$1.PREFERRED_SIGNING_ALG[0]),
			};
		}
		const accessInfo = await refreshAccess(refreshOptions, oidcLoginOptions.dpop, keyPair);
		const sessionInfo = {
			isLoggedIn: true,
			sessionId: oidcLoginOptions.sessionId,
		};
		if (accessInfo.idToken === undefined) {
			throw new Error(`The Identity Provider [${oidcLoginOptions.issuer}] did not return an ID token on refresh, which prevents us from getting the user's WebID.`);
		}
		sessionInfo.webId = await (0, dist$1.getWebidFromTokenPayload)(accessInfo.idToken, oidcLoginOptions.issuerConfiguration.jwksUri, oidcLoginOptions.issuer, oidcLoginOptions.client.clientId);
		await (0, dist$1.saveSessionInfoToStorage)(this.storageUtility, oidcLoginOptions.sessionId, undefined, "true", (_a = accessInfo.refreshToken) !== null && _a !== void 0 ? _a : refreshOptions.refreshToken, undefined, keyPair);
		await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
			issuer: oidcLoginOptions.issuer,
			dpop: oidcLoginOptions.dpop ? "true" : "false",
			clientId: oidcLoginOptions.client.clientId,
		});
		if (oidcLoginOptions.client.clientSecret) {
			await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
				clientSecret: oidcLoginOptions.client.clientSecret,
			});
		}
		if (oidcLoginOptions.client.clientName) {
			await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
				clientName: oidcLoginOptions.client.clientName,
			});
		}
		return Object.assign(sessionInfo, {
			fetch: accessInfo.fetch,
		});
	}
}
var _default$5 = RefreshTokenOidcHandler;

var RefreshTokenOidcHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$5,
	},
	"__esModule",
	{ value: true }
);

class GeneralLogoutHandler {
	constructor(sessionInfoManager) {
		this.sessionInfoManager = sessionInfoManager;
	}
	async canHandle() {
		return true;
	}
	async handle(userId) {
		await this.sessionInfoManager.clear(userId);
	}
}
var _default$4 = GeneralLogoutHandler;

var GeneralLogoutHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$4,
	},
	"__esModule",
	{ value: true }
);

var constant = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.KEY_REGISTERED_SESSIONS = void 0;

	exports.KEY_REGISTERED_SESSIONS = `${dist$1.SOLID_CLIENT_AUTHN_KEY_PREFIX}registeredSessions`;
});

var SessionInfoManager_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;

	function getUnauthenticatedSession() {
		return {
			isLoggedIn: false,
			sessionId: (0, uuid_1.v4)(),
			fetch: nodePonyfill.fetch,
		};
	}
	exports.getUnauthenticatedSession = getUnauthenticatedSession;
	async function clear(sessionId, storage) {
		await Promise.all([storage.deleteAllUserData(sessionId, { secure: false }), storage.deleteAllUserData(sessionId, { secure: true }), storage.delete("clientKey", { secure: false })]);
	}
	exports.clear = clear;
	class SessionInfoManager {
		constructor(storageUtility) {
			this.storageUtility = storageUtility;
		}
		update(_sessionId, _options) {
			throw new Error("Not Implemented");
		}
		async get(sessionId) {
			const webId = await this.storageUtility.getForUser(sessionId, "webId");
			const isLoggedIn = await this.storageUtility.getForUser(sessionId, "isLoggedIn");
			const refreshToken = await this.storageUtility.getForUser(sessionId, "refreshToken");
			const issuer = await this.storageUtility.getForUser(sessionId, "issuer");
			if (issuer !== undefined) {
				return {
					sessionId,
					webId,
					isLoggedIn: isLoggedIn === "true",
					refreshToken,
					issuer,
				};
			}
			return undefined;
		}
		async getAll() {
			throw new Error("Not implemented");
		}
		async clear(sessionId) {
			const rawSessions = await this.storageUtility.get(constant.KEY_REGISTERED_SESSIONS);
			if (rawSessions !== undefined) {
				const sessions = JSON.parse(rawSessions);
				await this.storageUtility.set(constant.KEY_REGISTERED_SESSIONS, JSON.stringify(sessions.filter((storedSessionId) => storedSessionId !== sessionId)));
			}
			return clear(sessionId, this.storageUtility);
		}
		async register(sessionId) {
			const rawSessions = await this.storageUtility.get(constant.KEY_REGISTERED_SESSIONS);
			if (rawSessions === undefined) {
				return this.storageUtility.set(constant.KEY_REGISTERED_SESSIONS, JSON.stringify([sessionId]));
			}
			const sessions = JSON.parse(rawSessions);
			if (!sessions.includes(sessionId)) {
				sessions.push(sessionId);
				return this.storageUtility.set(constant.KEY_REGISTERED_SESSIONS, JSON.stringify(sessions));
			}
			return Promise.resolve();
		}
		async getRegisteredSessionIdAll() {
			return this.storageUtility.get(constant.KEY_REGISTERED_SESSIONS).then((data) => {
				if (data === undefined) {
					return [];
				}
				return JSON.parse(data);
			});
		}
		async clearAll() {
			const rawSessions = await this.storageUtility.get(constant.KEY_REGISTERED_SESSIONS);
			if (rawSessions === undefined) {
				return Promise.resolve();
			}
			const sessions = JSON.parse(rawSessions);
			await Promise.all(sessions.map((sessionId) => this.clear(sessionId)));
			return this.storageUtility.set(constant.KEY_REGISTERED_SESSIONS, JSON.stringify([]));
		}
	}
	exports.SessionInfoManager = SessionInfoManager;
});

var AuthCodeRedirectHandler_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AuthCodeRedirectHandler = void 0;

	class AuthCodeRedirectHandler {
		constructor(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher) {
			this.storageUtility = storageUtility;
			this.sessionInfoManager = sessionInfoManager;
			this.issuerConfigFetcher = issuerConfigFetcher;
			this.clientRegistrar = clientRegistrar;
			this.tokenRefresher = tokenRefresher;
		}
		async canHandle(redirectUrl) {
			try {
				const myUrl = new url__default["default"].URL(redirectUrl);
				return myUrl.searchParams.get("code") !== null && myUrl.searchParams.get("state") !== null;
			} catch (e) {
				throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
			}
		}
		async handle(inputRedirectUrl, eventEmitter) {
			if (!(await this.canHandle(inputRedirectUrl))) {
				throw new Error(`AuthCodeRedirectHandler cannot handle [${inputRedirectUrl}]: it is missing one of [code, state].`);
			}
			const url = new url__default["default"].URL(inputRedirectUrl);
			const oauthState = url.searchParams.get("state");
			url.searchParams.delete("code");
			url.searchParams.delete("state");
			const sessionId = await (0, dist$1.getSessionIdFromOauthState)(this.storageUtility, oauthState);
			if (sessionId === undefined) {
				throw new Error(`No stored session is associated with the state [${oauthState}]`);
			}
			const oidcContext = await (0, dist$1.loadOidcContextFromStorage)(sessionId, this.storageUtility, this.issuerConfigFetcher);
			const issuer = new lib.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(oidcContext.issuerConfig));
			const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);
			const client = new issuer.Client({
				client_id: clientInfo.clientId,
				client_secret: clientInfo.clientSecret,
				token_endpoint_auth_method: clientInfo.clientSecret ? "client_secret_basic" : "none",
				id_token_signed_response_alg: clientInfo.idTokenSignedResponseAlg,
			});
			const params = client.callbackParams(inputRedirectUrl);
			let dpopKey;
			if (oidcContext.dpop) {
				dpopKey = await (0, dist$1.generateDpopKeyPair)();
			}
			const tokenSet = await client.callback(url.href, params, { code_verifier: oidcContext.codeVerifier, state: oauthState }, { DPoP: dpopKey === null || dpopKey === void 0 ? void 0 : dpopKey.privateKey });
			if (tokenSet.access_token === undefined || tokenSet.id_token === undefined) {
				throw new Error(`The Identity Provider [${issuer.metadata.issuer}] did not return the expected tokens: missing at least one of 'access_token', 'id_token.`);
			}
			let refreshOptions;
			if (tokenSet.refresh_token !== undefined) {
				eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(dist$1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refresh_token);
				refreshOptions = {
					refreshToken: tokenSet.refresh_token,
					sessionId,
					tokenRefresher: this.tokenRefresher,
				};
			}
			const authFetch = await (0, dist$1.buildAuthenticatedFetch)(nodePonyfill.fetch, tokenSet.access_token, {
				dpopKey,
				refreshOptions,
				eventEmitter,
				expiresIn: tokenSet.expires_in,
			});
			const webid = await (0, dist$1.getWebidFromTokenPayload)(tokenSet.id_token, issuer.metadata.jwks_uri, issuer.metadata.issuer, client.metadata.client_id);
			await (0, dist$1.saveSessionInfoToStorage)(this.storageUtility, sessionId, webid, "true", tokenSet.refresh_token, undefined, dpopKey);
			const sessionInfo = await this.sessionInfoManager.get(sessionId);
			if (!sessionInfo) {
				throw new Error(`Could not find any session information associated with SessionID [${sessionId}] in our storage.`);
			}
			return Object.assign(sessionInfo, {
				fetch: authFetch,
			});
		}
	}
	exports.AuthCodeRedirectHandler = AuthCodeRedirectHandler;
});

var FallbackRedirectHandler_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FallbackRedirectHandler = void 0;

	class FallbackRedirectHandler {
		async canHandle(redirectUrl) {
			try {
				new url__default["default"].URL(redirectUrl);
				return true;
			} catch (e) {
				throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
			}
		}
		async handle(_redirectUrl) {
			return (0, SessionInfoManager_1.getUnauthenticatedSession)();
		}
	}
	exports.FallbackRedirectHandler = FallbackRedirectHandler;
});

class AggregateIncomingRedirectHandler extends dist$1.AggregateHandler {
	constructor(redirectHandlers) {
		super(redirectHandlers);
	}
}
var _default$3 = AggregateIncomingRedirectHandler;

var AggregateIncomingRedirectHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$3,
	},
	"__esModule",
	{ value: true }
);

class Redirector {
	redirect(redirectUrl, options) {
		if (options && options.handleRedirect) {
			options.handleRedirect(redirectUrl);
		} else {
			throw new Error("A redirection handler must be provided in the Node environment.");
		}
	}
}
var _default$2 = Redirector;

var Redirector_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$2,
	},
	"__esModule",
	{ value: true }
);

var ClientRegistrar_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.negotiateClientSigningAlg = void 0;

	function negotiateClientSigningAlg(issuerConfig, clientPreference) {
		if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {
			throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
		}
		const signingAlg = (0, dist$1.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, clientPreference);
		if (signingAlg === null) {
			throw new Error(`No signature algorithm match between ${JSON.stringify(issuerConfig.idTokenSigningAlgValuesSupported)} supported by the Identity Provider and ${JSON.stringify(clientPreference)} preferred by the client.`);
		}
		return signingAlg;
	}
	exports.negotiateClientSigningAlg = negotiateClientSigningAlg;
	class ClientRegistrar {
		constructor(storageUtility) {
			this.storageUtility = storageUtility;
		}
		async getClient(options, issuerConfig) {
			var _a, _b;
			const [storedClientId, storedClientSecret, storedClientName, storedIdTokenSignedResponseAlg] = await Promise.all([this.storageUtility.getForUser(options.sessionId, "clientId"), this.storageUtility.getForUser(options.sessionId, "clientSecret"), this.storageUtility.getForUser(options.sessionId, "clientName"), this.storageUtility.getForUser(options.sessionId, "idTokenSignedResponseAlg")]);
			if (storedClientId) {
				return {
					clientId: storedClientId,
					clientSecret: storedClientSecret,
					clientName: storedClientName,
					idTokenSignedResponseAlg: storedIdTokenSignedResponseAlg !== null && storedIdTokenSignedResponseAlg !== void 0 ? storedIdTokenSignedResponseAlg : negotiateClientSigningAlg(issuerConfig, dist$1.PREFERRED_SIGNING_ALG),
					clientType: "dynamic",
				};
			}
			const issuer = new lib.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(issuerConfig));
			if (issuer.metadata.registration_endpoint === undefined) {
				throw new dist$1.ConfigurationError(`Dynamic client registration cannot be performed, because issuer does not have a registration endpoint: ${JSON.stringify(issuer.metadata)}`);
			}
			const signingAlg = negotiateClientSigningAlg(issuerConfig, dist$1.PREFERRED_SIGNING_ALG);
			const registeredClient = await issuer.Client.register({
				redirect_uris: [options.redirectUrl],
				client_name: options.clientName,
				id_token_signed_response_alg: signingAlg,
				grant_types: ["authorization_code", "refresh_token"],
			});
			const infoToSave = {
				clientId: registeredClient.metadata.client_id,
				idTokenSignedResponseAlg: (_a = registeredClient.metadata.id_token_signed_response_alg) !== null && _a !== void 0 ? _a : signingAlg,
			};
			if (registeredClient.metadata.client_secret) {
				infoToSave.clientSecret = registeredClient.metadata.client_secret;
			}
			await this.storageUtility.setForUser(options.sessionId, infoToSave);
			return {
				clientId: registeredClient.metadata.client_id,
				clientSecret: registeredClient.metadata.client_secret,
				clientName: registeredClient.metadata.client_name,
				idTokenSignedResponseAlg: (_b = registeredClient.metadata.id_token_signed_response_alg) !== null && _b !== void 0 ? _b : signingAlg,
				clientType: "dynamic",
			};
		}
	}
	exports.default = ClientRegistrar;
});

const tokenSetToTokenEndpointResponse = (tokenSet, issuerMetadata) => {
	if (tokenSet.access_token === undefined) {
		throw new Error(`The Identity Provider [${issuerMetadata.issuer}] did not return an access token on refresh.`);
	}
	if (tokenSet.token_type !== "Bearer" && tokenSet.token_type !== "DPoP") {
		throw new Error(`The Identity Provider [${issuerMetadata.issuer}] returned an unknown token type: [${tokenSet.token_type}].`);
	}
	return {
		accessToken: tokenSet.access_token,
		tokenType: tokenSet.token_type,
		idToken: tokenSet.id_token,
		refreshToken: tokenSet.refresh_token,
		expiresAt: tokenSet.expires_at,
	};
};
class TokenRefresher {
	constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {
		this.storageUtility = storageUtility;
		this.issuerConfigFetcher = issuerConfigFetcher;
		this.clientRegistrar = clientRegistrar;
	}
	async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {
		const oidcContext = await (0, dist$1.loadOidcContextFromStorage)(sessionId, this.storageUtility, this.issuerConfigFetcher);
		const issuer = new lib.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(oidcContext.issuerConfig));
		const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);
		if (clientInfo.idTokenSignedResponseAlg === undefined) {
			clientInfo.idTokenSignedResponseAlg = (0, ClientRegistrar_1.negotiateClientSigningAlg)(oidcContext.issuerConfig, dist$1.PREFERRED_SIGNING_ALG);
		}
		const client = new issuer.Client({
			client_id: clientInfo.clientId,
			client_secret: clientInfo.clientSecret,
			token_endpoint_auth_method: clientInfo.clientSecret ? "client_secret_basic" : "none",
			id_token_signed_response_alg: clientInfo.idTokenSignedResponseAlg,
		});
		if (refreshToken === undefined) {
			throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);
		}
		if (oidcContext.dpop && dpopKey === undefined) {
			throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);
		}
		const tokenSet = tokenSetToTokenEndpointResponse(
			await client.refresh(refreshToken, {
				DPoP: dpopKey ? dpopKey.privateKey : undefined,
			}),
			issuer.metadata
		);
		if (tokenSet.refreshToken !== undefined) {
			eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(dist$1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
			await this.storageUtility.setForUser(sessionId, {
				refreshToken: tokenSet.refreshToken,
			});
		}
		return tokenSet;
	}
}
var _default$1 = TokenRefresher;

var TokenRefresher_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default$1,
	},
	"__esModule",
	{ value: true }
);

class ClientCredentialsOidcHandler {
	constructor(tokenRefresher, _storageUtility) {
		this.tokenRefresher = tokenRefresher;
		this._storageUtility = _storageUtility;
	}
	async canHandle(oidcLoginOptions) {
		return typeof oidcLoginOptions.client.clientId === "string" && typeof oidcLoginOptions.client.clientSecret === "string" && oidcLoginOptions.client.clientType === "static";
	}
	async handle(oidcLoginOptions) {
		const issuer = new lib.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(oidcLoginOptions.issuerConfiguration));
		const client = new issuer.Client({
			client_id: oidcLoginOptions.client.clientId,
			client_secret: oidcLoginOptions.client.clientSecret,
		});
		let dpopKey;
		if (oidcLoginOptions.dpop) {
			dpopKey = await (0, dist$1.generateDpopKeyPair)();
			[dpopKey.publicKey.alg] = dist$1.PREFERRED_SIGNING_ALG;
		}
		const tokens = await client.grant(
			{
				grant_type: "client_credentials",
				token_endpoint_auth_method: "client_secret_basic",
				scope: dist$1.DEFAULT_SCOPES,
			},
			{
				DPoP: oidcLoginOptions.dpop && dpopKey !== undefined ? dpopKey.privateKey : undefined,
			}
		);
		let webId;
		if (tokens.access_token === undefined) {
			throw new Error(`Invalid response from Solid Identity Provider [${oidcLoginOptions.issuer}]: ${JSON.stringify(tokens)} is missing 'access_token'.`);
		}
		if (tokens.id_token === undefined) {
			webId = await (0, dist$1.getWebidFromTokenPayload)(tokens.access_token, oidcLoginOptions.issuerConfiguration.jwksUri, oidcLoginOptions.issuer, "solid");
		} else {
			webId = await (0, dist$1.getWebidFromTokenPayload)(tokens.id_token, oidcLoginOptions.issuerConfiguration.jwksUri, oidcLoginOptions.issuer, oidcLoginOptions.client.clientId);
		}
		const authFetch = await (0, dist$1.buildAuthenticatedFetch)(nodePonyfill.fetch, tokens.access_token, {
			dpopKey,
			refreshOptions: tokens.refresh_token
				? {
						refreshToken: tokens.refresh_token,
						sessionId: oidcLoginOptions.sessionId,
						tokenRefresher: this.tokenRefresher,
				  }
				: undefined,
			eventEmitter: oidcLoginOptions.eventEmitter,
		});
		const sessionInfo = {
			isLoggedIn: true,
			sessionId: oidcLoginOptions.sessionId,
			webId,
		};
		return Object.assign(sessionInfo, {
			fetch: authFetch,
		});
	}
}
var _default = ClientCredentialsOidcHandler;

var ClientCredentialsOidcHandler_1 = /*#__PURE__*/ Object.defineProperty(
	{
		default: _default,
	},
	"__esModule",
	{ value: true }
);

var dependencies = createCommonjsModule(function (module, exports) {
	var __importDefault =
		(commonjsGlobal && commonjsGlobal.__importDefault) ||
		function (mod) {
			return mod && mod.__esModule ? mod : { default: mod };
		};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getClientAuthenticationWithDependencies = exports.buildRedirectHandler = exports.buildLoginHandler = void 0;

	const StorageUtility_1 = __importDefault(StorageUtility);
	const ClientAuthentication_1$1 = __importDefault(ClientAuthentication_1);
	const OidcLoginHandler_1$1 = __importDefault(OidcLoginHandler_1);
	const AggregateOidcHandler_1$1 = __importDefault(AggregateOidcHandler_1);
	const AuthorizationCodeWithPkceOidcHandler_1$1 = __importDefault(AuthorizationCodeWithPkceOidcHandler_1);
	const RefreshTokenOidcHandler_1$1 = __importDefault(RefreshTokenOidcHandler_1);
	const IssuerConfigFetcher_1$1 = __importDefault(IssuerConfigFetcher_1);
	const GeneralLogoutHandler_1$1 = __importDefault(GeneralLogoutHandler_1);

	const AggregateIncomingRedirectHandler_1$1 = __importDefault(AggregateIncomingRedirectHandler_1);
	const Redirector_1$1 = __importDefault(Redirector_1);
	const ClientRegistrar_1$1 = __importDefault(ClientRegistrar_1);
	const TokenRefresher_1$1 = __importDefault(TokenRefresher_1);
	const ClientCredentialsOidcHandler_1$1 = __importDefault(ClientCredentialsOidcHandler_1);
	const buildLoginHandler = (storageUtility, tokenRefresher, issuerConfigFetcher, clientRegistrar) => {
		return new OidcLoginHandler_1$1.default(storageUtility, new AggregateOidcHandler_1$1.default([new RefreshTokenOidcHandler_1$1.default(tokenRefresher, storageUtility), new ClientCredentialsOidcHandler_1$1.default(tokenRefresher, storageUtility), new AuthorizationCodeWithPkceOidcHandler_1$1.default(storageUtility, new Redirector_1$1.default())]), issuerConfigFetcher, clientRegistrar);
	};
	exports.buildLoginHandler = buildLoginHandler;
	const buildRedirectHandler = (storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher) => {
		return new AggregateIncomingRedirectHandler_1$1.default([new AuthCodeRedirectHandler_1.AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher), new FallbackRedirectHandler_1.FallbackRedirectHandler()]);
	};
	exports.buildRedirectHandler = buildRedirectHandler;
	function getClientAuthenticationWithDependencies(dependencies) {
		const inMemoryStorage = new dist$1.InMemoryStorage();
		const secureStorage = dependencies.secureStorage || inMemoryStorage;
		const insecureStorage = dependencies.insecureStorage || inMemoryStorage;
		const storageUtility = new StorageUtility_1.default(secureStorage, insecureStorage);
		const issuerConfigFetcher = new IssuerConfigFetcher_1$1.default(storageUtility);
		const clientRegistrar = new ClientRegistrar_1$1.default(storageUtility);
		const sessionInfoManager = new SessionInfoManager_1.SessionInfoManager(storageUtility);
		const tokenRefresher = new TokenRefresher_1$1.default(storageUtility, issuerConfigFetcher, clientRegistrar);
		const loginHandler = (0, exports.buildLoginHandler)(storageUtility, tokenRefresher, issuerConfigFetcher, clientRegistrar);
		const redirectHandler = (0, exports.buildRedirectHandler)(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher);
		return new ClientAuthentication_1$1.default(loginHandler, redirectHandler, new GeneralLogoutHandler_1$1.default(sessionInfoManager), sessionInfoManager);
	}
	exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;
});

var Session_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Session = exports.defaultStorage = void 0;

	exports.defaultStorage = new dist$1.InMemoryStorage();
	class Session extends events_1__default["default"].EventEmitter {
		constructor(sessionOptions = {}, sessionId = undefined) {
			super();
			this.tokenRequestInProgress = false;
			this.lastTimeoutHandle = 0;
			this.login = async (options) => {
				const loginInfo = await this.clientAuthentication.login(
					this.info.sessionId,
					{
						...options,
					},
					this
				);
				if (loginInfo !== undefined) {
					this.info.isLoggedIn = loginInfo.isLoggedIn;
					this.info.sessionId = loginInfo.sessionId;
					this.info.webId = loginInfo.webId;
				}
			};
			this.fetch = async (url, init) => {
				if (!this.info.isLoggedIn) {
					return (0, nodePonyfill.fetch)(url, init);
				}
				return this.clientAuthentication.fetch(url, init);
			};
			this.logout = async () => this.internalLogout(true);
			this.internalLogout = async (emitEvent) => {
				await this.clientAuthentication.logout(this.info.sessionId);
				clearTimeout(this.lastTimeoutHandle);
				this.info.isLoggedIn = false;
				if (emitEvent) {
					this.emit(dist$1.EVENTS.LOGOUT);
				}
			};
			this.handleIncomingRedirect = async (url) => {
				let sessionInfo;
				if (this.info.isLoggedIn) {
					sessionInfo = this.info;
				} else if (this.tokenRequestInProgress);
				else {
					try {
						this.tokenRequestInProgress = true;
						sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url, this);
						if (sessionInfo) {
							this.info.isLoggedIn = sessionInfo.isLoggedIn;
							this.info.webId = sessionInfo.webId;
							this.info.sessionId = sessionInfo.sessionId;
							if (sessionInfo.isLoggedIn) {
								this.emit(dist$1.EVENTS.LOGIN);
							}
						}
					} finally {
						this.tokenRequestInProgress = false;
					}
				}
				return sessionInfo;
			};
			if (sessionOptions.clientAuthentication) {
				this.clientAuthentication = sessionOptions.clientAuthentication;
			} else if (sessionOptions.storage) {
				this.clientAuthentication = (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: sessionOptions.storage,
					insecureStorage: sessionOptions.storage,
				});
			} else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {
				this.clientAuthentication = (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: sessionOptions.secureStorage,
					insecureStorage: sessionOptions.insecureStorage,
				});
			} else {
				this.clientAuthentication = (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: exports.defaultStorage,
					insecureStorage: exports.defaultStorage,
				});
			}
			if (sessionOptions.sessionInfo) {
				this.info = {
					sessionId: sessionOptions.sessionInfo.sessionId,
					isLoggedIn: false,
					webId: sessionOptions.sessionInfo.webId,
				};
			} else {
				this.info = {
					sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : (0, uuid_1.v4)(),
					isLoggedIn: false,
				};
			}
			if (sessionOptions.onNewRefreshToken !== undefined) {
				this.onNewRefreshToken(sessionOptions.onNewRefreshToken);
			}
			this.on(dist$1.EVENTS.TIMEOUT_SET, (timeoutHandle) => {
				this.lastTimeoutHandle = timeoutHandle;
			});
			this.on(dist$1.EVENTS.ERROR, () => this.internalLogout(false));
			this.on(dist$1.EVENTS.SESSION_EXPIRED, () => this.internalLogout(false));
		}
		onLogin(callback) {
			this.on(dist$1.EVENTS.LOGIN, callback);
		}
		onLogout(callback) {
			this.on(dist$1.EVENTS.LOGOUT, callback);
		}
		onNewRefreshToken(callback) {
			this.on(dist$1.EVENTS.NEW_REFRESH_TOKEN, callback);
		}
	}
	exports.Session = Session;
});

var multiSession = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.clearSessionFromStorageAll = exports.getSessionIdFromStorageAll = exports.getSessionFromStorage = void 0;

	async function getSessionFromStorage(sessionId, storage, onNewRefreshToken) {
		const clientAuth = storage
			? (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: storage,
					insecureStorage: storage,
			  })
			: (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: Session_1.defaultStorage,
					insecureStorage: Session_1.defaultStorage,
			  });
		const sessionInfo = await clientAuth.getSessionInfo(sessionId);
		if (sessionInfo === undefined) {
			return undefined;
		}
		const session = new Session_1.Session({
			sessionInfo,
			clientAuthentication: clientAuth,
			onNewRefreshToken,
		});
		if (sessionInfo.refreshToken) {
			await session.login({
				oidcIssuer: sessionInfo.issuer,
			});
		}
		return session;
	}
	exports.getSessionFromStorage = getSessionFromStorage;
	async function getSessionIdFromStorageAll(storage) {
		const clientAuth = storage
			? (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: storage,
					insecureStorage: storage,
			  })
			: (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: Session_1.defaultStorage,
					insecureStorage: Session_1.defaultStorage,
			  });
		return clientAuth.getSessionIdAll();
	}
	exports.getSessionIdFromStorageAll = getSessionIdFromStorageAll;
	async function clearSessionFromStorageAll(storage) {
		const clientAuth = storage
			? (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: storage,
					insecureStorage: storage,
			  })
			: (0, dependencies.getClientAuthenticationWithDependencies)({
					secureStorage: Session_1.defaultStorage,
					insecureStorage: Session_1.defaultStorage,
			  });
		return clientAuth.clearSessionAll();
	}
	exports.clearSessionFromStorageAll = clearSessionFromStorageAll;
});

var dist = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.InMemoryStorage = exports.ConfigurationError = exports.NotImplementedError = exports.clearSessionFromStorageAll = exports.getSessionIdFromStorageAll = exports.getSessionFromStorage = exports.Session = void 0;

	Object.defineProperty(exports, "Session", {
		enumerable: true,
		get: function () {
			return Session_1.Session;
		},
	});

	Object.defineProperty(exports, "getSessionFromStorage", {
		enumerable: true,
		get: function () {
			return multiSession.getSessionFromStorage;
		},
	});
	Object.defineProperty(exports, "getSessionIdFromStorageAll", {
		enumerable: true,
		get: function () {
			return multiSession.getSessionIdFromStorageAll;
		},
	});
	Object.defineProperty(exports, "clearSessionFromStorageAll", {
		enumerable: true,
		get: function () {
			return multiSession.clearSessionFromStorageAll;
		},
	});

	Object.defineProperty(exports, "NotImplementedError", {
		enumerable: true,
		get: function () {
			return dist$1.NotImplementedError;
		},
	});
	Object.defineProperty(exports, "ConfigurationError", {
		enumerable: true,
		get: function () {
			return dist$1.ConfigurationError;
		},
	});
	Object.defineProperty(exports, "InMemoryStorage", {
		enumerable: true,
		get: function () {
			return dist$1.InMemoryStorage;
		},
	});
});

var Repro = /** @class */ (function () {
	function Repro() {}
	Repro.prototype.login = function () {
		return __awaiter(this, void 0, void 0, function () {
			var session, response, _a, _b;
			return __generator(this, function (_c) {
				switch (_c.label) {
					case 0:
						session = new dist.Session();
						return [
							4 /*yield*/,
							session.login({
								// 2. Use the authenticated credentials to log in the session.
								clientId: "",
								clientSecret: "",
								oidcIssuer: "https://login.inrupt.com",
							}),
						];
					case 1:
						_c.sent();
						console.log("are we logged in?", session.info.isLoggedIn);
						if (!session.info.isLoggedIn) return [3 /*break*/, 4];
						return [4 /*yield*/, session.fetch(session.info.webId || "https://solidcommunity.net/profile/card#me")];
					case 2:
						response = _c.sent();
						_b = (_a = console).log;
						return [4 /*yield*/, response.text()];
					case 3:
						_b.apply(_a, [_c.sent()]);
						_c.label = 4;
					case 4:
						return [2 /*return*/];
				}
			});
		});
	};
	return Repro;
})();
var repro = new Repro();
repro.login();
// repro.login().then(() => {
// 	repro.uploadToPod({
// 		title: "Test",
// 		content: "Test",
// 		created: "2021-01-01",
// 		tags: ["test"],
// 	});
// });

exports["default"] = Repro;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy93ZWJpZGwtY29udmVyc2lvbnMvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3RyNDYvaW5kZXguanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXJsLXN0YXRlLW1hY2hpbmUuanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvVVJMLWltcGwuanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvVVJMLmpzIiwibm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3B1YmxpYy1hcGkuanMiLCJub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9saWIvaW5kZXgubWpzIiwibm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9kaWdlc3QuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9idWZmZXJfdXRpbHMuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYmFzZTY0dXJsLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy91dGlsL2Vycm9ycy5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9yYW5kb20uanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pdi5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2NoZWNrX2l2X2xlbmd0aC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9pc19rZXlfb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NoZWNrX2Nla19sZW5ndGguanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdGltaW5nX3NhZmVfZXF1YWwuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2JjX3RhZy5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS93ZWJjcnlwdG8uanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZW52LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvY3J5cHRvX2tleS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2ludmFsaWRfa2V5X2lucHV0LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NpcGhlcnMuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGVjcnlwdC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS96bGliLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvaXNfZGlzam9pbnQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19vYmplY3QuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYWVza3cuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZ2V0X25hbWVkX2N1cnZlLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2VjZGhlcy5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2NoZWNrX3Aycy5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9wYmVzMmt3LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3JzYWVzLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvY2VrLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2FzbjEuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9lbmNvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2p3a190b19rZXkuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9mb3JtYXRfcGVtLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9rZXkvaW1wb3J0LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvY2hlY2tfa2V5X3R5cGUuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZW5jcnlwdC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2Flc2djbWt3LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvZGVjcnlwdF9rZXlfbWFuYWdlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL3ZhbGlkYXRlX2NyaXQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2UvZmxhdHRlbmVkL2RlY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2RlY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9nZW5lcmFsL2RlY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2tleV90b19qd2suanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9leHBvcnQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lbmNyeXB0X2tleV9tYW5hZ2VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2UvZmxhdHRlbmVkL2VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9nZW5lcmFsL2VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZHNhX2RpZ2VzdC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9ub2RlX2tleS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9obWFjX2RpZ2VzdC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9nZXRfc2lnbl92ZXJpZnlfa2V5LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3NpZ24uanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdmVyaWZ5LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3MvZmxhdHRlbmVkL3ZlcmlmeS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2NvbXBhY3QvdmVyaWZ5LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3MvZ2VuZXJhbC92ZXJpZnkuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lcG9jaC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL3NlY3MuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9qd3RfY2xhaW1zX3NldC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L3ZlcmlmeS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L2RlY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9mbGF0dGVuZWQvc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2NvbXBhY3Qvc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2dlbmVyYWwvc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L3Byb2R1Y2UuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9zaWduLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3QvZW5jcnlwdC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandrL3RodW1icHJpbnQuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ay9lbWJlZGRlZC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandrcy9sb2NhbC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9mZXRjaF9qd2tzLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2tzL3JlbW90ZS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L3Vuc2VjdXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvdXRpbC9iYXNlNjR1cmwuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXIuanMiLCJub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX2p3dC5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9nZW5lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMva2V5L2dlbmVyYXRlX2tleV9wYWlyLmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9rZXkvZ2VuZXJhdGVfc2VjcmV0LmpzIiwibm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjEuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL21kNS5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjMuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25hdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3NoYTEuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y1LmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uaWwuanMiLCJub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZS9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9zdG9yYWdlL1N0b3JhZ2VVdGlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9DbGllbnRBdXRoZW50aWNhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9PaWRjTG9naW5IYW5kbGVyLmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9sb2dpbi9vaWRjL0FnZ3JlZ2F0ZU9pZGNIYW5kbGVyLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2Vycm9ycy5qcyIsIm5vZGVfbW9kdWxlcy9vaWRjLXRva2VuLWhhc2gvbGliL3NoYWtlMjU2LmpzIiwibm9kZV9tb2R1bGVzL29pZGMtdG9rZW4taGFzaC9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc19rZXlfb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvYmFzZTY0dXJsLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvZGVjb2RlX2p3dC5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2lzX3BsYWluX29iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2RlZmF1bHRzLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd3d3X2F1dGhlbnRpY2F0ZV9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9hc3NlcnQuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9waWNrLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcHJvY2Vzc19yZXNwb25zZS5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL3VuaXhfdGltZXN0YW1wLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL3Rva2VuX3NldC5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2dlbmVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy95YWxsaXN0L3lhbGxpc3QuanMiLCJub2RlX21vZHVsZXMvbHJ1LWNhY2hlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvY29uc3RzLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcmVxdWVzdC5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL3dlYWtfY2FjaGUuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9rZXlzdG9yZS5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2RlZXBfY2xvbmUuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9tZXJnZS5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2NsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3QtaGFzaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2lzc3Vlci5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9kZXZpY2VfZmxvd19oYW5kbGUuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvY2xpZW50LmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2lzc3Vlcl9yZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL3dlYmZpbmdlcl9ub3JtYWxpemUuanMiLCJub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaXNzdWVyLmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL3Bhc3Nwb3J0X3N0cmF0ZWd5LmpzIiwibm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9sb2dpbi9vaWRjL0lzc3VlckNvbmZpZ0ZldGNoZXIuanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tbm9kZS9kaXN0L2xvZ2luL29pZGMvb2lkY0hhbmRsZXJzL0F1dGhvcml6YXRpb25Db2RlV2l0aFBrY2VPaWRjSGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9vaWRjSGFuZGxlcnMvUmVmcmVzaFRva2VuT2lkY0hhbmRsZXIuanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tbm9kZS9kaXN0L2xvZ291dC9HZW5lcmFsTG9nb3V0SGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tbm9kZS9kaXN0L3Nlc3Npb25JbmZvL1Nlc3Npb25JbmZvTWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9pbmNvbWluZ1JlZGlyZWN0SGFuZGxlci9BdXRoQ29kZVJlZGlyZWN0SGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9pbmNvbWluZ1JlZGlyZWN0SGFuZGxlci9GYWxsYmFja1JlZGlyZWN0SGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9BZ2dyZWdhdGVJbmNvbWluZ1JlZGlyZWN0SGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9SZWRpcmVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9sb2dpbi9vaWRjL0NsaWVudFJlZ2lzdHJhci5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvbG9naW4vb2lkYy9yZWZyZXNoL1Rva2VuUmVmcmVzaGVyLmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9sb2dpbi9vaWRjL29pZGNIYW5kbGVycy9DbGllbnRDcmVkZW50aWFsc09pZGNIYW5kbGVyLmpzIiwibm9kZV9tb2R1bGVzL0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLW5vZGUvZGlzdC9kZXBlbmRlbmNpZXMuanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tbm9kZS9kaXN0L1Nlc3Npb24uanMiLCJub2RlX21vZHVsZXMvQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tbm9kZS9kaXN0L211bHRpU2Vzc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9AaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1ub2RlL2Rpc3QvaW5kZXguanMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvbnZlcnNpb25zID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnNpb25zO1xuXG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbmZ1bmN0aW9uIGV2ZW5Sb3VuZCh4KSB7XG4gICAgLy8gUm91bmQgeCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyLCBjaG9vc2luZyB0aGUgZXZlbiBpbnRlZ2VyIGlmIGl0IGxpZXMgaGFsZndheSBiZXR3ZWVuIHR3by5cbiAgICBpZiAoKHggJSAxKSA9PT0gMC41ICYmICh4ICYgMSkgPT09IDApIHsgLy8gW2V2ZW4gbnVtYmVyXS41OyByb3VuZCBkb3duIChpLmUuIGZsb29yKVxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh4KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU51bWJlckNvbnZlcnNpb24oYml0TGVuZ3RoLCB0eXBlT3B0cykge1xuICAgIGlmICghdHlwZU9wdHMudW5zaWduZWQpIHtcbiAgICAgICAgLS1iaXRMZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IGxvd2VyQm91bmQgPSB0eXBlT3B0cy51bnNpZ25lZCA/IDAgOiAtTWF0aC5wb3coMiwgYml0TGVuZ3RoKTtcbiAgICBjb25zdCB1cHBlckJvdW5kID0gTWF0aC5wb3coMiwgYml0TGVuZ3RoKSAtIDE7XG5cbiAgICBjb25zdCBtb2R1bG9WYWwgPSB0eXBlT3B0cy5tb2R1bG9CaXRMZW5ndGggPyBNYXRoLnBvdygyLCB0eXBlT3B0cy5tb2R1bG9CaXRMZW5ndGgpIDogTWF0aC5wb3coMiwgYml0TGVuZ3RoKTtcbiAgICBjb25zdCBtb2R1bG9Cb3VuZCA9IHR5cGVPcHRzLm1vZHVsb0JpdExlbmd0aCA/IE1hdGgucG93KDIsIHR5cGVPcHRzLm1vZHVsb0JpdExlbmd0aCAtIDEpIDogTWF0aC5wb3coMiwgYml0TGVuZ3RoIC0gMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oViwgb3B0cykge1xuICAgICAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcblxuICAgICAgICBsZXQgeCA9ICtWO1xuXG4gICAgICAgIGlmIChvcHRzLmVuZm9yY2VSYW5nZSkge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoeCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgZmluaXRlIG51bWJlclwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeCA9IHNpZ24oeCkgKiBNYXRoLmZsb29yKE1hdGguYWJzKHgpKTtcbiAgICAgICAgICAgIGlmICh4IDwgbG93ZXJCb3VuZCB8fCB4ID4gdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBpcyBub3QgaW4gYnl0ZSByYW5nZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKHgpICYmIG9wdHMuY2xhbXApIHtcbiAgICAgICAgICAgIHggPSBldmVuUm91bmQoeCk7XG5cbiAgICAgICAgICAgIGlmICh4IDwgbG93ZXJCb3VuZCkgeCA9IGxvd2VyQm91bmQ7XG4gICAgICAgICAgICBpZiAoeCA+IHVwcGVyQm91bmQpIHggPSB1cHBlckJvdW5kO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh4KSB8fCB4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSBzaWduKHgpICogTWF0aC5mbG9vcihNYXRoLmFicyh4KSk7XG4gICAgICAgIHggPSB4ICUgbW9kdWxvVmFsO1xuXG4gICAgICAgIGlmICghdHlwZU9wdHMudW5zaWduZWQgJiYgeCA+PSBtb2R1bG9Cb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuIHggLSBtb2R1bG9WYWw7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZU9wdHMudW5zaWduZWQpIHtcbiAgICAgICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgICB4ICs9IG1vZHVsb1ZhbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA9PT0gLTApIHsgLy8gZG9uJ3QgcmV0dXJuIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG59XG5cbmNvbnZlcnNpb25zW1widm9pZFwiXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29udmVyc2lvbnNbXCJib29sZWFuXCJdID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiAhIXZhbDtcbn07XG5cbmNvbnZlcnNpb25zW1wiYnl0ZVwiXSA9IGNyZWF0ZU51bWJlckNvbnZlcnNpb24oOCwgeyB1bnNpZ25lZDogZmFsc2UgfSk7XG5jb252ZXJzaW9uc1tcIm9jdGV0XCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbig4LCB7IHVuc2lnbmVkOiB0cnVlIH0pO1xuXG5jb252ZXJzaW9uc1tcInNob3J0XCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbigxNiwgeyB1bnNpZ25lZDogZmFsc2UgfSk7XG5jb252ZXJzaW9uc1tcInVuc2lnbmVkIHNob3J0XCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbigxNiwgeyB1bnNpZ25lZDogdHJ1ZSB9KTtcblxuY29udmVyc2lvbnNbXCJsb25nXCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbigzMiwgeyB1bnNpZ25lZDogZmFsc2UgfSk7XG5jb252ZXJzaW9uc1tcInVuc2lnbmVkIGxvbmdcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDMyLCB7IHVuc2lnbmVkOiB0cnVlIH0pO1xuXG5jb252ZXJzaW9uc1tcImxvbmcgbG9uZ1wiXSA9IGNyZWF0ZU51bWJlckNvbnZlcnNpb24oMzIsIHsgdW5zaWduZWQ6IGZhbHNlLCBtb2R1bG9CaXRMZW5ndGg6IDY0IH0pO1xuY29udmVyc2lvbnNbXCJ1bnNpZ25lZCBsb25nIGxvbmdcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDMyLCB7IHVuc2lnbmVkOiB0cnVlLCBtb2R1bG9CaXRMZW5ndGg6IDY0IH0pO1xuXG5jb252ZXJzaW9uc1tcImRvdWJsZVwiXSA9IGZ1bmN0aW9uIChWKSB7XG4gICAgY29uc3QgeCA9ICtWO1xuXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoeCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IGlzIG5vdCBhIGZpbml0ZSBmbG9hdGluZy1wb2ludCB2YWx1ZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4geDtcbn07XG5cbmNvbnZlcnNpb25zW1widW5yZXN0cmljdGVkIGRvdWJsZVwiXSA9IGZ1bmN0aW9uIChWKSB7XG4gICAgY29uc3QgeCA9ICtWO1xuXG4gICAgaWYgKGlzTmFOKHgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBpcyBOYU5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHg7XG59O1xuXG4vLyBub3QgcXVpdGUgdmFsaWQsIGJ1dCBnb29kIGVub3VnaCBmb3IgSlNcbmNvbnZlcnNpb25zW1wiZmxvYXRcIl0gPSBjb252ZXJzaW9uc1tcImRvdWJsZVwiXTtcbmNvbnZlcnNpb25zW1widW5yZXN0cmljdGVkIGZsb2F0XCJdID0gY29udmVyc2lvbnNbXCJ1bnJlc3RyaWN0ZWQgZG91YmxlXCJdO1xuXG5jb252ZXJzaW9uc1tcIkRPTVN0cmluZ1wiXSA9IGZ1bmN0aW9uIChWLCBvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG5cbiAgICBpZiAob3B0cy50cmVhdE51bGxBc0VtcHR5U3RyaW5nICYmIFYgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZyhWKTtcbn07XG5cbmNvbnZlcnNpb25zW1wiQnl0ZVN0cmluZ1wiXSA9IGZ1bmN0aW9uIChWLCBvcHRzKSB7XG4gICAgY29uc3QgeCA9IFN0cmluZyhWKTtcbiAgICBsZXQgYyA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGxldCBpID0gMDsgKGMgPSB4LmNvZGVQb2ludEF0KGkpKSAhPT0gdW5kZWZpbmVkOyArK2kpIHtcbiAgICAgICAgaWYgKGMgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBpcyBub3QgYSB2YWxpZCBieXRlc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHg7XG59O1xuXG5jb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXSA9IGZ1bmN0aW9uIChWKSB7XG4gICAgY29uc3QgUyA9IFN0cmluZyhWKTtcbiAgICBjb25zdCBuID0gUy5sZW5ndGg7XG4gICAgY29uc3QgVSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGNvbnN0IGMgPSBTLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMHhEODAwIHx8IGMgPiAweERGRkYpIHtcbiAgICAgICAgICAgIFUucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludChjKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoMHhEQzAwIDw9IGMgJiYgYyA8PSAweERGRkYpIHtcbiAgICAgICAgICAgIFUucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCgweEZGRkQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpID09PSBuIC0gMSkge1xuICAgICAgICAgICAgICAgIFUucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCgweEZGRkQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IFMuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKDB4REMwMCA8PSBkICYmIGQgPD0gMHhERkZGKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBjICYgMHgzRkY7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBkICYgMHgzRkY7XG4gICAgICAgICAgICAgICAgICAgIFUucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCgoMiA8PCAxNSkgKyAoMiA8PCA5KSAqIGEgKyBiKSk7XG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBVLnB1c2goU3RyaW5nLmZyb21Db2RlUG9pbnQoMHhGRkZEKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFUuam9pbignJyk7XG59O1xuXG5jb252ZXJzaW9uc1tcIkRhdGVcIl0gPSBmdW5jdGlvbiAoViwgb3B0cykge1xuICAgIGlmICghKFYgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgRGF0ZSBvYmplY3RcIik7XG4gICAgfVxuICAgIGlmIChpc05hTihWKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBWO1xufTtcblxuY29udmVyc2lvbnNbXCJSZWdFeHBcIl0gPSBmdW5jdGlvbiAoViwgb3B0cykge1xuICAgIGlmICghKFYgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgIFYgPSBuZXcgUmVnRXhwKFYpO1xuICAgIH1cblxuICAgIHJldHVybiBWO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cy5taXhpbiA9IGZ1bmN0aW9uIG1peGluKHRhcmdldCwgc291cmNlKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXlzW2ldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5c1tpXSkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy53cmFwcGVyU3ltYm9sID0gU3ltYm9sKFwid3JhcHBlclwiKTtcbm1vZHVsZS5leHBvcnRzLmltcGxTeW1ib2wgPSBTeW1ib2woXCJpbXBsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cy53cmFwcGVyRm9ySW1wbCA9IGZ1bmN0aW9uIChpbXBsKSB7XG4gIHJldHVybiBpbXBsW21vZHVsZS5leHBvcnRzLndyYXBwZXJTeW1ib2xdO1xufTtcblxubW9kdWxlLmV4cG9ydHMuaW1wbEZvcldyYXBwZXIgPSBmdW5jdGlvbiAod3JhcHBlcikge1xuICByZXR1cm4gd3JhcHBlclttb2R1bGUuZXhwb3J0cy5pbXBsU3ltYm9sXTtcbn07XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKFwicHVueWNvZGVcIik7XG52YXIgbWFwcGluZ1RhYmxlID0gcmVxdWlyZShcIi4vbGliL21hcHBpbmdUYWJsZS5qc29uXCIpO1xuXG52YXIgUFJPQ0VTU0lOR19PUFRJT05TID0ge1xuICBUUkFOU0lUSU9OQUw6IDAsXG4gIE5PTlRSQU5TSVRJT05BTDogMVxufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplKHN0cikgeyAvLyBmaXggYnVnIGluIHY4XG4gIHJldHVybiBzdHIuc3BsaXQoJ1xcdTAwMDAnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMubm9ybWFsaXplKCdORkMnKTsgfSkuam9pbignXFx1MDAwMCcpO1xufVxuXG5mdW5jdGlvbiBmaW5kU3RhdHVzKHZhbCkge1xuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gbWFwcGluZ1RhYmxlLmxlbmd0aCAtIDE7XG5cbiAgd2hpbGUgKHN0YXJ0IDw9IGVuZCkge1xuICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcblxuICAgIHZhciB0YXJnZXQgPSBtYXBwaW5nVGFibGVbbWlkXTtcbiAgICBpZiAodGFyZ2V0WzBdWzBdIDw9IHZhbCAmJiB0YXJnZXRbMF1bMV0gPj0gdmFsKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0WzBdWzBdID4gdmFsKSB7XG4gICAgICBlbmQgPSBtaWQgLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydCA9IG1pZCArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciByZWdleEFzdHJhbFN5bWJvbHMgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuXG5mdW5jdGlvbiBjb3VudFN5bWJvbHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICAvLyByZXBsYWNlIGV2ZXJ5IHN1cnJvZ2F0ZSBwYWlyIHdpdGggYSBCTVAgc3ltYm9sXG4gICAgLnJlcGxhY2UocmVnZXhBc3RyYWxTeW1ib2xzLCAnXycpXG4gICAgLy8gdGhlbiBnZXQgdGhlIGxlbmd0aFxuICAgIC5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1hcENoYXJzKGRvbWFpbl9uYW1lLCB1c2VTVEQzLCBwcm9jZXNzaW5nX29wdGlvbikge1xuICB2YXIgaGFzRXJyb3IgPSBmYWxzZTtcbiAgdmFyIHByb2Nlc3NlZCA9IFwiXCI7XG5cbiAgdmFyIGxlbiA9IGNvdW50U3ltYm9scyhkb21haW5fbmFtZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgY29kZVBvaW50ID0gZG9tYWluX25hbWUuY29kZVBvaW50QXQoaSk7XG4gICAgdmFyIHN0YXR1cyA9IGZpbmRTdGF0dXMoY29kZVBvaW50KTtcblxuICAgIHN3aXRjaCAoc3RhdHVzWzFdKSB7XG4gICAgICBjYXNlIFwiZGlzYWxsb3dlZFwiOlxuICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIHByb2Nlc3NlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpZ25vcmVkXCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1hcHBlZFwiOlxuICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBzdGF0dXNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkZXZpYXRpb25cIjpcbiAgICAgICAgaWYgKHByb2Nlc3Npbmdfb3B0aW9uID09PSBQUk9DRVNTSU5HX09QVElPTlMuVFJBTlNJVElPTkFMKSB7XG4gICAgICAgICAgcHJvY2Vzc2VkICs9IFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZywgc3RhdHVzWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ2YWxpZFwiOlxuICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGlzYWxsb3dlZF9TVEQzX21hcHBlZFwiOlxuICAgICAgICBpZiAodXNlU1REMykge1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBzdGF0dXNbMl0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRpc2FsbG93ZWRfU1REM192YWxpZFwiOlxuICAgICAgICBpZiAodXNlU1REMykge1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3NlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0cmluZzogcHJvY2Vzc2VkLFxuICAgIGVycm9yOiBoYXNFcnJvclxuICB9O1xufVxuXG52YXIgY29tYmluaW5nTWFya3NSZWdleCA9IC9bXFx1MDMwMC1cXHUwMzZGXFx1MDQ4My1cXHUwNDg5XFx1MDU5MS1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDYxMC1cXHUwNjFBXFx1MDY0Qi1cXHUwNjVGXFx1MDY3MFxcdTA2RDYtXFx1MDZEQ1xcdTA2REYtXFx1MDZFNFxcdTA2RTdcXHUwNkU4XFx1MDZFQS1cXHUwNkVEXFx1MDcxMVxcdTA3MzAtXFx1MDc0QVxcdTA3QTYtXFx1MDdCMFxcdTA3RUItXFx1MDdGM1xcdTA4MTYtXFx1MDgxOVxcdTA4MUItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyRFxcdTA4NTktXFx1MDg1QlxcdTA4RTQtXFx1MDkwM1xcdTA5M0EtXFx1MDkzQ1xcdTA5M0UtXFx1MDk0RlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk4MS1cXHUwOTgzXFx1MDlCQ1xcdTA5QkUtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNEXFx1MDlEN1xcdTA5RTJcXHUwOUUzXFx1MEEwMS1cXHUwQTAzXFx1MEEzQ1xcdTBBM0UtXFx1MEE0MlxcdTBBNDdcXHUwQTQ4XFx1MEE0Qi1cXHUwQTREXFx1MEE1MVxcdTBBNzBcXHUwQTcxXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBQkNcXHUwQUJFLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBCMDEtXFx1MEIwM1xcdTBCM0NcXHUwQjNFLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI2MlxcdTBCNjNcXHUwQjgyXFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEN1xcdTBDMDAtXFx1MEMwM1xcdTBDM0UtXFx1MEM0NFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzgxLVxcdTBDODNcXHUwQ0JDXFx1MENCRS1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NEXFx1MENENVxcdTBDRDZcXHUwQ0UyXFx1MENFM1xcdTBEMDEtXFx1MEQwM1xcdTBEM0UtXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RFxcdTBENTdcXHUwRDYyXFx1MEQ2M1xcdTBEODJcXHUwRDgzXFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREYyXFx1MERGM1xcdTBFMzFcXHUwRTM0LVxcdTBFM0FcXHUwRTQ3LVxcdTBFNEVcXHUwRUIxXFx1MEVCNC1cXHUwRUI5XFx1MEVCQlxcdTBFQkNcXHUwRUM4LVxcdTBFQ0RcXHUwRjE4XFx1MEYxOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0VcXHUwRjNGXFx1MEY3MS1cXHUwRjg0XFx1MEY4NlxcdTBGODdcXHUwRjhELVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAyQi1cXHUxMDNFXFx1MTA1Ni1cXHUxMDU5XFx1MTA1RS1cXHUxMDYwXFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZEXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhEXFx1MTA4RlxcdTEwOUEtXFx1MTA5RFxcdTEzNUQtXFx1MTM1RlxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN0I0LVxcdTE3RDNcXHUxN0REXFx1MTgwQi1cXHUxODBEXFx1MThBOVxcdTE5MjAtXFx1MTkyQlxcdTE5MzAtXFx1MTkzQlxcdTE5QjAtXFx1MTlDMFxcdTE5QzhcXHUxOUM5XFx1MUExNy1cXHUxQTFCXFx1MUE1NS1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3RlxcdTFBQjAtXFx1MUFCRVxcdTFCMDAtXFx1MUIwNFxcdTFCMzQtXFx1MUI0NFxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUI4MlxcdTFCQTEtXFx1MUJBRFxcdTFCRTYtXFx1MUJGM1xcdTFDMjQtXFx1MUMzN1xcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFOFxcdTFDRURcXHUxQ0YyLVxcdTFDRjRcXHUxQ0Y4XFx1MUNGOVxcdTFEQzAtXFx1MURGNVxcdTFERkMtXFx1MURGRlxcdTIwRDAtXFx1MjBGMFxcdTJDRUYtXFx1MkNGMVxcdTJEN0ZcXHUyREUwLVxcdTJERkZcXHUzMDJBLVxcdTMwMkZcXHUzMDk5XFx1MzA5QVxcdUE2NkYtXFx1QTY3MlxcdUE2NzQtXFx1QTY3RFxcdUE2OUZcXHVBNkYwXFx1QTZGMVxcdUE4MDJcXHVBODA2XFx1QTgwQlxcdUE4MjMtXFx1QTgyN1xcdUE4ODBcXHVBODgxXFx1QThCNC1cXHVBOEM0XFx1QThFMC1cXHVBOEYxXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUzXFx1QTk4MC1cXHVBOTgzXFx1QTlCMy1cXHVBOUMwXFx1QTlFNVxcdUFBMjktXFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE0RFxcdUFBN0ItXFx1QUE3RFxcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUItXFx1QUFFRlxcdUFBRjVcXHVBQUY2XFx1QUJFMy1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVGQjFFXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJEXXxcXHVEODAwW1xcdURERkRcXHVERUUwXFx1REY3Ni1cXHVERjdBXXxcXHVEODAyW1xcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XXxcXHVEODA0W1xcdURDMDAtXFx1REMwMlxcdURDMzgtXFx1REM0NlxcdURDN0YtXFx1REM4MlxcdURDQjAtXFx1RENCQVxcdUREMDAtXFx1REQwMlxcdUREMjctXFx1REQzNFxcdURENzNcXHVERDgwLVxcdUREODJcXHVEREIzLVxcdUREQzBcXHVERTJDLVxcdURFMzdcXHVERURGLVxcdURFRUFcXHVERjAxLVxcdURGMDNcXHVERjNDXFx1REYzRS1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjU3XFx1REY2MlxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1RENCMC1cXHVEQ0MzXFx1RERBRi1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REUzMC1cXHVERTQwXFx1REVBQi1cXHVERUI3XXxcXHVEODFBW1xcdURFRjAtXFx1REVGNFxcdURGMzAtXFx1REYzNl18XFx1RDgxQltcXHVERjUxLVxcdURGN0VcXHVERjhGLVxcdURGOTJdfFxcdUQ4MkZbXFx1REM5RFxcdURDOUVdfFxcdUQ4MzRbXFx1REQ2NS1cXHVERDY5XFx1REQ2RC1cXHVERDcyXFx1REQ3Qi1cXHVERDgyXFx1REQ4NS1cXHVERDhCXFx1RERBQS1cXHVEREFEXFx1REU0Mi1cXHVERTQ0XXxcXHVEODNBW1xcdURDRDAtXFx1RENENl18XFx1REI0MFtcXHVERDAwLVxcdURERUZdLztcblxuZnVuY3Rpb24gdmFsaWRhdGVMYWJlbChsYWJlbCwgcHJvY2Vzc2luZ19vcHRpb24pIHtcbiAgaWYgKGxhYmVsLnN1YnN0cigwLCA0KSA9PT0gXCJ4bi0tXCIpIHtcbiAgICBsYWJlbCA9IHB1bnljb2RlLnRvVW5pY29kZShsYWJlbCk7XG4gICAgcHJvY2Vzc2luZ19vcHRpb24gPSBQUk9DRVNTSU5HX09QVElPTlMuTk9OVFJBTlNJVElPTkFMO1xuICB9XG5cbiAgdmFyIGVycm9yID0gZmFsc2U7XG5cbiAgaWYgKG5vcm1hbGl6ZShsYWJlbCkgIT09IGxhYmVsIHx8XG4gICAgICAobGFiZWxbM10gPT09IFwiLVwiICYmIGxhYmVsWzRdID09PSBcIi1cIikgfHxcbiAgICAgIGxhYmVsWzBdID09PSBcIi1cIiB8fCBsYWJlbFtsYWJlbC5sZW5ndGggLSAxXSA9PT0gXCItXCIgfHxcbiAgICAgIGxhYmVsLmluZGV4T2YoXCIuXCIpICE9PSAtMSB8fFxuICAgICAgbGFiZWwuc2VhcmNoKGNvbWJpbmluZ01hcmtzUmVnZXgpID09PSAwKSB7XG4gICAgZXJyb3IgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGxlbiA9IGNvdW50U3ltYm9scyhsYWJlbCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgc3RhdHVzID0gZmluZFN0YXR1cyhsYWJlbC5jb2RlUG9pbnRBdChpKSk7XG4gICAgaWYgKChwcm9jZXNzaW5nID09PSBQUk9DRVNTSU5HX09QVElPTlMuVFJBTlNJVElPTkFMICYmIHN0YXR1c1sxXSAhPT0gXCJ2YWxpZFwiKSB8fFxuICAgICAgICAocHJvY2Vzc2luZyA9PT0gUFJPQ0VTU0lOR19PUFRJT05TLk5PTlRSQU5TSVRJT05BTCAmJlxuICAgICAgICAgc3RhdHVzWzFdICE9PSBcInZhbGlkXCIgJiYgc3RhdHVzWzFdICE9PSBcImRldmlhdGlvblwiKSkge1xuICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogbGFiZWwsXG4gICAgZXJyb3I6IGVycm9yXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NpbmcoZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uKSB7XG4gIHZhciByZXN1bHQgPSBtYXBDaGFycyhkb21haW5fbmFtZSwgdXNlU1REMywgcHJvY2Vzc2luZ19vcHRpb24pO1xuICByZXN1bHQuc3RyaW5nID0gbm9ybWFsaXplKHJlc3VsdC5zdHJpbmcpO1xuXG4gIHZhciBsYWJlbHMgPSByZXN1bHQuc3RyaW5nLnNwbGl0KFwiLlwiKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyArK2kpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbGlkYXRpb24gPSB2YWxpZGF0ZUxhYmVsKGxhYmVsc1tpXSk7XG4gICAgICBsYWJlbHNbaV0gPSB2YWxpZGF0aW9uLmxhYmVsO1xuICAgICAgcmVzdWx0LmVycm9yID0gcmVzdWx0LmVycm9yIHx8IHZhbGlkYXRpb24uZXJyb3I7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXN1bHQuZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RyaW5nOiBsYWJlbHMuam9pbihcIi5cIiksXG4gICAgZXJyb3I6IHJlc3VsdC5lcnJvclxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cy50b0FTQ0lJID0gZnVuY3Rpb24oZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uLCB2ZXJpZnlEbnNMZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IHByb2Nlc3NpbmcoZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uKTtcbiAgdmFyIGxhYmVscyA9IHJlc3VsdC5zdHJpbmcuc3BsaXQoXCIuXCIpO1xuICBsYWJlbHMgPSBsYWJlbHMubWFwKGZ1bmN0aW9uKGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHB1bnljb2RlLnRvQVNDSUkobCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXN1bHQuZXJyb3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIGw7XG4gICAgfVxuICB9KTtcblxuICBpZiAodmVyaWZ5RG5zTGVuZ3RoKSB7XG4gICAgdmFyIHRvdGFsID0gbGFiZWxzLnNsaWNlKDAsIGxhYmVscy5sZW5ndGggLSAxKS5qb2luKFwiLlwiKS5sZW5ndGg7XG4gICAgaWYgKHRvdGFsLmxlbmd0aCA+IDI1MyB8fCB0b3RhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJlc3VsdC5lcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaT0wOyBpIDwgbGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobGFiZWxzLmxlbmd0aCA+IDYzIHx8IGxhYmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzdWx0LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdC5lcnJvcikgcmV0dXJuIG51bGw7XG4gIHJldHVybiBsYWJlbHMuam9pbihcIi5cIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy50b1VuaWNvZGUgPSBmdW5jdGlvbihkb21haW5fbmFtZSwgdXNlU1REMykge1xuICB2YXIgcmVzdWx0ID0gcHJvY2Vzc2luZyhkb21haW5fbmFtZSwgdXNlU1REMywgUFJPQ0VTU0lOR19PUFRJT05TLk5PTlRSQU5TSVRJT05BTCk7XG5cbiAgcmV0dXJuIHtcbiAgICBkb21haW46IHJlc3VsdC5zdHJpbmcsXG4gICAgZXJyb3I6IHJlc3VsdC5lcnJvclxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMuUFJPQ0VTU0lOR19PUFRJT05TID0gUFJPQ0VTU0lOR19PUFRJT05TO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmNvbnN0IHB1bnljb2RlID0gcmVxdWlyZShcInB1bnljb2RlXCIpO1xyXG5jb25zdCB0cjQ2ID0gcmVxdWlyZShcInRyNDZcIik7XHJcblxyXG5jb25zdCBzcGVjaWFsU2NoZW1lcyA9IHtcclxuICBmdHA6IDIxLFxyXG4gIGZpbGU6IG51bGwsXHJcbiAgZ29waGVyOiA3MCxcclxuICBodHRwOiA4MCxcclxuICBodHRwczogNDQzLFxyXG4gIHdzOiA4MCxcclxuICB3c3M6IDQ0M1xyXG59O1xyXG5cclxuY29uc3QgZmFpbHVyZSA9IFN5bWJvbChcImZhaWx1cmVcIik7XHJcblxyXG5mdW5jdGlvbiBjb3VudFN5bWJvbHMoc3RyKSB7XHJcbiAgcmV0dXJuIHB1bnljb2RlLnVjczIuZGVjb2RlKHN0cikubGVuZ3RoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdChpbnB1dCwgaWR4KSB7XHJcbiAgY29uc3QgYyA9IGlucHV0W2lkeF07XHJcbiAgcmV0dXJuIGlzTmFOKGMpID8gdW5kZWZpbmVkIDogU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQVNDSUlEaWdpdChjKSB7XHJcbiAgcmV0dXJuIGMgPj0gMHgzMCAmJiBjIDw9IDB4Mzk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYShjKSB7XHJcbiAgcmV0dXJuIChjID49IDB4NDEgJiYgYyA8PSAweDVBKSB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYW51bWVyaWMoYykge1xyXG4gIHJldHVybiBpc0FTQ0lJQWxwaGEoYykgfHwgaXNBU0NJSURpZ2l0KGMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FTQ0lJSGV4KGMpIHtcclxuICByZXR1cm4gaXNBU0NJSURpZ2l0KGMpIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDQ2KSB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg2Nik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzU2luZ2xlRG90KGJ1ZmZlcikge1xyXG4gIHJldHVybiBidWZmZXIgPT09IFwiLlwiIHx8IGJ1ZmZlci50b0xvd2VyQ2FzZSgpID09PSBcIiUyZVwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0RvdWJsZURvdChidWZmZXIpIHtcclxuICBidWZmZXIgPSBidWZmZXIudG9Mb3dlckNhc2UoKTtcclxuICByZXR1cm4gYnVmZmVyID09PSBcIi4uXCIgfHwgYnVmZmVyID09PSBcIiUyZS5cIiB8fCBidWZmZXIgPT09IFwiLiUyZVwiIHx8IGJ1ZmZlciA9PT0gXCIlMmUlMmVcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNXaW5kb3dzRHJpdmVMZXR0ZXJDb2RlUG9pbnRzKGNwMSwgY3AyKSB7XHJcbiAgcmV0dXJuIGlzQVNDSUlBbHBoYShjcDEpICYmIChjcDIgPT09IDU4IHx8IGNwMiA9PT0gMTI0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNXaW5kb3dzRHJpdmVMZXR0ZXJTdHJpbmcoc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT09IDIgJiYgaXNBU0NJSUFscGhhKHN0cmluZy5jb2RlUG9pbnRBdCgwKSkgJiYgKHN0cmluZ1sxXSA9PT0gXCI6XCIgfHwgc3RyaW5nWzFdID09PSBcInxcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzTm9ybWFsaXplZFdpbmRvd3NEcml2ZUxldHRlclN0cmluZyhzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PT0gMiAmJiBpc0FTQ0lJQWxwaGEoc3RyaW5nLmNvZGVQb2ludEF0KDApKSAmJiBzdHJpbmdbMV0gPT09IFwiOlwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250YWluc0ZvcmJpZGRlbkhvc3RDb2RlUG9pbnQoc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHN0cmluZy5zZWFyY2goL1xcdTAwMDB8XFx1MDAwOXxcXHUwMDBBfFxcdTAwMER8XFx1MDAyMHwjfCV8XFwvfDp8XFw/fEB8XFxbfFxcXFx8XFxdLykgIT09IC0xO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250YWluc0ZvcmJpZGRlbkhvc3RDb2RlUG9pbnRFeGNsdWRpbmdQZXJjZW50KHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcuc2VhcmNoKC9cXHUwMDAwfFxcdTAwMDl8XFx1MDAwQXxcXHUwMDBEfFxcdTAwMjB8I3xcXC98OnxcXD98QHxcXFt8XFxcXHxcXF0vKSAhPT0gLTE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzU3BlY2lhbFNjaGVtZShzY2hlbWUpIHtcclxuICByZXR1cm4gc3BlY2lhbFNjaGVtZXNbc2NoZW1lXSAhPT0gdW5kZWZpbmVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1NwZWNpYWwodXJsKSB7XHJcbiAgcmV0dXJuIGlzU3BlY2lhbFNjaGVtZSh1cmwuc2NoZW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFBvcnQoc2NoZW1lKSB7XHJcbiAgcmV0dXJuIHNwZWNpYWxTY2hlbWVzW3NjaGVtZV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBlcmNlbnRFbmNvZGUoYykge1xyXG4gIGxldCBoZXggPSBjLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xyXG4gIGlmIChoZXgubGVuZ3RoID09PSAxKSB7XHJcbiAgICBoZXggPSBcIjBcIiArIGhleDtcclxuICB9XHJcblxyXG4gIHJldHVybiBcIiVcIiArIGhleDtcclxufVxyXG5cclxuZnVuY3Rpb24gdXRmOFBlcmNlbnRFbmNvZGUoYykge1xyXG4gIGNvbnN0IGJ1ZiA9IG5ldyBCdWZmZXIoYyk7XHJcblxyXG4gIGxldCBzdHIgPSBcIlwiO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7ICsraSkge1xyXG4gICAgc3RyICs9IHBlcmNlbnRFbmNvZGUoYnVmW2ldKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHV0ZjhQZXJjZW50RGVjb2RlKHN0cikge1xyXG4gIGNvbnN0IGlucHV0ID0gbmV3IEJ1ZmZlcihzdHIpO1xyXG4gIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmIChpbnB1dFtpXSAhPT0gMzcpIHtcclxuICAgICAgb3V0cHV0LnB1c2goaW5wdXRbaV0pO1xyXG4gICAgfSBlbHNlIGlmIChpbnB1dFtpXSA9PT0gMzcgJiYgaXNBU0NJSUhleChpbnB1dFtpICsgMV0pICYmIGlzQVNDSUlIZXgoaW5wdXRbaSArIDJdKSkge1xyXG4gICAgICBvdXRwdXQucHVzaChwYXJzZUludChpbnB1dC5zbGljZShpICsgMSwgaSArIDMpLnRvU3RyaW5nKCksIDE2KSk7XHJcbiAgICAgIGkgKz0gMjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dHB1dC5wdXNoKGlucHV0W2ldKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0cHV0KS50b1N0cmluZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0MwQ29udHJvbFBlcmNlbnRFbmNvZGUoYykge1xyXG4gIHJldHVybiBjIDw9IDB4MUYgfHwgYyA+IDB4N0U7XHJcbn1cclxuXHJcbmNvbnN0IGV4dHJhUGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBuZXcgU2V0KFszMiwgMzQsIDM1LCA2MCwgNjIsIDYzLCA5NiwgMTIzLCAxMjVdKTtcclxuZnVuY3Rpb24gaXNQYXRoUGVyY2VudEVuY29kZShjKSB7XHJcbiAgcmV0dXJuIGlzQzBDb250cm9sUGVyY2VudEVuY29kZShjKSB8fCBleHRyYVBhdGhQZXJjZW50RW5jb2RlU2V0LmhhcyhjKTtcclxufVxyXG5cclxuY29uc3QgZXh0cmFVc2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPVxyXG4gIG5ldyBTZXQoWzQ3LCA1OCwgNTksIDYxLCA2NCwgOTEsIDkyLCA5MywgOTQsIDEyNF0pO1xyXG5mdW5jdGlvbiBpc1VzZXJpbmZvUGVyY2VudEVuY29kZShjKSB7XHJcbiAgcmV0dXJuIGlzUGF0aFBlcmNlbnRFbmNvZGUoYykgfHwgZXh0cmFVc2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQuaGFzKGMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwZXJjZW50RW5jb2RlQ2hhcihjLCBlbmNvZGVTZXRQcmVkaWNhdGUpIHtcclxuICBjb25zdCBjU3RyID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XHJcblxyXG4gIGlmIChlbmNvZGVTZXRQcmVkaWNhdGUoYykpIHtcclxuICAgIHJldHVybiB1dGY4UGVyY2VudEVuY29kZShjU3RyKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjU3RyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUlQdjROdW1iZXIoaW5wdXQpIHtcclxuICBsZXQgUiA9IDEwO1xyXG5cclxuICBpZiAoaW5wdXQubGVuZ3RoID49IDIgJiYgaW5wdXQuY2hhckF0KDApID09PSBcIjBcIiAmJiBpbnB1dC5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKSA9PT0gXCJ4XCIpIHtcclxuICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKDIpO1xyXG4gICAgUiA9IDE2O1xyXG4gIH0gZWxzZSBpZiAoaW5wdXQubGVuZ3RoID49IDIgJiYgaW5wdXQuY2hhckF0KDApID09PSBcIjBcIikge1xyXG4gICAgaW5wdXQgPSBpbnB1dC5zdWJzdHJpbmcoMSk7XHJcbiAgICBSID0gODtcclxuICB9XHJcblxyXG4gIGlmIChpbnB1dCA9PT0gXCJcIikge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZWdleCA9IFIgPT09IDEwID8gL1teMC05XS8gOiAoUiA9PT0gMTYgPyAvW14wLTlBLUZhLWZdLyA6IC9bXjAtN10vKTtcclxuICBpZiAocmVnZXgudGVzdChpbnB1dCkpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCBSKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VJUHY0KGlucHV0KSB7XHJcbiAgY29uc3QgcGFydHMgPSBpbnB1dC5zcGxpdChcIi5cIik7XHJcbiAgaWYgKHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09PSBcIlwiKSB7XHJcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xyXG4gICAgICBwYXJ0cy5wb3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChwYXJ0cy5sZW5ndGggPiA0KSB7XHJcbiAgICByZXR1cm4gaW5wdXQ7XHJcbiAgfVxyXG5cclxuICBjb25zdCBudW1iZXJzID0gW107XHJcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XHJcbiAgICBpZiAocGFydCA9PT0gXCJcIikge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBuID0gcGFyc2VJUHY0TnVtYmVyKHBhcnQpO1xyXG4gICAgaWYgKG4gPT09IGZhaWx1cmUpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIG51bWJlcnMucHVzaChuKTtcclxuICB9XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVycy5sZW5ndGggLSAxOyArK2kpIHtcclxuICAgIGlmIChudW1iZXJzW2ldID4gMjU1KSB7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAobnVtYmVyc1tudW1iZXJzLmxlbmd0aCAtIDFdID49IE1hdGgucG93KDI1NiwgNSAtIG51bWJlcnMubGVuZ3RoKSkge1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICBsZXQgaXB2NCA9IG51bWJlcnMucG9wKCk7XHJcbiAgbGV0IGNvdW50ZXIgPSAwO1xyXG5cclxuICBmb3IgKGNvbnN0IG4gb2YgbnVtYmVycykge1xyXG4gICAgaXB2NCArPSBuICogTWF0aC5wb3coMjU2LCAzIC0gY291bnRlcik7XHJcbiAgICArK2NvdW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXB2NDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplSVB2NChhZGRyZXNzKSB7XHJcbiAgbGV0IG91dHB1dCA9IFwiXCI7XHJcbiAgbGV0IG4gPSBhZGRyZXNzO1xyXG5cclxuICBmb3IgKGxldCBpID0gMTsgaSA8PSA0OyArK2kpIHtcclxuICAgIG91dHB1dCA9IFN0cmluZyhuICUgMjU2KSArIG91dHB1dDtcclxuICAgIGlmIChpICE9PSA0KSB7XHJcbiAgICAgIG91dHB1dCA9IFwiLlwiICsgb3V0cHV0O1xyXG4gICAgfVxyXG4gICAgbiA9IE1hdGguZmxvb3IobiAvIDI1Nik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUlQdjYoaW5wdXQpIHtcclxuICBjb25zdCBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xyXG4gIGxldCBwaWVjZUluZGV4ID0gMDtcclxuICBsZXQgY29tcHJlc3MgPSBudWxsO1xyXG4gIGxldCBwb2ludGVyID0gMDtcclxuXHJcbiAgaW5wdXQgPSBwdW55Y29kZS51Y3MyLmRlY29kZShpbnB1dCk7XHJcblxyXG4gIGlmIChpbnB1dFtwb2ludGVyXSA9PT0gNTgpIHtcclxuICAgIGlmIChpbnB1dFtwb2ludGVyICsgMV0gIT09IDU4KSB7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHBvaW50ZXIgKz0gMjtcclxuICAgICsrcGllY2VJbmRleDtcclxuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcclxuICB9XHJcblxyXG4gIHdoaWxlIChwb2ludGVyIDwgaW5wdXQubGVuZ3RoKSB7XHJcbiAgICBpZiAocGllY2VJbmRleCA9PT0gOCkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5wdXRbcG9pbnRlcl0gPT09IDU4KSB7XHJcbiAgICAgIGlmIChjb21wcmVzcyAhPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICB9XHJcbiAgICAgICsrcG9pbnRlcjtcclxuICAgICAgKytwaWVjZUluZGV4O1xyXG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB2YWx1ZSA9IDA7XHJcbiAgICBsZXQgbGVuZ3RoID0gMDtcclxuXHJcbiAgICB3aGlsZSAobGVuZ3RoIDwgNCAmJiBpc0FTQ0lJSGV4KGlucHV0W3BvaW50ZXJdKSkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlICogMHgxMCArIHBhcnNlSW50KGF0KGlucHV0LCBwb2ludGVyKSwgMTYpO1xyXG4gICAgICArK3BvaW50ZXI7XHJcbiAgICAgICsrbGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbnB1dFtwb2ludGVyXSA9PT0gNDYpIHtcclxuICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwb2ludGVyIC09IGxlbmd0aDtcclxuXHJcbiAgICAgIGlmIChwaWVjZUluZGV4ID4gNikge1xyXG4gICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbnVtYmVyc1NlZW4gPSAwO1xyXG5cclxuICAgICAgd2hpbGUgKGlucHV0W3BvaW50ZXJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsZXQgaXB2NFBpZWNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkge1xyXG4gICAgICAgICAgaWYgKGlucHV0W3BvaW50ZXJdID09PSA0NiAmJiBudW1iZXJzU2VlbiA8IDQpIHtcclxuICAgICAgICAgICAgKytwb2ludGVyO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzQVNDSUlEaWdpdChpbnB1dFtwb2ludGVyXSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGlzQVNDSUlEaWdpdChpbnB1dFtwb2ludGVyXSkpIHtcclxuICAgICAgICAgIGNvbnN0IG51bWJlciA9IHBhcnNlSW50KGF0KGlucHV0LCBwb2ludGVyKSk7XHJcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlwdjRQaWVjZSA9IG51bWJlcjtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoaXB2NFBpZWNlID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXB2NFBpZWNlID0gaXB2NFBpZWNlICogMTAgKyBudW1iZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgKytwb2ludGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAweDEwMCArIGlwdjRQaWVjZTtcclxuXHJcbiAgICAgICAgKytudW1iZXJzU2VlbjtcclxuXHJcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID09PSAyIHx8IG51bWJlcnNTZWVuID09PSA0KSB7XHJcbiAgICAgICAgICArK3BpZWNlSW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT09IDQpIHtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYnJlYWs7XHJcbiAgICB9IGVsc2UgaWYgKGlucHV0W3BvaW50ZXJdID09PSA1OCkge1xyXG4gICAgICArK3BvaW50ZXI7XHJcbiAgICAgIGlmIChpbnB1dFtwb2ludGVyXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaW5wdXRbcG9pbnRlcl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gdmFsdWU7XHJcbiAgICArK3BpZWNlSW5kZXg7XHJcbiAgfVxyXG5cclxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcclxuICAgIGxldCBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcclxuICAgIHBpZWNlSW5kZXggPSA3O1xyXG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT09IDAgJiYgc3dhcHMgPiAwKSB7XHJcbiAgICAgIGNvbnN0IHRlbXAgPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcclxuICAgICAgYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xyXG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gdGVtcDtcclxuICAgICAgLS1waWVjZUluZGV4O1xyXG4gICAgICAtLXN3YXBzO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoY29tcHJlc3MgPT09IG51bGwgJiYgcGllY2VJbmRleCAhPT0gOCkge1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYWRkcmVzcztcclxufVxyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplSVB2NihhZGRyZXNzKSB7XHJcbiAgbGV0IG91dHB1dCA9IFwiXCI7XHJcbiAgY29uc3Qgc2VxUmVzdWx0ID0gZmluZExvbmdlc3RaZXJvU2VxdWVuY2UoYWRkcmVzcyk7XHJcbiAgY29uc3QgY29tcHJlc3MgPSBzZXFSZXN1bHQuaWR4O1xyXG4gIGxldCBpZ25vcmUwID0gZmFsc2U7XHJcblxyXG4gIGZvciAobGV0IHBpZWNlSW5kZXggPSAwOyBwaWVjZUluZGV4IDw9IDc7ICsrcGllY2VJbmRleCkge1xyXG4gICAgaWYgKGlnbm9yZTAgJiYgYWRkcmVzc1twaWVjZUluZGV4XSA9PT0gMCkge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH0gZWxzZSBpZiAoaWdub3JlMCkge1xyXG4gICAgICBpZ25vcmUwID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbXByZXNzID09PSBwaWVjZUluZGV4KSB7XHJcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IHBpZWNlSW5kZXggPT09IDAgPyBcIjo6XCIgOiBcIjpcIjtcclxuICAgICAgb3V0cHV0ICs9IHNlcGFyYXRvcjtcclxuICAgICAgaWdub3JlMCA9IHRydWU7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dCArPSBhZGRyZXNzW3BpZWNlSW5kZXhdLnRvU3RyaW5nKDE2KTtcclxuXHJcbiAgICBpZiAocGllY2VJbmRleCAhPT0gNykge1xyXG4gICAgICBvdXRwdXQgKz0gXCI6XCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUhvc3QoaW5wdXQsIGlzU3BlY2lhbEFyZykge1xyXG4gIGlmIChpbnB1dFswXSA9PT0gXCJbXCIpIHtcclxuICAgIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSAhPT0gXCJdXCIpIHtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcnNlSVB2NihpbnB1dC5zdWJzdHJpbmcoMSwgaW5wdXQubGVuZ3RoIC0gMSkpO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFpc1NwZWNpYWxBcmcpIHtcclxuICAgIHJldHVybiBwYXJzZU9wYXF1ZUhvc3QoaW5wdXQpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZG9tYWluID0gdXRmOFBlcmNlbnREZWNvZGUoaW5wdXQpO1xyXG4gIGNvbnN0IGFzY2lpRG9tYWluID0gdHI0Ni50b0FTQ0lJKGRvbWFpbiwgZmFsc2UsIHRyNDYuUFJPQ0VTU0lOR19PUFRJT05TLk5PTlRSQU5TSVRJT05BTCwgZmFsc2UpO1xyXG4gIGlmIChhc2NpaURvbWFpbiA9PT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICBpZiAoY29udGFpbnNGb3JiaWRkZW5Ib3N0Q29kZVBvaW50KGFzY2lpRG9tYWluKSkge1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBpcHY0SG9zdCA9IHBhcnNlSVB2NChhc2NpaURvbWFpbik7XHJcbiAgaWYgKHR5cGVvZiBpcHY0SG9zdCA9PT0gXCJudW1iZXJcIiB8fCBpcHY0SG9zdCA9PT0gZmFpbHVyZSkge1xyXG4gICAgcmV0dXJuIGlwdjRIb3N0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGFzY2lpRG9tYWluO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZU9wYXF1ZUhvc3QoaW5wdXQpIHtcclxuICBpZiAoY29udGFpbnNGb3JiaWRkZW5Ib3N0Q29kZVBvaW50RXhjbHVkaW5nUGVyY2VudChpbnB1dCkpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgbGV0IG91dHB1dCA9IFwiXCI7XHJcbiAgY29uc3QgZGVjb2RlZCA9IHB1bnljb2RlLnVjczIuZGVjb2RlKGlucHV0KTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlY29kZWQubGVuZ3RoOyArK2kpIHtcclxuICAgIG91dHB1dCArPSBwZXJjZW50RW5jb2RlQ2hhcihkZWNvZGVkW2ldLCBpc0MwQ29udHJvbFBlcmNlbnRFbmNvZGUpO1xyXG4gIH1cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShhcnIpIHtcclxuICBsZXQgbWF4SWR4ID0gbnVsbDtcclxuICBsZXQgbWF4TGVuID0gMTsgLy8gb25seSBmaW5kIGVsZW1lbnRzID4gMVxyXG4gIGxldCBjdXJyU3RhcnQgPSBudWxsO1xyXG4gIGxldCBjdXJyTGVuID0gMDtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmIChhcnJbaV0gIT09IDApIHtcclxuICAgICAgaWYgKGN1cnJMZW4gPiBtYXhMZW4pIHtcclxuICAgICAgICBtYXhJZHggPSBjdXJyU3RhcnQ7XHJcbiAgICAgICAgbWF4TGVuID0gY3VyckxlbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY3VyclN0YXJ0ID0gbnVsbDtcclxuICAgICAgY3VyckxlbiA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoY3VyclN0YXJ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgY3VyclN0YXJ0ID0gaTtcclxuICAgICAgfVxyXG4gICAgICArK2N1cnJMZW47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBpZiB0cmFpbGluZyB6ZXJvc1xyXG4gIGlmIChjdXJyTGVuID4gbWF4TGVuKSB7XHJcbiAgICBtYXhJZHggPSBjdXJyU3RhcnQ7XHJcbiAgICBtYXhMZW4gPSBjdXJyTGVuO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGlkeDogbWF4SWR4LFxyXG4gICAgbGVuOiBtYXhMZW5cclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXJpYWxpemVIb3N0KGhvc3QpIHtcclxuICBpZiAodHlwZW9mIGhvc3QgPT09IFwibnVtYmVyXCIpIHtcclxuICAgIHJldHVybiBzZXJpYWxpemVJUHY0KGhvc3QpO1xyXG4gIH1cclxuXHJcbiAgLy8gSVB2NiBzZXJpYWxpemVyXHJcbiAgaWYgKGhvc3QgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgcmV0dXJuIFwiW1wiICsgc2VyaWFsaXplSVB2Nihob3N0KSArIFwiXVwiO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGhvc3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyaW1Db250cm9sQ2hhcnModXJsKSB7XHJcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC9eW1xcdTAwMDAtXFx1MDAxRlxcdTAwMjBdK3xbXFx1MDAwMC1cXHUwMDFGXFx1MDAyMF0rJC9nLCBcIlwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJpbVRhYkFuZE5ld2xpbmUodXJsKSB7XHJcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXHUwMDA5fFxcdTAwMEF8XFx1MDAwRC9nLCBcIlwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvcnRlblBhdGgodXJsKSB7XHJcbiAgY29uc3QgcGF0aCA9IHVybC5wYXRoO1xyXG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAodXJsLnNjaGVtZSA9PT0gXCJmaWxlXCIgJiYgcGF0aC5sZW5ndGggPT09IDEgJiYgaXNOb3JtYWxpemVkV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0pKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBwYXRoLnBvcCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkge1xyXG4gIHJldHVybiB1cmwudXNlcm5hbWUgIT09IFwiXCIgfHwgdXJsLnBhc3N3b3JkICE9PSBcIlwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkge1xyXG4gIHJldHVybiB1cmwuaG9zdCA9PT0gbnVsbCB8fCB1cmwuaG9zdCA9PT0gXCJcIiB8fCB1cmwuY2Fubm90QmVBQmFzZVVSTCB8fCB1cmwuc2NoZW1lID09PSBcImZpbGVcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNOb3JtYWxpemVkV2luZG93c0RyaXZlTGV0dGVyKHN0cmluZykge1xyXG4gIHJldHVybiAvXltBLVphLXpdOiQvLnRlc3Qoc3RyaW5nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gVVJMU3RhdGVNYWNoaW5lKGlucHV0LCBiYXNlLCBlbmNvZGluZ092ZXJyaWRlLCB1cmwsIHN0YXRlT3ZlcnJpZGUpIHtcclxuICB0aGlzLnBvaW50ZXIgPSAwO1xyXG4gIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICB0aGlzLmJhc2UgPSBiYXNlIHx8IG51bGw7XHJcbiAgdGhpcy5lbmNvZGluZ092ZXJyaWRlID0gZW5jb2RpbmdPdmVycmlkZSB8fCBcInV0Zi04XCI7XHJcbiAgdGhpcy5zdGF0ZU92ZXJyaWRlID0gc3RhdGVPdmVycmlkZTtcclxuICB0aGlzLnVybCA9IHVybDtcclxuICB0aGlzLmZhaWx1cmUgPSBmYWxzZTtcclxuICB0aGlzLnBhcnNlRXJyb3IgPSBmYWxzZTtcclxuXHJcbiAgaWYgKCF0aGlzLnVybCkge1xyXG4gICAgdGhpcy51cmwgPSB7XHJcbiAgICAgIHNjaGVtZTogXCJcIixcclxuICAgICAgdXNlcm5hbWU6IFwiXCIsXHJcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxyXG4gICAgICBob3N0OiBudWxsLFxyXG4gICAgICBwb3J0OiBudWxsLFxyXG4gICAgICBwYXRoOiBbXSxcclxuICAgICAgcXVlcnk6IG51bGwsXHJcbiAgICAgIGZyYWdtZW50OiBudWxsLFxyXG5cclxuICAgICAgY2Fubm90QmVBQmFzZVVSTDogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzID0gdHJpbUNvbnRyb2xDaGFycyh0aGlzLmlucHV0KTtcclxuICAgIGlmIChyZXMgIT09IHRoaXMuaW5wdXQpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuaW5wdXQgPSByZXM7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXMgPSB0cmltVGFiQW5kTmV3bGluZSh0aGlzLmlucHV0KTtcclxuICBpZiAocmVzICE9PSB0aGlzLmlucHV0KSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gIH1cclxuICB0aGlzLmlucHV0ID0gcmVzO1xyXG5cclxuICB0aGlzLnN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBcInNjaGVtZSBzdGFydFwiO1xyXG5cclxuICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgdGhpcy5hdEZsYWcgPSBmYWxzZTtcclxuICB0aGlzLmFyckZsYWcgPSBmYWxzZTtcclxuICB0aGlzLnBhc3N3b3JkVG9rZW5TZWVuRmxhZyA9IGZhbHNlO1xyXG5cclxuICB0aGlzLmlucHV0ID0gcHVueWNvZGUudWNzMi5kZWNvZGUodGhpcy5pbnB1dCk7XHJcblxyXG4gIGZvciAoOyB0aGlzLnBvaW50ZXIgPD0gdGhpcy5pbnB1dC5sZW5ndGg7ICsrdGhpcy5wb2ludGVyKSB7XHJcbiAgICBjb25zdCBjID0gdGhpcy5pbnB1dFt0aGlzLnBvaW50ZXJdO1xyXG4gICAgY29uc3QgY1N0ciA9IGlzTmFOKGMpID8gdW5kZWZpbmVkIDogU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XHJcblxyXG4gICAgLy8gZXhlYyBzdGF0ZSBtYWNoaW5lXHJcbiAgICBjb25zdCByZXQgPSB0aGlzW1wicGFyc2UgXCIgKyB0aGlzLnN0YXRlXShjLCBjU3RyKTtcclxuICAgIGlmICghcmV0KSB7XHJcbiAgICAgIGJyZWFrOyAvLyB0ZXJtaW5hdGUgYWxnb3JpdGhtXHJcbiAgICB9IGVsc2UgaWYgKHJldCA9PT0gZmFpbHVyZSkge1xyXG4gICAgICB0aGlzLmZhaWx1cmUgPSB0cnVlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBzY2hlbWUgc3RhcnRcIl0gPSBmdW5jdGlvbiBwYXJzZVNjaGVtZVN0YXJ0KGMsIGNTdHIpIHtcclxuICBpZiAoaXNBU0NJSUFscGhhKGMpKSB7XHJcbiAgICB0aGlzLmJ1ZmZlciArPSBjU3RyLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJzY2hlbWVcIjtcclxuICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcIm5vIHNjaGVtZVwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICByZXR1cm4gZmFpbHVyZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHNjaGVtZVwiXSA9IGZ1bmN0aW9uIHBhcnNlU2NoZW1lKGMsIGNTdHIpIHtcclxuICBpZiAoaXNBU0NJSUFscGhhbnVtZXJpYyhjKSB8fCBjID09PSA0MyB8fCBjID09PSA0NSB8fCBjID09PSA0Nikge1xyXG4gICAgdGhpcy5idWZmZXIgKz0gY1N0ci50b0xvd2VyQ2FzZSgpO1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gNTgpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgICAgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgIWlzU3BlY2lhbFNjaGVtZSh0aGlzLmJ1ZmZlcikpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBpc1NwZWNpYWxTY2hlbWUodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoKGluY2x1ZGVzQ3JlZGVudGlhbHModGhpcy51cmwpIHx8IHRoaXMudXJsLnBvcnQgIT09IG51bGwpICYmIHRoaXMuYnVmZmVyID09PSBcImZpbGVcIikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMudXJsLnNjaGVtZSA9PT0gXCJmaWxlXCIgJiYgKHRoaXMudXJsLmhvc3QgPT09IFwiXCIgfHwgdGhpcy51cmwuaG9zdCA9PT0gbnVsbCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMudXJsLnNjaGVtZSA9IHRoaXMuYnVmZmVyO1xyXG4gICAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gICAgaWYgKHRoaXMuc3RhdGVPdmVycmlkZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy51cmwuc2NoZW1lID09PSBcImZpbGVcIikge1xyXG4gICAgICBpZiAodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAxXSAhPT0gNDcgfHwgdGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAyXSAhPT0gNDcpIHtcclxuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcImZpbGVcIjtcclxuICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiB0aGlzLmJhc2UgIT09IG51bGwgJiYgdGhpcy5iYXNlLnNjaGVtZSA9PT0gdGhpcy51cmwuc2NoZW1lKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInNwZWNpYWwgcmVsYXRpdmUgb3IgYXV0aG9yaXR5XCI7XHJcbiAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkpIHtcclxuICAgICAgdGhpcy5zdGF0ZSA9IFwic3BlY2lhbCBhdXRob3JpdHkgc2xhc2hlc1wiO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdID09PSA0Nykge1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJwYXRoIG9yIGF1dGhvcml0eVwiO1xyXG4gICAgICArK3RoaXMucG9pbnRlcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xyXG4gICAgICB0aGlzLnVybC5wYXRoLnB1c2goXCJcIik7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcImNhbm5vdC1iZS1hLWJhc2UtVVJMIHBhdGhcIjtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcIm5vIHNjaGVtZVwiO1xyXG4gICAgdGhpcy5wb2ludGVyID0gLTE7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICByZXR1cm4gZmFpbHVyZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIG5vIHNjaGVtZVwiXSA9IGZ1bmN0aW9uIHBhcnNlTm9TY2hlbWUoYykge1xyXG4gIGlmICh0aGlzLmJhc2UgPT09IG51bGwgfHwgKHRoaXMuYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGMgIT09IDM1KSkge1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjID09PSAzNSkge1xyXG4gICAgdGhpcy51cmwuc2NoZW1lID0gdGhpcy5iYXNlLnNjaGVtZTtcclxuICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgdGhpcy51cmwucXVlcnkgPSB0aGlzLmJhc2UucXVlcnk7XHJcbiAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICB0aGlzLnVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcclxuICAgIHRoaXMuc3RhdGUgPSBcImZyYWdtZW50XCI7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmJhc2Uuc2NoZW1lID09PSBcImZpbGVcIikge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwiZmlsZVwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcInJlbGF0aXZlXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHNwZWNpYWwgcmVsYXRpdmUgb3IgYXV0aG9yaXR5XCJdID0gZnVuY3Rpb24gcGFyc2VTcGVjaWFsUmVsYXRpdmVPckF1dGhvcml0eShjKSB7XHJcbiAgaWYgKGMgPT09IDQ3ICYmIHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0gPT09IDQ3KSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJzcGVjaWFsIGF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO1xyXG4gICAgKyt0aGlzLnBvaW50ZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJyZWxhdGl2ZVwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBwYXRoIG9yIGF1dGhvcml0eVwiXSA9IGZ1bmN0aW9uIHBhcnNlUGF0aE9yQXV0aG9yaXR5KGMpIHtcclxuICBpZiAoYyA9PT0gNDcpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcImF1dGhvcml0eVwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHJlbGF0aXZlXCJdID0gZnVuY3Rpb24gcGFyc2VSZWxhdGl2ZShjKSB7XHJcbiAgdGhpcy51cmwuc2NoZW1lID0gdGhpcy5iYXNlLnNjaGVtZTtcclxuICBpZiAoaXNOYU4oYykpIHtcclxuICAgIHRoaXMudXJsLnVzZXJuYW1lID0gdGhpcy5iYXNlLnVzZXJuYW1lO1xyXG4gICAgdGhpcy51cmwucGFzc3dvcmQgPSB0aGlzLmJhc2UucGFzc3dvcmQ7XHJcbiAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICB0aGlzLnVybC5wb3J0ID0gdGhpcy5iYXNlLnBvcnQ7XHJcbiAgICB0aGlzLnVybC5wYXRoID0gdGhpcy5iYXNlLnBhdGguc2xpY2UoKTtcclxuICAgIHRoaXMudXJsLnF1ZXJ5ID0gdGhpcy5iYXNlLnF1ZXJ5O1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gNDcpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcInJlbGF0aXZlIHNsYXNoXCI7XHJcbiAgfSBlbHNlIGlmIChjID09PSA2Mykge1xyXG4gICAgdGhpcy51cmwudXNlcm5hbWUgPSB0aGlzLmJhc2UudXNlcm5hbWU7XHJcbiAgICB0aGlzLnVybC5wYXNzd29yZCA9IHRoaXMuYmFzZS5wYXNzd29yZDtcclxuICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgIHRoaXMudXJsLnBvcnQgPSB0aGlzLmJhc2UucG9ydDtcclxuICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgdGhpcy51cmwucXVlcnkgPSBcIlwiO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicXVlcnlcIjtcclxuICB9IGVsc2UgaWYgKGMgPT09IDM1KSB7XHJcbiAgICB0aGlzLnVybC51c2VybmFtZSA9IHRoaXMuYmFzZS51c2VybmFtZTtcclxuICAgIHRoaXMudXJsLnBhc3N3b3JkID0gdGhpcy5iYXNlLnBhc3N3b3JkO1xyXG4gICAgdGhpcy51cmwuaG9zdCA9IHRoaXMuYmFzZS5ob3N0O1xyXG4gICAgdGhpcy51cmwucG9ydCA9IHRoaXMuYmFzZS5wb3J0O1xyXG4gICAgdGhpcy51cmwucGF0aCA9IHRoaXMuYmFzZS5wYXRoLnNsaWNlKCk7XHJcbiAgICB0aGlzLnVybC5xdWVyeSA9IHRoaXMuYmFzZS5xdWVyeTtcclxuICAgIHRoaXMudXJsLmZyYWdtZW50ID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcImZyYWdtZW50XCI7XHJcbiAgfSBlbHNlIGlmIChpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicmVsYXRpdmUgc2xhc2hcIjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy51cmwudXNlcm5hbWUgPSB0aGlzLmJhc2UudXNlcm5hbWU7XHJcbiAgICB0aGlzLnVybC5wYXNzd29yZCA9IHRoaXMuYmFzZS5wYXNzd29yZDtcclxuICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgIHRoaXMudXJsLnBvcnQgPSB0aGlzLmJhc2UucG9ydDtcclxuICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgwLCB0aGlzLmJhc2UucGF0aC5sZW5ndGggLSAxKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHJlbGF0aXZlIHNsYXNoXCJdID0gZnVuY3Rpb24gcGFyc2VSZWxhdGl2ZVNsYXNoKGMpIHtcclxuICBpZiAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiAoYyA9PT0gNDcgfHwgYyA9PT0gOTIpKSB7XHJcbiAgICBpZiAoYyA9PT0gOTIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcInNwZWNpYWwgYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7XHJcbiAgfSBlbHNlIGlmIChjID09PSA0Nykge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwiYXV0aG9yaXR5XCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMudXJsLnVzZXJuYW1lID0gdGhpcy5iYXNlLnVzZXJuYW1lO1xyXG4gICAgdGhpcy51cmwucGFzc3dvcmQgPSB0aGlzLmJhc2UucGFzc3dvcmQ7XHJcbiAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICB0aGlzLnVybC5wb3J0ID0gdGhpcy5iYXNlLnBvcnQ7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHNwZWNpYWwgYXV0aG9yaXR5IHNsYXNoZXNcIl0gPSBmdW5jdGlvbiBwYXJzZVNwZWNpYWxBdXRob3JpdHlTbGFzaGVzKGMpIHtcclxuICBpZiAoYyA9PT0gNDcgJiYgdGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAxXSA9PT0gNDcpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcInNwZWNpYWwgYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7XHJcbiAgICArK3RoaXMucG9pbnRlcjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIHRoaXMuc3RhdGUgPSBcInNwZWNpYWwgYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHNwZWNpYWwgYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCJdID0gZnVuY3Rpb24gcGFyc2VTcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlcyhjKSB7XHJcbiAgaWYgKGMgIT09IDQ3ICYmIGMgIT09IDkyKSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJhdXRob3JpdHlcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgYXV0aG9yaXR5XCJdID0gZnVuY3Rpb24gcGFyc2VBdXRob3JpdHkoYywgY1N0cikge1xyXG4gIGlmIChjID09PSA2NCkge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIGlmICh0aGlzLmF0RmxhZykge1xyXG4gICAgICB0aGlzLmJ1ZmZlciA9IFwiJTQwXCIgKyB0aGlzLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHRoaXMuYXRGbGFnID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBjYXJlZnVsLCB0aGlzIGlzIGJhc2VkIG9uIGJ1ZmZlciBhbmQgaGFzIGl0cyBvd24gcG9pbnRlciAodGhpcy5wb2ludGVyICE9IHBvaW50ZXIpIGFuZCBpbm5lciBjaGFyc1xyXG4gICAgY29uc3QgbGVuID0gY291bnRTeW1ib2xzKHRoaXMuYnVmZmVyKTtcclxuICAgIGZvciAobGV0IHBvaW50ZXIgPSAwOyBwb2ludGVyIDwgbGVuOyArK3BvaW50ZXIpIHtcclxuICAgICAgY29uc3QgY29kZVBvaW50ID0gdGhpcy5idWZmZXIuY29kZVBvaW50QXQocG9pbnRlcik7XHJcblxyXG4gICAgICBpZiAoY29kZVBvaW50ID09PSA1OCAmJiAhdGhpcy5wYXNzd29yZFRva2VuU2VlbkZsYWcpIHtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkVG9rZW5TZWVuRmxhZyA9IHRydWU7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlQ2hhcihjb2RlUG9pbnQsIGlzVXNlcmluZm9QZXJjZW50RW5jb2RlKTtcclxuICAgICAgaWYgKHRoaXMucGFzc3dvcmRUb2tlblNlZW5GbGFnKSB7XHJcbiAgICAgICAgdGhpcy51cmwucGFzc3dvcmQgKz0gZW5jb2RlZENvZGVQb2ludHM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy51cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICB9IGVsc2UgaWYgKGlzTmFOKGMpIHx8IGMgPT09IDQ3IHx8IGMgPT09IDYzIHx8IGMgPT09IDM1IHx8XHJcbiAgICAgICAgICAgICAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5MikpIHtcclxuICAgIGlmICh0aGlzLmF0RmxhZyAmJiB0aGlzLmJ1ZmZlciA9PT0gXCJcIikge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuICAgIHRoaXMucG9pbnRlciAtPSBjb3VudFN5bWJvbHModGhpcy5idWZmZXIpICsgMTtcclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcImhvc3RcIjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5idWZmZXIgKz0gY1N0cjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIGhvc3RuYW1lXCJdID1cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIGhvc3RcIl0gPSBmdW5jdGlvbiBwYXJzZUhvc3ROYW1lKGMsIGNTdHIpIHtcclxuICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlICYmIHRoaXMudXJsLnNjaGVtZSA9PT0gXCJmaWxlXCIpIHtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwiZmlsZSBob3N0XCI7XHJcbiAgfSBlbHNlIGlmIChjID09PSA1OCAmJiAhdGhpcy5hcnJGbGFnKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgPT09IFwiXCIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaG9zdCA9IHBhcnNlSG9zdCh0aGlzLmJ1ZmZlciwgaXNTcGVjaWFsKHRoaXMudXJsKSk7XHJcbiAgICBpZiAoaG9zdCA9PT0gZmFpbHVyZSkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVybC5ob3N0ID0gaG9zdDtcclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcInBvcnRcIjtcclxuICAgIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUgPT09IFwiaG9zdG5hbWVcIikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChpc05hTihjKSB8fCBjID09PSA0NyB8fCBjID09PSA2MyB8fCBjID09PSAzNSB8fFxyXG4gICAgICAgICAgICAgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgYyA9PT0gOTIpKSB7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICAgIGlmIChpc1NwZWNpYWwodGhpcy51cmwpICYmIHRoaXMuYnVmZmVyID09PSBcIlwiKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUgJiYgdGhpcy5idWZmZXIgPT09IFwiXCIgJiZcclxuICAgICAgICAgICAgICAgKGluY2x1ZGVzQ3JlZGVudGlhbHModGhpcy51cmwpIHx8IHRoaXMudXJsLnBvcnQgIT09IG51bGwpKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBob3N0ID0gcGFyc2VIb3N0KHRoaXMuYnVmZmVyLCBpc1NwZWNpYWwodGhpcy51cmwpKTtcclxuICAgIGlmIChob3N0ID09PSBmYWlsdXJlKSB7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXJsLmhvc3QgPSBob3N0O1xyXG4gICAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aCBzdGFydFwiO1xyXG4gICAgaWYgKHRoaXMuc3RhdGVPdmVycmlkZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChjID09PSA5MSkge1xyXG4gICAgICB0aGlzLmFyckZsYWcgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChjID09PSA5Mykge1xyXG4gICAgICB0aGlzLmFyckZsYWcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMuYnVmZmVyICs9IGNTdHI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBwb3J0XCJdID0gZnVuY3Rpb24gcGFyc2VQb3J0KGMsIGNTdHIpIHtcclxuICBpZiAoaXNBU0NJSURpZ2l0KGMpKSB7XHJcbiAgICB0aGlzLmJ1ZmZlciArPSBjU3RyO1xyXG4gIH0gZWxzZSBpZiAoaXNOYU4oYykgfHwgYyA9PT0gNDcgfHwgYyA9PT0gNjMgfHwgYyA9PT0gMzUgfHxcclxuICAgICAgICAgICAgIChpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSB8fFxyXG4gICAgICAgICAgICAgdGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IFwiXCIpIHtcclxuICAgICAgY29uc3QgcG9ydCA9IHBhcnNlSW50KHRoaXMuYnVmZmVyKTtcclxuICAgICAgaWYgKHBvcnQgPiBNYXRoLnBvdygyLCAxNikgLSAxKSB7XHJcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnVybC5wb3J0ID0gcG9ydCA9PT0gZGVmYXVsdFBvcnQodGhpcy51cmwuc2NoZW1lKSA/IG51bGwgOiBwb3J0O1xyXG4gICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcInBhdGggc3RhcnRcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmNvbnN0IGZpbGVPdGhlcndpc2VDb2RlUG9pbnRzID0gbmV3IFNldChbNDcsIDkyLCA2MywgMzVdKTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBmaWxlXCJdID0gZnVuY3Rpb24gcGFyc2VGaWxlKGMpIHtcclxuICB0aGlzLnVybC5zY2hlbWUgPSBcImZpbGVcIjtcclxuXHJcbiAgaWYgKGMgPT09IDQ3IHx8IGMgPT09IDkyKSB7XHJcbiAgICBpZiAoYyA9PT0gOTIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcImZpbGUgc2xhc2hcIjtcclxuICB9IGVsc2UgaWYgKHRoaXMuYmFzZSAhPT0gbnVsbCAmJiB0aGlzLmJhc2Uuc2NoZW1lID09PSBcImZpbGVcIikge1xyXG4gICAgaWYgKGlzTmFOKGMpKSB7XHJcbiAgICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgICAgdGhpcy51cmwucGF0aCA9IHRoaXMuYmFzZS5wYXRoLnNsaWNlKCk7XHJcbiAgICAgIHRoaXMudXJsLnF1ZXJ5ID0gdGhpcy5iYXNlLnF1ZXJ5O1xyXG4gICAgfSBlbHNlIGlmIChjID09PSA2Mykge1xyXG4gICAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgICB0aGlzLnVybC5xdWVyeSA9IFwiXCI7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInF1ZXJ5XCI7XHJcbiAgICB9IGVsc2UgaWYgKGMgPT09IDM1KSB7XHJcbiAgICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgICAgdGhpcy51cmwucGF0aCA9IHRoaXMuYmFzZS5wYXRoLnNsaWNlKCk7XHJcbiAgICAgIHRoaXMudXJsLnF1ZXJ5ID0gdGhpcy5iYXNlLnF1ZXJ5O1xyXG4gICAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcImZyYWdtZW50XCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggLSB0aGlzLnBvaW50ZXIgLSAxID09PSAwIHx8IC8vIHJlbWFpbmluZyBjb25zaXN0cyBvZiAwIGNvZGUgcG9pbnRzXHJcbiAgICAgICAgICAhaXNXaW5kb3dzRHJpdmVMZXR0ZXJDb2RlUG9pbnRzKGMsIHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0pIHx8XHJcbiAgICAgICAgICAodGhpcy5pbnB1dC5sZW5ndGggLSB0aGlzLnBvaW50ZXIgLSAxID49IDIgJiYgLy8gcmVtYWluaW5nIGhhcyBhdCBsZWFzdCAyIGNvZGUgcG9pbnRzXHJcbiAgICAgICAgICAgIWZpbGVPdGhlcndpc2VDb2RlUG9pbnRzLmhhcyh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDJdKSkpIHtcclxuICAgICAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICAgICAgdGhpcy51cmwucGF0aCA9IHRoaXMuYmFzZS5wYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgc2hvcnRlblBhdGgodGhpcy51cmwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInBhdGhcIjtcclxuICAgICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcInBhdGhcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgZmlsZSBzbGFzaFwiXSA9IGZ1bmN0aW9uIHBhcnNlRmlsZVNsYXNoKGMpIHtcclxuICBpZiAoYyA9PT0gNDcgfHwgYyA9PT0gOTIpIHtcclxuICAgIGlmIChjID09PSA5Mikge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdGF0ZSA9IFwiZmlsZSBob3N0XCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICh0aGlzLmJhc2UgIT09IG51bGwgJiYgdGhpcy5iYXNlLnNjaGVtZSA9PT0gXCJmaWxlXCIpIHtcclxuICAgICAgaWYgKGlzTm9ybWFsaXplZFdpbmRvd3NEcml2ZUxldHRlclN0cmluZyh0aGlzLmJhc2UucGF0aFswXSkpIHtcclxuICAgICAgICB0aGlzLnVybC5wYXRoLnB1c2godGhpcy5iYXNlLnBhdGhbMF0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBmaWxlIGhvc3RcIl0gPSBmdW5jdGlvbiBwYXJzZUZpbGVIb3N0KGMsIGNTdHIpIHtcclxuICBpZiAoaXNOYU4oYykgfHwgYyA9PT0gNDcgfHwgYyA9PT0gOTIgfHwgYyA9PT0gNjMgfHwgYyA9PT0gMzUpIHtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXJTdHJpbmcodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInBhdGhcIjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5idWZmZXIgPT09IFwiXCIpIHtcclxuICAgICAgdGhpcy51cmwuaG9zdCA9IFwiXCI7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZSA9IFwicGF0aCBzdGFydFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGhvc3QgPSBwYXJzZUhvc3QodGhpcy5idWZmZXIsIGlzU3BlY2lhbCh0aGlzLnVybCkpO1xyXG4gICAgICBpZiAoaG9zdCA9PT0gZmFpbHVyZSkge1xyXG4gICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChob3N0ID09PSBcImxvY2FsaG9zdFwiKSB7XHJcbiAgICAgICAgaG9zdCA9IFwiXCI7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cmwuaG9zdCA9IGhvc3Q7XHJcblxyXG4gICAgICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInBhdGggc3RhcnRcIjtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5idWZmZXIgKz0gY1N0cjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIHBhdGggc3RhcnRcIl0gPSBmdW5jdGlvbiBwYXJzZVBhdGhTdGFydChjKSB7XHJcbiAgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkpIHtcclxuICAgIGlmIChjID09PSA5Mikge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG5cclxuICAgIGlmIChjICE9PSA0NyAmJiBjICE9PSA5Mikge1xyXG4gICAgICAtLXRoaXMucG9pbnRlcjtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlT3ZlcnJpZGUgJiYgYyA9PT0gNjMpIHtcclxuICAgIHRoaXMudXJsLnF1ZXJ5ID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcInF1ZXJ5XCI7XHJcbiAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZU92ZXJyaWRlICYmIGMgPT09IDM1KSB7XHJcbiAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gIH0gZWxzZSBpZiAoYyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICBpZiAoYyAhPT0gNDcpIHtcclxuICAgICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBwYXRoXCJdID0gZnVuY3Rpb24gcGFyc2VQYXRoKGMpIHtcclxuICBpZiAoaXNOYU4oYykgfHwgYyA9PT0gNDcgfHwgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgYyA9PT0gOTIpIHx8XHJcbiAgICAgICghdGhpcy5zdGF0ZU92ZXJyaWRlICYmIChjID09PSA2MyB8fCBjID09PSAzNSkpKSB7XHJcbiAgICBpZiAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5Mikge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0RvdWJsZURvdCh0aGlzLmJ1ZmZlcikpIHtcclxuICAgICAgc2hvcnRlblBhdGgodGhpcy51cmwpO1xyXG4gICAgICBpZiAoYyAhPT0gNDcgJiYgIShpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSkge1xyXG4gICAgICAgIHRoaXMudXJsLnBhdGgucHVzaChcIlwiKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdCh0aGlzLmJ1ZmZlcikgJiYgYyAhPT0gNDcgJiZcclxuICAgICAgICAgICAgICAgIShpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSkge1xyXG4gICAgICB0aGlzLnVybC5wYXRoLnB1c2goXCJcIik7XHJcbiAgICB9IGVsc2UgaWYgKCFpc1NpbmdsZURvdCh0aGlzLmJ1ZmZlcikpIHtcclxuICAgICAgaWYgKHRoaXMudXJsLnNjaGVtZSA9PT0gXCJmaWxlXCIgJiYgdGhpcy51cmwucGF0aC5sZW5ndGggPT09IDAgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXJTdHJpbmcodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXJsLmhvc3QgIT09IFwiXCIgJiYgdGhpcy51cmwuaG9zdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMudXJsLmhvc3QgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyWzBdICsgXCI6XCI7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cmwucGF0aC5wdXNoKHRoaXMuYnVmZmVyKTtcclxuICAgIH1cclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIGlmICh0aGlzLnVybC5zY2hlbWUgPT09IFwiZmlsZVwiICYmIChjID09PSB1bmRlZmluZWQgfHwgYyA9PT0gNjMgfHwgYyA9PT0gMzUpKSB7XHJcbiAgICAgIHdoaWxlICh0aGlzLnVybC5wYXRoLmxlbmd0aCA+IDEgJiYgdGhpcy51cmwucGF0aFswXSA9PT0gXCJcIikge1xyXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgICAgdGhpcy51cmwucGF0aC5zaGlmdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYyA9PT0gNjMpIHtcclxuICAgICAgdGhpcy51cmwucXVlcnkgPSBcIlwiO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJxdWVyeVwiO1xyXG4gICAgfVxyXG4gICAgaWYgKGMgPT09IDM1KSB7XHJcbiAgICAgIHRoaXMudXJsLmZyYWdtZW50ID0gXCJcIjtcclxuICAgICAgdGhpcy5zdGF0ZSA9IFwiZnJhZ21lbnRcIjtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVE9ETzogSWYgYyBpcyBub3QgYSBVUkwgY29kZSBwb2ludCBhbmQgbm90IFwiJVwiLCBwYXJzZSBlcnJvci5cclxuXHJcbiAgICBpZiAoYyA9PT0gMzcgJiZcclxuICAgICAgKCFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0pIHx8XHJcbiAgICAgICAgIWlzQVNDSUlIZXgodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAyXSkpKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5idWZmZXIgKz0gcGVyY2VudEVuY29kZUNoYXIoYywgaXNQYXRoUGVyY2VudEVuY29kZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBjYW5ub3QtYmUtYS1iYXNlLVVSTCBwYXRoXCJdID0gZnVuY3Rpb24gcGFyc2VDYW5ub3RCZUFCYXNlVVJMUGF0aChjKSB7XHJcbiAgaWYgKGMgPT09IDYzKSB7XHJcbiAgICB0aGlzLnVybC5xdWVyeSA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJxdWVyeVwiO1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gMzUpIHtcclxuICAgIHRoaXMudXJsLmZyYWdtZW50ID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcImZyYWdtZW50XCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFRPRE86IEFkZDogbm90IGEgVVJMIGNvZGUgcG9pbnRcclxuICAgIGlmICghaXNOYU4oYykgJiYgYyAhPT0gMzcpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYyA9PT0gMzcgJiZcclxuICAgICAgICAoIWlzQVNDSUlIZXgodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAxXSkgfHxcclxuICAgICAgICAgIWlzQVNDSUlIZXgodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAyXSkpKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc05hTihjKSkge1xyXG4gICAgICB0aGlzLnVybC5wYXRoWzBdID0gdGhpcy51cmwucGF0aFswXSArIHBlcmNlbnRFbmNvZGVDaGFyKGMsIGlzQzBDb250cm9sUGVyY2VudEVuY29kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBxdWVyeVwiXSA9IGZ1bmN0aW9uIHBhcnNlUXVlcnkoYywgY1N0cikge1xyXG4gIGlmIChpc05hTihjKSB8fCAoIXRoaXMuc3RhdGVPdmVycmlkZSAmJiBjID09PSAzNSkpIHtcclxuICAgIGlmICghaXNTcGVjaWFsKHRoaXMudXJsKSB8fCB0aGlzLnVybC5zY2hlbWUgPT09IFwid3NcIiB8fCB0aGlzLnVybC5zY2hlbWUgPT09IFwid3NzXCIpIHtcclxuICAgICAgdGhpcy5lbmNvZGluZ092ZXJyaWRlID0gXCJ1dGYtOFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIodGhpcy5idWZmZXIpOyAvLyBUT0RPOiBVc2UgZW5jb2Rpbmcgb3ZlcnJpZGUgaW5zdGVhZFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKGJ1ZmZlcltpXSA8IDB4MjEgfHwgYnVmZmVyW2ldID4gMHg3RSB8fCBidWZmZXJbaV0gPT09IDB4MjIgfHwgYnVmZmVyW2ldID09PSAweDIzIHx8XHJcbiAgICAgICAgICBidWZmZXJbaV0gPT09IDB4M0MgfHwgYnVmZmVyW2ldID09PSAweDNFKSB7XHJcbiAgICAgICAgdGhpcy51cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShidWZmZXJbaV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudXJsLnF1ZXJ5ICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGJ1ZmZlcltpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICBpZiAoYyA9PT0gMzUpIHtcclxuICAgICAgdGhpcy51cmwuZnJhZ21lbnQgPSBcIlwiO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBUT0RPOiBJZiBjIGlzIG5vdCBhIFVSTCBjb2RlIHBvaW50IGFuZCBub3QgXCIlXCIsIHBhcnNlIGVycm9yLlxyXG4gICAgaWYgKGMgPT09IDM3ICYmXHJcbiAgICAgICghaXNBU0NJSUhleCh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdKSB8fFxyXG4gICAgICAgICFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMl0pKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYnVmZmVyICs9IGNTdHI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBmcmFnbWVudFwiXSA9IGZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoYykge1xyXG4gIGlmIChpc05hTihjKSkgeyAvLyBkbyBub3RoaW5nXHJcbiAgfSBlbHNlIGlmIChjID09PSAweDApIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFRPRE86IElmIGMgaXMgbm90IGEgVVJMIGNvZGUgcG9pbnQgYW5kIG5vdCBcIiVcIiwgcGFyc2UgZXJyb3IuXHJcbiAgICBpZiAoYyA9PT0gMzcgJiZcclxuICAgICAgKCFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0pIHx8XHJcbiAgICAgICAgIWlzQVNDSUlIZXgodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAyXSkpKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZUNoYXIoYywgaXNDMENvbnRyb2xQZXJjZW50RW5jb2RlKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplVVJMKHVybCwgZXhjbHVkZUZyYWdtZW50KSB7XHJcbiAgbGV0IG91dHB1dCA9IHVybC5zY2hlbWUgKyBcIjpcIjtcclxuICBpZiAodXJsLmhvc3QgIT09IG51bGwpIHtcclxuICAgIG91dHB1dCArPSBcIi8vXCI7XHJcblxyXG4gICAgaWYgKHVybC51c2VybmFtZSAhPT0gXCJcIiB8fCB1cmwucGFzc3dvcmQgIT09IFwiXCIpIHtcclxuICAgICAgb3V0cHV0ICs9IHVybC51c2VybmFtZTtcclxuICAgICAgaWYgKHVybC5wYXNzd29yZCAhPT0gXCJcIikge1xyXG4gICAgICAgIG91dHB1dCArPSBcIjpcIiArIHVybC5wYXNzd29yZDtcclxuICAgICAgfVxyXG4gICAgICBvdXRwdXQgKz0gXCJAXCI7XHJcbiAgICB9XHJcblxyXG4gICAgb3V0cHV0ICs9IHNlcmlhbGl6ZUhvc3QodXJsLmhvc3QpO1xyXG5cclxuICAgIGlmICh1cmwucG9ydCAhPT0gbnVsbCkge1xyXG4gICAgICBvdXRwdXQgKz0gXCI6XCIgKyB1cmwucG9ydDtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKHVybC5ob3N0ID09PSBudWxsICYmIHVybC5zY2hlbWUgPT09IFwiZmlsZVwiKSB7XHJcbiAgICBvdXRwdXQgKz0gXCIvL1wiO1xyXG4gIH1cclxuXHJcbiAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSB7XHJcbiAgICBvdXRwdXQgKz0gdXJsLnBhdGhbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAoY29uc3Qgc3RyaW5nIG9mIHVybC5wYXRoKSB7XHJcbiAgICAgIG91dHB1dCArPSBcIi9cIiArIHN0cmluZztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICh1cmwucXVlcnkgIT09IG51bGwpIHtcclxuICAgIG91dHB1dCArPSBcIj9cIiArIHVybC5xdWVyeTtcclxuICB9XHJcblxyXG4gIGlmICghZXhjbHVkZUZyYWdtZW50ICYmIHVybC5mcmFnbWVudCAhPT0gbnVsbCkge1xyXG4gICAgb3V0cHV0ICs9IFwiI1wiICsgdXJsLmZyYWdtZW50O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplT3JpZ2luKHR1cGxlKSB7XHJcbiAgbGV0IHJlc3VsdCA9IHR1cGxlLnNjaGVtZSArIFwiOi8vXCI7XHJcbiAgcmVzdWx0ICs9IHNlcmlhbGl6ZUhvc3QodHVwbGUuaG9zdCk7XHJcblxyXG4gIGlmICh0dXBsZS5wb3J0ICE9PSBudWxsKSB7XHJcbiAgICByZXN1bHQgKz0gXCI6XCIgKyB0dXBsZS5wb3J0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplVVJMID0gc2VyaWFsaXplVVJMO1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplVVJMT3JpZ2luID0gZnVuY3Rpb24gKHVybCkge1xyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtb3JpZ2luXHJcbiAgc3dpdGNoICh1cmwuc2NoZW1lKSB7XHJcbiAgICBjYXNlIFwiYmxvYlwiOlxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cy5zZXJpYWxpemVVUkxPcmlnaW4obW9kdWxlLmV4cG9ydHMucGFyc2VVUkwodXJsLnBhdGhbMF0pKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIHNlcmlhbGl6aW5nIGFuIG9wYXF1ZSBvcmlnaW4gcmV0dXJucyBcIm51bGxcIlxyXG4gICAgICAgIHJldHVybiBcIm51bGxcIjtcclxuICAgICAgfVxyXG4gICAgY2FzZSBcImZ0cFwiOlxyXG4gICAgY2FzZSBcImdvcGhlclwiOlxyXG4gICAgY2FzZSBcImh0dHBcIjpcclxuICAgIGNhc2UgXCJodHRwc1wiOlxyXG4gICAgY2FzZSBcIndzXCI6XHJcbiAgICBjYXNlIFwid3NzXCI6XHJcbiAgICAgIHJldHVybiBzZXJpYWxpemVPcmlnaW4oe1xyXG4gICAgICAgIHNjaGVtZTogdXJsLnNjaGVtZSxcclxuICAgICAgICBob3N0OiB1cmwuaG9zdCxcclxuICAgICAgICBwb3J0OiB1cmwucG9ydFxyXG4gICAgICB9KTtcclxuICAgIGNhc2UgXCJmaWxlXCI6XHJcbiAgICAgIC8vIHNwZWMgc2F5cyBcImV4ZXJjaXNlIHRvIHRoZSByZWFkZXJcIiwgY2hyb21lIHNheXMgXCJmaWxlOi8vXCJcclxuICAgICAgcmV0dXJuIFwiZmlsZTovL1wiO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgLy8gc2VyaWFsaXppbmcgYW4gb3BhcXVlIG9yaWdpbiByZXR1cm5zIFwibnVsbFwiXHJcbiAgICAgIHJldHVybiBcIm51bGxcIjtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5iYXNpY1VSTFBhcnNlID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3B0aW9ucyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdXNtID0gbmV3IFVSTFN0YXRlTWFjaGluZShpbnB1dCwgb3B0aW9ucy5iYXNlVVJMLCBvcHRpb25zLmVuY29kaW5nT3ZlcnJpZGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLnN0YXRlT3ZlcnJpZGUpO1xyXG4gIGlmICh1c20uZmFpbHVyZSkge1xyXG4gICAgcmV0dXJuIFwiZmFpbHVyZVwiO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVzbS51cmw7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5zZXRUaGVVc2VybmFtZSA9IGZ1bmN0aW9uICh1cmwsIHVzZXJuYW1lKSB7XHJcbiAgdXJsLnVzZXJuYW1lID0gXCJcIjtcclxuICBjb25zdCBkZWNvZGVkID0gcHVueWNvZGUudWNzMi5kZWNvZGUodXNlcm5hbWUpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7ICsraSkge1xyXG4gICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGVDaGFyKGRlY29kZWRbaV0sIGlzVXNlcmluZm9QZXJjZW50RW5jb2RlKTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5zZXRUaGVQYXNzd29yZCA9IGZ1bmN0aW9uICh1cmwsIHBhc3N3b3JkKSB7XHJcbiAgdXJsLnBhc3N3b3JkID0gXCJcIjtcclxuICBjb25zdCBkZWNvZGVkID0gcHVueWNvZGUudWNzMi5kZWNvZGUocGFzc3dvcmQpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7ICsraSkge1xyXG4gICAgdXJsLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGVDaGFyKGRlY29kZWRbaV0sIGlzVXNlcmluZm9QZXJjZW50RW5jb2RlKTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5zZXJpYWxpemVIb3N0ID0gc2VyaWFsaXplSG9zdDtcclxuXHJcbm1vZHVsZS5leHBvcnRzLmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBjYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplSW50ZWdlciA9IGZ1bmN0aW9uIChpbnRlZ2VyKSB7XHJcbiAgcmV0dXJuIFN0cmluZyhpbnRlZ2VyKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzLnBhcnNlVVJMID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3B0aW9ucyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgLy8gV2UgZG9uJ3QgaGFuZGxlIGJsb2JzLCBzbyB0aGlzIGp1c3QgZGVsZWdhdGVzOlxyXG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cy5iYXNpY1VSTFBhcnNlKGlucHV0LCB7IGJhc2VVUkw6IG9wdGlvbnMuYmFzZVVSTCwgZW5jb2RpbmdPdmVycmlkZTogb3B0aW9ucy5lbmNvZGluZ092ZXJyaWRlIH0pO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHVzbSA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpO1xuXG5leHBvcnRzLmltcGxlbWVudGF0aW9uID0gY2xhc3MgVVJMSW1wbCB7XG4gIGNvbnN0cnVjdG9yKGNvbnN0cnVjdG9yQXJncykge1xuICAgIGNvbnN0IHVybCA9IGNvbnN0cnVjdG9yQXJnc1swXTtcbiAgICBjb25zdCBiYXNlID0gY29uc3RydWN0b3JBcmdzWzFdO1xuXG4gICAgbGV0IHBhcnNlZEJhc2UgPSBudWxsO1xuICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcnNlZEJhc2UgPSB1c20uYmFzaWNVUkxQYXJzZShiYXNlKTtcbiAgICAgIGlmIChwYXJzZWRCYXNlID09PSBcImZhaWx1cmVcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBiYXNlIFVSTFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwYXJzZWRVUkwgPSB1c20uYmFzaWNVUkxQYXJzZSh1cmwsIHsgYmFzZVVSTDogcGFyc2VkQmFzZSB9KTtcbiAgICBpZiAocGFyc2VkVVJMID09PSBcImZhaWx1cmVcIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgVVJMXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX3VybCA9IHBhcnNlZFVSTDtcblxuICAgIC8vIFRPRE86IHF1ZXJ5IHN0dWZmXG4gIH1cblxuICBnZXQgaHJlZigpIHtcbiAgICByZXR1cm4gdXNtLnNlcmlhbGl6ZVVSTCh0aGlzLl91cmwpO1xuICB9XG5cbiAgc2V0IGhyZWYodikge1xuICAgIGNvbnN0IHBhcnNlZFVSTCA9IHVzbS5iYXNpY1VSTFBhcnNlKHYpO1xuICAgIGlmIChwYXJzZWRVUkwgPT09IFwiZmFpbHVyZVwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBVUkxcIik7XG4gICAgfVxuXG4gICAgdGhpcy5fdXJsID0gcGFyc2VkVVJMO1xuICB9XG5cbiAgZ2V0IG9yaWdpbigpIHtcbiAgICByZXR1cm4gdXNtLnNlcmlhbGl6ZVVSTE9yaWdpbih0aGlzLl91cmwpO1xuICB9XG5cbiAgZ2V0IHByb3RvY29sKCkge1xuICAgIHJldHVybiB0aGlzLl91cmwuc2NoZW1lICsgXCI6XCI7XG4gIH1cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIHVzbS5iYXNpY1VSTFBhcnNlKHYgKyBcIjpcIiwgeyB1cmw6IHRoaXMuX3VybCwgc3RhdGVPdmVycmlkZTogXCJzY2hlbWUgc3RhcnRcIiB9KTtcbiAgfVxuXG4gIGdldCB1c2VybmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsLnVzZXJuYW1lO1xuICB9XG5cbiAgc2V0IHVzZXJuYW1lKHYpIHtcbiAgICBpZiAodXNtLmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQodGhpcy5fdXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVzbS5zZXRUaGVVc2VybmFtZSh0aGlzLl91cmwsIHYpO1xuICB9XG5cbiAgZ2V0IHBhc3N3b3JkKCkge1xuICAgIHJldHVybiB0aGlzLl91cmwucGFzc3dvcmQ7XG4gIH1cblxuICBzZXQgcGFzc3dvcmQodikge1xuICAgIGlmICh1c20uY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydCh0aGlzLl91cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXNtLnNldFRoZVBhc3N3b3JkKHRoaXMuX3VybCwgdik7XG4gIH1cblxuICBnZXQgaG9zdCgpIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLl91cmw7XG5cbiAgICBpZiAodXJsLmhvc3QgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIGlmICh1cmwucG9ydCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVzbS5zZXJpYWxpemVIb3N0KHVybC5ob3N0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNtLnNlcmlhbGl6ZUhvc3QodXJsLmhvc3QpICsgXCI6XCIgKyB1c20uc2VyaWFsaXplSW50ZWdlcih1cmwucG9ydCk7XG4gIH1cblxuICBzZXQgaG9zdCh2KSB7XG4gICAgaWYgKHRoaXMuX3VybC5jYW5ub3RCZUFCYXNlVVJMKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXNtLmJhc2ljVVJMUGFyc2UodiwgeyB1cmw6IHRoaXMuX3VybCwgc3RhdGVPdmVycmlkZTogXCJob3N0XCIgfSk7XG4gIH1cblxuICBnZXQgaG9zdG5hbWUoKSB7XG4gICAgaWYgKHRoaXMuX3VybC5ob3N0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNtLnNlcmlhbGl6ZUhvc3QodGhpcy5fdXJsLmhvc3QpO1xuICB9XG5cbiAgc2V0IGhvc3RuYW1lKHYpIHtcbiAgICBpZiAodGhpcy5fdXJsLmNhbm5vdEJlQUJhc2VVUkwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1c20uYmFzaWNVUkxQYXJzZSh2LCB7IHVybDogdGhpcy5fdXJsLCBzdGF0ZU92ZXJyaWRlOiBcImhvc3RuYW1lXCIgfSk7XG4gIH1cblxuICBnZXQgcG9ydCgpIHtcbiAgICBpZiAodGhpcy5fdXJsLnBvcnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiB1c20uc2VyaWFsaXplSW50ZWdlcih0aGlzLl91cmwucG9ydCk7XG4gIH1cblxuICBzZXQgcG9ydCh2KSB7XG4gICAgaWYgKHVzbS5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0KHRoaXMuX3VybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gXCJcIikge1xuICAgICAgdGhpcy5fdXJsLnBvcnQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB1c20uYmFzaWNVUkxQYXJzZSh2LCB7IHVybDogdGhpcy5fdXJsLCBzdGF0ZU92ZXJyaWRlOiBcInBvcnRcIiB9KTtcbiAgICB9XG4gIH1cblxuICBnZXQgcGF0aG5hbWUoKSB7XG4gICAgaWYgKHRoaXMuX3VybC5jYW5ub3RCZUFCYXNlVVJMKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXJsLnBhdGhbMF07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3VybC5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiL1wiICsgdGhpcy5fdXJsLnBhdGguam9pbihcIi9cIik7XG4gIH1cblxuICBzZXQgcGF0aG5hbWUodikge1xuICAgIGlmICh0aGlzLl91cmwuY2Fubm90QmVBQmFzZVVSTCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3VybC5wYXRoID0gW107XG4gICAgdXNtLmJhc2ljVVJMUGFyc2UodiwgeyB1cmw6IHRoaXMuX3VybCwgc3RhdGVPdmVycmlkZTogXCJwYXRoIHN0YXJ0XCIgfSk7XG4gIH1cblxuICBnZXQgc2VhcmNoKCkge1xuICAgIGlmICh0aGlzLl91cmwucXVlcnkgPT09IG51bGwgfHwgdGhpcy5fdXJsLnF1ZXJ5ID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCI/XCIgKyB0aGlzLl91cmwucXVlcnk7XG4gIH1cblxuICBzZXQgc2VhcmNoKHYpIHtcbiAgICAvLyBUT0RPOiBxdWVyeSBzdHVmZlxuXG4gICAgY29uc3QgdXJsID0gdGhpcy5fdXJsO1xuXG4gICAgaWYgKHYgPT09IFwiXCIpIHtcbiAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXQgPSB2WzBdID09PSBcIj9cIiA/IHYuc3Vic3RyaW5nKDEpIDogdjtcbiAgICB1cmwucXVlcnkgPSBcIlwiO1xuICAgIHVzbS5iYXNpY1VSTFBhcnNlKGlucHV0LCB7IHVybCwgc3RhdGVPdmVycmlkZTogXCJxdWVyeVwiIH0pO1xuICB9XG5cbiAgZ2V0IGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX3VybC5mcmFnbWVudCA9PT0gbnVsbCB8fCB0aGlzLl91cmwuZnJhZ21lbnQgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBcIiNcIiArIHRoaXMuX3VybC5mcmFnbWVudDtcbiAgfVxuXG4gIHNldCBoYXNoKHYpIHtcbiAgICBpZiAodiA9PT0gXCJcIikge1xuICAgICAgdGhpcy5fdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dCA9IHZbMF0gPT09IFwiI1wiID8gdi5zdWJzdHJpbmcoMSkgOiB2O1xuICAgIHRoaXMuX3VybC5mcmFnbWVudCA9IFwiXCI7XG4gICAgdXNtLmJhc2ljVVJMUGFyc2UoaW5wdXQsIHsgdXJsOiB0aGlzLl91cmwsIHN0YXRlT3ZlcnJpZGU6IFwiZnJhZ21lbnRcIiB9KTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy5ocmVmO1xuICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZShcIndlYmlkbC1jb252ZXJzaW9uc1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5jb25zdCBJbXBsID0gcmVxdWlyZShcIi4vL1VSTC1pbXBsLmpzXCIpO1xuXG5jb25zdCBpbXBsID0gdXRpbHMuaW1wbFN5bWJvbDtcblxuZnVuY3Rpb24gVVJMKHVybCkge1xuICBpZiAoIXRoaXMgfHwgdGhpc1tpbXBsXSB8fCAhKHRoaXMgaW5zdGFuY2VvZiBVUkwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTCc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgXCIgKyBhcmd1bWVudHMubGVuZ3RoICsgXCIgcHJlc2VudC5cIik7XG4gIH1cbiAgY29uc3QgYXJncyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggJiYgaSA8IDI7ICsraSkge1xuICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gIH1cbiAgYXJnc1swXSA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGFyZ3NbMF0pO1xuICBpZiAoYXJnc1sxXSAhPT0gdW5kZWZpbmVkKSB7XG4gIGFyZ3NbMV0gPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShhcmdzWzFdKTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzLnNldHVwKHRoaXMsIGFyZ3MpO1xufVxuXG5VUkwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzIHx8ICFtb2R1bGUuZXhwb3J0cy5pcyh0aGlzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGludm9jYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXJncyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggJiYgaSA8IDA7ICsraSkge1xuICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gIH1cbiAgcmV0dXJuIHRoaXNbaW1wbF0udG9KU09OLmFwcGx5KHRoaXNbaW1wbF0sIGFyZ3MpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcImhyZWZcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0uaHJlZjtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5ocmVmID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuVVJMLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzIHx8ICFtb2R1bGUuZXhwb3J0cy5pcyh0aGlzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGludm9jYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuaHJlZjtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcIm9yaWdpblwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5vcmlnaW47XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInByb3RvY29sXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnByb3RvY29sO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnByb3RvY29sID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwidXNlcm5hbWVcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0udXNlcm5hbWU7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0udXNlcm5hbWUgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJwYXNzd29yZFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5wYXNzd29yZDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5wYXNzd29yZCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcImhvc3RcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0uaG9zdDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5ob3N0ID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwiaG9zdG5hbWVcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0uaG9zdG5hbWU7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0uaG9zdG5hbWUgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJwb3J0XCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnBvcnQ7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0ucG9ydCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInBhdGhuYW1lXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnBhdGhuYW1lO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnBhdGhuYW1lID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwic2VhcmNoXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnNlYXJjaDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5zZWFyY2ggPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJoYXNoXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLmhhc2g7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0uaGFzaCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzKG9iaikge1xuICAgIHJldHVybiAhIW9iaiAmJiBvYmpbaW1wbF0gaW5zdGFuY2VvZiBJbXBsLmltcGxlbWVudGF0aW9uO1xuICB9LFxuICBjcmVhdGUoY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSkge1xuICAgIGxldCBvYmogPSBPYmplY3QuY3JlYXRlKFVSTC5wcm90b3R5cGUpO1xuICAgIHRoaXMuc2V0dXAob2JqLCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKTtcbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICBzZXR1cChvYmosIGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpIHtcbiAgICBpZiAoIXByaXZhdGVEYXRhKSBwcml2YXRlRGF0YSA9IHt9O1xuICAgIHByaXZhdGVEYXRhLndyYXBwZXIgPSBvYmo7XG5cbiAgICBvYmpbaW1wbF0gPSBuZXcgSW1wbC5pbXBsZW1lbnRhdGlvbihjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKTtcbiAgICBvYmpbaW1wbF1bdXRpbHMud3JhcHBlclN5bWJvbF0gPSBvYmo7XG4gIH0sXG4gIGludGVyZmFjZTogVVJMLFxuICBleHBvc2U6IHtcbiAgICBXaW5kb3c6IHsgVVJMOiBVUkwgfSxcbiAgICBXb3JrZXI6IHsgVVJMOiBVUkwgfVxuICB9XG59O1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5VUkwgPSByZXF1aXJlKFwiLi9VUkxcIikuaW50ZXJmYWNlO1xuZXhwb3J0cy5zZXJpYWxpemVVUkwgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVVUkw7XG5leHBvcnRzLnNlcmlhbGl6ZVVSTE9yaWdpbiA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZVVSTE9yaWdpbjtcbmV4cG9ydHMuYmFzaWNVUkxQYXJzZSA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLmJhc2ljVVJMUGFyc2U7XG5leHBvcnRzLnNldFRoZVVzZXJuYW1lID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2V0VGhlVXNlcm5hbWU7XG5leHBvcnRzLnNldFRoZVBhc3N3b3JkID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2V0VGhlUGFzc3dvcmQ7XG5leHBvcnRzLnNlcmlhbGl6ZUhvc3QgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVIb3N0O1xuZXhwb3J0cy5zZXJpYWxpemVJbnRlZ2VyID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplSW50ZWdlcjtcbmV4cG9ydHMucGFyc2VVUkwgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5wYXJzZVVSTDtcbiIsImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IFVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHdoYXR3Z1VybCBmcm9tICd3aGF0d2ctdXJsJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgemxpYiBmcm9tICd6bGliJztcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RtcHZhci9qc2RvbS9ibG9iL2FhODViMmFiZjA3NzY2ZmY3YmY1YzFmNmRhYWZiMzcyNmYyZjJkYjUvbGliL2pzZG9tL2xpdmluZy9ibG9iLmpzXG5cbi8vIGZpeCBmb3IgXCJSZWFkYWJsZVwiIGlzbid0IGEgbmFtZWQgZXhwb3J0IGlzc3VlXG5jb25zdCBSZWFkYWJsZSA9IFN0cmVhbS5SZWFkYWJsZTtcblxuY29uc3QgQlVGRkVSID0gU3ltYm9sKCdidWZmZXInKTtcbmNvbnN0IFRZUEUgPSBTeW1ib2woJ3R5cGUnKTtcblxuY2xhc3MgQmxvYiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXNbVFlQRV0gPSAnJztcblxuXHRcdGNvbnN0IGJsb2JQYXJ0cyA9IGFyZ3VtZW50c1swXTtcblx0XHRjb25zdCBvcHRpb25zID0gYXJndW1lbnRzWzFdO1xuXG5cdFx0Y29uc3QgYnVmZmVycyA9IFtdO1xuXHRcdGxldCBzaXplID0gMDtcblxuXHRcdGlmIChibG9iUGFydHMpIHtcblx0XHRcdGNvbnN0IGEgPSBibG9iUGFydHM7XG5cdFx0XHRjb25zdCBsZW5ndGggPSBOdW1iZXIoYS5sZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBlbGVtZW50ID0gYVtpXTtcblx0XHRcdFx0bGV0IGJ1ZmZlcjtcblx0XHRcdFx0aWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBCdWZmZXIpIHtcblx0XHRcdFx0XHRidWZmZXIgPSBlbGVtZW50O1xuXHRcdFx0XHR9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhlbGVtZW50KSkge1xuXHRcdFx0XHRcdGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGVsZW1lbnQuYnVmZmVyLCBlbGVtZW50LmJ5dGVPZmZzZXQsIGVsZW1lbnQuYnl0ZUxlbmd0aCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdFx0XHRcdFx0YnVmZmVyID0gQnVmZmVyLmZyb20oZWxlbWVudCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEJsb2IpIHtcblx0XHRcdFx0XHRidWZmZXIgPSBlbGVtZW50W0JVRkZFUl07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnVmZmVyID0gQnVmZmVyLmZyb20odHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZWxlbWVudCA6IFN0cmluZyhlbGVtZW50KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2l6ZSArPSBidWZmZXIubGVuZ3RoO1xuXHRcdFx0XHRidWZmZXJzLnB1c2goYnVmZmVyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzW0JVRkZFUl0gPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpO1xuXG5cdFx0bGV0IHR5cGUgPSBvcHRpb25zICYmIG9wdGlvbnMudHlwZSAhPT0gdW5kZWZpbmVkICYmIFN0cmluZyhvcHRpb25zLnR5cGUpLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYgKHR5cGUgJiYgIS9bXlxcdTAwMjAtXFx1MDA3RV0vLnRlc3QodHlwZSkpIHtcblx0XHRcdHRoaXNbVFlQRV0gPSB0eXBlO1xuXHRcdH1cblx0fVxuXHRnZXQgc2l6ZSgpIHtcblx0XHRyZXR1cm4gdGhpc1tCVUZGRVJdLmxlbmd0aDtcblx0fVxuXHRnZXQgdHlwZSgpIHtcblx0XHRyZXR1cm4gdGhpc1tUWVBFXTtcblx0fVxuXHR0ZXh0KCkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpc1tCVUZGRVJdLnRvU3RyaW5nKCkpO1xuXHR9XG5cdGFycmF5QnVmZmVyKCkge1xuXHRcdGNvbnN0IGJ1ZiA9IHRoaXNbQlVGRkVSXTtcblx0XHRjb25zdCBhYiA9IGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoYWIpO1xuXHR9XG5cdHN0cmVhbSgpIHtcblx0XHRjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZSgpO1xuXHRcdHJlYWRhYmxlLl9yZWFkID0gZnVuY3Rpb24gKCkge307XG5cdFx0cmVhZGFibGUucHVzaCh0aGlzW0JVRkZFUl0pO1xuXHRcdHJlYWRhYmxlLnB1c2gobnVsbCk7XG5cdFx0cmV0dXJuIHJlYWRhYmxlO1xuXHR9XG5cdHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiAnW29iamVjdCBCbG9iXSc7XG5cdH1cblx0c2xpY2UoKSB7XG5cdFx0Y29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcblxuXHRcdGNvbnN0IHN0YXJ0ID0gYXJndW1lbnRzWzBdO1xuXHRcdGNvbnN0IGVuZCA9IGFyZ3VtZW50c1sxXTtcblx0XHRsZXQgcmVsYXRpdmVTdGFydCwgcmVsYXRpdmVFbmQ7XG5cdFx0aWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJlbGF0aXZlU3RhcnQgPSAwO1xuXHRcdH0gZWxzZSBpZiAoc3RhcnQgPCAwKSB7XG5cdFx0XHRyZWxhdGl2ZVN0YXJ0ID0gTWF0aC5tYXgoc2l6ZSArIHN0YXJ0LCAwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVsYXRpdmVTdGFydCA9IE1hdGgubWluKHN0YXJ0LCBzaXplKTtcblx0XHR9XG5cdFx0aWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IHNpemU7XG5cdFx0fSBlbHNlIGlmIChlbmQgPCAwKSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IE1hdGgubWF4KHNpemUgKyBlbmQsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IE1hdGgubWluKGVuZCwgc2l6ZSk7XG5cdFx0fVxuXHRcdGNvbnN0IHNwYW4gPSBNYXRoLm1heChyZWxhdGl2ZUVuZCAtIHJlbGF0aXZlU3RhcnQsIDApO1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpc1tCVUZGRVJdO1xuXHRcdGNvbnN0IHNsaWNlZEJ1ZmZlciA9IGJ1ZmZlci5zbGljZShyZWxhdGl2ZVN0YXJ0LCByZWxhdGl2ZVN0YXJ0ICsgc3Bhbik7XG5cdFx0Y29uc3QgYmxvYiA9IG5ldyBCbG9iKFtdLCB7IHR5cGU6IGFyZ3VtZW50c1syXSB9KTtcblx0XHRibG9iW0JVRkZFUl0gPSBzbGljZWRCdWZmZXI7XG5cdFx0cmV0dXJuIGJsb2I7XG5cdH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQmxvYi5wcm90b3R5cGUsIHtcblx0c2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHR5cGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRzbGljZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQmxvYi5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ0Jsb2InLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG4vKipcbiAqIGZldGNoLWVycm9yLmpzXG4gKlxuICogRmV0Y2hFcnJvciBpbnRlcmZhY2UgZm9yIG9wZXJhdGlvbmFsIGVycm9yc1xuICovXG5cbi8qKlxuICogQ3JlYXRlIEZldGNoRXJyb3IgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBTdHJpbmcgICAgICBtZXNzYWdlICAgICAgRXJyb3IgbWVzc2FnZSBmb3IgaHVtYW5cbiAqIEBwYXJhbSAgIFN0cmluZyAgICAgIHR5cGUgICAgICAgICBFcnJvciB0eXBlIGZvciBtYWNoaW5lXG4gKiBAcGFyYW0gICBTdHJpbmcgICAgICBzeXN0ZW1FcnJvciAgRm9yIE5vZGUuanMgc3lzdGVtIGVycm9yXG4gKiBAcmV0dXJuICBGZXRjaEVycm9yXG4gKi9cbmZ1bmN0aW9uIEZldGNoRXJyb3IobWVzc2FnZSwgdHlwZSwgc3lzdGVtRXJyb3IpIHtcbiAgRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gIC8vIHdoZW4gZXJyLnR5cGUgaXMgYHN5c3RlbWAsIGVyci5jb2RlIGNvbnRhaW5zIHN5c3RlbSBlcnJvciBjb2RlXG4gIGlmIChzeXN0ZW1FcnJvcikge1xuICAgIHRoaXMuY29kZSA9IHRoaXMuZXJybm8gPSBzeXN0ZW1FcnJvci5jb2RlO1xuICB9XG5cbiAgLy8gaGlkZSBjdXN0b20gZXJyb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmcm9tIGVuZC11c2Vyc1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbn1cblxuRmV0Y2hFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5GZXRjaEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZldGNoRXJyb3I7XG5GZXRjaEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ZldGNoRXJyb3InO1xuXG5sZXQgY29udmVydDtcbnRyeSB7XG5cdGNvbnZlcnQgPSByZXF1aXJlKCdlbmNvZGluZycpLmNvbnZlcnQ7XG59IGNhdGNoIChlKSB7fVxuXG5jb25zdCBJTlRFUk5BTFMgPSBTeW1ib2woJ0JvZHkgaW50ZXJuYWxzJyk7XG5cbi8vIGZpeCBhbiBpc3N1ZSB3aGVyZSBcIlBhc3NUaHJvdWdoXCIgaXNuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBQYXNzVGhyb3VnaCA9IFN0cmVhbS5QYXNzVGhyb3VnaDtcblxuLyoqXG4gKiBCb2R5IG1peGluXG4gKlxuICogUmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jYm9keVxuICpcbiAqIEBwYXJhbSAgIFN0cmVhbSAgYm9keSAgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gICBPYmplY3QgIG9wdHMgIFJlc3BvbnNlIG9wdGlvbnNcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuZnVuY3Rpb24gQm9keShib2R5KSB7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuXHQgICAgX3JlZiRzaXplID0gX3JlZi5zaXplO1xuXG5cdGxldCBzaXplID0gX3JlZiRzaXplID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiRzaXplO1xuXHR2YXIgX3JlZiR0aW1lb3V0ID0gX3JlZi50aW1lb3V0O1xuXHRsZXQgdGltZW91dCA9IF9yZWYkdGltZW91dCA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkdGltZW91dDtcblxuXHRpZiAoYm9keSA9PSBudWxsKSB7XG5cdFx0Ly8gYm9keSBpcyB1bmRlZmluZWQgb3IgbnVsbFxuXHRcdGJvZHkgPSBudWxsO1xuXHR9IGVsc2UgaWYgKGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LnRvU3RyaW5nKCkpO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkgOyBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIDsgZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG5cdFx0Ly8gYm9keSBpcyBBcnJheUJ1ZmZlclxuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5KTtcblx0fSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyVmlld1xuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LmJ1ZmZlciwgYm9keS5ieXRlT2Zmc2V0LCBib2R5LmJ5dGVMZW5ndGgpO1xuXHR9IGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIDsgZWxzZSB7XG5cdFx0Ly8gbm9uZSBvZiB0aGUgYWJvdmVcblx0XHQvLyBjb2VyY2UgdG8gc3RyaW5nIHRoZW4gYnVmZmVyXG5cdFx0Ym9keSA9IEJ1ZmZlci5mcm9tKFN0cmluZyhib2R5KSk7XG5cdH1cblx0dGhpc1tJTlRFUk5BTFNdID0ge1xuXHRcdGJvZHksXG5cdFx0ZGlzdHVyYmVkOiBmYWxzZSxcblx0XHRlcnJvcjogbnVsbFxuXHR9O1xuXHR0aGlzLnNpemUgPSBzaXplO1xuXHR0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG5cdGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0Ym9keS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRjb25zdCBlcnJvciA9IGVyci5uYW1lID09PSAnQWJvcnRFcnJvcicgPyBlcnIgOiBuZXcgRmV0Y2hFcnJvcihgSW52YWxpZCByZXNwb25zZSBib2R5IHdoaWxlIHRyeWluZyB0byBmZXRjaCAke190aGlzLnVybH06ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycik7XG5cdFx0XHRfdGhpc1tJTlRFUk5BTFNdLmVycm9yID0gZXJyb3I7XG5cdFx0fSk7XG5cdH1cbn1cblxuQm9keS5wcm90b3R5cGUgPSB7XG5cdGdldCBib2R5KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10uYm9keTtcblx0fSxcblxuXHRnZXQgYm9keVVzZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5kaXN0dXJiZWQ7XG5cdH0sXG5cblx0LyoqXG4gICogRGVjb2RlIHJlc3BvbnNlIGFzIEFycmF5QnVmZmVyXG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdGFycmF5QnVmZmVyKCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1Zikge1xuXHRcdFx0cmV0dXJuIGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIFJldHVybiByYXcgcmVzcG9uc2UgYXMgQmxvYlxuICAqXG4gICogQHJldHVybiBQcm9taXNlXG4gICovXG5cdGJsb2IoKSB7XG5cdFx0bGV0IGN0ID0gdGhpcy5oZWFkZXJzICYmIHRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpIHx8ICcnO1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1Zikge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oXG5cdFx0XHQvLyBQcmV2ZW50IGNvcHlpbmdcblx0XHRcdG5ldyBCbG9iKFtdLCB7XG5cdFx0XHRcdHR5cGU6IGN0LnRvTG93ZXJDYXNlKClcblx0XHRcdH0pLCB7XG5cdFx0XHRcdFtCVUZGRVJdOiBidWZcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyBqc29uXG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdGpzb24oKSB7XG5cdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRyZXR1cm4gY29uc3VtZUJvZHkuY2FsbCh0aGlzKS50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKGJ1ZmZlci50b1N0cmluZygpKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlamVjdChuZXcgRmV0Y2hFcnJvcihgaW52YWxpZCBqc29uIHJlc3BvbnNlIGJvZHkgYXQgJHtfdGhpczIudXJsfSByZWFzb246ICR7ZXJyLm1lc3NhZ2V9YCwgJ2ludmFsaWQtanNvbicpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHQvKipcbiAgKiBEZWNvZGUgcmVzcG9uc2UgYXMgdGV4dFxuICAqXG4gICogQHJldHVybiAgUHJvbWlzZVxuICAqL1xuXHR0ZXh0KCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0cmV0dXJuIGJ1ZmZlci50b1N0cmluZygpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyBidWZmZXIgKG5vbi1zcGVjIGFwaSlcbiAgKlxuICAqIEByZXR1cm4gIFByb21pc2VcbiAgKi9cblx0YnVmZmVyKCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyB0ZXh0LCB3aGlsZSBhdXRvbWF0aWNhbGx5IGRldGVjdGluZyB0aGUgZW5jb2RpbmcgYW5kXG4gICogdHJ5aW5nIHRvIGRlY29kZSB0byBVVEYtOCAobm9uLXNwZWMgYXBpKVxuICAqXG4gICogQHJldHVybiAgUHJvbWlzZVxuICAqL1xuXHR0ZXh0Q29udmVydGVkKCkge1xuXHRcdHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcykudGhlbihmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdFx0XHRyZXR1cm4gY29udmVydEJvZHkoYnVmZmVyLCBfdGhpczMuaGVhZGVycyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbi8vIEluIGJyb3dzZXJzLCBhbGwgcHJvcGVydGllcyBhcmUgZW51bWVyYWJsZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJvZHkucHJvdG90eXBlLCB7XG5cdGJvZHk6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRib2R5VXNlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGFycmF5QnVmZmVyOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0YmxvYjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGpzb246IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHR0ZXh0OiB7IGVudW1lcmFibGU6IHRydWUgfVxufSk7XG5cbkJvZHkubWl4SW4gPSBmdW5jdGlvbiAocHJvdG8pIHtcblx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEJvZHkucHJvdG90eXBlKSkge1xuXHRcdC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiBmdXR1cmUgcHJvb2Zcblx0XHRpZiAoIShuYW1lIGluIHByb3RvKSkge1xuXHRcdFx0Y29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoQm9keS5wcm90b3R5cGUsIG5hbWUpO1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjKTtcblx0XHR9XG5cdH1cbn07XG5cbi8qKlxuICogQ29uc3VtZSBhbmQgY29udmVydCBhbiBlbnRpcmUgQm9keSB0byBhIEJ1ZmZlci5cbiAqXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHktY29uc3VtZS1ib2R5XG4gKlxuICogQHJldHVybiAgUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjb25zdW1lQm9keSgpIHtcblx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0aWYgKHRoaXNbSU5URVJOQUxTXS5kaXN0dXJiZWQpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKGBib2R5IHVzZWQgYWxyZWFkeSBmb3I6ICR7dGhpcy51cmx9YCkpO1xuXHR9XG5cblx0dGhpc1tJTlRFUk5BTFNdLmRpc3R1cmJlZCA9IHRydWU7XG5cblx0aWYgKHRoaXNbSU5URVJOQUxTXS5lcnJvcikge1xuXHRcdHJldHVybiBCb2R5LlByb21pc2UucmVqZWN0KHRoaXNbSU5URVJOQUxTXS5lcnJvcik7XG5cdH1cblxuXHRsZXQgYm9keSA9IHRoaXMuYm9keTtcblxuXHQvLyBib2R5IGlzIG51bGxcblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlc29sdmUoQnVmZmVyLmFsbG9jKDApKTtcblx0fVxuXG5cdC8vIGJvZHkgaXMgYmxvYlxuXHRpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0Ym9keSA9IGJvZHkuc3RyZWFtKCk7XG5cdH1cblxuXHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0cmV0dXJuIEJvZHkuUHJvbWlzZS5yZXNvbHZlKGJvZHkpO1xuXHR9XG5cblx0Ly8gaXN0YW5idWwgaWdub3JlIGlmOiBzaG91bGQgbmV2ZXIgaGFwcGVuXG5cdGlmICghKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pKSB7XG5cdFx0cmV0dXJuIEJvZHkuUHJvbWlzZS5yZXNvbHZlKEJ1ZmZlci5hbGxvYygwKSk7XG5cdH1cblxuXHQvLyBib2R5IGlzIHN0cmVhbVxuXHQvLyBnZXQgcmVhZHkgdG8gYWN0dWFsbHkgY29uc3VtZSB0aGUgYm9keVxuXHRsZXQgYWNjdW0gPSBbXTtcblx0bGV0IGFjY3VtQnl0ZXMgPSAwO1xuXHRsZXQgYWJvcnQgPSBmYWxzZTtcblxuXHRyZXR1cm4gbmV3IEJvZHkuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0bGV0IHJlc1RpbWVvdXQ7XG5cblx0XHQvLyBhbGxvdyB0aW1lb3V0IG9uIHNsb3cgcmVzcG9uc2UgYm9keVxuXHRcdGlmIChfdGhpczQudGltZW91dCkge1xuXHRcdFx0cmVzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRhYm9ydCA9IHRydWU7XG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgUmVzcG9uc2UgdGltZW91dCB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHtfdGhpczQudXJsfSAob3ZlciAke190aGlzNC50aW1lb3V0fW1zKWAsICdib2R5LXRpbWVvdXQnKSk7XG5cdFx0XHR9LCBfdGhpczQudGltZW91dCk7XG5cdFx0fVxuXG5cdFx0Ly8gaGFuZGxlIHN0cmVhbSBlcnJvcnNcblx0XHRib2R5Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGlmIChlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG5cdFx0XHRcdC8vIGlmIHRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkLCByZWplY3Qgd2l0aCB0aGlzIEVycm9yXG5cdFx0XHRcdGFib3J0ID0gdHJ1ZTtcblx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBvdGhlciBlcnJvcnMsIHN1Y2ggYXMgaW5jb3JyZWN0IGNvbnRlbnQtZW5jb2Rpbmdcblx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7X3RoaXM0LnVybH06ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycikpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ym9keS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0aWYgKGFib3J0IHx8IGNodW5rID09PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKF90aGlzNC5zaXplICYmIGFjY3VtQnl0ZXMgKyBjaHVuay5sZW5ndGggPiBfdGhpczQuc2l6ZSkge1xuXHRcdFx0XHRhYm9ydCA9IHRydWU7XG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgY29udGVudCBzaXplIGF0ICR7X3RoaXM0LnVybH0gb3ZlciBsaW1pdDogJHtfdGhpczQuc2l6ZX1gLCAnbWF4LXNpemUnKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0YWNjdW1CeXRlcyArPSBjaHVuay5sZW5ndGg7XG5cdFx0XHRhY2N1bS5wdXNoKGNodW5rKTtcblx0XHR9KTtcblxuXHRcdGJvZHkub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChhYm9ydCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNsZWFyVGltZW91dChyZXNUaW1lb3V0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmVzb2x2ZShCdWZmZXIuY29uY2F0KGFjY3VtLCBhY2N1bUJ5dGVzKSk7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0Ly8gaGFuZGxlIHN0cmVhbXMgdGhhdCBoYXZlIGFjY3VtdWxhdGVkIHRvbyBtdWNoIGRhdGEgKGlzc3VlICM0MTQpXG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgQ291bGQgbm90IGNyZWF0ZSBCdWZmZXIgZnJvbSByZXNwb25zZSBib2R5IGZvciAke190aGlzNC51cmx9OiAke2Vyci5tZXNzYWdlfWAsICdzeXN0ZW0nLCBlcnIpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogRGV0ZWN0IGJ1ZmZlciBlbmNvZGluZyBhbmQgY29udmVydCB0byB0YXJnZXQgZW5jb2RpbmdcbiAqIHJlZjogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDExMy9wYXJzaW5nLmh0bWwjZGV0ZXJtaW5pbmctdGhlLWNoYXJhY3Rlci1lbmNvZGluZ1xuICpcbiAqIEBwYXJhbSAgIEJ1ZmZlciAgYnVmZmVyICAgIEluY29taW5nIGJ1ZmZlclxuICogQHBhcmFtICAgU3RyaW5nICBlbmNvZGluZyAgVGFyZ2V0IGVuY29kaW5nXG4gKiBAcmV0dXJuICBTdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEJvZHkoYnVmZmVyLCBoZWFkZXJzKSB7XG5cdGlmICh0eXBlb2YgY29udmVydCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcignVGhlIHBhY2thZ2UgYGVuY29kaW5nYCBtdXN0IGJlIGluc3RhbGxlZCB0byB1c2UgdGhlIHRleHRDb252ZXJ0ZWQoKSBmdW5jdGlvbicpO1xuXHR9XG5cblx0Y29uc3QgY3QgPSBoZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG5cdGxldCBjaGFyc2V0ID0gJ3V0Zi04Jztcblx0bGV0IHJlcywgc3RyO1xuXG5cdC8vIGhlYWRlclxuXHRpZiAoY3QpIHtcblx0XHRyZXMgPSAvY2hhcnNldD0oW147XSopL2kuZXhlYyhjdCk7XG5cdH1cblxuXHQvLyBubyBjaGFyc2V0IGluIGNvbnRlbnQgdHlwZSwgcGVlayBhdCByZXNwb25zZSBib2R5IGZvciBhdCBtb3N0IDEwMjQgYnl0ZXNcblx0c3RyID0gYnVmZmVyLnNsaWNlKDAsIDEwMjQpLnRvU3RyaW5nKCk7XG5cblx0Ly8gaHRtbDVcblx0aWYgKCFyZXMgJiYgc3RyKSB7XG5cdFx0cmVzID0gLzxtZXRhLis/Y2hhcnNldD0oWydcIl0pKC4rPylcXDEvaS5leGVjKHN0cik7XG5cdH1cblxuXHQvLyBodG1sNFxuXHRpZiAoIXJlcyAmJiBzdHIpIHtcblx0XHRyZXMgPSAvPG1ldGFbXFxzXSs/aHR0cC1lcXVpdj0oWydcIl0pY29udGVudC10eXBlXFwxW1xcc10rP2NvbnRlbnQ9KFsnXCJdKSguKz8pXFwyL2kuZXhlYyhzdHIpO1xuXHRcdGlmICghcmVzKSB7XG5cdFx0XHRyZXMgPSAvPG1ldGFbXFxzXSs/Y29udGVudD0oWydcIl0pKC4rPylcXDFbXFxzXSs/aHR0cC1lcXVpdj0oWydcIl0pY29udGVudC10eXBlXFwzL2kuZXhlYyhzdHIpO1xuXHRcdFx0aWYgKHJlcykge1xuXHRcdFx0XHRyZXMucG9wKCk7IC8vIGRyb3AgbGFzdCBxdW90ZVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChyZXMpIHtcblx0XHRcdHJlcyA9IC9jaGFyc2V0PSguKikvaS5leGVjKHJlcy5wb3AoKSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8geG1sXG5cdGlmICghcmVzICYmIHN0cikge1xuXHRcdHJlcyA9IC88XFw/eG1sLis/ZW5jb2Rpbmc9KFsnXCJdKSguKz8pXFwxL2kuZXhlYyhzdHIpO1xuXHR9XG5cblx0Ly8gZm91bmQgY2hhcnNldFxuXHRpZiAocmVzKSB7XG5cdFx0Y2hhcnNldCA9IHJlcy5wb3AoKTtcblxuXHRcdC8vIHByZXZlbnQgZGVjb2RlIGlzc3VlcyB3aGVuIHNpdGVzIHVzZSBpbmNvcnJlY3QgZW5jb2Rpbmdcblx0XHQvLyByZWY6IGh0dHBzOi8vaHNpdm9uZW4uZmkvZW5jb2RpbmctbWVudS9cblx0XHRpZiAoY2hhcnNldCA9PT0gJ2diMjMxMicgfHwgY2hhcnNldCA9PT0gJ2diaycpIHtcblx0XHRcdGNoYXJzZXQgPSAnZ2IxODAzMCc7XG5cdFx0fVxuXHR9XG5cblx0Ly8gdHVybiByYXcgYnVmZmVycyBpbnRvIGEgc2luZ2xlIHV0Zi04IGJ1ZmZlclxuXHRyZXR1cm4gY29udmVydChidWZmZXIsICdVVEYtOCcsIGNoYXJzZXQpLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogRGV0ZWN0IGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICogcmVmOiBodHRwczovL2dpdGh1Yi5jb20vYml0aW5uL25vZGUtZmV0Y2gvaXNzdWVzLzI5NiNpc3N1ZWNvbW1lbnQtMzA3NTk4MTQzXG4gKlxuICogQHBhcmFtICAgT2JqZWN0ICBvYmogICAgIE9iamVjdCB0byBkZXRlY3QgYnkgdHlwZSBvciBicmFuZFxuICogQHJldHVybiAgU3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKG9iaikge1xuXHQvLyBEdWNrLXR5cGluZyBhcyBhIG5lY2Vzc2FyeSBjb25kaXRpb24uXG5cdGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqLmFwcGVuZCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygb2JqLmRlbGV0ZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygb2JqLmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygb2JqLmdldEFsbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygb2JqLmhhcyAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygb2JqLnNldCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIEJyYW5kLWNoZWNraW5nIGFuZCBtb3JlIGR1Y2stdHlwaW5nIGFzIG9wdGlvbmFsIGNvbmRpdGlvbi5cblx0cmV0dXJuIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVVJMU2VhcmNoUGFyYW1zJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgVVJMU2VhcmNoUGFyYW1zXScgfHwgdHlwZW9mIG9iai5zb3J0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGEgVzNDIGBCbG9iYCBvYmplY3QgKHdoaWNoIGBGaWxlYCBpbmhlcml0cyBmcm9tKVxuICogQHBhcmFtICB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0Jsb2Iob2JqKSB7XG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmoudHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9iai5zdHJlYW0gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdzdHJpbmcnICYmIC9eKEJsb2J8RmlsZSkkLy50ZXN0KG9iai5jb25zdHJ1Y3Rvci5uYW1lKSAmJiAvXihCbG9ifEZpbGUpJC8udGVzdChvYmpbU3ltYm9sLnRvU3RyaW5nVGFnXSk7XG59XG5cbi8qKlxuICogQ2xvbmUgYm9keSBnaXZlbiBSZXMvUmVxIGluc3RhbmNlXG4gKlxuICogQHBhcmFtICAgTWl4ZWQgIGluc3RhbmNlICBSZXNwb25zZSBvciBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcmV0dXJuICBNaXhlZFxuICovXG5mdW5jdGlvbiBjbG9uZShpbnN0YW5jZSkge1xuXHRsZXQgcDEsIHAyO1xuXHRsZXQgYm9keSA9IGluc3RhbmNlLmJvZHk7XG5cblx0Ly8gZG9uJ3QgYWxsb3cgY2xvbmluZyBhIHVzZWQgYm9keVxuXHRpZiAoaW5zdGFuY2UuYm9keVVzZWQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjbG9uZSBib2R5IGFmdGVyIGl0IGlzIHVzZWQnKTtcblx0fVxuXG5cdC8vIGNoZWNrIHRoYXQgYm9keSBpcyBhIHN0cmVhbSBhbmQgbm90IGZvcm0tZGF0YSBvYmplY3Rcblx0Ly8gbm90ZTogd2UgY2FuJ3QgY2xvbmUgdGhlIGZvcm0tZGF0YSBvYmplY3Qgd2l0aG91dCBoYXZpbmcgaXQgYXMgYSBkZXBlbmRlbmN5XG5cdGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtICYmIHR5cGVvZiBib2R5LmdldEJvdW5kYXJ5ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gdGVlIGluc3RhbmNlIGJvZHlcblx0XHRwMSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuXHRcdHAyID0gbmV3IFBhc3NUaHJvdWdoKCk7XG5cdFx0Ym9keS5waXBlKHAxKTtcblx0XHRib2R5LnBpcGUocDIpO1xuXHRcdC8vIHNldCBpbnN0YW5jZSBib2R5IHRvIHRlZWQgYm9keSBhbmQgcmV0dXJuIHRoZSBvdGhlciB0ZWVkIGJvZHlcblx0XHRpbnN0YW5jZVtJTlRFUk5BTFNdLmJvZHkgPSBwMTtcblx0XHRib2R5ID0gcDI7XG5cdH1cblxuXHRyZXR1cm4gYm9keTtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyB0aGUgb3BlcmF0aW9uIFwiZXh0cmFjdCBhIGBDb250ZW50LVR5cGVgIHZhbHVlIGZyb20gfG9iamVjdHxcIiBhc1xuICogc3BlY2lmaWVkIGluIHRoZSBzcGVjaWZpY2F0aW9uOlxuICogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtYm9keWluaXQtZXh0cmFjdFxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGluc3RhbmNlLmJvZHkgaXMgcHJlc2VudC5cbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgaW5zdGFuY2UgIEFueSBvcHRpb25zLmJvZHkgaW5wdXRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdENvbnRlbnRUeXBlKGJvZHkpIHtcblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHQvLyBib2R5IGlzIG51bGxcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcblx0XHQvLyBib2R5IGlzIHN0cmluZ1xuXHRcdHJldHVybiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jztcblx0fSBlbHNlIGlmIChpc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuXHRcdC8vIGJvZHkgaXMgYSBVUkxTZWFyY2hQYXJhbXNcblx0XHRyZXR1cm4gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jztcblx0fSBlbHNlIGlmIChpc0Jsb2IoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJsb2Jcblx0XHRyZXR1cm4gYm9keS50eXBlIHx8IG51bGw7XG5cdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBidWZmZXJcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyXG5cdFx0cmV0dXJuIG51bGw7XG5cdH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBBcnJheUJ1ZmZlclZpZXdcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmICh0eXBlb2YgYm9keS5nZXRCb3VuZGFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdC8vIGRldGVjdCBmb3JtIGRhdGEgaW5wdXQgZnJvbSBmb3JtLWRhdGEgbW9kdWxlXG5cdFx0cmV0dXJuIGBtdWx0aXBhcnQvZm9ybS1kYXRhO2JvdW5kYXJ5PSR7Ym9keS5nZXRCb3VuZGFyeSgpfWA7XG5cdH0gZWxzZSBpZiAoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkge1xuXHRcdC8vIGJvZHkgaXMgc3RyZWFtXG5cdFx0Ly8gY2FuJ3QgcmVhbGx5IGRvIG11Y2ggYWJvdXQgdGhpc1xuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJvZHkgY29uc3RydWN0b3IgZGVmYXVsdHMgb3RoZXIgdGhpbmdzIHRvIHN0cmluZ1xuXHRcdHJldHVybiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jztcblx0fVxufVxuXG4vKipcbiAqIFRoZSBGZXRjaCBTdGFuZGFyZCB0cmVhdHMgdGhpcyBhcyBpZiBcInRvdGFsIGJ5dGVzXCIgaXMgYSBwcm9wZXJ0eSBvbiB0aGUgYm9keS5cbiAqIEZvciB1cywgd2UgaGF2ZSB0byBleHBsaWNpdGx5IGdldCBpdCB3aXRoIGEgZnVuY3Rpb24uXG4gKlxuICogcmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ib2R5LXRvdGFsLWJ5dGVzXG4gKlxuICogQHBhcmFtICAgQm9keSAgICBpbnN0YW5jZSAgIEluc3RhbmNlIG9mIEJvZHlcbiAqIEByZXR1cm4gIE51bWJlcj8gICAgICAgICAgICBOdW1iZXIgb2YgYnl0ZXMsIG9yIG51bGwgaWYgbm90IHBvc3NpYmxlXG4gKi9cbmZ1bmN0aW9uIGdldFRvdGFsQnl0ZXMoaW5zdGFuY2UpIHtcblx0Y29uc3QgYm9keSA9IGluc3RhbmNlLmJvZHk7XG5cblxuXHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdC8vIGJvZHkgaXMgbnVsbFxuXHRcdHJldHVybiAwO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdHJldHVybiBib2R5LnNpemU7XG5cdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBidWZmZXJcblx0XHRyZXR1cm4gYm9keS5sZW5ndGg7XG5cdH0gZWxzZSBpZiAoYm9keSAmJiB0eXBlb2YgYm9keS5nZXRMZW5ndGhTeW5jID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gZGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0XHRpZiAoYm9keS5fbGVuZ3RoUmV0cmlldmVycyAmJiBib2R5Ll9sZW5ndGhSZXRyaWV2ZXJzLmxlbmd0aCA9PSAwIHx8IC8vIDEueFxuXHRcdGJvZHkuaGFzS25vd25MZW5ndGggJiYgYm9keS5oYXNLbm93bkxlbmd0aCgpKSB7XG5cdFx0XHQvLyAyLnhcblx0XHRcdHJldHVybiBib2R5LmdldExlbmd0aFN5bmMoKTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gYm9keSBpcyBzdHJlYW1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIFdyaXRlIGEgQm9keSB0byBhIE5vZGUuanMgV3JpdGFibGVTdHJlYW0gKGUuZy4gaHR0cC5SZXF1ZXN0KSBvYmplY3QuXG4gKlxuICogQHBhcmFtICAgQm9keSAgICBpbnN0YW5jZSAgIEluc3RhbmNlIG9mIEJvZHlcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuZnVuY3Rpb24gd3JpdGVUb1N0cmVhbShkZXN0LCBpbnN0YW5jZSkge1xuXHRjb25zdCBib2R5ID0gaW5zdGFuY2UuYm9keTtcblxuXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0Ly8gYm9keSBpcyBudWxsXG5cdFx0ZGVzdC5lbmQoKTtcblx0fSBlbHNlIGlmIChpc0Jsb2IoYm9keSkpIHtcblx0XHRib2R5LnN0cmVhbSgpLnBpcGUoZGVzdCk7XG5cdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBidWZmZXJcblx0XHRkZXN0LndyaXRlKGJvZHkpO1xuXHRcdGRlc3QuZW5kKCk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gYm9keSBpcyBzdHJlYW1cblx0XHRib2R5LnBpcGUoZGVzdCk7XG5cdH1cbn1cblxuLy8gZXhwb3NlIFByb21pc2VcbkJvZHkuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuXG4vKipcbiAqIGhlYWRlcnMuanNcbiAqXG4gKiBIZWFkZXJzIGNsYXNzIG9mZmVycyBjb252ZW5pZW50IGhlbHBlcnNcbiAqL1xuXG5jb25zdCBpbnZhbGlkVG9rZW5SZWdleCA9IC9bXlxcXl9gYS16QS1aXFwtMC05ISMkJSYnKisufH5dLztcbmNvbnN0IGludmFsaWRIZWFkZXJDaGFyUmVnZXggPSAvW15cXHRcXHgyMC1cXHg3ZVxceDgwLVxceGZmXS87XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZShuYW1lKSB7XG5cdG5hbWUgPSBgJHtuYW1lfWA7XG5cdGlmIChpbnZhbGlkVG9rZW5SZWdleC50ZXN0KG5hbWUpIHx8IG5hbWUgPT09ICcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgJHtuYW1lfSBpcyBub3QgYSBsZWdhbCBIVFRQIGhlYWRlciBuYW1lYCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWx1ZSkge1xuXHR2YWx1ZSA9IGAke3ZhbHVlfWA7XG5cdGlmIChpbnZhbGlkSGVhZGVyQ2hhclJlZ2V4LnRlc3QodmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgJHt2YWx1ZX0gaXMgbm90IGEgbGVnYWwgSFRUUCBoZWFkZXIgdmFsdWVgKTtcblx0fVxufVxuXG4vKipcbiAqIEZpbmQgdGhlIGtleSBpbiB0aGUgbWFwIG9iamVjdCBnaXZlbiBhIGhlYWRlciBuYW1lLlxuICpcbiAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZC5cbiAqXG4gKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgIEhlYWRlciBuYW1lXG4gKiBAcmV0dXJuICBTdHJpbmd8VW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIGZpbmQobWFwLCBuYW1lKSB7XG5cdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdGZvciAoY29uc3Qga2V5IGluIG1hcCkge1xuXHRcdGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSkge1xuXHRcdFx0cmV0dXJuIGtleTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuY29uc3QgTUFQID0gU3ltYm9sKCdtYXAnKTtcbmNsYXNzIEhlYWRlcnMge1xuXHQvKipcbiAgKiBIZWFkZXJzIGNsYXNzXG4gICpcbiAgKiBAcGFyYW0gICBPYmplY3QgIGhlYWRlcnMgIFJlc3BvbnNlIGhlYWRlcnNcbiAgKiBAcmV0dXJuICBWb2lkXG4gICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGxldCBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG5cblx0XHR0aGlzW01BUF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdFx0aWYgKGluaXQgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG5cdFx0XHRjb25zdCByYXdIZWFkZXJzID0gaW5pdC5yYXcoKTtcblx0XHRcdGNvbnN0IGhlYWRlck5hbWVzID0gT2JqZWN0LmtleXMocmF3SGVhZGVycyk7XG5cblx0XHRcdGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBoZWFkZXJOYW1lcykge1xuXHRcdFx0XHRmb3IgKGNvbnN0IHZhbHVlIG9mIHJhd0hlYWRlcnNbaGVhZGVyTmFtZV0pIHtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZChoZWFkZXJOYW1lLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFdlIGRvbid0IHdvcnJ5IGFib3V0IGNvbnZlcnRpbmcgcHJvcCB0byBCeXRlU3RyaW5nIGhlcmUgYXMgYXBwZW5kKClcblx0XHQvLyB3aWxsIGhhbmRsZSBpdC5cblx0XHRpZiAoaW5pdCA9PSBudWxsKSA7IGVsc2UgaWYgKHR5cGVvZiBpbml0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Y29uc3QgbWV0aG9kID0gaW5pdFtTeW1ib2wuaXRlcmF0b3JdO1xuXHRcdFx0aWYgKG1ldGhvZCAhPSBudWxsKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgbWV0aG9kICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSGVhZGVyIHBhaXJzIG11c3QgYmUgaXRlcmFibGUnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHNlcXVlbmNlPHNlcXVlbmNlPEJ5dGVTdHJpbmc+PlxuXHRcdFx0XHQvLyBOb3RlOiBwZXIgc3BlYyB3ZSBoYXZlIHRvIGZpcnN0IGV4aGF1c3QgdGhlIGxpc3RzIHRoZW4gcHJvY2VzcyB0aGVtXG5cdFx0XHRcdGNvbnN0IHBhaXJzID0gW107XG5cdFx0XHRcdGZvciAoY29uc3QgcGFpciBvZiBpbml0KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFpcltTeW1ib2wuaXRlcmF0b3JdICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgaXRlcmFibGUnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cGFpcnMucHVzaChBcnJheS5mcm9tKHBhaXIpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuXHRcdFx0XHRcdGlmIChwYWlyLmxlbmd0aCAhPT0gMikge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRWFjaCBoZWFkZXIgcGFpciBtdXN0IGJlIGEgbmFtZS92YWx1ZSB0dXBsZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLmFwcGVuZChwYWlyWzBdLCBwYWlyWzFdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gcmVjb3JkPEJ5dGVTdHJpbmcsIEJ5dGVTdHJpbmc+XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGluaXQpKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBpbml0W2tleV07XG5cdFx0XHRcdFx0dGhpcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgaW5pdGlhbGl6ZXIgbXVzdCBiZSBhbiBvYmplY3QnKTtcblx0XHR9XG5cdH1cblxuXHQvKipcbiAgKiBSZXR1cm4gY29tYmluZWQgaGVhZGVyIHZhbHVlIGdpdmVuIG5hbWVcbiAgKlxuICAqIEBwYXJhbSAgIFN0cmluZyAgbmFtZSAgSGVhZGVyIG5hbWVcbiAgKiBAcmV0dXJuICBNaXhlZFxuICAqL1xuXHRnZXQobmFtZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzW01BUF1ba2V5XS5qb2luKCcsICcpO1xuXHR9XG5cblx0LyoqXG4gICogSXRlcmF0ZSBvdmVyIGFsbCBoZWFkZXJzXG4gICpcbiAgKiBAcGFyYW0gICBGdW5jdGlvbiAgY2FsbGJhY2sgIEV4ZWN1dGVkIGZvciBlYWNoIGl0ZW0gd2l0aCBwYXJhbWV0ZXJzICh2YWx1ZSwgbmFtZSwgdGhpc0FyZylcbiAgKiBAcGFyYW0gICBCb29sZWFuICAgdGhpc0FyZyAgIGB0aGlzYCBjb250ZXh0IGZvciBjYWxsYmFjayBmdW5jdGlvblxuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0Zm9yRWFjaChjYWxsYmFjaykge1xuXHRcdGxldCB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cblx0XHRsZXQgcGFpcnMgPSBnZXRIZWFkZXJzKHRoaXMpO1xuXHRcdGxldCBpID0gMDtcblx0XHR3aGlsZSAoaSA8IHBhaXJzLmxlbmd0aCkge1xuXHRcdFx0dmFyIF9wYWlycyRpID0gcGFpcnNbaV07XG5cdFx0XHRjb25zdCBuYW1lID0gX3BhaXJzJGlbMF0sXG5cdFx0XHQgICAgICB2YWx1ZSA9IF9wYWlycyRpWzFdO1xuXG5cdFx0XHRjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKTtcblx0XHRcdHBhaXJzID0gZ2V0SGVhZGVycyh0aGlzKTtcblx0XHRcdGkrKztcblx0XHR9XG5cdH1cblxuXHQvKipcbiAgKiBPdmVyd3JpdGUgaGVhZGVyIHZhbHVlcyBnaXZlbiBuYW1lXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgICBIZWFkZXIgbmFtZVxuICAqIEBwYXJhbSAgIFN0cmluZyAgdmFsdWUgIEhlYWRlciB2YWx1ZVxuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0c2V0KG5hbWUsIHZhbHVlKSB7XG5cdFx0bmFtZSA9IGAke25hbWV9YDtcblx0XHR2YWx1ZSA9IGAke3ZhbHVlfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdHZhbGlkYXRlVmFsdWUodmFsdWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHR0aGlzW01BUF1ba2V5ICE9PSB1bmRlZmluZWQgPyBrZXkgOiBuYW1lXSA9IFt2YWx1ZV07XG5cdH1cblxuXHQvKipcbiAgKiBBcHBlbmQgYSB2YWx1ZSBvbnRvIGV4aXN0aW5nIGhlYWRlclxuICAqXG4gICogQHBhcmFtICAgU3RyaW5nICBuYW1lICAgSGVhZGVyIG5hbWVcbiAgKiBAcGFyYW0gICBTdHJpbmcgIHZhbHVlICBIZWFkZXIgdmFsdWVcbiAgKiBAcmV0dXJuICBWb2lkXG4gICovXG5cdGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsdWUgPSBgJHt2YWx1ZX1gO1xuXHRcdHZhbGlkYXRlTmFtZShuYW1lKTtcblx0XHR2YWxpZGF0ZVZhbHVlKHZhbHVlKTtcblx0XHRjb25zdCBrZXkgPSBmaW5kKHRoaXNbTUFQXSwgbmFtZSk7XG5cdFx0aWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzW01BUF1ba2V5XS5wdXNoKHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpc1tNQVBdW25hbWVdID0gW3ZhbHVlXTtcblx0XHR9XG5cdH1cblxuXHQvKipcbiAgKiBDaGVjayBmb3IgaGVhZGVyIG5hbWUgZXhpc3RlbmNlXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgICBuYW1lICBIZWFkZXIgbmFtZVxuICAqIEByZXR1cm4gIEJvb2xlYW5cbiAgKi9cblx0aGFzKG5hbWUpIHtcblx0XHRuYW1lID0gYCR7bmFtZX1gO1xuXHRcdHZhbGlkYXRlTmFtZShuYW1lKTtcblx0XHRyZXR1cm4gZmluZCh0aGlzW01BUF0sIG5hbWUpICE9PSB1bmRlZmluZWQ7XG5cdH1cblxuXHQvKipcbiAgKiBEZWxldGUgYWxsIGhlYWRlciB2YWx1ZXMgZ2l2ZW4gbmFtZVxuICAqXG4gICogQHBhcmFtICAgU3RyaW5nICBuYW1lICBIZWFkZXIgbmFtZVxuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0ZGVsZXRlKG5hbWUpIHtcblx0XHRuYW1lID0gYCR7bmFtZX1gO1xuXHRcdHZhbGlkYXRlTmFtZShuYW1lKTtcblx0XHRjb25zdCBrZXkgPSBmaW5kKHRoaXNbTUFQXSwgbmFtZSk7XG5cdFx0aWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRkZWxldGUgdGhpc1tNQVBdW2tleV07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG4gICogUmV0dXJuIHJhdyBoZWFkZXJzIChub24tc3BlYyBhcGkpXG4gICpcbiAgKiBAcmV0dXJuICBPYmplY3RcbiAgKi9cblx0cmF3KCkge1xuXHRcdHJldHVybiB0aGlzW01BUF07XG5cdH1cblxuXHQvKipcbiAgKiBHZXQgYW4gaXRlcmF0b3Igb24ga2V5cy5cbiAgKlxuICAqIEByZXR1cm4gIEl0ZXJhdG9yXG4gICovXG5cdGtleXMoKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0aGlzLCAna2V5Jyk7XG5cdH1cblxuXHQvKipcbiAgKiBHZXQgYW4gaXRlcmF0b3Igb24gdmFsdWVzLlxuICAqXG4gICogQHJldHVybiAgSXRlcmF0b3JcbiAgKi9cblx0dmFsdWVzKCkge1xuXHRcdHJldHVybiBjcmVhdGVIZWFkZXJzSXRlcmF0b3IodGhpcywgJ3ZhbHVlJyk7XG5cdH1cblxuXHQvKipcbiAgKiBHZXQgYW4gaXRlcmF0b3Igb24gZW50cmllcy5cbiAgKlxuICAqIFRoaXMgaXMgdGhlIGRlZmF1bHQgaXRlcmF0b3Igb2YgdGhlIEhlYWRlcnMgb2JqZWN0LlxuICAqXG4gICogQHJldHVybiAgSXRlcmF0b3JcbiAgKi9cblx0W1N5bWJvbC5pdGVyYXRvcl0oKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0aGlzLCAna2V5K3ZhbHVlJyk7XG5cdH1cbn1cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSGVhZGVycy5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ0hlYWRlcnMnLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhIZWFkZXJzLnByb3RvdHlwZSwge1xuXHRnZXQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRmb3JFYWNoOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c2V0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0YXBwZW5kOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0aGFzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0ZGVsZXRlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0a2V5czogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHZhbHVlczogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGVudHJpZXM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG59KTtcblxuZnVuY3Rpb24gZ2V0SGVhZGVycyhoZWFkZXJzKSB7XG5cdGxldCBraW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAna2V5K3ZhbHVlJztcblxuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaGVhZGVyc1tNQVBdKS5zb3J0KCk7XG5cdHJldHVybiBrZXlzLm1hcChraW5kID09PSAna2V5JyA/IGZ1bmN0aW9uIChrKSB7XG5cdFx0cmV0dXJuIGsudG9Mb3dlckNhc2UoKTtcblx0fSA6IGtpbmQgPT09ICd2YWx1ZScgPyBmdW5jdGlvbiAoaykge1xuXHRcdHJldHVybiBoZWFkZXJzW01BUF1ba10uam9pbignLCAnKTtcblx0fSA6IGZ1bmN0aW9uIChrKSB7XG5cdFx0cmV0dXJuIFtrLnRvTG93ZXJDYXNlKCksIGhlYWRlcnNbTUFQXVtrXS5qb2luKCcsICcpXTtcblx0fSk7XG59XG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdpbnRlcm5hbCcpO1xuXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJzSXRlcmF0b3IodGFyZ2V0LCBraW5kKSB7XG5cdGNvbnN0IGl0ZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShIZWFkZXJzSXRlcmF0b3JQcm90b3R5cGUpO1xuXHRpdGVyYXRvcltJTlRFUk5BTF0gPSB7XG5cdFx0dGFyZ2V0LFxuXHRcdGtpbmQsXG5cdFx0aW5kZXg6IDBcblx0fTtcblx0cmV0dXJuIGl0ZXJhdG9yO1xufVxuXG5jb25zdCBIZWFkZXJzSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Yoe1xuXHRuZXh0KCkge1xuXHRcdC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuXHRcdGlmICghdGhpcyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykgIT09IEhlYWRlcnNJdGVyYXRvclByb3RvdHlwZSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYHRoaXNgIGlzIG5vdCBhIEhlYWRlcnNJdGVyYXRvcicpO1xuXHRcdH1cblxuXHRcdHZhciBfSU5URVJOQUwgPSB0aGlzW0lOVEVSTkFMXTtcblx0XHRjb25zdCB0YXJnZXQgPSBfSU5URVJOQUwudGFyZ2V0LFxuXHRcdCAgICAgIGtpbmQgPSBfSU5URVJOQUwua2luZCxcblx0XHQgICAgICBpbmRleCA9IF9JTlRFUk5BTC5pbmRleDtcblxuXHRcdGNvbnN0IHZhbHVlcyA9IGdldEhlYWRlcnModGFyZ2V0LCBraW5kKTtcblx0XHRjb25zdCBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdGlmIChpbmRleCA+PSBsZW4pIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHZhbHVlOiB1bmRlZmluZWQsXG5cdFx0XHRcdGRvbmU6IHRydWVcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dGhpc1tJTlRFUk5BTF0uaW5kZXggPSBpbmRleCArIDE7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHZhbHVlc1tpbmRleF0sXG5cdFx0XHRkb25lOiBmYWxzZVxuXHRcdH07XG5cdH1cbn0sIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSGVhZGVyc0l0ZXJhdG9yUHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcblx0dmFsdWU6ICdIZWFkZXJzSXRlcmF0b3InLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG4vKipcbiAqIEV4cG9ydCB0aGUgSGVhZGVycyBvYmplY3QgaW4gYSBmb3JtIHRoYXQgTm9kZS5qcyBjYW4gY29uc3VtZS5cbiAqXG4gKiBAcGFyYW0gICBIZWFkZXJzICBoZWFkZXJzXG4gKiBAcmV0dXJuICBPYmplY3RcbiAqL1xuZnVuY3Rpb24gZXhwb3J0Tm9kZUNvbXBhdGlibGVIZWFkZXJzKGhlYWRlcnMpIHtcblx0Y29uc3Qgb2JqID0gT2JqZWN0LmFzc2lnbih7IF9fcHJvdG9fXzogbnVsbCB9LCBoZWFkZXJzW01BUF0pO1xuXG5cdC8vIGh0dHAucmVxdWVzdCgpIG9ubHkgc3VwcG9ydHMgc3RyaW5nIGFzIEhvc3QgaGVhZGVyLiBUaGlzIGhhY2sgbWFrZXNcblx0Ly8gc3BlY2lmeWluZyBjdXN0b20gSG9zdCBoZWFkZXIgcG9zc2libGUuXG5cdGNvbnN0IGhvc3RIZWFkZXJLZXkgPSBmaW5kKGhlYWRlcnNbTUFQXSwgJ0hvc3QnKTtcblx0aWYgKGhvc3RIZWFkZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdG9ialtob3N0SGVhZGVyS2V5XSA9IG9ialtob3N0SGVhZGVyS2V5XVswXTtcblx0fVxuXG5cdHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgSGVhZGVycyBvYmplY3QgZnJvbSBhbiBvYmplY3Qgb2YgaGVhZGVycywgaWdub3JpbmcgdGhvc2UgdGhhdCBkb1xuICogbm90IGNvbmZvcm0gdG8gSFRUUCBncmFtbWFyIHByb2R1Y3Rpb25zLlxuICpcbiAqIEBwYXJhbSAgIE9iamVjdCAgb2JqICBPYmplY3Qgb2YgaGVhZGVyc1xuICogQHJldHVybiAgSGVhZGVyc1xuICovXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJzTGVuaWVudChvYmopIHtcblx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cdGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG5cdFx0aWYgKGludmFsaWRUb2tlblJlZ2V4LnRlc3QobmFtZSkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmpbbmFtZV0pKSB7XG5cdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBvYmpbbmFtZV0pIHtcblx0XHRcdFx0aWYgKGludmFsaWRIZWFkZXJDaGFyUmVnZXgudGVzdCh2YWwpKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhlYWRlcnNbTUFQXVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1tNQVBdW25hbWVdID0gW3ZhbF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGVhZGVyc1tNQVBdW25hbWVdLnB1c2godmFsKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIWludmFsaWRIZWFkZXJDaGFyUmVnZXgudGVzdChvYmpbbmFtZV0pKSB7XG5cdFx0XHRoZWFkZXJzW01BUF1bbmFtZV0gPSBbb2JqW25hbWVdXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGhlYWRlcnM7XG59XG5cbmNvbnN0IElOVEVSTkFMUyQxID0gU3ltYm9sKCdSZXNwb25zZSBpbnRlcm5hbHMnKTtcblxuLy8gZml4IGFuIGlzc3VlIHdoZXJlIFwiU1RBVFVTX0NPREVTXCIgYXJlbid0IGEgbmFtZWQgZXhwb3J0IGZvciBub2RlIDwxMFxuY29uc3QgU1RBVFVTX0NPREVTID0gaHR0cC5TVEFUVVNfQ09ERVM7XG5cbi8qKlxuICogUmVzcG9uc2UgY2xhc3NcbiAqXG4gKiBAcGFyYW0gICBTdHJlYW0gIGJvZHkgIFJlYWRhYmxlIHN0cmVhbVxuICogQHBhcmFtICAgT2JqZWN0ICBvcHRzICBSZXNwb25zZSBvcHRpb25zXG4gKiBAcmV0dXJuICBWb2lkXG4gKi9cbmNsYXNzIFJlc3BvbnNlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0bGV0IGJvZHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG5cdFx0bGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdFx0Qm9keS5jYWxsKHRoaXMsIGJvZHksIG9wdHMpO1xuXG5cdFx0Y29uc3Qgc3RhdHVzID0gb3B0cy5zdGF0dXMgfHwgMjAwO1xuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRzLmhlYWRlcnMpO1xuXG5cdFx0aWYgKGJvZHkgIT0gbnVsbCAmJiAhaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpKSB7XG5cdFx0XHRjb25zdCBjb250ZW50VHlwZSA9IGV4dHJhY3RDb250ZW50VHlwZShib2R5KTtcblx0XHRcdGlmIChjb250ZW50VHlwZSkge1xuXHRcdFx0XHRoZWFkZXJzLmFwcGVuZCgnQ29udGVudC1UeXBlJywgY29udGVudFR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTJDFdID0ge1xuXHRcdFx0dXJsOiBvcHRzLnVybCxcblx0XHRcdHN0YXR1cyxcblx0XHRcdHN0YXR1c1RleHQ6IG9wdHMuc3RhdHVzVGV4dCB8fCBTVEFUVVNfQ09ERVNbc3RhdHVzXSxcblx0XHRcdGhlYWRlcnMsXG5cdFx0XHRjb3VudGVyOiBvcHRzLmNvdW50ZXJcblx0XHR9O1xuXHR9XG5cblx0Z2V0IHVybCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0udXJsIHx8ICcnO1xuXHR9XG5cblx0Z2V0IHN0YXR1cygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzO1xuXHR9XG5cblx0LyoqXG4gICogQ29udmVuaWVuY2UgcHJvcGVydHkgcmVwcmVzZW50aW5nIGlmIHRoZSByZXF1ZXN0IGVuZGVkIG5vcm1hbGx5XG4gICovXG5cdGdldCBvaygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzID49IDIwMCAmJiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXMgPCAzMDA7XG5cdH1cblxuXHRnZXQgcmVkaXJlY3RlZCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uY291bnRlciA+IDA7XG5cdH1cblxuXHRnZXQgc3RhdHVzVGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzVGV4dDtcblx0fVxuXG5cdGdldCBoZWFkZXJzKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5oZWFkZXJzO1xuXHR9XG5cblx0LyoqXG4gICogQ2xvbmUgdGhpcyByZXNwb25zZVxuICAqXG4gICogQHJldHVybiAgUmVzcG9uc2VcbiAgKi9cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShjbG9uZSh0aGlzKSwge1xuXHRcdFx0dXJsOiB0aGlzLnVybCxcblx0XHRcdHN0YXR1czogdGhpcy5zdGF0dXMsXG5cdFx0XHRzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG5cdFx0XHRoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG5cdFx0XHRvazogdGhpcy5vayxcblx0XHRcdHJlZGlyZWN0ZWQ6IHRoaXMucmVkaXJlY3RlZFxuXHRcdH0pO1xuXHR9XG59XG5cbkJvZHkubWl4SW4oUmVzcG9uc2UucHJvdG90eXBlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVzcG9uc2UucHJvdG90eXBlLCB7XG5cdHVybDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHN0YXR1czogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdG9rOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0cmVkaXJlY3RlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHN0YXR1c1RleHQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRoZWFkZXJzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0Y2xvbmU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc3BvbnNlLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdHZhbHVlOiAnUmVzcG9uc2UnLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5jb25zdCBJTlRFUk5BTFMkMiA9IFN5bWJvbCgnUmVxdWVzdCBpbnRlcm5hbHMnKTtcbmNvbnN0IFVSTCA9IFVybC5VUkwgfHwgd2hhdHdnVXJsLlVSTDtcblxuLy8gZml4IGFuIGlzc3VlIHdoZXJlIFwiZm9ybWF0XCIsIFwicGFyc2VcIiBhcmVuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBwYXJzZV91cmwgPSBVcmwucGFyc2U7XG5jb25zdCBmb3JtYXRfdXJsID0gVXJsLmZvcm1hdDtcblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBgbmV3IFVSTGAgdG8gaGFuZGxlIGFyYml0cmFyeSBVUkxzXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB1cmxTdHJcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVVJMKHVybFN0cikge1xuXHQvKlxuIFx0Q2hlY2sgd2hldGhlciB0aGUgVVJMIGlzIGFic29sdXRlIG9yIG5vdFxuIFx0XHRTY2hlbWU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4xXG4gXHRBYnNvbHV0ZSBVUkw6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNC4zXG4gKi9cblx0aWYgKC9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLmV4ZWModXJsU3RyKSkge1xuXHRcdHVybFN0ciA9IG5ldyBVUkwodXJsU3RyKS50b1N0cmluZygpO1xuXHR9XG5cblx0Ly8gRmFsbGJhY2sgdG8gb2xkIGltcGxlbWVudGF0aW9uIGZvciBhcmJpdHJhcnkgVVJMc1xuXHRyZXR1cm4gcGFyc2VfdXJsKHVybFN0cik7XG59XG5cbmNvbnN0IHN0cmVhbURlc3RydWN0aW9uU3VwcG9ydGVkID0gJ2Rlc3Ryb3knIGluIFN0cmVhbS5SZWFkYWJsZS5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBSZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSAgIE1peGVkICAgaW5wdXRcbiAqIEByZXR1cm4gIEJvb2xlYW5cbiAqL1xuZnVuY3Rpb24gaXNSZXF1ZXN0KGlucHV0KSB7XG5cdHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIHR5cGVvZiBpbnB1dFtJTlRFUk5BTFMkMl0gPT09ICdvYmplY3QnO1xufVxuXG5mdW5jdGlvbiBpc0Fib3J0U2lnbmFsKHNpZ25hbCkge1xuXHRjb25zdCBwcm90byA9IHNpZ25hbCAmJiB0eXBlb2Ygc2lnbmFsID09PSAnb2JqZWN0JyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2lnbmFsKTtcblx0cmV0dXJuICEhKHByb3RvICYmIHByb3RvLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBYm9ydFNpZ25hbCcpO1xufVxuXG4vKipcbiAqIFJlcXVlc3QgY2xhc3NcbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgIGlucHV0ICBVcmwgb3IgUmVxdWVzdCBpbnN0YW5jZVxuICogQHBhcmFtICAgT2JqZWN0ICBpbml0ICAgQ3VzdG9tIG9wdGlvbnNcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuY2xhc3MgUmVxdWVzdCB7XG5cdGNvbnN0cnVjdG9yKGlucHV0KSB7XG5cdFx0bGV0IGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdFx0bGV0IHBhcnNlZFVSTDtcblxuXHRcdC8vIG5vcm1hbGl6ZSBpbnB1dFxuXHRcdGlmICghaXNSZXF1ZXN0KGlucHV0KSkge1xuXHRcdFx0aWYgKGlucHV0ICYmIGlucHV0LmhyZWYpIHtcblx0XHRcdFx0Ly8gaW4gb3JkZXIgdG8gc3VwcG9ydCBOb2RlLmpzJyBVcmwgb2JqZWN0czsgdGhvdWdoIFdIQVRXRydzIFVSTCBvYmplY3RzXG5cdFx0XHRcdC8vIHdpbGwgZmFsbCBpbnRvIHRoaXMgYnJhbmNoIGFsc28gKHNpbmNlIHRoZWlyIGB0b1N0cmluZygpYCB3aWxsIHJldHVyblxuXHRcdFx0XHQvLyBgaHJlZmAgcHJvcGVydHkgYW55d2F5KVxuXHRcdFx0XHRwYXJzZWRVUkwgPSBwYXJzZVVSTChpbnB1dC5ocmVmKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGNvZXJjZSBpbnB1dCB0byBhIHN0cmluZyBiZWZvcmUgYXR0ZW1wdGluZyB0byBwYXJzZVxuXHRcdFx0XHRwYXJzZWRVUkwgPSBwYXJzZVVSTChgJHtpbnB1dH1gKTtcblx0XHRcdH1cblx0XHRcdGlucHV0ID0ge307XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcnNlZFVSTCA9IHBhcnNlVVJMKGlucHV0LnVybCk7XG5cdFx0fVxuXG5cdFx0bGV0IG1ldGhvZCA9IGluaXQubWV0aG9kIHx8IGlucHV0Lm1ldGhvZCB8fCAnR0VUJztcblx0XHRtZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcblxuXHRcdGlmICgoaW5pdC5ib2R5ICE9IG51bGwgfHwgaXNSZXF1ZXN0KGlucHV0KSAmJiBpbnB1dC5ib2R5ICE9PSBudWxsKSAmJiAobWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdIRUFEJykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlcXVlc3Qgd2l0aCBHRVQvSEVBRCBtZXRob2QgY2Fubm90IGhhdmUgYm9keScpO1xuXHRcdH1cblxuXHRcdGxldCBpbnB1dEJvZHkgPSBpbml0LmJvZHkgIT0gbnVsbCA/IGluaXQuYm9keSA6IGlzUmVxdWVzdChpbnB1dCkgJiYgaW5wdXQuYm9keSAhPT0gbnVsbCA/IGNsb25lKGlucHV0KSA6IG51bGw7XG5cblx0XHRCb2R5LmNhbGwodGhpcywgaW5wdXRCb2R5LCB7XG5cdFx0XHR0aW1lb3V0OiBpbml0LnRpbWVvdXQgfHwgaW5wdXQudGltZW91dCB8fCAwLFxuXHRcdFx0c2l6ZTogaW5pdC5zaXplIHx8IGlucHV0LnNpemUgfHwgMFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycyB8fCBpbnB1dC5oZWFkZXJzIHx8IHt9KTtcblxuXHRcdGlmIChpbnB1dEJvZHkgIT0gbnVsbCAmJiAhaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpKSB7XG5cdFx0XHRjb25zdCBjb250ZW50VHlwZSA9IGV4dHJhY3RDb250ZW50VHlwZShpbnB1dEJvZHkpO1xuXHRcdFx0aWYgKGNvbnRlbnRUeXBlKSB7XG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCBjb250ZW50VHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHNpZ25hbCA9IGlzUmVxdWVzdChpbnB1dCkgPyBpbnB1dC5zaWduYWwgOiBudWxsO1xuXHRcdGlmICgnc2lnbmFsJyBpbiBpbml0KSBzaWduYWwgPSBpbml0LnNpZ25hbDtcblxuXHRcdGlmIChzaWduYWwgIT0gbnVsbCAmJiAhaXNBYm9ydFNpZ25hbChzaWduYWwpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzaWduYWwgdG8gYmUgYW4gaW5zdGFuY2VvZiBBYm9ydFNpZ25hbCcpO1xuXHRcdH1cblxuXHRcdHRoaXNbSU5URVJOQUxTJDJdID0ge1xuXHRcdFx0bWV0aG9kLFxuXHRcdFx0cmVkaXJlY3Q6IGluaXQucmVkaXJlY3QgfHwgaW5wdXQucmVkaXJlY3QgfHwgJ2ZvbGxvdycsXG5cdFx0XHRoZWFkZXJzLFxuXHRcdFx0cGFyc2VkVVJMLFxuXHRcdFx0c2lnbmFsXG5cdFx0fTtcblxuXHRcdC8vIG5vZGUtZmV0Y2gtb25seSBvcHRpb25zXG5cdFx0dGhpcy5mb2xsb3cgPSBpbml0LmZvbGxvdyAhPT0gdW5kZWZpbmVkID8gaW5pdC5mb2xsb3cgOiBpbnB1dC5mb2xsb3cgIT09IHVuZGVmaW5lZCA/IGlucHV0LmZvbGxvdyA6IDIwO1xuXHRcdHRoaXMuY29tcHJlc3MgPSBpbml0LmNvbXByZXNzICE9PSB1bmRlZmluZWQgPyBpbml0LmNvbXByZXNzIDogaW5wdXQuY29tcHJlc3MgIT09IHVuZGVmaW5lZCA/IGlucHV0LmNvbXByZXNzIDogdHJ1ZTtcblx0XHR0aGlzLmNvdW50ZXIgPSBpbml0LmNvdW50ZXIgfHwgaW5wdXQuY291bnRlciB8fCAwO1xuXHRcdHRoaXMuYWdlbnQgPSBpbml0LmFnZW50IHx8IGlucHV0LmFnZW50O1xuXHR9XG5cblx0Z2V0IG1ldGhvZCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0ubWV0aG9kO1xuXHR9XG5cblx0Z2V0IHVybCgpIHtcblx0XHRyZXR1cm4gZm9ybWF0X3VybCh0aGlzW0lOVEVSTkFMUyQyXS5wYXJzZWRVUkwpO1xuXHR9XG5cblx0Z2V0IGhlYWRlcnMoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDJdLmhlYWRlcnM7XG5cdH1cblxuXHRnZXQgcmVkaXJlY3QoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDJdLnJlZGlyZWN0O1xuXHR9XG5cblx0Z2V0IHNpZ25hbCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0uc2lnbmFsO1xuXHR9XG5cblx0LyoqXG4gICogQ2xvbmUgdGhpcyByZXF1ZXN0XG4gICpcbiAgKiBAcmV0dXJuICBSZXF1ZXN0XG4gICovXG5cdGNsb25lKCkge1xuXHRcdHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKTtcblx0fVxufVxuXG5Cb2R5Lm1peEluKFJlcXVlc3QucHJvdG90eXBlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlcXVlc3QucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcblx0dmFsdWU6ICdSZXF1ZXN0Jyxcblx0d3JpdGFibGU6IGZhbHNlLFxuXHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0Y29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVxdWVzdC5wcm90b3R5cGUsIHtcblx0bWV0aG9kOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0dXJsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0aGVhZGVyczogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHJlZGlyZWN0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0Y2xvbmU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRzaWduYWw6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgUmVxdWVzdCB0byBOb2RlLmpzIGh0dHAgcmVxdWVzdCBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAgIFJlcXVlc3QgIEEgUmVxdWVzdCBpbnN0YW5jZVxuICogQHJldHVybiAgT2JqZWN0ICAgVGhlIG9wdGlvbnMgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBodHRwLnJlcXVlc3RcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZVJlcXVlc3RPcHRpb25zKHJlcXVlc3QpIHtcblx0Y29uc3QgcGFyc2VkVVJMID0gcmVxdWVzdFtJTlRFUk5BTFMkMl0ucGFyc2VkVVJMO1xuXHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVxdWVzdFtJTlRFUk5BTFMkMl0uaGVhZGVycyk7XG5cblx0Ly8gZmV0Y2ggc3RlcCAxLjNcblx0aWYgKCFoZWFkZXJzLmhhcygnQWNjZXB0JykpIHtcblx0XHRoZWFkZXJzLnNldCgnQWNjZXB0JywgJyovKicpO1xuXHR9XG5cblx0Ly8gQmFzaWMgZmV0Y2hcblx0aWYgKCFwYXJzZWRVUkwucHJvdG9jb2wgfHwgIXBhcnNlZFVSTC5ob3N0bmFtZSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09ubHkgYWJzb2x1dGUgVVJMcyBhcmUgc3VwcG9ydGVkJyk7XG5cdH1cblxuXHRpZiAoIS9eaHR0cHM/OiQvLnRlc3QocGFyc2VkVVJMLnByb3RvY29sKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09ubHkgSFRUUChTKSBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZCcpO1xuXHR9XG5cblx0aWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3QuYm9keSBpbnN0YW5jZW9mIFN0cmVhbS5SZWFkYWJsZSAmJiAhc3RyZWFtRGVzdHJ1Y3Rpb25TdXBwb3J0ZWQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxhdGlvbiBvZiBzdHJlYW1lZCByZXF1ZXN0cyB3aXRoIEFib3J0U2lnbmFsIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbm9kZSA8IDgnKTtcblx0fVxuXG5cdC8vIEhUVFAtbmV0d29yay1vci1jYWNoZSBmZXRjaCBzdGVwcyAyLjQtMi43XG5cdGxldCBjb250ZW50TGVuZ3RoVmFsdWUgPSBudWxsO1xuXHRpZiAocmVxdWVzdC5ib2R5ID09IG51bGwgJiYgL14oUE9TVHxQVVQpJC9pLnRlc3QocmVxdWVzdC5tZXRob2QpKSB7XG5cdFx0Y29udGVudExlbmd0aFZhbHVlID0gJzAnO1xuXHR9XG5cdGlmIChyZXF1ZXN0LmJvZHkgIT0gbnVsbCkge1xuXHRcdGNvbnN0IHRvdGFsQnl0ZXMgPSBnZXRUb3RhbEJ5dGVzKHJlcXVlc3QpO1xuXHRcdGlmICh0eXBlb2YgdG90YWxCeXRlcyA9PT0gJ251bWJlcicpIHtcblx0XHRcdGNvbnRlbnRMZW5ndGhWYWx1ZSA9IFN0cmluZyh0b3RhbEJ5dGVzKTtcblx0XHR9XG5cdH1cblx0aWYgKGNvbnRlbnRMZW5ndGhWYWx1ZSkge1xuXHRcdGhlYWRlcnMuc2V0KCdDb250ZW50LUxlbmd0aCcsIGNvbnRlbnRMZW5ndGhWYWx1ZSk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggc3RlcCAyLjExXG5cdGlmICghaGVhZGVycy5oYXMoJ1VzZXItQWdlbnQnKSkge1xuXHRcdGhlYWRlcnMuc2V0KCdVc2VyLUFnZW50JywgJ25vZGUtZmV0Y2gvMS4wICgraHR0cHM6Ly9naXRodWIuY29tL2JpdGlubi9ub2RlLWZldGNoKScpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXAgMi4xNVxuXHRpZiAocmVxdWVzdC5jb21wcmVzcyAmJiAhaGVhZGVycy5oYXMoJ0FjY2VwdC1FbmNvZGluZycpKSB7XG5cdFx0aGVhZGVycy5zZXQoJ0FjY2VwdC1FbmNvZGluZycsICdnemlwLGRlZmxhdGUnKTtcblx0fVxuXG5cdGxldCBhZ2VudCA9IHJlcXVlc3QuYWdlbnQ7XG5cdGlmICh0eXBlb2YgYWdlbnQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRhZ2VudCA9IGFnZW50KHBhcnNlZFVSTCk7XG5cdH1cblxuXHRpZiAoIWhlYWRlcnMuaGFzKCdDb25uZWN0aW9uJykgJiYgIWFnZW50KSB7XG5cdFx0aGVhZGVycy5zZXQoJ0Nvbm5lY3Rpb24nLCAnY2xvc2UnKTtcblx0fVxuXG5cdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDQuMlxuXHQvLyBjaHVua2VkIGVuY29kaW5nIGlzIGhhbmRsZWQgYnkgTm9kZS5qc1xuXG5cdHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwYXJzZWRVUkwsIHtcblx0XHRtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuXHRcdGhlYWRlcnM6IGV4cG9ydE5vZGVDb21wYXRpYmxlSGVhZGVycyhoZWFkZXJzKSxcblx0XHRhZ2VudFxuXHR9KTtcbn1cblxuLyoqXG4gKiBhYm9ydC1lcnJvci5qc1xuICpcbiAqIEFib3J0RXJyb3IgaW50ZXJmYWNlIGZvciBjYW5jZWxsZWQgcmVxdWVzdHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBBYm9ydEVycm9yIGluc3RhbmNlXG4gKlxuICogQHBhcmFtICAgU3RyaW5nICAgICAgbWVzc2FnZSAgICAgIEVycm9yIG1lc3NhZ2UgZm9yIGh1bWFuXG4gKiBAcmV0dXJuICBBYm9ydEVycm9yXG4gKi9cbmZ1bmN0aW9uIEFib3J0RXJyb3IobWVzc2FnZSkge1xuICBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIHRoaXMudHlwZSA9ICdhYm9ydGVkJztcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblxuICAvLyBoaWRlIGN1c3RvbSBlcnJvciBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGZyb20gZW5kLXVzZXJzXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xufVxuXG5BYm9ydEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbkFib3J0RXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWJvcnRFcnJvcjtcbkFib3J0RXJyb3IucHJvdG90eXBlLm5hbWUgPSAnQWJvcnRFcnJvcic7XG5cbmNvbnN0IFVSTCQxID0gVXJsLlVSTCB8fCB3aGF0d2dVcmwuVVJMO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJQYXNzVGhyb3VnaFwiLCBcInJlc29sdmVcIiBhcmVuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBQYXNzVGhyb3VnaCQxID0gU3RyZWFtLlBhc3NUaHJvdWdoO1xuXG5jb25zdCBpc0RvbWFpbk9yU3ViZG9tYWluID0gZnVuY3Rpb24gaXNEb21haW5PclN1YmRvbWFpbihkZXN0aW5hdGlvbiwgb3JpZ2luYWwpIHtcblx0Y29uc3Qgb3JpZyA9IG5ldyBVUkwkMShvcmlnaW5hbCkuaG9zdG5hbWU7XG5cdGNvbnN0IGRlc3QgPSBuZXcgVVJMJDEoZGVzdGluYXRpb24pLmhvc3RuYW1lO1xuXG5cdHJldHVybiBvcmlnID09PSBkZXN0IHx8IG9yaWdbb3JpZy5sZW5ndGggLSBkZXN0Lmxlbmd0aCAtIDFdID09PSAnLicgJiYgb3JpZy5lbmRzV2l0aChkZXN0KTtcbn07XG5cbi8qKlxuICogRmV0Y2ggZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgICB1cmwgICBBYnNvbHV0ZSB1cmwgb3IgUmVxdWVzdCBpbnN0YW5jZVxuICogQHBhcmFtICAgT2JqZWN0ICAgb3B0cyAgRmV0Y2ggb3B0aW9uc1xuICogQHJldHVybiAgUHJvbWlzZVxuICovXG5mdW5jdGlvbiBmZXRjaCh1cmwsIG9wdHMpIHtcblxuXHQvLyBhbGxvdyBjdXN0b20gcHJvbWlzZVxuXHRpZiAoIWZldGNoLlByb21pc2UpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ25hdGl2ZSBwcm9taXNlIG1pc3NpbmcsIHNldCBmZXRjaC5Qcm9taXNlIHRvIHlvdXIgZmF2b3JpdGUgYWx0ZXJuYXRpdmUnKTtcblx0fVxuXG5cdEJvZHkuUHJvbWlzZSA9IGZldGNoLlByb21pc2U7XG5cblx0Ly8gd3JhcCBodHRwLnJlcXVlc3QgaW50byBmZXRjaFxuXHRyZXR1cm4gbmV3IGZldGNoLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdC8vIGJ1aWxkIHJlcXVlc3Qgb2JqZWN0XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwgb3B0cyk7XG5cdFx0Y29uc3Qgb3B0aW9ucyA9IGdldE5vZGVSZXF1ZXN0T3B0aW9ucyhyZXF1ZXN0KTtcblxuXHRcdGNvbnN0IHNlbmQgPSAob3B0aW9ucy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHApLnJlcXVlc3Q7XG5cdFx0Y29uc3Qgc2lnbmFsID0gcmVxdWVzdC5zaWduYWw7XG5cblx0XHRsZXQgcmVzcG9uc2UgPSBudWxsO1xuXG5cdFx0Y29uc3QgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcblx0XHRcdGxldCBlcnJvciA9IG5ldyBBYm9ydEVycm9yKCdUaGUgdXNlciBhYm9ydGVkIGEgcmVxdWVzdC4nKTtcblx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRpZiAocmVxdWVzdC5ib2R5ICYmIHJlcXVlc3QuYm9keSBpbnN0YW5jZW9mIFN0cmVhbS5SZWFkYWJsZSkge1xuXHRcdFx0XHRyZXF1ZXN0LmJvZHkuZGVzdHJveShlcnJvcik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5ib2R5KSByZXR1cm47XG5cdFx0XHRyZXNwb25zZS5ib2R5LmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuXHRcdH07XG5cblx0XHRpZiAoc2lnbmFsICYmIHNpZ25hbC5hYm9ydGVkKSB7XG5cdFx0XHRhYm9ydCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFib3J0QW5kRmluYWxpemUgPSBmdW5jdGlvbiBhYm9ydEFuZEZpbmFsaXplKCkge1xuXHRcdFx0YWJvcnQoKTtcblx0XHRcdGZpbmFsaXplKCk7XG5cdFx0fTtcblxuXHRcdC8vIHNlbmQgcmVxdWVzdFxuXHRcdGNvbnN0IHJlcSA9IHNlbmQob3B0aW9ucyk7XG5cdFx0bGV0IHJlcVRpbWVvdXQ7XG5cblx0XHRpZiAoc2lnbmFsKSB7XG5cdFx0XHRzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmaW5hbGl6ZSgpIHtcblx0XHRcdHJlcS5hYm9ydCgpO1xuXHRcdFx0aWYgKHNpZ25hbCkgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbmRGaW5hbGl6ZSk7XG5cdFx0XHRjbGVhclRpbWVvdXQocmVxVGltZW91dCk7XG5cdFx0fVxuXG5cdFx0aWYgKHJlcXVlc3QudGltZW91dCkge1xuXHRcdFx0cmVxLm9uY2UoJ3NvY2tldCcsIGZ1bmN0aW9uIChzb2NrZXQpIHtcblx0XHRcdFx0cmVxVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgbmV0d29yayB0aW1lb3V0IGF0OiAke3JlcXVlc3QudXJsfWAsICdyZXF1ZXN0LXRpbWVvdXQnKSk7XG5cdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0fSwgcmVxdWVzdC50aW1lb3V0KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHJlcXVlc3QgdG8gJHtyZXF1ZXN0LnVybH0gZmFpbGVkLCByZWFzb246ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycikpO1xuXHRcdFx0ZmluYWxpemUoKTtcblx0XHR9KTtcblxuXHRcdHJlcS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQocmVxVGltZW91dCk7XG5cblx0XHRcdGNvbnN0IGhlYWRlcnMgPSBjcmVhdGVIZWFkZXJzTGVuaWVudChyZXMuaGVhZGVycyk7XG5cblx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1XG5cdFx0XHRpZiAoZmV0Y2guaXNSZWRpcmVjdChyZXMuc3RhdHVzQ29kZSkpIHtcblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuMlxuXHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IGhlYWRlcnMuZ2V0KCdMb2NhdGlvbicpO1xuXG5cdFx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1LjNcblx0XHRcdFx0bGV0IGxvY2F0aW9uVVJMID0gbnVsbDtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRsb2NhdGlvblVSTCA9IGxvY2F0aW9uID09PSBudWxsID8gbnVsbCA6IG5ldyBVUkwkMShsb2NhdGlvbiwgcmVxdWVzdC51cmwpLnRvU3RyaW5nKCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdC8vIGVycm9yIGhlcmUgY2FuIG9ubHkgYmUgaW52YWxpZCBVUkwgaW4gTG9jYXRpb246IGhlYWRlclxuXHRcdFx0XHRcdC8vIGRvIG5vdCB0aHJvdyB3aGVuIG9wdGlvbnMucmVkaXJlY3QgPT0gbWFudWFsXG5cdFx0XHRcdFx0Ly8gbGV0IHRoZSB1c2VyIGV4dHJhY3QgdGhlIGVycm9ybmVvdXMgcmVkaXJlY3QgVVJMXG5cdFx0XHRcdFx0aWYgKHJlcXVlc3QucmVkaXJlY3QgIT09ICdtYW51YWwnKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHVyaSByZXF1ZXN0ZWQgcmVzcG9uZHMgd2l0aCBhbiBpbnZhbGlkIHJlZGlyZWN0IFVSTDogJHtsb2NhdGlvbn1gLCAnaW52YWxpZC1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuNVxuXHRcdFx0XHRzd2l0Y2ggKHJlcXVlc3QucmVkaXJlY3QpIHtcblx0XHRcdFx0XHRjYXNlICdlcnJvcic6XG5cdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHVyaSByZXF1ZXN0ZWQgcmVzcG9uZHMgd2l0aCBhIHJlZGlyZWN0LCByZWRpcmVjdCBtb2RlIGlzIHNldCB0byBlcnJvcjogJHtyZXF1ZXN0LnVybH1gLCAnbm8tcmVkaXJlY3QnKSk7XG5cdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdGNhc2UgJ21hbnVhbCc6XG5cdFx0XHRcdFx0XHQvLyBub2RlLWZldGNoLXNwZWNpZmljIHN0ZXA6IG1ha2UgbWFudWFsIHJlZGlyZWN0IGEgYml0IGVhc2llciB0byB1c2UgYnkgc2V0dGluZyB0aGUgTG9jYXRpb24gaGVhZGVyIHZhbHVlIHRvIHRoZSByZXNvbHZlZCBVUkwuXG5cdFx0XHRcdFx0XHRpZiAobG9jYXRpb25VUkwgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0Ly8gaGFuZGxlIGNvcnJ1cHRlZCBoZWFkZXJcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRoZWFkZXJzLnNldCgnTG9jYXRpb24nLCBsb2NhdGlvblVSTCk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBub2RlanMgc2VydmVyIHByZXZlbnQgaW52YWxpZCByZXNwb25zZSBoZWFkZXJzLCB3ZSBjYW4ndCB0ZXN0IHRoaXMgdGhyb3VnaCBub3JtYWwgcmVxdWVzdFxuXHRcdFx0XHRcdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb2xsb3cnOlxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDJcblx0XHRcdFx0XHRcdGlmIChsb2NhdGlvblVSTCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDVcblx0XHRcdFx0XHRcdGlmIChyZXF1ZXN0LmNvdW50ZXIgPj0gcmVxdWVzdC5mb2xsb3cpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBtYXhpbXVtIHJlZGlyZWN0IHJlYWNoZWQgYXQ6ICR7cmVxdWVzdC51cmx9YCwgJ21heC1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgNiAoY291bnRlciBpbmNyZW1lbnQpXG5cdFx0XHRcdFx0XHQvLyBDcmVhdGUgYSBuZXcgUmVxdWVzdCBvYmplY3QuXG5cdFx0XHRcdFx0XHRjb25zdCByZXF1ZXN0T3B0cyA9IHtcblx0XHRcdFx0XHRcdFx0aGVhZGVyczogbmV3IEhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKSxcblx0XHRcdFx0XHRcdFx0Zm9sbG93OiByZXF1ZXN0LmZvbGxvdyxcblx0XHRcdFx0XHRcdFx0Y291bnRlcjogcmVxdWVzdC5jb3VudGVyICsgMSxcblx0XHRcdFx0XHRcdFx0YWdlbnQ6IHJlcXVlc3QuYWdlbnQsXG5cdFx0XHRcdFx0XHRcdGNvbXByZXNzOiByZXF1ZXN0LmNvbXByZXNzLFxuXHRcdFx0XHRcdFx0XHRtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuXHRcdFx0XHRcdFx0XHRib2R5OiByZXF1ZXN0LmJvZHksXG5cdFx0XHRcdFx0XHRcdHNpZ25hbDogcmVxdWVzdC5zaWduYWwsXG5cdFx0XHRcdFx0XHRcdHRpbWVvdXQ6IHJlcXVlc3QudGltZW91dCxcblx0XHRcdFx0XHRcdFx0c2l6ZTogcmVxdWVzdC5zaXplXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRpZiAoIWlzRG9tYWluT3JTdWJkb21haW4ocmVxdWVzdC51cmwsIGxvY2F0aW9uVVJMKSkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IG5hbWUgb2YgWydhdXRob3JpemF0aW9uJywgJ3d3dy1hdXRoZW50aWNhdGUnLCAnY29va2llJywgJ2Nvb2tpZTInXSkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRzLmhlYWRlcnMuZGVsZXRlKG5hbWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA5XG5cdFx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgIT09IDMwMyAmJiByZXF1ZXN0LmJvZHkgJiYgZ2V0VG90YWxCeXRlcyhyZXF1ZXN0KSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoJ0Nhbm5vdCBmb2xsb3cgcmVkaXJlY3Qgd2l0aCBib2R5IGJlaW5nIGEgcmVhZGFibGUgc3RyZWFtJywgJ3Vuc3VwcG9ydGVkLXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxMVxuXHRcdFx0XHRcdFx0aWYgKHJlcy5zdGF0dXNDb2RlID09PSAzMDMgfHwgKHJlcy5zdGF0dXNDb2RlID09PSAzMDEgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDMwMikgJiYgcmVxdWVzdC5tZXRob2QgPT09ICdQT1NUJykge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0cy5tZXRob2QgPSAnR0VUJztcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdHMuYm9keSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdHMuaGVhZGVycy5kZWxldGUoJ2NvbnRlbnQtbGVuZ3RoJyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxNVxuXHRcdFx0XHRcdFx0cmVzb2x2ZShmZXRjaChuZXcgUmVxdWVzdChsb2NhdGlvblVSTCwgcmVxdWVzdE9wdHMpKSk7XG5cdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByZXBhcmUgcmVzcG9uc2Vcblx0XHRcdHJlcy5vbmNlKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChzaWduYWwpIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QW5kRmluYWxpemUpO1xuXHRcdFx0fSk7XG5cdFx0XHRsZXQgYm9keSA9IHJlcy5waXBlKG5ldyBQYXNzVGhyb3VnaCQxKCkpO1xuXG5cdFx0XHRjb25zdCByZXNwb25zZV9vcHRpb25zID0ge1xuXHRcdFx0XHR1cmw6IHJlcXVlc3QudXJsLFxuXHRcdFx0XHRzdGF0dXM6IHJlcy5zdGF0dXNDb2RlLFxuXHRcdFx0XHRzdGF0dXNUZXh0OiByZXMuc3RhdHVzTWVzc2FnZSxcblx0XHRcdFx0aGVhZGVyczogaGVhZGVycyxcblx0XHRcdFx0c2l6ZTogcmVxdWVzdC5zaXplLFxuXHRcdFx0XHR0aW1lb3V0OiByZXF1ZXN0LnRpbWVvdXQsXG5cdFx0XHRcdGNvdW50ZXI6IHJlcXVlc3QuY291bnRlclxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gSFRUUC1uZXR3b3JrIGZldGNoIHN0ZXAgMTIuMS4xLjNcblx0XHRcdGNvbnN0IGNvZGluZ3MgPSBoZWFkZXJzLmdldCgnQ29udGVudC1FbmNvZGluZycpO1xuXG5cdFx0XHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCAxMi4xLjEuNDogaGFuZGxlIGNvbnRlbnQgY29kaW5nc1xuXG5cdFx0XHQvLyBpbiBmb2xsb3dpbmcgc2NlbmFyaW9zIHdlIGlnbm9yZSBjb21wcmVzc2lvbiBzdXBwb3J0XG5cdFx0XHQvLyAxLiBjb21wcmVzc2lvbiBzdXBwb3J0IGlzIGRpc2FibGVkXG5cdFx0XHQvLyAyLiBIRUFEIHJlcXVlc3Rcblx0XHRcdC8vIDMuIG5vIENvbnRlbnQtRW5jb2RpbmcgaGVhZGVyXG5cdFx0XHQvLyA0LiBubyBjb250ZW50IHJlc3BvbnNlICgyMDQpXG5cdFx0XHQvLyA1LiBjb250ZW50IG5vdCBtb2RpZmllZCByZXNwb25zZSAoMzA0KVxuXHRcdFx0aWYgKCFyZXF1ZXN0LmNvbXByZXNzIHx8IHJlcXVlc3QubWV0aG9kID09PSAnSEVBRCcgfHwgY29kaW5ncyA9PT0gbnVsbCB8fCByZXMuc3RhdHVzQ29kZSA9PT0gMjA0IHx8IHJlcy5zdGF0dXNDb2RlID09PSAzMDQpIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2Vfb3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBOb2RlIHY2K1xuXHRcdFx0Ly8gQmUgbGVzcyBzdHJpY3Qgd2hlbiBkZWNvZGluZyBjb21wcmVzc2VkIHJlc3BvbnNlcywgc2luY2Ugc29tZXRpbWVzXG5cdFx0XHQvLyBzZXJ2ZXJzIHNlbmQgc2xpZ2h0bHkgaW52YWxpZCByZXNwb25zZXMgdGhhdCBhcmUgc3RpbGwgYWNjZXB0ZWRcblx0XHRcdC8vIGJ5IGNvbW1vbiBicm93c2Vycy5cblx0XHRcdC8vIEFsd2F5cyB1c2luZyBaX1NZTkNfRkxVU0ggaXMgd2hhdCBjVVJMIGRvZXMuXG5cdFx0XHRjb25zdCB6bGliT3B0aW9ucyA9IHtcblx0XHRcdFx0Zmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNILFxuXHRcdFx0XHRmaW5pc2hGbHVzaDogemxpYi5aX1NZTkNfRkxVU0hcblx0XHRcdH07XG5cblx0XHRcdC8vIGZvciBnemlwXG5cdFx0XHRpZiAoY29kaW5ncyA9PSAnZ3ppcCcgfHwgY29kaW5ncyA9PSAneC1nemlwJykge1xuXHRcdFx0XHRib2R5ID0gYm9keS5waXBlKHpsaWIuY3JlYXRlR3VuemlwKHpsaWJPcHRpb25zKSk7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlX29wdGlvbnMpO1xuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb3IgZGVmbGF0ZVxuXHRcdFx0aWYgKGNvZGluZ3MgPT0gJ2RlZmxhdGUnIHx8IGNvZGluZ3MgPT0gJ3gtZGVmbGF0ZScpIHtcblx0XHRcdFx0Ly8gaGFuZGxlIHRoZSBpbmZhbW91cyByYXcgZGVmbGF0ZSByZXNwb25zZSBmcm9tIG9sZCBzZXJ2ZXJzXG5cdFx0XHRcdC8vIGEgaGFjayBmb3Igb2xkIElJUyBhbmQgQXBhY2hlIHNlcnZlcnNcblx0XHRcdFx0Y29uc3QgcmF3ID0gcmVzLnBpcGUobmV3IFBhc3NUaHJvdWdoJDEoKSk7XG5cdFx0XHRcdHJhdy5vbmNlKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRcdFx0Ly8gc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzc1MTk4Mjhcblx0XHRcdFx0XHRpZiAoKGNodW5rWzBdICYgMHgwRikgPT09IDB4MDgpIHtcblx0XHRcdFx0XHRcdGJvZHkgPSBib2R5LnBpcGUoemxpYi5jcmVhdGVJbmZsYXRlKCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRib2R5ID0gYm9keS5waXBlKHpsaWIuY3JlYXRlSW5mbGF0ZVJhdygpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2Vfb3B0aW9ucyk7XG5cdFx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGZvciBiclxuXHRcdFx0aWYgKGNvZGluZ3MgPT0gJ2JyJyAmJiB0eXBlb2YgemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGJvZHkgPSBib2R5LnBpcGUoemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzKCkpO1xuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZV9vcHRpb25zKTtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gb3RoZXJ3aXNlLCB1c2UgcmVzcG9uc2UgYXMtaXNcblx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlX29wdGlvbnMpO1xuXHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSk7XG5cblx0XHR3cml0ZVRvU3RyZWFtKHJlcSwgcmVxdWVzdCk7XG5cdH0pO1xufVxuLyoqXG4gKiBSZWRpcmVjdCBjb2RlIG1hdGNoaW5nXG4gKlxuICogQHBhcmFtICAgTnVtYmVyICAgY29kZSAgU3RhdHVzIGNvZGVcbiAqIEByZXR1cm4gIEJvb2xlYW5cbiAqL1xuZmV0Y2guaXNSZWRpcmVjdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG5cdHJldHVybiBjb2RlID09PSAzMDEgfHwgY29kZSA9PT0gMzAyIHx8IGNvZGUgPT09IDMwMyB8fCBjb2RlID09PSAzMDcgfHwgY29kZSA9PT0gMzA4O1xufTtcblxuLy8gZXhwb3NlIFByb21pc2VcbmZldGNoLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcblxuZXhwb3J0IGRlZmF1bHQgZmV0Y2g7XG5leHBvcnQgeyBIZWFkZXJzLCBSZXF1ZXN0LCBSZXNwb25zZSwgRmV0Y2hFcnJvciB9O1xuIiwiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCByZWFsRmV0Y2ggPSBub2RlRmV0Y2guZGVmYXVsdCB8fCBub2RlRmV0Y2hcblxuY29uc3QgZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIC8vIFN1cHBvcnQgc2NoZW1hbGVzcyBVUklzIG9uIHRoZSBzZXJ2ZXIgZm9yIHBhcml0eSB3aXRoIHRoZSBicm93c2VyLlxuICAvLyBFeDogLy9naXRodWIuY29tLyAtPiBodHRwczovL2dpdGh1Yi5jb20vXG4gIGlmICgvXlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gJ2h0dHBzOicgKyB1cmxcbiAgfVxuICByZXR1cm4gcmVhbEZldGNoLmNhbGwodGhpcywgdXJsLCBvcHRpb25zKVxufVxuXG5mZXRjaC5wb255ZmlsbCA9IHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmV0Y2hcbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaFxuZXhwb3J0cy5IZWFkZXJzID0gbm9kZUZldGNoLkhlYWRlcnNcbmV4cG9ydHMuUmVxdWVzdCA9IG5vZGVGZXRjaC5SZXF1ZXN0XG5leHBvcnRzLlJlc3BvbnNlID0gbm9kZUZldGNoLlJlc3BvbnNlXG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmRlZmF1bHQgPSBmZXRjaFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBkaWdlc3QgPSAoYWxnb3JpdGhtLCBkYXRhKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlSGFzaCkoYWxnb3JpdGhtKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG5leHBvcnRzLmRlZmF1bHQgPSBkaWdlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0S2RmID0gZXhwb3J0cy5sZW5ndGhBbmRJbnB1dCA9IGV4cG9ydHMudWludDMyYmUgPSBleHBvcnRzLnVpbnQ2NGJlID0gZXhwb3J0cy5wMnMgPSBleHBvcnRzLmNvbmNhdCA9IGV4cG9ydHMuZGVjb2RlciA9IGV4cG9ydHMuZW5jb2RlciA9IHZvaWQgMDtcbmNvbnN0IGRpZ2VzdF9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvZGlnZXN0LmpzXCIpO1xuZXhwb3J0cy5lbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5leHBvcnRzLmRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbmNvbnN0IE1BWF9JTlQzMiA9IDIgKiogMzI7XG5mdW5jdGlvbiBjb25jYXQoLi4uYnVmZmVycykge1xuICAgIGNvbnN0IHNpemUgPSBidWZmZXJzLnJlZHVjZSgoYWNjLCB7IGxlbmd0aCB9KSA9PiBhY2MgKyBsZW5ndGgsIDApO1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIGxldCBpID0gMDtcbiAgICBidWZmZXJzLmZvckVhY2goKGJ1ZmZlcikgPT4ge1xuICAgICAgICBidWYuc2V0KGJ1ZmZlciwgaSk7XG4gICAgICAgIGkgKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG5mdW5jdGlvbiBwMnMoYWxnLCBwMnNJbnB1dCkge1xuICAgIHJldHVybiBjb25jYXQoZXhwb3J0cy5lbmNvZGVyLmVuY29kZShhbGcpLCBuZXcgVWludDhBcnJheShbMF0pLCBwMnNJbnB1dCk7XG59XG5leHBvcnRzLnAycyA9IHAycztcbmZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnVmLCB2YWx1ZSwgb2Zmc2V0KSB7XG4gICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+PSBNQVhfSU5UMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHZhbHVlIG11c3QgYmUgPj0gMCBhbmQgPD0gJHtNQVhfSU5UMzIgLSAxfS4gUmVjZWl2ZWQgJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgYnVmLnNldChbdmFsdWUgPj4+IDI0LCB2YWx1ZSA+Pj4gMTYsIHZhbHVlID4+PiA4LCB2YWx1ZSAmIDB4ZmZdLCBvZmZzZXQpO1xufVxuZnVuY3Rpb24gdWludDY0YmUodmFsdWUpIHtcbiAgICBjb25zdCBoaWdoID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1BWF9JTlQzMik7XG4gICAgY29uc3QgbG93ID0gdmFsdWUgJSBNQVhfSU5UMzI7XG4gICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGhpZ2gsIDApO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCBsb3csIDQpO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnRzLnVpbnQ2NGJlID0gdWludDY0YmU7XG5mdW5jdGlvbiB1aW50MzJiZSh2YWx1ZSkge1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCB2YWx1ZSk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMudWludDMyYmUgPSB1aW50MzJiZTtcbmZ1bmN0aW9uIGxlbmd0aEFuZElucHV0KGlucHV0KSB7XG4gICAgcmV0dXJuIGNvbmNhdCh1aW50MzJiZShpbnB1dC5sZW5ndGgpLCBpbnB1dCk7XG59XG5leHBvcnRzLmxlbmd0aEFuZElucHV0ID0gbGVuZ3RoQW5kSW5wdXQ7XG5hc3luYyBmdW5jdGlvbiBjb25jYXRLZGYoc2VjcmV0LCBiaXRzLCB2YWx1ZSkge1xuICAgIGNvbnN0IGl0ZXJhdGlvbnMgPSBNYXRoLmNlaWwoKGJpdHMgPj4gMykgLyAzMik7XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoaXRlcmF0aW9ucyAqIDMyKTtcbiAgICBmb3IgKGxldCBpdGVyID0gMDsgaXRlciA8IGl0ZXJhdGlvbnM7IGl0ZXIrKykge1xuICAgICAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg0ICsgc2VjcmV0Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIGJ1Zi5zZXQodWludDMyYmUoaXRlciArIDEpKTtcbiAgICAgICAgYnVmLnNldChzZWNyZXQsIDQpO1xuICAgICAgICBidWYuc2V0KHZhbHVlLCA0ICsgc2VjcmV0Lmxlbmd0aCk7XG4gICAgICAgIHJlcy5zZXQoYXdhaXQgKDAsIGRpZ2VzdF9qc18xLmRlZmF1bHQpKCdzaGEyNTYnLCBidWYpLCBpdGVyICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIGJpdHMgPj4gMyk7XG59XG5leHBvcnRzLmNvbmNhdEtkZiA9IGNvbmNhdEtkZjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuZW5jb2RlQmFzZTY0ID0gZXhwb3J0cy5kZWNvZGVCYXNlNjQgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xubGV0IGVuY29kZTtcbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZnVuY3Rpb24gbm9ybWFsaXplKGlucHV0KSB7XG4gICAgbGV0IGVuY29kZWQgPSBpbnB1dDtcbiAgICBpZiAoZW5jb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgZW5jb2RlZCA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGVuY29kZWQpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbmlmIChidWZmZXJfMS5CdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcbiAgICBleHBvcnRzLmVuY29kZSA9IGVuY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20oaW5wdXQpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcbn1cbmVsc2Uge1xuICAgIGV4cG9ydHMuZW5jb2RlID0gZW5jb2RlID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCkudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufVxuY29uc3QgZGVjb2RlQmFzZTY0ID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGVCYXNlNjQgPSBkZWNvZGVCYXNlNjQ7XG5jb25zdCBlbmNvZGVCYXNlNjQgPSAoaW5wdXQpID0+IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGlucHV0KS50b1N0cmluZygnYmFzZTY0Jyk7XG5leHBvcnRzLmVuY29kZUJhc2U2NCA9IGVuY29kZUJhc2U2NDtcbmNvbnN0IGRlY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20obm9ybWFsaXplKGlucHV0KSwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkID0gZXhwb3J0cy5KV0tTVGltZW91dCA9IGV4cG9ydHMuSldLU011bHRpcGxlTWF0Y2hpbmdLZXlzID0gZXhwb3J0cy5KV0tTTm9NYXRjaGluZ0tleSA9IGV4cG9ydHMuSldLU0ludmFsaWQgPSBleHBvcnRzLkpXS0ludmFsaWQgPSBleHBvcnRzLkpXVEludmFsaWQgPSBleHBvcnRzLkpXU0ludmFsaWQgPSBleHBvcnRzLkpXRUludmFsaWQgPSBleHBvcnRzLkpXRURlY3J5cHRpb25GYWlsZWQgPSBleHBvcnRzLkpPU0VOb3RTdXBwb3J0ZWQgPSBleHBvcnRzLkpPU0VBbGdOb3RBbGxvd2VkID0gZXhwb3J0cy5KV1RFeHBpcmVkID0gZXhwb3J0cy5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQgPSBleHBvcnRzLkpPU0VFcnJvciA9IHZvaWQgMDtcbmNsYXNzIEpPU0VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSk9TRV9HRU5FUklDJztcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICAoX2EgPSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoRXJyb3IsIHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pPU0VfR0VORVJJQyc7XG4gICAgfVxufVxuZXhwb3J0cy5KT1NFRXJyb3IgPSBKT1NFRXJyb3I7XG5jbGFzcyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNsYWltID0gJ3Vuc3BlY2lmaWVkJywgcmVhc29uID0gJ3Vuc3BlY2lmaWVkJykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1RfQ0xBSU1fVkFMSURBVElPTl9GQUlMRUQnO1xuICAgICAgICB0aGlzLmNsYWltID0gY2xhaW07XG4gICAgICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXVF9DTEFJTV9WQUxJREFUSU9OX0ZBSUxFRCc7XG4gICAgfVxufVxuZXhwb3J0cy5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQgPSBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQ7XG5jbGFzcyBKV1RFeHBpcmVkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjbGFpbSA9ICd1bnNwZWNpZmllZCcsIHJlYXNvbiA9ICd1bnNwZWNpZmllZCcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldUX0VYUElSRUQnO1xuICAgICAgICB0aGlzLmNsYWltID0gY2xhaW07XG4gICAgICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXVF9FWFBJUkVEJztcbiAgICB9XG59XG5leHBvcnRzLkpXVEV4cGlyZWQgPSBKV1RFeHBpcmVkO1xuY2xhc3MgSk9TRUFsZ05vdEFsbG93ZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pPU0VfQUxHX05PVF9BTExPV0VEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KT1NFX0FMR19OT1RfQUxMT1dFRCc7XG4gICAgfVxufVxuZXhwb3J0cy5KT1NFQWxnTm90QWxsb3dlZCA9IEpPU0VBbGdOb3RBbGxvd2VkO1xuY2xhc3MgSk9TRU5vdFN1cHBvcnRlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSk9TRV9OT1RfU1VQUE9SVEVEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KT1NFX05PVF9TVVBQT1JURUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSk9TRU5vdFN1cHBvcnRlZCA9IEpPU0VOb3RTdXBwb3J0ZWQ7XG5jbGFzcyBKV0VEZWNyeXB0aW9uRmFpbGVkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0VfREVDUllQVElPTl9GQUlMRUQnO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnZGVjcnlwdGlvbiBvcGVyYXRpb24gZmFpbGVkJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0VfREVDUllQVElPTl9GQUlMRUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldFRGVjcnlwdGlvbkZhaWxlZCA9IEpXRURlY3J5cHRpb25GYWlsZWQ7XG5jbGFzcyBKV0VJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0VfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldFX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldFSW52YWxpZCA9IEpXRUludmFsaWQ7XG5jbGFzcyBKV1NJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1NfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldTX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldTSW52YWxpZCA9IEpXU0ludmFsaWQ7XG5jbGFzcyBKV1RJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1RfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldUX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldUSW52YWxpZCA9IEpXVEludmFsaWQ7XG5jbGFzcyBKV0tJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldLX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldLSW52YWxpZCA9IEpXS0ludmFsaWQ7XG5jbGFzcyBKV0tTSW52YWxpZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tTX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldLU0ludmFsaWQgPSBKV0tTSW52YWxpZDtcbmNsYXNzIEpXS1NOb01hdGNoaW5nS2V5IGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tTX05PX01BVENISU5HX0tFWSc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdubyBhcHBsaWNhYmxlIGtleSBmb3VuZCBpbiB0aGUgSlNPTiBXZWIgS2V5IFNldCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldLU19OT19NQVRDSElOR19LRVknO1xuICAgIH1cbn1cbmV4cG9ydHMuSldLU05vTWF0Y2hpbmdLZXkgPSBKV0tTTm9NYXRjaGluZ0tleTtcbmNsYXNzIEpXS1NNdWx0aXBsZU1hdGNoaW5nS2V5cyBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19NVUxUSVBMRV9NQVRDSElOR19LRVlTJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ211bHRpcGxlIG1hdGNoaW5nIGtleXMgZm91bmQgaW4gdGhlIEpTT04gV2ViIEtleSBTZXQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXS1NfTVVMVElQTEVfTUFUQ0hJTkdfS0VZUyc7XG4gICAgfVxufVxuZXhwb3J0cy5KV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMgPSBKV0tTTXVsdGlwbGVNYXRjaGluZ0tleXM7XG5jbGFzcyBKV0tTVGltZW91dCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19USU1FT1VUJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ3JlcXVlc3QgdGltZWQgb3V0JztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tTX1RJTUVPVVQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldLU1RpbWVvdXQgPSBKV0tTVGltZW91dDtcbmNsYXNzIEpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldTX1NJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTEVEJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ3NpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1NfU0lHTkFUVVJFX1ZFUklGSUNBVElPTl9GQUlMRUQnO1xuICAgIH1cbn1cbmV4cG9ydHMuSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkID0gSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3J5cHRvXzEucmFuZG9tRmlsbFN5bmM7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYml0TGVuZ3RoID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCByYW5kb21fanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3JhbmRvbS5qc1wiKTtcbmZ1bmN0aW9uIGJpdExlbmd0aChhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTEyOEdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNS1cnOlxuICAgICAgICAgICAgcmV0dXJuIDk2O1xuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIDEyODtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBVbnN1cHBvcnRlZCBKV0UgQWxnb3JpdGhtOiAke2FsZ31gKTtcbiAgICB9XG59XG5leHBvcnRzLmJpdExlbmd0aCA9IGJpdExlbmd0aDtcbmV4cG9ydHMuZGVmYXVsdCA9IChhbGcpID0+ICgwLCByYW5kb21fanNfMS5kZWZhdWx0KShuZXcgVWludDhBcnJheShiaXRMZW5ndGgoYWxnKSA+PiAzKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgaXZfanNfMSA9IHJlcXVpcmUoXCIuL2l2LmpzXCIpO1xuY29uc3QgY2hlY2tJdkxlbmd0aCA9IChlbmMsIGl2KSA9PiB7XG4gICAgaWYgKGl2Lmxlbmd0aCA8PCAzICE9PSAoMCwgaXZfanNfMS5iaXRMZW5ndGgpKGVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0ludmFsaWQgSW5pdGlhbGl6YXRpb24gVmVjdG9yIGxlbmd0aCcpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjaGVja0l2TGVuZ3RoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5leHBvcnRzLmRlZmF1bHQgPSB1dGlsLnR5cGVzLmlzS2V5T2JqZWN0XG4gICAgPyAob2JqKSA9PiB1dGlsLnR5cGVzLmlzS2V5T2JqZWN0KG9iailcbiAgICA6IChvYmopID0+IG9iaiAhPSBudWxsICYmIG9iaiBpbnN0YW5jZW9mIGNyeXB0b18xLktleU9iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgY2hlY2tDZWtMZW5ndGggPSAoZW5jLCBjZWspID0+IHtcbiAgICBsZXQgZXhwZWN0ZWQ7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIGV4cGVjdGVkID0gcGFyc2VJbnQoZW5jLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ExMjhHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgICAgICBleHBlY3RlZCA9IHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgQ29udGVudCBFbmNyeXB0aW9uIEFsZ29yaXRobSAke2VuY30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbiAgICBpZiAoY2VrIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBjb25zdCBhY3R1YWwgPSBjZWsuYnl0ZUxlbmd0aCA8PCAzO1xuICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoYEludmFsaWQgQ29udGVudCBFbmNyeXB0aW9uIEtleSBsZW5ndGguIEV4cGVjdGVkICR7ZXhwZWN0ZWR9IGJpdHMsIGdvdCAke2FjdHVhbH0gYml0c2ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoY2VrKSAmJiBjZWsudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgY29uc3QgYWN0dWFsID0gY2VrLnN5bW1ldHJpY0tleVNpemUgPDwgMztcbiAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBJbnZhbGlkIENvbnRlbnQgRW5jcnlwdGlvbiBLZXkgbGVuZ3RoLiBFeHBlY3RlZCAke2V4cGVjdGVkfSBiaXRzLCBnb3QgJHthY3R1YWx9IGJpdHNgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgQ29udGVudCBFbmNyeXB0aW9uIEtleSB0eXBlJyk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tDZWtMZW5ndGg7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHRpbWluZ1NhZmVFcXVhbCA9IGNyeXB0b18xLnRpbWluZ1NhZmVFcXVhbDtcbmV4cG9ydHMuZGVmYXVsdCA9IHRpbWluZ1NhZmVFcXVhbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmZ1bmN0aW9uIGNiY1RhZyhhYWQsIGl2LCBjaXBoZXJ0ZXh0LCBtYWNTaXplLCBtYWNLZXksIGtleVNpemUpIHtcbiAgICBjb25zdCBtYWNEYXRhID0gKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdCkoYWFkLCBpdiwgY2lwaGVydGV4dCwgKDAsIGJ1ZmZlcl91dGlsc19qc18xLnVpbnQ2NGJlKShhYWQubGVuZ3RoIDw8IDMpKTtcbiAgICBjb25zdCBobWFjID0gKDAsIGNyeXB0b18xLmNyZWF0ZUhtYWMpKGBzaGEke21hY1NpemV9YCwgbWFjS2V5KTtcbiAgICBobWFjLnVwZGF0ZShtYWNEYXRhKTtcbiAgICByZXR1cm4gaG1hYy5kaWdlc3QoKS5zbGljZSgwLCBrZXlTaXplID4+IDMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gY2JjVGFnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQ3J5cHRvS2V5ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHdlYmNyeXB0byA9IGNyeXB0by53ZWJjcnlwdG87XG5leHBvcnRzLmRlZmF1bHQgPSB3ZWJjcnlwdG87XG5leHBvcnRzLmlzQ3J5cHRvS2V5ID0gdXRpbC50eXBlcy5pc0NyeXB0b0tleVxuICAgID8gKGtleSkgPT4gdXRpbC50eXBlcy5pc0NyeXB0b0tleShrZXkpXG4gICAgOlxuICAgICAgICAoa2V5KSA9PiBmYWxzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Nsb3VkZmxhcmVXb3JrZXJzID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNDbG91ZGZsYXJlV29ya2VycygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzQ2xvdWRmbGFyZVdvcmtlcnMgPSBpc0Nsb3VkZmxhcmVXb3JrZXJzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoZWNrRW5jQ3J5cHRvS2V5ID0gZXhwb3J0cy5jaGVja1NpZ0NyeXB0b0tleSA9IHZvaWQgMDtcbmNvbnN0IGVudl9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvZW52LmpzXCIpO1xuZnVuY3Rpb24gdW51c2FibGUobmFtZSwgcHJvcCA9ICdhbGdvcml0aG0ubmFtZScpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgQ3J5cHRvS2V5IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBvcGVyYXRpb24sIGl0cyAke3Byb3B9IG11c3QgYmUgJHtuYW1lfWApO1xufVxuZnVuY3Rpb24gaXNBbGdvcml0aG0oYWxnb3JpdGhtLCBuYW1lKSB7XG4gICAgcmV0dXJuIGFsZ29yaXRobS5uYW1lID09PSBuYW1lO1xufVxuZnVuY3Rpb24gZ2V0SGFzaExlbmd0aChoYXNoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGhhc2gubmFtZS5zbGljZSg0KSwgMTApO1xufVxuZnVuY3Rpb24gZ2V0TmFtZWRDdXJ2ZShhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgICAgICByZXR1cm4gJ1AtMjU2JztcbiAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgcmV0dXJuICdQLTM4NCc7XG4gICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnUC01MjEnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlYWNoYWJsZScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrVXNhZ2Uoa2V5LCB1c2FnZXMpIHtcbiAgICBpZiAodXNhZ2VzLmxlbmd0aCAmJiAhdXNhZ2VzLnNvbWUoKGV4cGVjdGVkKSA9PiBrZXkudXNhZ2VzLmluY2x1ZGVzKGV4cGVjdGVkKSkpIHtcbiAgICAgICAgbGV0IG1zZyA9ICdDcnlwdG9LZXkgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG9wZXJhdGlvbiwgaXRzIHVzYWdlcyBtdXN0IGluY2x1ZGUgJztcbiAgICAgICAgaWYgKHVzYWdlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gdXNhZ2VzLnBvcCgpO1xuICAgICAgICAgICAgbXNnICs9IGBvbmUgb2YgJHt1c2FnZXMuam9pbignLCAnKX0sIG9yICR7bGFzdH0uYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1c2FnZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBtc2cgKz0gYG9uZSBvZiAke3VzYWdlc1swXX0gb3IgJHt1c2FnZXNbMV19LmA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtc2cgKz0gYCR7dXNhZ2VzWzBdfS5gO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1NpZ0NyeXB0b0tleShrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnSFMyNTYnOlxuICAgICAgICBjYXNlICdIUzM4NCc6XG4gICAgICAgIGNhc2UgJ0hTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnSE1BQycpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdITUFDJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSgyKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0gZ2V0SGFzaExlbmd0aChrZXkuYWxnb3JpdGhtLmhhc2gpO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoYFNIQS0ke2V4cGVjdGVkfWAsICdhbGdvcml0aG0uaGFzaCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnUlNBU1NBLVBLQ1MxLXYxXzUnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnUlNBU1NBLVBLQ1MxLXYxXzUnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgY2FzZSAnUFM1MTInOiB7XG4gICAgICAgICAgICBpZiAoIWlzQWxnb3JpdGhtKGtleS5hbGdvcml0aG0sICdSU0EtUFNTJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1JTQS1QU1MnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICgwLCBlbnZfanNfMS5pc0Nsb3VkZmxhcmVXb3JrZXJzKSgpICYmICdFZERTQSc6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ05PREUtRUQyNTUxOScpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdOT0RFLUVEMjU1MTknKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VkRFNBJzoge1xuICAgICAgICAgICAgaWYgKGtleS5hbGdvcml0aG0ubmFtZSAhPT0gJ0VkMjU1MTknICYmIGtleS5hbGdvcml0aG0ubmFtZSAhPT0gJ0VkNDQ4Jykge1xuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdFZDI1NTE5IG9yIEVkNDQ4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgY2FzZSAnRVM1MTInOiB7XG4gICAgICAgICAgICBpZiAoIWlzQWxnb3JpdGhtKGtleS5hbGdvcml0aG0sICdFQ0RTQScpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdFQ0RTQScpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBnZXROYW1lZEN1cnZlKGFsZyk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBrZXkuYWxnb3JpdGhtLm5hbWVkQ3VydmU7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShleHBlY3RlZCwgJ2FsZ29yaXRobS5uYW1lZEN1cnZlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBvcGVyYXRpb24nKTtcbiAgICB9XG4gICAgY2hlY2tVc2FnZShrZXksIHVzYWdlcyk7XG59XG5leHBvcnRzLmNoZWNrU2lnQ3J5cHRvS2V5ID0gY2hlY2tTaWdDcnlwdG9LZXk7XG5mdW5jdGlvbiBjaGVja0VuY0NyeXB0b0tleShrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnQUVTLUdDTScpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdBRVMtR0NNJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSgxLCA0KSwgMTApO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0ga2V5LmFsZ29yaXRobS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShleHBlY3RlZCwgJ2FsZ29yaXRobS5sZW5ndGgnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ0FFUy1LVycpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdBRVMtS1cnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBrZXkuYWxnb3JpdGhtLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKGV4cGVjdGVkLCAnYWxnb3JpdGhtLmxlbmd0aCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnRUNESCc6IHtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5LmFsZ29yaXRobS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnWDI1NTE5JzpcbiAgICAgICAgICAgICAgICBjYXNlICdYNDQ4JzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0VDREgsIFgyNTUxOSwgb3IgWDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUEJFUzItSFMyNTYrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFMzODQrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzpcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ1BCS0RGMicpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdQQktERjInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ1JTQS1PQUVQJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1JTQS1PQUVQJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSg5KSwgMTApIHx8IDE7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBvcGVyYXRpb24nKTtcbiAgICB9XG4gICAgY2hlY2tVc2FnZShrZXksIHVzYWdlcyk7XG59XG5leHBvcnRzLmNoZWNrRW5jQ3J5cHRvS2V5ID0gY2hlY2tFbmNDcnlwdG9LZXk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2l0aEFsZyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1lc3NhZ2UobXNnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgaWYgKHR5cGVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHR5cGVzLnBvcCgpO1xuICAgICAgICBtc2cgKz0gYG9uZSBvZiB0eXBlICR7dHlwZXMuam9pbignLCAnKX0sIG9yICR7bGFzdH0uYDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIG1zZyArPSBgb25lIG9mIHR5cGUgJHt0eXBlc1swXX0gb3IgJHt0eXBlc1sxXX0uYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1zZyArPSBgb2YgdHlwZSAke3R5cGVzWzBdfS5gO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsID09IG51bGwpIHtcbiAgICAgICAgbXNnICs9IGAgUmVjZWl2ZWQgJHthY3R1YWx9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFjdHVhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhY3R1YWwubmFtZSkge1xuICAgICAgICBtc2cgKz0gYCBSZWNlaXZlZCBmdW5jdGlvbiAke2FjdHVhbC5uYW1lfWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhY3R1YWwgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhY3R1YWwuY29uc3RydWN0b3IgJiYgYWN0dWFsLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICAgIG1zZyArPSBgIFJlY2VpdmVkIGFuIGluc3RhbmNlIG9mICR7YWN0dWFsLmNvbnN0cnVjdG9yLm5hbWV9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbXNnO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gKGFjdHVhbCwgLi4udHlwZXMpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZSgnS2V5IG11c3QgYmUgJywgYWN0dWFsLCAuLi50eXBlcyk7XG59O1xuZnVuY3Rpb24gd2l0aEFsZyhhbGcsIGFjdHVhbCwgLi4udHlwZXMpIHtcbiAgICByZXR1cm4gbWVzc2FnZShgS2V5IGZvciB0aGUgJHthbGd9IGFsZ29yaXRobSBtdXN0IGJlIGAsIGFjdHVhbCwgLi4udHlwZXMpO1xufVxuZXhwb3J0cy53aXRoQWxnID0gd2l0aEFsZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xubGV0IGNpcGhlcnM7XG5leHBvcnRzLmRlZmF1bHQgPSAoYWxnb3JpdGhtKSA9PiB7XG4gICAgY2lwaGVycyB8fCAoY2lwaGVycyA9IG5ldyBTZXQoKDAsIGNyeXB0b18xLmdldENpcGhlcnMpKCkpKTtcbiAgICByZXR1cm4gY2lwaGVycy5oYXMoYWxnb3JpdGhtKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHlwZXMgPSB2b2lkIDA7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAoa2V5KSA9PiAoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkgfHwgKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZXkpO1xuY29uc3QgdHlwZXMgPSBbJ0tleU9iamVjdCddO1xuZXhwb3J0cy50eXBlcyA9IHR5cGVzO1xuaWYgKHBhcnNlSW50KHByb2Nlc3MudmVyc2lvbnMubm9kZSkgPj0gMTYpIHtcbiAgICB0eXBlcy5wdXNoKCdDcnlwdG9LZXknKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgY2hlY2tfaXZfbGVuZ3RoX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NoZWNrX2l2X2xlbmd0aC5qc1wiKTtcbmNvbnN0IGNoZWNrX2Nla19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX2Nla19sZW5ndGguanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCB0aW1pbmdfc2FmZV9lcXVhbF9qc18xID0gcmVxdWlyZShcIi4vdGltaW5nX3NhZmVfZXF1YWwuanNcIik7XG5jb25zdCBjYmNfdGFnX2pzXzEgPSByZXF1aXJlKFwiLi9jYmNfdGFnLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBjaXBoZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9jaXBoZXJzLmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gY2JjRGVjcnlwdChlbmMsIGNlaywgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKSB7XG4gICAgY29uc3Qga2V5U2l6ZSA9IHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApO1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGNlaykpIHtcbiAgICAgICAgY2VrID0gY2VrLmV4cG9ydCgpO1xuICAgIH1cbiAgICBjb25zdCBlbmNLZXkgPSBjZWsuc3ViYXJyYXkoa2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBtYWNLZXkgPSBjZWsuc3ViYXJyYXkoMCwga2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBtYWNTaXplID0gcGFyc2VJbnQoZW5jLnNsaWNlKC0zKSwgMTApO1xuICAgIGNvbnN0IGFsZ29yaXRobSA9IGBhZXMtJHtrZXlTaXplfS1jYmNgO1xuICAgIGlmICghKDAsIGNpcGhlcnNfanNfMS5kZWZhdWx0KShhbGdvcml0aG0pKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHtlbmN9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRUYWcgPSAoMCwgY2JjX3RhZ19qc18xLmRlZmF1bHQpKGFhZCwgaXYsIGNpcGhlcnRleHQsIG1hY1NpemUsIG1hY0tleSwga2V5U2l6ZSk7XG4gICAgbGV0IG1hY0NoZWNrUGFzc2VkO1xuICAgIHRyeSB7XG4gICAgICAgIG1hY0NoZWNrUGFzc2VkID0gKDAsIHRpbWluZ19zYWZlX2VxdWFsX2pzXzEuZGVmYXVsdCkodGFnLCBleHBlY3RlZFRhZyk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKCFtYWNDaGVja1Bhc3NlZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFRGVjcnlwdGlvbkZhaWxlZCgpO1xuICAgIH1cbiAgICBsZXQgcGxhaW50ZXh0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZURlY2lwaGVyaXYpKGFsZ29yaXRobSwgZW5jS2V5LCBpdik7XG4gICAgICAgIHBsYWludGV4dCA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKGRlY2lwaGVyLnVwZGF0ZShjaXBoZXJ0ZXh0KSwgZGVjaXBoZXIuZmluYWwoKSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKCFwbGFpbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY3J5cHRpb25GYWlsZWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBsYWludGV4dDtcbn1cbmZ1bmN0aW9uIGdjbURlY3J5cHQoZW5jLCBjZWssIGNpcGhlcnRleHQsIGl2LCB0YWcsIGFhZCkge1xuICAgIGNvbnN0IGtleVNpemUgPSBwYXJzZUludChlbmMuc2xpY2UoMSwgNCksIDEwKTtcbiAgICBjb25zdCBhbGdvcml0aG0gPSBgYWVzLSR7a2V5U2l6ZX0tZ2NtYDtcbiAgICBpZiAoISgwLCBjaXBoZXJzX2pzXzEuZGVmYXVsdCkoYWxnb3JpdGhtKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7ZW5jfSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZURlY2lwaGVyaXYpKGFsZ29yaXRobSwgY2VrLCBpdiwgeyBhdXRoVGFnTGVuZ3RoOiAxNiB9KTtcbiAgICAgICAgZGVjaXBoZXIuc2V0QXV0aFRhZyh0YWcpO1xuICAgICAgICBpZiAoYWFkLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIGRlY2lwaGVyLnNldEFBRChhYWQsIHsgcGxhaW50ZXh0TGVuZ3RoOiBjaXBoZXJ0ZXh0Lmxlbmd0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFpbnRleHQgPSBkZWNpcGhlci51cGRhdGUoY2lwaGVydGV4dCk7XG4gICAgICAgIGRlY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY3J5cHRpb25GYWlsZWQoKTtcbiAgICB9XG59XG5jb25zdCBkZWNyeXB0ID0gKGVuYywgY2VrLCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpID0+IHtcbiAgICBsZXQga2V5O1xuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGNlaykpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja0VuY0NyeXB0b0tleSkoY2VrLCBlbmMsICdkZWNyeXB0Jyk7XG4gICAgICAgIGtleSA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGNlayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShjZWspKSB7XG4gICAgICAgIGtleSA9IGNlaztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoY2VrLCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbiAgICB9XG4gICAgKDAsIGNoZWNrX2Nla19sZW5ndGhfanNfMS5kZWZhdWx0KShlbmMsIGtleSk7XG4gICAgKDAsIGNoZWNrX2l2X2xlbmd0aF9qc18xLmRlZmF1bHQpKGVuYywgaXYpO1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICAgIGNhc2UgJ0ExMjhDQkMtSFMyNTYnOlxuICAgICAgICBjYXNlICdBMTkyQ0JDLUhTMzg0JzpcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gY2JjRGVjcnlwdChlbmMsIGtleSwgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKTtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgICAgIHJldHVybiBnY21EZWNyeXB0KGVuYywga2V5LCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBDb250ZW50IEVuY3J5cHRpb24gQWxnb3JpdGhtJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmbGF0ZSA9IGV4cG9ydHMuaW5mbGF0ZSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgemxpYl8xID0gcmVxdWlyZShcInpsaWJcIik7XG5jb25zdCBpbmZsYXRlUmF3ID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHpsaWJfMS5pbmZsYXRlUmF3KTtcbmNvbnN0IGRlZmxhdGVSYXcgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoemxpYl8xLmRlZmxhdGVSYXcpO1xuY29uc3QgaW5mbGF0ZSA9IChpbnB1dCkgPT4gaW5mbGF0ZVJhdyhpbnB1dCk7XG5leHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlO1xuY29uc3QgZGVmbGF0ZSA9IChpbnB1dCkgPT4gZGVmbGF0ZVJhdyhpbnB1dCk7XG5leHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc0Rpc2pvaW50ID0gKC4uLmhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBzb3VyY2VzID0gaGVhZGVycy5maWx0ZXIoQm9vbGVhbik7XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwIHx8IHNvdXJjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgYWNjO1xuICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcik7XG4gICAgICAgIGlmICghYWNjIHx8IGFjYy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBhY2MgPSBuZXcgU2V0KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcGFyYW1ldGVycykge1xuICAgICAgICAgICAgaWYgKGFjYy5oYXMocGFyYW1ldGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjYy5hZGQocGFyYW1ldGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Rpc2pvaW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgaWYgKCFpc09iamVjdExpa2UoaW5wdXQpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dCkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBwcm90byA9IGlucHV0O1xuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dCkgPT09IHByb3RvO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gaXNPYmplY3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW53cmFwID0gZXhwb3J0cy53cmFwID0gdm9pZCAwO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBjaXBoZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9jaXBoZXJzLmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gY2hlY2tLZXlTaXplKGtleSwgYWxnKSB7XG4gICAgaWYgKGtleS5zeW1tZXRyaWNLZXlTaXplIDw8IDMgIT09IHBhcnNlSW50KGFsZy5zbGljZSgxLCA0KSwgMTApKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQga2V5IHNpemUgZm9yIGFsZzogJHthbGd9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZW5zdXJlS2V5T2JqZWN0KGtleSwgYWxnLCB1c2FnZSkge1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBjcnlwdG9fMS5jcmVhdGVTZWNyZXRLZXkpKGtleSk7XG4gICAgfVxuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja0VuY0NyeXB0b0tleSkoa2V5LCBhbGcsIHVzYWdlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbmNvbnN0IHdyYXAgPSAoYWxnLCBrZXksIGNlaykgPT4ge1xuICAgIGNvbnN0IHNpemUgPSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKTtcbiAgICBjb25zdCBhbGdvcml0aG0gPSBgYWVzJHtzaXplfS13cmFwYDtcbiAgICBpZiAoISgwLCBjaXBoZXJzX2pzXzEuZGVmYXVsdCkoYWxnb3JpdGhtKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7YWxnfSBpcyBub3Qgc3VwcG9ydGVkIGVpdGhlciBieSBKT1NFIG9yIHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxuICAgIGNvbnN0IGtleU9iamVjdCA9IGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgJ3dyYXBLZXknKTtcbiAgICBjaGVja0tleVNpemUoa2V5T2JqZWN0LCBhbGcpO1xuICAgIGNvbnN0IGNpcGhlciA9ICgwLCBjcnlwdG9fMS5jcmVhdGVDaXBoZXJpdikoYWxnb3JpdGhtLCBrZXlPYmplY3QsIGJ1ZmZlcl8xLkJ1ZmZlci5hbGxvYyg4LCAweGE2KSk7XG4gICAgcmV0dXJuICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKGNpcGhlci51cGRhdGUoY2VrKSwgY2lwaGVyLmZpbmFsKCkpO1xufTtcbmV4cG9ydHMud3JhcCA9IHdyYXA7XG5jb25zdCB1bndyYXAgPSAoYWxnLCBrZXksIGVuY3J5cHRlZEtleSkgPT4ge1xuICAgIGNvbnN0IHNpemUgPSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKTtcbiAgICBjb25zdCBhbGdvcml0aG0gPSBgYWVzJHtzaXplfS13cmFwYDtcbiAgICBpZiAoISgwLCBjaXBoZXJzX2pzXzEuZGVmYXVsdCkoYWxnb3JpdGhtKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7YWxnfSBpcyBub3Qgc3VwcG9ydGVkIGVpdGhlciBieSBKT1NFIG9yIHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxuICAgIGNvbnN0IGtleU9iamVjdCA9IGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgJ3Vud3JhcEtleScpO1xuICAgIGNoZWNrS2V5U2l6ZShrZXlPYmplY3QsIGFsZyk7XG4gICAgY29uc3QgY2lwaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZURlY2lwaGVyaXYpKGFsZ29yaXRobSwga2V5T2JqZWN0LCBidWZmZXJfMS5CdWZmZXIuYWxsb2MoOCwgMHhhNikpO1xuICAgIHJldHVybiAoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KShjaXBoZXIudXBkYXRlKGVuY3J5cHRlZEtleSksIGNpcGhlci5maW5hbCgpKTtcbn07XG5leHBvcnRzLnVud3JhcCA9IHVud3JhcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRDdXJ2ZSA9IGV4cG9ydHMud2Vha01hcCA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBpc19rZXlfbGlrZV9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X2xpa2UuanNcIik7XG5jb25zdCBwMjU2ID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oWzQyLCAxMzQsIDcyLCAyMDYsIDYxLCAzLCAxLCA3XSk7XG5jb25zdCBwMzg0ID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oWzQzLCAxMjksIDQsIDAsIDM0XSk7XG5jb25zdCBwNTIxID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oWzQzLCAxMjksIDQsIDAsIDM1XSk7XG5jb25zdCBzZWNwMjU2azEgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShbNDMsIDEyOSwgNCwgMCwgMTBdKTtcbmV4cG9ydHMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuYW1lZEN1cnZlVG9KT1NFID0gKG5hbWVkQ3VydmUpID0+IHtcbiAgICBzd2l0Y2ggKG5hbWVkQ3VydmUpIHtcbiAgICAgICAgY2FzZSAncHJpbWUyNTZ2MSc6XG4gICAgICAgICAgICByZXR1cm4gJ1AtMjU2JztcbiAgICAgICAgY2FzZSAnc2VjcDM4NHIxJzpcbiAgICAgICAgICAgIHJldHVybiAnUC0zODQnO1xuICAgICAgICBjYXNlICdzZWNwNTIxcjEnOlxuICAgICAgICAgICAgcmV0dXJuICdQLTUyMSc7XG4gICAgICAgIGNhc2UgJ3NlY3AyNTZrMSc6XG4gICAgICAgICAgICByZXR1cm4gJ3NlY3AyNTZrMSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQga2V5IGN1cnZlIGZvciB0aGlzIG9wZXJhdGlvbicpO1xuICAgIH1cbn07XG5jb25zdCBnZXROYW1lZEN1cnZlID0gKGtlZSwgcmF3KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBrZXk7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2VlKSkge1xuICAgICAgICBrZXkgPSBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShrZWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtlZSkpIHtcbiAgICAgICAga2V5ID0ga2VlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZWUsIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMpKTtcbiAgICB9XG4gICAgaWYgKGtleS50eXBlID09PSAnc2VjcmV0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvbmx5IFwicHJpdmF0ZVwiIG9yIFwicHVibGljXCIgdHlwZSBrZXlzIGNhbiBiZSB1c2VkIGZvciB0aGlzIG9wZXJhdGlvbicpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGtleS5hc3ltbWV0cmljS2V5VHlwZSkge1xuICAgICAgICBjYXNlICdlZDI1NTE5JzpcbiAgICAgICAgY2FzZSAnZWQ0NDgnOlxuICAgICAgICAgICAgcmV0dXJuIGBFZCR7a2V5LmFzeW1tZXRyaWNLZXlUeXBlLnNsaWNlKDIpfWA7XG4gICAgICAgIGNhc2UgJ3gyNTUxOSc6XG4gICAgICAgIGNhc2UgJ3g0NDgnOlxuICAgICAgICAgICAgcmV0dXJuIGBYJHtrZXkuYXN5bW1ldHJpY0tleVR5cGUuc2xpY2UoMSl9YDtcbiAgICAgICAgY2FzZSAnZWMnOiB7XG4gICAgICAgICAgICBpZiAoZXhwb3J0cy53ZWFrTWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMud2Vha01hcC5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuYW1lZEN1cnZlID0gKF9hID0ga2V5LmFzeW1tZXRyaWNLZXlEZXRhaWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZWRDdXJ2ZTtcbiAgICAgICAgICAgIGlmICghbmFtZWRDdXJ2ZSAmJiBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgICAgICAgICAgbmFtZWRDdXJ2ZSA9IGdldE5hbWVkQ3VydmUoKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5KSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghbmFtZWRDdXJ2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGtleS5leHBvcnQoeyBmb3JtYXQ6ICdkZXInLCB0eXBlOiAnc3BraScgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGJ1ZlsxXSA8IDEyOCA/IDE0IDogMTU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gYnVmW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnZlT2lkID0gYnVmLnNsaWNlKGkgKyAxLCBpICsgMSArIGxlbik7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnZlT2lkLmVxdWFscyhwMjU2KSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lZEN1cnZlID0gJ3ByaW1lMjU2djEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJ2ZU9pZC5lcXVhbHMocDM4NCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZWRDdXJ2ZSA9ICdzZWNwMzg0cjEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJ2ZU9pZC5lcXVhbHMocDUyMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZWRDdXJ2ZSA9ICdzZWNwNTIxcjEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJ2ZU9pZC5lcXVhbHMoc2VjcDI1NmsxKSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lZEN1cnZlID0gJ3NlY3AyNTZrMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQga2V5IGN1cnZlIGZvciB0aGlzIG9wZXJhdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyYXcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVkQ3VydmU7XG4gICAgICAgICAgICBjb25zdCBjdXJ2ZSA9IG5hbWVkQ3VydmVUb0pPU0UobmFtZWRDdXJ2ZSk7XG4gICAgICAgICAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleSwgY3VydmUpO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnZlO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFzeW1tZXRyaWMga2V5IHR5cGUgZm9yIHRoaXMgb3BlcmF0aW9uJyk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHNldEN1cnZlKGtleU9iamVjdCwgY3VydmUpIHtcbiAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleU9iamVjdCwgY3VydmUpO1xufVxuZXhwb3J0cy5zZXRDdXJ2ZSA9IHNldEN1cnZlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0TmFtZWRDdXJ2ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lY2RoQWxsb3dlZCA9IGV4cG9ydHMuZ2VuZXJhdGVFcGsgPSBleHBvcnRzLmRlcml2ZUtleSA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgZ2V0X25hbWVkX2N1cnZlX2pzXzEgPSByZXF1aXJlKFwiLi9nZXRfbmFtZWRfY3VydmUuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGNyeXB0b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY3J5cHRvX2tleS5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGdlbmVyYXRlS2V5UGFpciA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShjcnlwdG9fMS5nZW5lcmF0ZUtleVBhaXIpO1xuYXN5bmMgZnVuY3Rpb24gZGVyaXZlS2V5KHB1YmxpY0tlZSwgcHJpdmF0ZUtlZSwgYWxnb3JpdGhtLCBrZXlMZW5ndGgsIGFwdSA9IG5ldyBVaW50OEFycmF5KDApLCBhcHYgPSBuZXcgVWludDhBcnJheSgwKSkge1xuICAgIGxldCBwdWJsaWNLZXk7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkocHVibGljS2VlKSkge1xuICAgICAgICAoMCwgY3J5cHRvX2tleV9qc18xLmNoZWNrRW5jQ3J5cHRvS2V5KShwdWJsaWNLZWUsICdFQ0RIJyk7XG4gICAgICAgIHB1YmxpY0tleSA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKHB1YmxpY0tlZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkocHVibGljS2VlKSkge1xuICAgICAgICBwdWJsaWNLZXkgPSBwdWJsaWNLZWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKHB1YmxpY0tlZSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgIH1cbiAgICBsZXQgcHJpdmF0ZUtleTtcbiAgICBpZiAoKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShwcml2YXRlS2VlKSkge1xuICAgICAgICAoMCwgY3J5cHRvX2tleV9qc18xLmNoZWNrRW5jQ3J5cHRvS2V5KShwcml2YXRlS2VlLCAnRUNESCcsICdkZXJpdmVCaXRzJyk7XG4gICAgICAgIHByaXZhdGVLZXkgPSBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShwcml2YXRlS2VlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShwcml2YXRlS2VlKSkge1xuICAgICAgICBwcml2YXRlS2V5ID0gcHJpdmF0ZUtlZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkocHJpdmF0ZUtlZSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKCgwLCBidWZmZXJfdXRpbHNfanNfMS5sZW5ndGhBbmRJbnB1dCkoYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoYWxnb3JpdGhtKSksICgwLCBidWZmZXJfdXRpbHNfanNfMS5sZW5ndGhBbmRJbnB1dCkoYXB1KSwgKDAsIGJ1ZmZlcl91dGlsc19qc18xLmxlbmd0aEFuZElucHV0KShhcHYpLCAoMCwgYnVmZmVyX3V0aWxzX2pzXzEudWludDMyYmUpKGtleUxlbmd0aCkpO1xuICAgIGNvbnN0IHNoYXJlZFNlY3JldCA9ICgwLCBjcnlwdG9fMS5kaWZmaWVIZWxsbWFuKSh7IHByaXZhdGVLZXksIHB1YmxpY0tleSB9KTtcbiAgICByZXR1cm4gKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdEtkZikoc2hhcmVkU2VjcmV0LCBrZXlMZW5ndGgsIHZhbHVlKTtcbn1cbmV4cG9ydHMuZGVyaXZlS2V5ID0gZGVyaXZlS2V5O1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVFcGsoa2VlKSB7XG4gICAgbGV0IGtleTtcbiAgICBpZiAoKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZWUpKSB7XG4gICAgICAgIGtleSA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtlZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2VlKSkge1xuICAgICAgICBrZXkgPSBrZWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtlZSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGtleS5hc3ltbWV0cmljS2V5VHlwZSkge1xuICAgICAgICBjYXNlICd4MjU1MTknOlxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlS2V5UGFpcigneDI1NTE5Jyk7XG4gICAgICAgIGNhc2UgJ3g0NDgnOiB7XG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVLZXlQYWlyKCd4NDQ4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZWMnOiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lZEN1cnZlID0gKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVLZXlQYWlyKCdlYycsIHsgbmFtZWRDdXJ2ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgRVBLJyk7XG4gICAgfVxufVxuZXhwb3J0cy5nZW5lcmF0ZUVwayA9IGdlbmVyYXRlRXBrO1xuY29uc3QgZWNkaEFsbG93ZWQgPSAoa2V5KSA9PiBbJ1AtMjU2JywgJ1AtMzg0JywgJ1AtNTIxJywgJ1gyNTUxOScsICdYNDQ4J10uaW5jbHVkZXMoKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleSkpO1xuZXhwb3J0cy5lY2RoQWxsb3dlZCA9IGVjZGhBbGxvd2VkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGNoZWNrUDJzKHAycykge1xuICAgIGlmICghKHAycyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8IHAycy5sZW5ndGggPCA4KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdQQkVTMiBTYWx0IElucHV0IG11c3QgYmUgOCBvciBtb3JlIG9jdGV0cycpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrUDJzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY3J5cHQgPSBleHBvcnRzLmVuY3J5cHQgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHJhbmRvbV9qc18xID0gcmVxdWlyZShcIi4vcmFuZG9tLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4vYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgYWVza3dfanNfMSA9IHJlcXVpcmUoXCIuL2Flc2t3LmpzXCIpO1xuY29uc3QgY2hlY2tfcDJzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NoZWNrX3Aycy5qc1wiKTtcbmNvbnN0IHdlYmNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vd2ViY3J5cHRvLmpzXCIpO1xuY29uc3QgY3J5cHRvX2tleV9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9jcnlwdG9fa2V5LmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuY29uc3QgcGJrZGYyID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKGNyeXB0b18xLnBia2RmMik7XG5mdW5jdGlvbiBnZXRQYXNzd29yZChrZXksIGFsZykge1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGtleS5leHBvcnQoKTtcbiAgICB9XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICAoMCwgY3J5cHRvX2tleV9qc18xLmNoZWNrRW5jQ3J5cHRvS2V5KShrZXksIGFsZywgJ2Rlcml2ZUJpdHMnLCAnZGVyaXZlS2V5Jyk7XG4gICAgICAgIHJldHVybiBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShrZXkpLmV4cG9ydCgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG59XG5jb25zdCBlbmNyeXB0ID0gYXN5bmMgKGFsZywga2V5LCBjZWssIHAyYyA9IDIwNDgsIHAycyA9ICgwLCByYW5kb21fanNfMS5kZWZhdWx0KShuZXcgVWludDhBcnJheSgxNikpKSA9PiB7XG4gICAgKDAsIGNoZWNrX3Ayc19qc18xLmRlZmF1bHQpKHAycyk7XG4gICAgY29uc3Qgc2FsdCA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5wMnMpKGFsZywgcDJzKTtcbiAgICBjb25zdCBrZXlsZW4gPSBwYXJzZUludChhbGcuc2xpY2UoMTMsIDE2KSwgMTApID4+IDM7XG4gICAgY29uc3QgcGFzc3dvcmQgPSBnZXRQYXNzd29yZChrZXksIGFsZyk7XG4gICAgY29uc3QgZGVyaXZlZEtleSA9IGF3YWl0IHBia2RmMihwYXNzd29yZCwgc2FsdCwgcDJjLCBrZXlsZW4sIGBzaGEke2FsZy5zbGljZSg4LCAxMSl9YCk7XG4gICAgY29uc3QgZW5jcnlwdGVkS2V5ID0gYXdhaXQgKDAsIGFlc2t3X2pzXzEud3JhcCkoYWxnLnNsaWNlKC02KSwgZGVyaXZlZEtleSwgY2VrKTtcbiAgICByZXR1cm4geyBlbmNyeXB0ZWRLZXksIHAyYywgcDJzOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShwMnMpIH07XG59O1xuZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDtcbmNvbnN0IGRlY3J5cHQgPSBhc3luYyAoYWxnLCBrZXksIGVuY3J5cHRlZEtleSwgcDJjLCBwMnMpID0+IHtcbiAgICAoMCwgY2hlY2tfcDJzX2pzXzEuZGVmYXVsdCkocDJzKTtcbiAgICBjb25zdCBzYWx0ID0gKDAsIGJ1ZmZlcl91dGlsc19qc18xLnAycykoYWxnLCBwMnMpO1xuICAgIGNvbnN0IGtleWxlbiA9IHBhcnNlSW50KGFsZy5zbGljZSgxMywgMTYpLCAxMCkgPj4gMztcbiAgICBjb25zdCBwYXNzd29yZCA9IGdldFBhc3N3b3JkKGtleSwgYWxnKTtcbiAgICBjb25zdCBkZXJpdmVkS2V5ID0gYXdhaXQgcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBwMmMsIGtleWxlbiwgYHNoYSR7YWxnLnNsaWNlKDgsIDExKX1gKTtcbiAgICByZXR1cm4gKDAsIGFlc2t3X2pzXzEudW53cmFwKShhbGcuc2xpY2UoLTYpLCBkZXJpdmVkS2V5LCBlbmNyeXB0ZWRLZXkpO1xufTtcbmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0TW9kdWx1c0xlbmd0aCA9IGV4cG9ydHMud2Vha01hcCA9IHZvaWQgMDtcbmV4cG9ydHMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBnZXRMZW5ndGggPSAoYnVmLCBpbmRleCkgPT4ge1xuICAgIGxldCBsZW4gPSBidWYucmVhZFVJbnQ4KDEpO1xuICAgIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRMZW5ndGgoYnVmLnN1YmFycmF5KDIgKyBsZW4pLCBpbmRleCAtIDEpO1xuICAgIH1cbiAgICBjb25zdCBudW0gPSBsZW4gJiAweDdmO1xuICAgIGxlbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICBsZW4gPDw9IDg7XG4gICAgICAgIGNvbnN0IGogPSBidWYucmVhZFVJbnQ4KDIgKyBpKTtcbiAgICAgICAgbGVuIHw9IGo7XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0TGVuZ3RoKGJ1Zi5zdWJhcnJheSgyICsgbGVuKSwgaW5kZXggLSAxKTtcbn07XG5jb25zdCBnZXRMZW5ndGhPZlNlcUluZGV4ID0gKHNlcXVlbmNlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGxlbiA9IHNlcXVlbmNlLnJlYWRVSW50OCgxKTtcbiAgICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgICAgIHJldHVybiBnZXRMZW5ndGgoc2VxdWVuY2Uuc3ViYXJyYXkoMiksIGluZGV4KTtcbiAgICB9XG4gICAgY29uc3QgbnVtID0gbGVuICYgMHg3ZjtcbiAgICByZXR1cm4gZ2V0TGVuZ3RoKHNlcXVlbmNlLnN1YmFycmF5KDIgKyBudW0pLCBpbmRleCk7XG59O1xuY29uc3QgZ2V0TW9kdWx1c0xlbmd0aCA9IChrZXkpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChleHBvcnRzLndlYWtNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMud2Vha01hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWx1c0xlbmd0aCA9IChfYiA9IChfYSA9IGtleS5hc3ltbWV0cmljS2V5RGV0YWlscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1vZHVsdXNMZW5ndGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChnZXRMZW5ndGhPZlNlcUluZGV4KGtleS5leHBvcnQoeyBmb3JtYXQ6ICdkZXInLCB0eXBlOiAncGtjczEnIH0pLCBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnID8gMSA6IDApIC1cbiAgICAgICAgMSkgPDxcbiAgICAgICAgMztcbiAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleSwgbW9kdWx1c0xlbmd0aCk7XG4gICAgcmV0dXJuIG1vZHVsdXNMZW5ndGg7XG59O1xuY29uc3Qgc2V0TW9kdWx1c0xlbmd0aCA9IChrZXlPYmplY3QsIG1vZHVsdXNMZW5ndGgpID0+IHtcbiAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleU9iamVjdCwgbW9kdWx1c0xlbmd0aCk7XG59O1xuZXhwb3J0cy5zZXRNb2R1bHVzTGVuZ3RoID0gc2V0TW9kdWx1c0xlbmd0aDtcbmV4cG9ydHMuZGVmYXVsdCA9IChrZXksIGFsZykgPT4ge1xuICAgIGlmIChnZXRNb2R1bHVzTGVuZ3RoKGtleSkgPCAyMDQ4KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7YWxnfSByZXF1aXJlcyBrZXkgbW9kdWx1c0xlbmd0aCB0byBiZSAyMDQ4IGJpdHMgb3IgbGFyZ2VyYCk7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNyeXB0ID0gZXhwb3J0cy5lbmNyeXB0ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBpc19rZXlfbGlrZV9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X2xpa2UuanNcIik7XG5jb25zdCBjaGVja0tleSA9IChrZXksIGFsZykgPT4ge1xuICAgIGlmIChrZXkuYXN5bW1ldHJpY0tleVR5cGUgIT09ICdyc2EnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQga2V5IGZvciB0aGlzIG9wZXJhdGlvbiwgaXRzIGFzeW1tZXRyaWNLZXlUeXBlIG11c3QgYmUgcnNhJyk7XG4gICAgfVxuICAgICgwLCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xLmRlZmF1bHQpKGtleSwgYWxnKTtcbn07XG5jb25zdCByZXNvbHZlUGFkZGluZyA9IChhbGcpID0+IHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuY29uc3RhbnRzLlJTQV9QS0NTMV9PQUVQX1BBRERJTkc7XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuY29uc3RhbnRzLlJTQV9QS0NTMV9QQURESU5HO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuY29uc3QgcmVzb2x2ZU9hZXBIYXNoID0gKGFsZykgPT4ge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMSc7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTI1Nic7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTM4NCc7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTUxMic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5mdW5jdGlvbiBlbnN1cmVLZXlPYmplY3Qoa2V5LCBhbGcsIC4uLnVzYWdlcykge1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICAoMCwgY3J5cHRvX2tleV9qc18xLmNoZWNrRW5jQ3J5cHRvS2V5KShrZXksIGFsZywgLi4udXNhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzKSk7XG59XG5jb25zdCBlbmNyeXB0ID0gKGFsZywga2V5LCBjZWspID0+IHtcbiAgICBjb25zdCBwYWRkaW5nID0gcmVzb2x2ZVBhZGRpbmcoYWxnKTtcbiAgICBjb25zdCBvYWVwSGFzaCA9IHJlc29sdmVPYWVwSGFzaChhbGcpO1xuICAgIGNvbnN0IGtleU9iamVjdCA9IGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgJ3dyYXBLZXknLCAnZW5jcnlwdCcpO1xuICAgIGNoZWNrS2V5KGtleU9iamVjdCwgYWxnKTtcbiAgICByZXR1cm4gKDAsIGNyeXB0b18xLnB1YmxpY0VuY3J5cHQpKHsga2V5OiBrZXlPYmplY3QsIG9hZXBIYXNoLCBwYWRkaW5nIH0sIGNlayk7XG59O1xuZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDtcbmNvbnN0IGRlY3J5cHQgPSAoYWxnLCBrZXksIGVuY3J5cHRlZEtleSkgPT4ge1xuICAgIGNvbnN0IHBhZGRpbmcgPSByZXNvbHZlUGFkZGluZyhhbGcpO1xuICAgIGNvbnN0IG9hZXBIYXNoID0gcmVzb2x2ZU9hZXBIYXNoKGFsZyk7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gZW5zdXJlS2V5T2JqZWN0KGtleSwgYWxnLCAndW53cmFwS2V5JywgJ2RlY3J5cHQnKTtcbiAgICBjaGVja0tleShrZXlPYmplY3QsIGFsZyk7XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fMS5wcml2YXRlRGVjcnlwdCkoeyBrZXk6IGtleU9iamVjdCwgb2FlcEhhc2gsIHBhZGRpbmcgfSwgZW5jcnlwdGVkS2V5KTtcbn07XG5leHBvcnRzLmRlY3J5cHQgPSBkZWNyeXB0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpdExlbmd0aCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9yYW5kb20uanNcIik7XG5mdW5jdGlvbiBiaXRMZW5ndGgoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgICAgICByZXR1cm4gMTI4O1xuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgICAgIHJldHVybiAxOTI7XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAyNTY7XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICAgICAgcmV0dXJuIDM4NDtcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gNTEyO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYFVuc3VwcG9ydGVkIEpXRSBBbGdvcml0aG06ICR7YWxnfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuYml0TGVuZ3RoID0gYml0TGVuZ3RoO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGFsZykgPT4gKDAsIHJhbmRvbV9qc18xLmRlZmF1bHQpKG5ldyBVaW50OEFycmF5KGJpdExlbmd0aChhbGcpID4+IDMpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tU1BLSSA9IGV4cG9ydHMuZnJvbVBLQ1M4ID0gZXhwb3J0cy50b1BLQ1M4ID0gZXhwb3J0cy50b1NQS0kgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGdlbmVyaWNFeHBvcnQgPSAoa2V5VHlwZSwga2V5Rm9ybWF0LCBrZXkpID0+IHtcbiAgICBsZXQga2V5T2JqZWN0O1xuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgaWYgKCFrZXkuZXh0cmFjdGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NyeXB0b0tleSBpcyBub3QgZXh0cmFjdGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlPYmplY3QgPSBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAga2V5T2JqZWN0ID0ga2V5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMpKTtcbiAgICB9XG4gICAgaWYgKGtleU9iamVjdC50eXBlICE9PSBrZXlUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGtleSBpcyBub3QgYSAke2tleVR5cGV9IGtleWApO1xuICAgIH1cbiAgICByZXR1cm4ga2V5T2JqZWN0LmV4cG9ydCh7IGZvcm1hdDogJ3BlbScsIHR5cGU6IGtleUZvcm1hdCB9KTtcbn07XG5jb25zdCB0b1NQS0kgPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNFeHBvcnQoJ3B1YmxpYycsICdzcGtpJywga2V5KTtcbn07XG5leHBvcnRzLnRvU1BLSSA9IHRvU1BLSTtcbmNvbnN0IHRvUEtDUzggPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNFeHBvcnQoJ3ByaXZhdGUnLCAncGtjczgnLCBrZXkpO1xufTtcbmV4cG9ydHMudG9QS0NTOCA9IHRvUEtDUzg7XG5jb25zdCBmcm9tUEtDUzggPSAocGVtKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlUHJpdmF0ZUtleSkoe1xuICAgIGtleTogYnVmZmVyXzEuQnVmZmVyLmZyb20ocGVtLnJlcGxhY2UoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBQUklWQVRFIEtFWS0tLS0tfFxccykvZywgJycpLCAnYmFzZTY0JyksXG4gICAgdHlwZTogJ3BrY3M4JyxcbiAgICBmb3JtYXQ6ICdkZXInLFxufSk7XG5leHBvcnRzLmZyb21QS0NTOCA9IGZyb21QS0NTODtcbmNvbnN0IGZyb21TUEtJID0gKHBlbSkgPT4gKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoe1xuICAgIGtleTogYnVmZmVyXzEuQnVmZmVyLmZyb20ocGVtLnJlcGxhY2UoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBQVUJMSUMgS0VZLS0tLS18XFxzKS9nLCAnJyksICdiYXNlNjQnKSxcbiAgICB0eXBlOiAnc3BraScsXG4gICAgZm9ybWF0OiAnZGVyJyxcbn0pO1xuZXhwb3J0cy5mcm9tU1BLSSA9IGZyb21TUEtJO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IHRhZ0ludGVnZXIgPSAweDAyO1xuY29uc3QgdGFnQml0U3RyID0gMHgwMztcbmNvbnN0IHRhZ09jdFN0ciA9IDB4MDQ7XG5jb25zdCB0YWdTZXF1ZW5jZSA9IDB4MzA7XG5jb25zdCBiWmVybyA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKFsweDAwXSk7XG5jb25zdCBiVGFnSW50ZWdlciA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKFt0YWdJbnRlZ2VyXSk7XG5jb25zdCBiVGFnQml0U3RyID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oW3RhZ0JpdFN0cl0pO1xuY29uc3QgYlRhZ1NlcXVlbmNlID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oW3RhZ1NlcXVlbmNlXSk7XG5jb25zdCBiVGFnT2N0U3RyID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oW3RhZ09jdFN0cl0pO1xuY29uc3QgZW5jb2RlTGVuZ3RoID0gKGxlbikgPT4ge1xuICAgIGlmIChsZW4gPCAxMjgpXG4gICAgICAgIHJldHVybiBidWZmZXJfMS5CdWZmZXIuZnJvbShbbGVuXSk7XG4gICAgY29uc3QgYnVmZmVyID0gYnVmZmVyXzEuQnVmZmVyLmFsbG9jKDUpO1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKGxlbiwgMSk7XG4gICAgbGV0IG9mZnNldCA9IDE7XG4gICAgd2hpbGUgKGJ1ZmZlcltvZmZzZXRdID09PSAwKVxuICAgICAgICBvZmZzZXQrKztcbiAgICBidWZmZXJbb2Zmc2V0IC0gMV0gPSAweDgwIHwgKDUgLSBvZmZzZXQpO1xuICAgIHJldHVybiBidWZmZXIuc2xpY2Uob2Zmc2V0IC0gMSk7XG59O1xuY29uc3Qgb2lkcyA9IG5ldyBNYXAoW1xuICAgIFsnUC0yNTYnLCBidWZmZXJfMS5CdWZmZXIuZnJvbSgnMDYgMDggMkEgODYgNDggQ0UgM0QgMDMgMDEgMDcnLnJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyldLFxuICAgIFsnc2VjcDI1NmsxJywgYnVmZmVyXzEuQnVmZmVyLmZyb20oJzA2IDA1IDJCIDgxIDA0IDAwIDBBJy5yZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXSxcbiAgICBbJ1AtMzg0JywgYnVmZmVyXzEuQnVmZmVyLmZyb20oJzA2IDA1IDJCIDgxIDA0IDAwIDIyJy5yZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXSxcbiAgICBbJ1AtNTIxJywgYnVmZmVyXzEuQnVmZmVyLmZyb20oJzA2IDA1IDJCIDgxIDA0IDAwIDIzJy5yZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXSxcbiAgICBbJ2VjUHVibGljS2V5JywgYnVmZmVyXzEuQnVmZmVyLmZyb20oJzA2IDA3IDJBIDg2IDQ4IENFIDNEIDAyIDAxJy5yZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXSxcbiAgICBbJ1gyNTUxOScsIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKCcwNiAwMyAyQiA2NSA2RScucmVwbGFjZSgvIC9nLCAnJyksICdoZXgnKV0sXG4gICAgWydYNDQ4JywgYnVmZmVyXzEuQnVmZmVyLmZyb20oJzA2IDAzIDJCIDY1IDZGJy5yZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXSxcbiAgICBbJ0VkMjU1MTknLCBidWZmZXJfMS5CdWZmZXIuZnJvbSgnMDYgMDMgMkIgNjUgNzAnLnJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyldLFxuICAgIFsnRWQ0NDgnLCBidWZmZXJfMS5CdWZmZXIuZnJvbSgnMDYgMDMgMkIgNjUgNzEnLnJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyldLFxuXSk7XG5jbGFzcyBEdW1iQXNuMUVuY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB9XG4gICAgb2lkRm9yKG9pZCkge1xuICAgICAgICBjb25zdCBiT2lkID0gb2lkcy5nZXQob2lkKTtcbiAgICAgICAgaWYgKCFiT2lkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBPSUQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goYk9pZCk7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGJPaWQubGVuZ3RoO1xuICAgIH1cbiAgICB6ZXJvKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goYlRhZ0ludGVnZXIsIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKFsweDAxXSksIGJaZXJvKTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMztcbiAgICB9XG4gICAgb25lKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goYlRhZ0ludGVnZXIsIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKFsweDAxXSksIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKFsweDAxXSkpO1xuICAgICAgICB0aGlzLmxlbmd0aCArPSAzO1xuICAgIH1cbiAgICB1bnNpZ25lZEludGVnZXIoaW50ZWdlcikge1xuICAgICAgICBpZiAoaW50ZWdlclswXSAmIDB4ODApIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGVuY29kZUxlbmd0aChpbnRlZ2VyLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wdXNoKGJUYWdJbnRlZ2VyLCBsZW4sIGJaZXJvLCBpbnRlZ2VyKTtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoICs9IDIgKyBsZW4ubGVuZ3RoICsgaW50ZWdlci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaW50ZWdlcltpXSA9PT0gMCAmJiAoaW50ZWdlcltpICsgMV0gJiAweDgwKSA9PT0gMClcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVMZW5ndGgoaW50ZWdlci5sZW5ndGggLSBpKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucHVzaChiVGFnSW50ZWdlciwgZW5jb2RlTGVuZ3RoKGludGVnZXIubGVuZ3RoIC0gaSksIGludGVnZXIuc2xpY2UoaSkpO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggKz0gMSArIGxlbi5sZW5ndGggKyBpbnRlZ2VyLmxlbmd0aCAtIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2N0U3RyKG9jdFN0cikge1xuICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVMZW5ndGgob2N0U3RyLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaChiVGFnT2N0U3RyLCBlbmNvZGVMZW5ndGgob2N0U3RyLmxlbmd0aCksIG9jdFN0cik7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IDEgKyBsZW4ubGVuZ3RoICsgb2N0U3RyLmxlbmd0aDtcbiAgICB9XG4gICAgYml0U3RyKGJpdFMpIHtcbiAgICAgICAgY29uc3QgbGVuID0gZW5jb2RlTGVuZ3RoKGJpdFMubGVuZ3RoICsgMSk7XG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaChiVGFnQml0U3RyLCBlbmNvZGVMZW5ndGgoYml0Uy5sZW5ndGggKyAxKSwgYlplcm8sIGJpdFMpO1xuICAgICAgICB0aGlzLmxlbmd0aCArPSAxICsgbGVuLmxlbmd0aCArIGJpdFMubGVuZ3RoICsgMTtcbiAgICB9XG4gICAgYWRkKHNlcSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goc2VxKTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gc2VxLmxlbmd0aDtcbiAgICB9XG4gICAgZW5kKHRhZyA9IGJUYWdTZXF1ZW5jZSkge1xuICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVMZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gYnVmZmVyXzEuQnVmZmVyLmNvbmNhdChbdGFnLCBsZW4sIC4uLnRoaXMuZWxlbWVudHNdLCAxICsgbGVuLmxlbmd0aCArIHRoaXMubGVuZ3RoKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBEdW1iQXNuMUVuY29kZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4vYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBnZXRfbmFtZWRfY3VydmVfanNfMSA9IHJlcXVpcmUoXCIuL2dldF9uYW1lZF9jdXJ2ZS5qc1wiKTtcbmNvbnN0IGNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEgPSByZXF1aXJlKFwiLi9jaGVja19tb2R1bHVzX2xlbmd0aC5qc1wiKTtcbmNvbnN0IGFzbjFfc2VxdWVuY2VfZW5jb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYXNuMV9zZXF1ZW5jZV9lbmNvZGVyLmpzXCIpO1xuY29uc3QgW21ham9yLCBtaW5vcl0gPSBwcm9jZXNzLnZlcnNpb25cbiAgICAuc2xpY2UoMSlcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5tYXAoKHN0cikgPT4gcGFyc2VJbnQoc3RyLCAxMCkpO1xuY29uc3QgandrSW1wb3J0U3VwcG9ydGVkID0gbWFqb3IgPj0gMTYgfHwgKG1ham9yID09PSAxNSAmJiBtaW5vciA+PSAxMik7XG5jb25zdCBwYXJzZSA9IChqd2spID0+IHtcbiAgICBpZiAoandrSW1wb3J0U3VwcG9ydGVkICYmIGp3ay5rdHkgIT09ICdvY3QnKSB7XG4gICAgICAgIHJldHVybiBqd2suZFxuICAgICAgICAgICAgPyAoMCwgY3J5cHRvXzEuY3JlYXRlUHJpdmF0ZUtleSkoeyBmb3JtYXQ6ICdqd2snLCBrZXk6IGp3ayB9KVxuICAgICAgICAgICAgOiAoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KSh7IGZvcm1hdDogJ2p3aycsIGtleTogandrIH0pO1xuICAgIH1cbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnb2N0Jzoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBjcnlwdG9fMS5jcmVhdGVTZWNyZXRLZXkpKCgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKGp3ay5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUlNBJzoge1xuICAgICAgICAgICAgY29uc3QgZW5jID0gbmV3IGFzbjFfc2VxdWVuY2VfZW5jb2Rlcl9qc18xLmRlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzUHJpdmF0ZSA9IGp3ay5kICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBtb2R1bHVzID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLm4sICdiYXNlNjQnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50ID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLmUsICdiYXNlNjQnKTtcbiAgICAgICAgICAgIGlmIChpc1ByaXZhdGUpIHtcbiAgICAgICAgICAgICAgICBlbmMuemVybygpO1xuICAgICAgICAgICAgICAgIGVuYy51bnNpZ25lZEludGVnZXIobW9kdWx1cyk7XG4gICAgICAgICAgICAgICAgZW5jLnVuc2lnbmVkSW50ZWdlcihleHBvbmVudCk7XG4gICAgICAgICAgICAgICAgZW5jLnVuc2lnbmVkSW50ZWdlcihidWZmZXJfMS5CdWZmZXIuZnJvbShqd2suZCwgJ2Jhc2U2NCcpKTtcbiAgICAgICAgICAgICAgICBlbmMudW5zaWduZWRJbnRlZ2VyKGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGp3ay5wLCAnYmFzZTY0JykpO1xuICAgICAgICAgICAgICAgIGVuYy51bnNpZ25lZEludGVnZXIoYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLnEsICdiYXNlNjQnKSk7XG4gICAgICAgICAgICAgICAgZW5jLnVuc2lnbmVkSW50ZWdlcihidWZmZXJfMS5CdWZmZXIuZnJvbShqd2suZHAsICdiYXNlNjQnKSk7XG4gICAgICAgICAgICAgICAgZW5jLnVuc2lnbmVkSW50ZWdlcihidWZmZXJfMS5CdWZmZXIuZnJvbShqd2suZHEsICdiYXNlNjQnKSk7XG4gICAgICAgICAgICAgICAgZW5jLnVuc2lnbmVkSW50ZWdlcihidWZmZXJfMS5CdWZmZXIuZnJvbShqd2sucWksICdiYXNlNjQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmMudW5zaWduZWRJbnRlZ2VyKG1vZHVsdXMpO1xuICAgICAgICAgICAgICAgIGVuYy51bnNpZ25lZEludGVnZXIoZXhwb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVyID0gZW5jLmVuZCgpO1xuICAgICAgICAgICAgY29uc3QgY3JlYXRlSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAga2V5OiBkZXIsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnZGVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncGtjczEnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGtleU9iamVjdCA9IGlzUHJpdmF0ZSA/ICgwLCBjcnlwdG9fMS5jcmVhdGVQcml2YXRlS2V5KShjcmVhdGVJbnB1dCkgOiAoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KShjcmVhdGVJbnB1dCk7XG4gICAgICAgICAgICAoMCwgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMS5zZXRNb2R1bHVzTGVuZ3RoKShrZXlPYmplY3QsIG1vZHVsdXMubGVuZ3RoIDw8IDMpO1xuICAgICAgICAgICAgcmV0dXJuIGtleU9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFQyc6IHtcbiAgICAgICAgICAgIGNvbnN0IGVuYyA9IG5ldyBhc24xX3NlcXVlbmNlX2VuY29kZXJfanNfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBpc1ByaXZhdGUgPSBqd2suZCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgcHViID0gYnVmZmVyXzEuQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgYnVmZmVyXzEuQnVmZmVyLmFsbG9jKDEsIDQpLFxuICAgICAgICAgICAgICAgIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGp3ay54LCAnYmFzZTY0JyksXG4gICAgICAgICAgICAgICAgYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLnksICdiYXNlNjQnKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgICAgIGVuYy56ZXJvKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jJDEgPSBuZXcgYXNuMV9zZXF1ZW5jZV9lbmNvZGVyX2pzXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGVuYyQxLm9pZEZvcignZWNQdWJsaWNLZXknKTtcbiAgICAgICAgICAgICAgICBlbmMkMS5vaWRGb3IoandrLmNydik7XG4gICAgICAgICAgICAgICAgZW5jLmFkZChlbmMkMS5lbmQoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jJDIgPSBuZXcgYXNuMV9zZXF1ZW5jZV9lbmNvZGVyX2pzXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGVuYyQyLm9uZSgpO1xuICAgICAgICAgICAgICAgIGVuYyQyLm9jdFN0cihidWZmZXJfMS5CdWZmZXIuZnJvbShqd2suZCwgJ2Jhc2U2NCcpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmMkMyA9IG5ldyBhc24xX3NlcXVlbmNlX2VuY29kZXJfanNfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZW5jJDMuYml0U3RyKHB1Yik7XG4gICAgICAgICAgICAgICAgY29uc3QgZjIgPSBlbmMkMy5lbmQoYnVmZmVyXzEuQnVmZmVyLmZyb20oWzB4YTFdKSk7XG4gICAgICAgICAgICAgICAgZW5jJDIuYWRkKGYyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmID0gZW5jJDIuZW5kKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jJDQgPSBuZXcgYXNuMV9zZXF1ZW5jZV9lbmNvZGVyX2pzXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGVuYyQ0LmFkZChmKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmMyA9IGVuYyQ0LmVuZChidWZmZXJfMS5CdWZmZXIuZnJvbShbMHgwNF0pKTtcbiAgICAgICAgICAgICAgICBlbmMuYWRkKGYzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXIgPSBlbmMuZW5kKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5T2JqZWN0ID0gKDAsIGNyeXB0b18xLmNyZWF0ZVByaXZhdGVLZXkpKHsga2V5OiBkZXIsIGZvcm1hdDogJ2RlcicsIHR5cGU6ICdwa2NzOCcgfSk7XG4gICAgICAgICAgICAgICAgKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLnNldEN1cnZlKShrZXlPYmplY3QsIGp3ay5jcnYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlPYmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmMkMSA9IG5ldyBhc24xX3NlcXVlbmNlX2VuY29kZXJfanNfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICBlbmMkMS5vaWRGb3IoJ2VjUHVibGljS2V5Jyk7XG4gICAgICAgICAgICBlbmMkMS5vaWRGb3IoandrLmNydik7XG4gICAgICAgICAgICBlbmMuYWRkKGVuYyQxLmVuZCgpKTtcbiAgICAgICAgICAgIGVuYy5iaXRTdHIocHViKTtcbiAgICAgICAgICAgIGNvbnN0IGRlciA9IGVuYy5lbmQoKTtcbiAgICAgICAgICAgIGNvbnN0IGtleU9iamVjdCA9ICgwLCBjcnlwdG9fMS5jcmVhdGVQdWJsaWNLZXkpKHsga2V5OiBkZXIsIGZvcm1hdDogJ2RlcicsIHR5cGU6ICdzcGtpJyB9KTtcbiAgICAgICAgICAgICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5zZXRDdXJ2ZSkoa2V5T2JqZWN0LCBqd2suY3J2KTtcbiAgICAgICAgICAgIHJldHVybiBrZXlPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnT0tQJzoge1xuICAgICAgICAgICAgY29uc3QgZW5jID0gbmV3IGFzbjFfc2VxdWVuY2VfZW5jb2Rlcl9qc18xLmRlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzUHJpdmF0ZSA9IGp3ay5kICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoaXNQcml2YXRlKSB7XG4gICAgICAgICAgICAgICAgZW5jLnplcm8oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmMkMSA9IG5ldyBhc24xX3NlcXVlbmNlX2VuY29kZXJfanNfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZW5jJDEub2lkRm9yKGp3ay5jcnYpO1xuICAgICAgICAgICAgICAgIGVuYy5hZGQoZW5jJDEuZW5kKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuYyQyID0gbmV3IGFzbjFfc2VxdWVuY2VfZW5jb2Rlcl9qc18xLmRlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlbmMkMi5vY3RTdHIoYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLmQsICdiYXNlNjQnKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZiA9IGVuYyQyLmVuZChidWZmZXJfMS5CdWZmZXIuZnJvbShbMHgwNF0pKTtcbiAgICAgICAgICAgICAgICBlbmMuYWRkKGYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGVuYy5lbmQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNyeXB0b18xLmNyZWF0ZVByaXZhdGVLZXkpKHsga2V5OiBkZXIsIGZvcm1hdDogJ2RlcicsIHR5cGU6ICdwa2NzOCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmMkMSA9IG5ldyBhc24xX3NlcXVlbmNlX2VuY29kZXJfanNfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICBlbmMkMS5vaWRGb3IoandrLmNydik7XG4gICAgICAgICAgICBlbmMuYWRkKGVuYyQxLmVuZCgpKTtcbiAgICAgICAgICAgIGVuYy5iaXRTdHIoYnVmZmVyXzEuQnVmZmVyLmZyb20oandrLngsICdiYXNlNjQnKSk7XG4gICAgICAgICAgICBjb25zdCBkZXIgPSBlbmMuZW5kKCk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoeyBrZXk6IGRlciwgZm9ybWF0OiAnZGVyJywgdHlwZTogJ3Nwa2knIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBKV0sgXCJrdHlcIiAoS2V5IFR5cGUpIFBhcmFtZXRlciB2YWx1ZScpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGI2NCwgZGVzY3JpcHRvcikgPT4ge1xuICAgIGNvbnN0IG5ld2xpbmVkID0gKGI2NC5tYXRjaCgvLnsxLDY0fS9nKSB8fCBbXSkuam9pbignXFxuJyk7XG4gICAgcmV0dXJuIGAtLS0tLUJFR0lOICR7ZGVzY3JpcHRvcn0tLS0tLVxcbiR7bmV3bGluZWR9XFxuLS0tLS1FTkQgJHtkZXNjcmlwdG9yfS0tLS0tYDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW1wb3J0SldLID0gZXhwb3J0cy5pbXBvcnRQS0NTOCA9IGV4cG9ydHMuaW1wb3J0WDUwOSA9IGV4cG9ydHMuaW1wb3J0U1BLSSA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgYXNuMV9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYXNuMS5qc1wiKTtcbmNvbnN0IGFzbjFfanNfMiA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2FzbjEuanNcIik7XG5jb25zdCBqd2tfdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9qd2tfdG9fa2V5LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBmb3JtYXRfcGVtX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2Zvcm1hdF9wZW0uanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuZnVuY3Rpb24gZ2V0RWxlbWVudChzZXEpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgbGV0IG5leHQgPSAwO1xuICAgIHdoaWxlIChuZXh0IDwgc2VxLmxlbmd0aCkge1xuICAgICAgICBsZXQgbmV4dFBhcnQgPSBwYXJzZUVsZW1lbnQoc2VxLnN1YmFycmF5KG5leHQpKTtcbiAgICAgICAgcmVzdWx0LnB1c2gobmV4dFBhcnQpO1xuICAgICAgICBuZXh0ICs9IG5leHRQYXJ0LmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXJzZUVsZW1lbnQoYnl0ZXMpIHtcbiAgICBsZXQgcG9zaXRpb24gPSAwO1xuICAgIGxldCB0YWcgPSBieXRlc1swXSAmIDB4MWY7XG4gICAgcG9zaXRpb24rKztcbiAgICBpZiAodGFnID09PSAweDFmKSB7XG4gICAgICAgIHRhZyA9IDA7XG4gICAgICAgIHdoaWxlIChieXRlc1twb3NpdGlvbl0gPj0gMHg4MCkge1xuICAgICAgICAgICAgdGFnID0gdGFnICogMTI4ICsgYnl0ZXNbcG9zaXRpb25dIC0gMHg4MDtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgIH1cbiAgICAgICAgdGFnID0gdGFnICogMTI4ICsgYnl0ZXNbcG9zaXRpb25dIC0gMHg4MDtcbiAgICAgICAgcG9zaXRpb24rKztcbiAgICB9XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgaWYgKGJ5dGVzW3Bvc2l0aW9uXSA8IDB4ODApIHtcbiAgICAgICAgbGVuZ3RoID0gYnl0ZXNbcG9zaXRpb25dO1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgIH1cbiAgICBlbHNlIGlmIChsZW5ndGggPT09IDB4ODApIHtcbiAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgd2hpbGUgKGJ5dGVzW3Bvc2l0aW9uICsgbGVuZ3RoXSAhPT0gMCB8fCBieXRlc1twb3NpdGlvbiArIGxlbmd0aCArIDFdICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gYnl0ZXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW5kZWZpbml0ZSBmb3JtIGxlbmd0aCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnl0ZUxlbmd0aCA9IHBvc2l0aW9uICsgbGVuZ3RoICsgMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBjb250ZW50czogYnl0ZXMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKSxcbiAgICAgICAgICAgIHJhdzogYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZUxlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgbnVtYmVyT2ZEaWdpdHMgPSBieXRlc1twb3NpdGlvbl0gJiAweDdmO1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGlnaXRzOyBpKyspIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aCAqIDI1NiArIGJ5dGVzW3Bvc2l0aW9uXTtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnl0ZUxlbmd0aCA9IHBvc2l0aW9uICsgbGVuZ3RoO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgIGNvbnRlbnRzOiBieXRlcy5zdWJhcnJheShwb3NpdGlvbiwgYnl0ZUxlbmd0aCksXG4gICAgICAgIHJhdzogYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZUxlbmd0aCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNwa2lGcm9tWDUwOShidWYpIHtcbiAgICBjb25zdCB0YnNDZXJ0aWZpY2F0ZSA9IGdldEVsZW1lbnQoZ2V0RWxlbWVudChwYXJzZUVsZW1lbnQoYnVmKS5jb250ZW50cylbMF0uY29udGVudHMpO1xuICAgIHJldHVybiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlQmFzZTY0KSh0YnNDZXJ0aWZpY2F0ZVt0YnNDZXJ0aWZpY2F0ZVswXS5yYXdbMF0gPT09IDB4YTAgPyA2IDogNV0ucmF3KTtcbn1cbmZ1bmN0aW9uIGdldFNQS0koeDUwOSkge1xuICAgIGNvbnN0IHBlbSA9IHg1MDkucmVwbGFjZSgvKD86LS0tLS0oPzpCRUdJTnxFTkQpIENFUlRJRklDQVRFLS0tLS18XFxzKS9nLCAnJyk7XG4gICAgY29uc3QgcmF3ID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZUJhc2U2NCkocGVtKTtcbiAgICByZXR1cm4gKDAsIGZvcm1hdF9wZW1fanNfMS5kZWZhdWx0KShzcGtpRnJvbVg1MDkocmF3KSwgJ1BVQkxJQyBLRVknKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFNQS0koc3BraSwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBzcGtpICE9PSAnc3RyaW5nJyB8fCBzcGtpLmluZGV4T2YoJy0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzcGtpXCIgbXVzdCBiZSBTUEtJIGZvcm1hdHRlZCBzdHJpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBhc24xX2pzXzEuZnJvbVNQS0kpKHNwa2ksIGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmltcG9ydFNQS0kgPSBpbXBvcnRTUEtJO1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0WDUwOSh4NTA5LCBhbGcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHg1MDkgIT09ICdzdHJpbmcnIHx8IHg1MDkuaW5kZXhPZignLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ4NTA5XCIgbXVzdCBiZSBYLjUwOSBmb3JtYXR0ZWQgc3RyaW5nJyk7XG4gICAgfVxuICAgIGxldCBzcGtpO1xuICAgIHRyeSB7XG4gICAgICAgIHNwa2kgPSBnZXRTUEtJKHg1MDkpO1xuICAgIH1cbiAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmFpbGVkIHRvIHBhcnNlIHRoZSBYLjUwOSBjZXJ0aWZpY2F0ZScsIHsgY2F1c2UgfSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgYXNuMV9qc18xLmZyb21TUEtJKShzcGtpLCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5pbXBvcnRYNTA5ID0gaW1wb3J0WDUwOTtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFBLQ1M4KHBrY3M4LCBhbGcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHBrY3M4ICE9PSAnc3RyaW5nJyB8fCBwa2NzOC5pbmRleE9mKCctLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS0nKSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInBrY3M4XCIgbXVzdCBiZSBQS0NTIzggZm9ybWF0dGVkIHN0cmluZycpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGFzbjFfanNfMi5mcm9tUEtDUzgpKHBrY3M4LCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5pbXBvcnRQS0NTOCA9IGltcG9ydFBLQ1M4O1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0SldLKGp3aywgYWxnLCBvY3RBc0tleU9iamVjdCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd2spKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0pXSyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBhbGcgfHwgKGFsZyA9IGp3ay5hbGcpO1xuICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyB8fCAhYWxnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYWxnXCIgYXJndW1lbnQgaXMgcmVxdWlyZWQgd2hlbiBcImp3ay5hbGdcIiBpcyBub3QgcHJlc2VudCcpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnb2N0JzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgandrLmsgIT09ICdzdHJpbmcnIHx8ICFqd2suaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgXCJrXCIgKEtleSBWYWx1ZSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvY3RBc0tleU9iamVjdCAhPT0gbnVsbCAmJiBvY3RBc0tleU9iamVjdCAhPT0gdm9pZCAwID8gb2N0QXNLZXlPYmplY3QgOiAob2N0QXNLZXlPYmplY3QgPSBqd2suZXh0ICE9PSB0cnVlKTtcbiAgICAgICAgICAgIGlmIChvY3RBc0tleU9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgandrX3RvX2tleV9qc18xLmRlZmF1bHQpKHsgLi4uandrLCBhbGcsIGV4dDogKF9hID0gandrLmV4dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandrLmspO1xuICAgICAgICBjYXNlICdSU0EnOlxuICAgICAgICAgICAgaWYgKGp3ay5vdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdSU0EgSldLIFwib3RoXCIgKE90aGVyIFByaW1lcyBJbmZvKSBQYXJhbWV0ZXIgdmFsdWUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdFQyc6XG4gICAgICAgIGNhc2UgJ09LUCc6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGp3a190b19rZXlfanNfMS5kZWZhdWx0KSh7IC4uLmp3aywgYWxnIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIFwia3R5XCIgKEtleSBUeXBlKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG59XG5leHBvcnRzLmltcG9ydEpXSyA9IGltcG9ydEpXSztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2lzX2tleV9saWtlLmpzXCIpO1xuY29uc3Qgc3ltbWV0cmljVHlwZUNoZWNrID0gKGFsZywga2V5KSA9PiB7XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoISgwLCBpc19rZXlfbGlrZV9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS53aXRoQWxnKShhbGcsIGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG4gICAgfVxuICAgIGlmIChrZXkudHlwZSAhPT0gJ3NlY3JldCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBzeW1tZXRyaWMgYWxnb3JpdGhtcyBtdXN0IGJlIG9mIHR5cGUgXCJzZWNyZXRcImApO1xuICAgIH1cbn07XG5jb25zdCBhc3ltbWV0cmljVHlwZUNoZWNrID0gKGFsZywga2V5LCB1c2FnZSkgPT4ge1xuICAgIGlmICghKDAsIGlzX2tleV9saWtlX2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLndpdGhBbGcpKGFsZywga2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzKSk7XG4gICAgfVxuICAgIGlmIChrZXkudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobXMgbXVzdCBub3QgYmUgb2YgdHlwZSBcInNlY3JldFwiYCk7XG4gICAgfVxuICAgIGlmICh1c2FnZSA9PT0gJ3NpZ24nICYmIGtleS50eXBlID09PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIHNpZ25pbmcgbXVzdCBiZSBvZiB0eXBlIFwicHJpdmF0ZVwiYCk7XG4gICAgfVxuICAgIGlmICh1c2FnZSA9PT0gJ2RlY3J5cHQnICYmIGtleS50eXBlID09PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIGRlY3J5cHRpb24gbXVzdCBiZSBvZiB0eXBlIFwicHJpdmF0ZVwiYCk7XG4gICAgfVxuICAgIGlmIChrZXkuYWxnb3JpdGhtICYmIHVzYWdlID09PSAndmVyaWZ5JyAmJiBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7aXNfa2V5X2xpa2VfanNfMS50eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gdmVyaWZ5aW5nIG11c3QgYmUgb2YgdHlwZSBcInB1YmxpY1wiYCk7XG4gICAgfVxuICAgIGlmIChrZXkuYWxnb3JpdGhtICYmIHVzYWdlID09PSAnZW5jcnlwdCcgJiYga2V5LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIGVuY3J5cHRpb24gbXVzdCBiZSBvZiB0eXBlIFwicHVibGljXCJgKTtcbiAgICB9XG59O1xuY29uc3QgY2hlY2tLZXlUeXBlID0gKGFsZywga2V5LCB1c2FnZSkgPT4ge1xuICAgIGNvbnN0IHN5bW1ldHJpYyA9IGFsZy5zdGFydHNXaXRoKCdIUycpIHx8XG4gICAgICAgIGFsZyA9PT0gJ2RpcicgfHxcbiAgICAgICAgYWxnLnN0YXJ0c1dpdGgoJ1BCRVMyJykgfHxcbiAgICAgICAgL15BXFxkezN9KD86R0NNKT9LVyQvLnRlc3QoYWxnKTtcbiAgICBpZiAoc3ltbWV0cmljKSB7XG4gICAgICAgIHN5bW1ldHJpY1R5cGVDaGVjayhhbGcsIGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3ltbWV0cmljVHlwZUNoZWNrKGFsZywga2V5LCB1c2FnZSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrS2V5VHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgY2hlY2tfaXZfbGVuZ3RoX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NoZWNrX2l2X2xlbmd0aC5qc1wiKTtcbmNvbnN0IGNoZWNrX2Nla19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX2Nla19sZW5ndGguanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgY2JjX3RhZ19qc18xID0gcmVxdWlyZShcIi4vY2JjX3RhZy5qc1wiKTtcbmNvbnN0IHdlYmNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vd2ViY3J5cHRvLmpzXCIpO1xuY29uc3QgY3J5cHRvX2tleV9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9jcnlwdG9fa2V5LmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBjaXBoZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9jaXBoZXJzLmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gY2JjRW5jcnlwdChlbmMsIHBsYWludGV4dCwgY2VrLCBpdiwgYWFkKSB7XG4gICAgY29uc3Qga2V5U2l6ZSA9IHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApO1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGNlaykpIHtcbiAgICAgICAgY2VrID0gY2VrLmV4cG9ydCgpO1xuICAgIH1cbiAgICBjb25zdCBlbmNLZXkgPSBjZWsuc3ViYXJyYXkoa2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBtYWNLZXkgPSBjZWsuc3ViYXJyYXkoMCwga2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBhbGdvcml0aG0gPSBgYWVzLSR7a2V5U2l6ZX0tY2JjYDtcbiAgICBpZiAoISgwLCBjaXBoZXJzX2pzXzEuZGVmYXVsdCkoYWxnb3JpdGhtKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7ZW5jfSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxuICAgIGNvbnN0IGNpcGhlciA9ICgwLCBjcnlwdG9fMS5jcmVhdGVDaXBoZXJpdikoYWxnb3JpdGhtLCBlbmNLZXksIGl2KTtcbiAgICBjb25zdCBjaXBoZXJ0ZXh0ID0gKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdCkoY2lwaGVyLnVwZGF0ZShwbGFpbnRleHQpLCBjaXBoZXIuZmluYWwoKSk7XG4gICAgY29uc3QgbWFjU2l6ZSA9IHBhcnNlSW50KGVuYy5zbGljZSgtMyksIDEwKTtcbiAgICBjb25zdCB0YWcgPSAoMCwgY2JjX3RhZ19qc18xLmRlZmF1bHQpKGFhZCwgaXYsIGNpcGhlcnRleHQsIG1hY1NpemUsIG1hY0tleSwga2V5U2l6ZSk7XG4gICAgcmV0dXJuIHsgY2lwaGVydGV4dCwgdGFnIH07XG59XG5mdW5jdGlvbiBnY21FbmNyeXB0KGVuYywgcGxhaW50ZXh0LCBjZWssIGl2LCBhYWQpIHtcbiAgICBjb25zdCBrZXlTaXplID0gcGFyc2VJbnQoZW5jLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gYGFlcy0ke2tleVNpemV9LWdjbWA7XG4gICAgaWYgKCEoMCwgY2lwaGVyc19qc18xLmRlZmF1bHQpKGFsZ29yaXRobSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYGFsZyAke2VuY30gaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbiAgICBjb25zdCBjaXBoZXIgPSAoMCwgY3J5cHRvXzEuY3JlYXRlQ2lwaGVyaXYpKGFsZ29yaXRobSwgY2VrLCBpdiwgeyBhdXRoVGFnTGVuZ3RoOiAxNiB9KTtcbiAgICBpZiAoYWFkLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgY2lwaGVyLnNldEFBRChhYWQsIHsgcGxhaW50ZXh0TGVuZ3RoOiBwbGFpbnRleHQubGVuZ3RoIH0pO1xuICAgIH1cbiAgICBjb25zdCBjaXBoZXJ0ZXh0ID0gY2lwaGVyLnVwZGF0ZShwbGFpbnRleHQpO1xuICAgIGNpcGhlci5maW5hbCgpO1xuICAgIGNvbnN0IHRhZyA9IGNpcGhlci5nZXRBdXRoVGFnKCk7XG4gICAgcmV0dXJuIHsgY2lwaGVydGV4dCwgdGFnIH07XG59XG5jb25zdCBlbmNyeXB0ID0gKGVuYywgcGxhaW50ZXh0LCBjZWssIGl2LCBhYWQpID0+IHtcbiAgICBsZXQga2V5O1xuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGNlaykpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja0VuY0NyeXB0b0tleSkoY2VrLCBlbmMsICdlbmNyeXB0Jyk7XG4gICAgICAgIGtleSA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGNlayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShjZWspKSB7XG4gICAgICAgIGtleSA9IGNlaztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoY2VrLCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbiAgICB9XG4gICAgKDAsIGNoZWNrX2Nla19sZW5ndGhfanNfMS5kZWZhdWx0KShlbmMsIGtleSk7XG4gICAgKDAsIGNoZWNrX2l2X2xlbmd0aF9qc18xLmRlZmF1bHQpKGVuYywgaXYpO1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICAgIGNhc2UgJ0ExMjhDQkMtSFMyNTYnOlxuICAgICAgICBjYXNlICdBMTkyQ0JDLUhTMzg0JzpcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gY2JjRW5jcnlwdChlbmMsIHBsYWludGV4dCwga2V5LCBpdiwgYWFkKTtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgICAgIHJldHVybiBnY21FbmNyeXB0KGVuYywgcGxhaW50ZXh0LCBrZXksIGl2LCBhYWQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBDb250ZW50IEVuY3J5cHRpb24gQWxnb3JpdGhtJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGVuY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW53cmFwID0gZXhwb3J0cy53cmFwID0gdm9pZCAwO1xuY29uc3QgZW5jcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvZW5jcnlwdC5qc1wiKTtcbmNvbnN0IGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2RlY3J5cHQuanNcIik7XG5jb25zdCBpdl9qc18xID0gcmVxdWlyZShcIi4vaXYuanNcIik7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIHdyYXAoYWxnLCBrZXksIGNlaywgaXYpIHtcbiAgICBjb25zdCBqd2VBbGdvcml0aG0gPSBhbGcuc2xpY2UoMCwgNyk7XG4gICAgaXYgfHwgKGl2ID0gKDAsIGl2X2pzXzEuZGVmYXVsdCkoandlQWxnb3JpdGhtKSk7XG4gICAgY29uc3QgeyBjaXBoZXJ0ZXh0OiBlbmNyeXB0ZWRLZXksIHRhZyB9ID0gYXdhaXQgKDAsIGVuY3J5cHRfanNfMS5kZWZhdWx0KShqd2VBbGdvcml0aG0sIGNlaywga2V5LCBpdiwgbmV3IFVpbnQ4QXJyYXkoMCkpO1xuICAgIHJldHVybiB7IGVuY3J5cHRlZEtleSwgaXY6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGl2KSwgdGFnOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKSh0YWcpIH07XG59XG5leHBvcnRzLndyYXAgPSB3cmFwO1xuYXN5bmMgZnVuY3Rpb24gdW53cmFwKGFsZywga2V5LCBlbmNyeXB0ZWRLZXksIGl2LCB0YWcpIHtcbiAgICBjb25zdCBqd2VBbGdvcml0aG0gPSBhbGcuc2xpY2UoMCwgNyk7XG4gICAgcmV0dXJuICgwLCBkZWNyeXB0X2pzXzEuZGVmYXVsdCkoandlQWxnb3JpdGhtLCBrZXksIGVuY3J5cHRlZEtleSwgaXYsIHRhZywgbmV3IFVpbnQ4QXJyYXkoMCkpO1xufVxuZXhwb3J0cy51bndyYXAgPSB1bndyYXA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFlc2t3X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9hZXNrdy5qc1wiKTtcbmNvbnN0IEVDREggPSByZXF1aXJlKFwiLi4vcnVudGltZS9lY2RoZXMuanNcIik7XG5jb25zdCBwYmVzMmt3X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9wYmVzMmt3LmpzXCIpO1xuY29uc3QgcnNhZXNfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3JzYWVzLmpzXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGNla19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9jZWsuanNcIik7XG5jb25zdCBpbXBvcnRfanNfMSA9IHJlcXVpcmUoXCIuLi9rZXkvaW1wb3J0LmpzXCIpO1xuY29uc3QgY2hlY2tfa2V5X3R5cGVfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX2tleV90eXBlLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19vYmplY3QuanNcIik7XG5jb25zdCBhZXNnY21rd19qc18xID0gcmVxdWlyZShcIi4vYWVzZ2Nta3cuanNcIik7XG5hc3luYyBmdW5jdGlvbiBkZWNyeXB0S2V5TWFuYWdlbWVudChhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBqb3NlSGVhZGVyLCBvcHRpb25zKSB7XG4gICAgKDAsIGNoZWNrX2tleV90eXBlX2pzXzEuZGVmYXVsdCkoYWxnLCBrZXksICdkZWNyeXB0Jyk7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnZGlyJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdFbmNvdW50ZXJlZCB1bmV4cGVjdGVkIEpXRSBFbmNyeXB0ZWQgS2V5Jyk7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VDREgtRVMnOlxuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdFbmNvdW50ZXJlZCB1bmV4cGVjdGVkIEpXRSBFbmNyeXB0ZWQgS2V5Jyk7XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMTkyS1cnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGpvc2VIZWFkZXIuZXBrKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJlcGtcIiAoRXBoZW1lcmFsIFB1YmxpYyBLZXkpIG1pc3Npbmcgb3IgaW52YWxpZGApO1xuICAgICAgICAgICAgaWYgKCFFQ0RILmVjZGhBbGxvd2VkKGtleSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0VDREggd2l0aCB0aGUgcHJvdmlkZWQga2V5IGlzIG5vdCBhbGxvd2VkIG9yIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWUnKTtcbiAgICAgICAgICAgIGNvbnN0IGVwayA9IGF3YWl0ICgwLCBpbXBvcnRfanNfMS5pbXBvcnRKV0spKGpvc2VIZWFkZXIuZXBrLCBhbGcpO1xuICAgICAgICAgICAgbGV0IHBhcnR5VUluZm87XG4gICAgICAgICAgICBsZXQgcGFydHlWSW5mbztcbiAgICAgICAgICAgIGlmIChqb3NlSGVhZGVyLmFwdSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBqb3NlSGVhZGVyLmFwdSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBKT1NFIEhlYWRlciBcImFwdVwiIChBZ3JlZW1lbnQgUGFydHlVSW5mbykgaW52YWxpZGApO1xuICAgICAgICAgICAgICAgIHBhcnR5VUluZm8gPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqb3NlSGVhZGVyLmFwdSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoam9zZUhlYWRlci5hcHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5hcHYgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJhcHZcIiAoQWdyZWVtZW50IFBhcnR5VkluZm8pIGludmFsaWRgKTtcbiAgICAgICAgICAgICAgICBwYXJ0eVZJbmZvID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoam9zZUhlYWRlci5hcHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2hhcmVkU2VjcmV0ID0gYXdhaXQgRUNESC5kZXJpdmVLZXkoZXBrLCBrZXksIGFsZyA9PT0gJ0VDREgtRVMnID8gam9zZUhlYWRlci5lbmMgOiBhbGcsIGFsZyA9PT0gJ0VDREgtRVMnID8gKDAsIGNla19qc18xLmJpdExlbmd0aCkoam9zZUhlYWRlci5lbmMpIDogcGFyc2VJbnQoYWxnLnNsaWNlKC01LCAtMiksIDEwKSwgcGFydHlVSW5mbywgcGFydHlWSW5mbyk7XG4gICAgICAgICAgICBpZiAoYWxnID09PSAnRUNESC1FUycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoYXJlZFNlY3JldDtcbiAgICAgICAgICAgIGlmIChlbmNyeXB0ZWRLZXkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIEVuY3J5cHRlZCBLZXkgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBhZXNrd19qc18xLnVud3JhcCkoYWxnLnNsaWNlKC02KSwgc2hhcmVkU2VjcmV0LCBlbmNyeXB0ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHJzYWVzX2pzXzEuZGVjcnlwdCkoYWxnLCBrZXksIGVuY3J5cHRlZEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUEJFUzItSFMyNTYrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFMzODQrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIucDJjICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJwMmNcIiAoUEJFUzIgQ291bnQpIG1pc3Npbmcgb3IgaW52YWxpZGApO1xuICAgICAgICAgICAgY29uc3QgcDJjTGltaXQgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heFBCRVMyQ291bnQpIHx8IDEwMDAwO1xuICAgICAgICAgICAgaWYgKGpvc2VIZWFkZXIucDJjID4gcDJjTGltaXQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoYEpPU0UgSGVhZGVyIFwicDJjXCIgKFBCRVMyIENvdW50KSBvdXQgaXMgb2YgYWNjZXB0YWJsZSBib3VuZHNgKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5wMnMgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBKT1NFIEhlYWRlciBcInAyc1wiIChQQkVTMiBTYWx0KSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgcGJlczJrd19qc18xLmRlY3J5cHQpKGFsZywga2V5LCBlbmNyeXB0ZWRLZXksIGpvc2VIZWFkZXIucDJjLCAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqb3NlSGVhZGVyLnAycykpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGlmIChlbmNyeXB0ZWRLZXkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIEVuY3J5cHRlZCBLZXkgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBhZXNrd19qc18xLnVud3JhcCkoYWxnLCBrZXksIGVuY3J5cHRlZEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQTEyOEdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIuaXYgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBKT1NFIEhlYWRlciBcIml2XCIgKEluaXRpYWxpemF0aW9uIFZlY3RvcikgbWlzc2luZyBvciBpbnZhbGlkYCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIudGFnICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJ0YWdcIiAoQXV0aGVudGljYXRpb24gVGFnKSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICAgICAgICAgIGNvbnN0IGl2ID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoam9zZUhlYWRlci5pdik7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqb3NlSGVhZGVyLnRhZyk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGFlc2djbWt3X2pzXzEudW53cmFwKShhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBpdiwgdGFnKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBcImFsZ1wiIChKV0UgQWxnb3JpdGhtKSBoZWFkZXIgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlY3J5cHRLZXlNYW5hZ2VtZW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlQ3JpdChFcnIsIHJlY29nbml6ZWREZWZhdWx0LCByZWNvZ25pemVkT3B0aW9uLCBwcm90ZWN0ZWRIZWFkZXIsIGpvc2VIZWFkZXIpIHtcbiAgICBpZiAoam9zZUhlYWRlci5jcml0ICE9PSB1bmRlZmluZWQgJiYgcHJvdGVjdGVkSGVhZGVyLmNyaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyKCdcImNyaXRcIiAoQ3JpdGljYWwpIEhlYWRlciBQYXJhbWV0ZXIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkJyk7XG4gICAgfVxuICAgIGlmICghcHJvdGVjdGVkSGVhZGVyIHx8IHByb3RlY3RlZEhlYWRlci5jcml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQoKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3RlY3RlZEhlYWRlci5jcml0KSB8fFxuICAgICAgICBwcm90ZWN0ZWRIZWFkZXIuY3JpdC5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgcHJvdGVjdGVkSGVhZGVyLmNyaXQuc29tZSgoaW5wdXQpID0+IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgfHwgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyKCdcImNyaXRcIiAoQ3JpdGljYWwpIEhlYWRlciBQYXJhbWV0ZXIgTVVTVCBiZSBhbiBhcnJheSBvZiBub24tZW1wdHkgc3RyaW5ncyB3aGVuIHByZXNlbnQnKTtcbiAgICB9XG4gICAgbGV0IHJlY29nbml6ZWQ7XG4gICAgaWYgKHJlY29nbml6ZWRPcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWNvZ25pemVkID0gbmV3IE1hcChbLi4uT2JqZWN0LmVudHJpZXMocmVjb2duaXplZE9wdGlvbiksIC4uLnJlY29nbml6ZWREZWZhdWx0LmVudHJpZXMoKV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVjb2duaXplZCA9IHJlY29nbml6ZWREZWZhdWx0O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiBwcm90ZWN0ZWRIZWFkZXIuY3JpdCkge1xuICAgICAgICBpZiAoIXJlY29nbml6ZWQuaGFzKHBhcmFtZXRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBFeHRlbnNpb24gSGVhZGVyIFBhcmFtZXRlciBcIiR7cGFyYW1ldGVyfVwiIGlzIG5vdCByZWNvZ25pemVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvc2VIZWFkZXJbcGFyYW1ldGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyKGBFeHRlbnNpb24gSGVhZGVyIFBhcmFtZXRlciBcIiR7cGFyYW1ldGVyfVwiIGlzIG1pc3NpbmdgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWNvZ25pemVkLmdldChwYXJhbWV0ZXIpICYmIHByb3RlY3RlZEhlYWRlcltwYXJhbWV0ZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnIoYEV4dGVuc2lvbiBIZWFkZXIgUGFyYW1ldGVyIFwiJHtwYXJhbWV0ZXJ9XCIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTZXQocHJvdGVjdGVkSGVhZGVyLmNyaXQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdGVDcml0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZUFsZ29yaXRobXMgPSAob3B0aW9uLCBhbGdvcml0aG1zKSA9PiB7XG4gICAgaWYgKGFsZ29yaXRobXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAoIUFycmF5LmlzQXJyYXkoYWxnb3JpdGhtcykgfHwgYWxnb3JpdGhtcy5zb21lKChzKSA9PiB0eXBlb2YgcyAhPT0gJ3N0cmluZycpKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBcIiR7b3B0aW9ufVwiIG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3NgKTtcbiAgICB9XG4gICAgaWYgKCFhbGdvcml0aG1zKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KGFsZ29yaXRobXMpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlQWxnb3JpdGhtcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mbGF0dGVuZWREZWNyeXB0ID0gdm9pZCAwO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9kZWNyeXB0LmpzXCIpO1xuY29uc3QgemxpYl9qc18xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvemxpYi5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgaXNfZGlzam9pbnRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfZGlzam9pbnQuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuY29uc3QgZGVjcnlwdF9rZXlfbWFuYWdlbWVudF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9kZWNyeXB0X2tleV9tYW5hZ2VtZW50LmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGNla19qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9jZWsuanNcIik7XG5jb25zdCB2YWxpZGF0ZV9jcml0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL3ZhbGlkYXRlX2NyaXQuanNcIik7XG5jb25zdCB2YWxpZGF0ZV9hbGdvcml0aG1zX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL3ZhbGlkYXRlX2FsZ29yaXRobXMuanNcIik7XG5hc3luYyBmdW5jdGlvbiBmbGF0dGVuZWREZWNyeXB0KGp3ZSwga2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGp3ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0ZsYXR0ZW5lZCBKV0UgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS5wcm90ZWN0ZWQgPT09IHVuZGVmaW5lZCAmJiBqd2UuaGVhZGVyID09PSB1bmRlZmluZWQgJiYgandlLnVucHJvdGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pPU0UgSGVhZGVyIG1pc3NpbmcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd2UuaXYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgSW5pdGlhbGl6YXRpb24gVmVjdG9yIG1pc3Npbmcgb3IgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd2UuY2lwaGVydGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBDaXBoZXJ0ZXh0IG1pc3Npbmcgb3IgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd2UudGFnICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIEF1dGhlbnRpY2F0aW9uIFRhZyBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UucHJvdGVjdGVkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGp3ZS5wcm90ZWN0ZWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUHJvdGVjdGVkIEhlYWRlciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandlLmVuY3J5cHRlZF9rZXkgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgandlLmVuY3J5cHRlZF9rZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandlLmFhZCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBqd2UuYWFkICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIEFBRCBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandlLmhlYWRlciAhPT0gdW5kZWZpbmVkICYmICEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandlLmhlYWRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBTaGFyZWQgVW5wcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UudW5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiAhKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGp3ZS51bnByb3RlY3RlZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBQZXItUmVjaXBpZW50IFVucHJvdGVjdGVkIEhlYWRlciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkUHJvdDtcbiAgICBpZiAoandlLnByb3RlY3RlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcHJvdGVjdGVkSGVhZGVyID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandlLnByb3RlY3RlZCk7XG4gICAgICAgICAgICBwYXJzZWRQcm90ID0gSlNPTi5wYXJzZShidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShwcm90ZWN0ZWRIZWFkZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFByb3RlY3RlZCBIZWFkZXIgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghKDAsIGlzX2Rpc2pvaW50X2pzXzEuZGVmYXVsdCkocGFyc2VkUHJvdCwgandlLmhlYWRlciwgandlLnVucHJvdGVjdGVkKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFByb3RlY3RlZCwgSldFIFVucHJvdGVjdGVkIEhlYWRlciwgYW5kIEpXRSBQZXItUmVjaXBpZW50IFVucHJvdGVjdGVkIEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgIH1cbiAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAuLi5wYXJzZWRQcm90LFxuICAgICAgICAuLi5qd2UuaGVhZGVyLFxuICAgICAgICAuLi5qd2UudW5wcm90ZWN0ZWQsXG4gICAgfTtcbiAgICAoMCwgdmFsaWRhdGVfY3JpdF9qc18xLmRlZmF1bHQpKGVycm9yc19qc18xLkpXRUludmFsaWQsIG5ldyBNYXAoKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQsIHBhcnNlZFByb3QsIGpvc2VIZWFkZXIpO1xuICAgIGlmIChqb3NlSGVhZGVyLnppcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghcGFyc2VkUHJvdCB8fCAhcGFyc2VkUHJvdC56aXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJ6aXBcIiAoQ29tcHJlc3Npb24gQWxnb3JpdGhtKSBIZWFkZXIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvc2VIZWFkZXIuemlwICE9PSAnREVGJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGFsZywgZW5jIH0gPSBqb3NlSGVhZGVyO1xuICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyB8fCAhYWxnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdtaXNzaW5nIEpXRSBBbGdvcml0aG0gKGFsZykgaW4gSldFIEhlYWRlcicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycgfHwgIWVuYykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnbWlzc2luZyBKV0UgRW5jcnlwdGlvbiBBbGdvcml0aG0gKGVuYykgaW4gSldFIEhlYWRlcicpO1xuICAgIH1cbiAgICBjb25zdCBrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcyA9IG9wdGlvbnMgJiYgKDAsIHZhbGlkYXRlX2FsZ29yaXRobXNfanNfMS5kZWZhdWx0KSgna2V5TWFuYWdlbWVudEFsZ29yaXRobXMnLCBvcHRpb25zLmtleU1hbmFnZW1lbnRBbGdvcml0aG1zKTtcbiAgICBjb25zdCBjb250ZW50RW5jcnlwdGlvbkFsZ29yaXRobXMgPSBvcHRpb25zICYmXG4gICAgICAgICgwLCB2YWxpZGF0ZV9hbGdvcml0aG1zX2pzXzEuZGVmYXVsdCkoJ2NvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcycsIG9wdGlvbnMuY29udGVudEVuY3J5cHRpb25BbGdvcml0aG1zKTtcbiAgICBpZiAoa2V5TWFuYWdlbWVudEFsZ29yaXRobXMgJiYgIWtleU1hbmFnZW1lbnRBbGdvcml0aG1zLmhhcyhhbGcpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFQWxnTm90QWxsb3dlZCgnXCJhbGdcIiAoQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICAgIGlmIChjb250ZW50RW5jcnlwdGlvbkFsZ29yaXRobXMgJiYgIWNvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcy5oYXMoZW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRUFsZ05vdEFsbG93ZWQoJ1wiZW5jXCIgKEVuY3J5cHRpb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICAgIGxldCBlbmNyeXB0ZWRLZXk7XG4gICAgaWYgKGp3ZS5lbmNyeXB0ZWRfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5jcnlwdGVkS2V5ID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandlLmVuY3J5cHRlZF9rZXkpO1xuICAgIH1cbiAgICBsZXQgcmVzb2x2ZWRLZXkgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBrZXkgPSBhd2FpdCBrZXkocGFyc2VkUHJvdCwgandlKTtcbiAgICAgICAgcmVzb2x2ZWRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgY2VrO1xuICAgIHRyeSB7XG4gICAgICAgIGNlayA9IGF3YWl0ICgwLCBkZWNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEuZGVmYXVsdCkoYWxnLCBrZXksIGVuY3J5cHRlZEtleSwgam9zZUhlYWRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvciB8fCBlcnIgaW5zdGFuY2VvZiBlcnJvcnNfanNfMS5KV0VJbnZhbGlkIHx8IGVyciBpbnN0YW5jZW9mIGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjZWsgPSAoMCwgY2VrX2pzXzEuZGVmYXVsdCkoZW5jKTtcbiAgICB9XG4gICAgY29uc3QgaXYgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd2UuaXYpO1xuICAgIGNvbnN0IHRhZyA9ICgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKGp3ZS50YWcpO1xuICAgIGNvbnN0IHByb3RlY3RlZEhlYWRlciA9IGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKChfYSA9IGp3ZS5wcm90ZWN0ZWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKTtcbiAgICBsZXQgYWRkaXRpb25hbERhdGE7XG4gICAgaWYgKGp3ZS5hYWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhZGRpdGlvbmFsRGF0YSA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKHByb3RlY3RlZEhlYWRlciwgYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoJy4nKSwgYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoandlLmFhZCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWRkaXRpb25hbERhdGEgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgfVxuICAgIGxldCBwbGFpbnRleHQgPSBhd2FpdCAoMCwgZGVjcnlwdF9qc18xLmRlZmF1bHQpKGVuYywgY2VrLCAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd2UuY2lwaGVydGV4dCksIGl2LCB0YWcsIGFkZGl0aW9uYWxEYXRhKTtcbiAgICBpZiAoam9zZUhlYWRlci56aXAgPT09ICdERUYnKSB7XG4gICAgICAgIHBsYWludGV4dCA9IGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmluZmxhdGVSYXcpIHx8IHpsaWJfanNfMS5pbmZsYXRlKShwbGFpbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IHBsYWludGV4dCB9O1xuICAgIGlmIChqd2UucHJvdGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnByb3RlY3RlZEhlYWRlciA9IHBhcnNlZFByb3Q7XG4gICAgfVxuICAgIGlmIChqd2UuYWFkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LmFkZGl0aW9uYWxBdXRoZW50aWNhdGVkRGF0YSA9ICgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKGp3ZS5hYWQpO1xuICAgIH1cbiAgICBpZiAoandlLnVucHJvdGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnNoYXJlZFVucHJvdGVjdGVkSGVhZGVyID0gandlLnVucHJvdGVjdGVkO1xuICAgIH1cbiAgICBpZiAoandlLmhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC51bnByb3RlY3RlZEhlYWRlciA9IGp3ZS5oZWFkZXI7XG4gICAgfVxuICAgIGlmIChyZXNvbHZlZEtleSkge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5mbGF0dGVuZWREZWNyeXB0ID0gZmxhdHRlbmVkRGVjcnlwdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21wYWN0RGVjcnlwdCA9IHZvaWQgMDtcbmNvbnN0IGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9mbGF0dGVuZWQvZGVjcnlwdC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGNvbXBhY3REZWNyeXB0KGp3ZSwga2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKGp3ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgandlID0gYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoandlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdDb21wYWN0IEpXRSBtdXN0IGJlIGEgc3RyaW5nIG9yIFVpbnQ4QXJyYXknKTtcbiAgICB9XG4gICAgY29uc3QgeyAwOiBwcm90ZWN0ZWRIZWFkZXIsIDE6IGVuY3J5cHRlZEtleSwgMjogaXYsIDM6IGNpcGhlcnRleHQsIDQ6IHRhZywgbGVuZ3RoLCB9ID0gandlLnNwbGl0KCcuJyk7XG4gICAgaWYgKGxlbmd0aCAhPT0gNSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSW52YWxpZCBDb21wYWN0IEpXRScpO1xuICAgIH1cbiAgICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCAoMCwgZGVjcnlwdF9qc18xLmZsYXR0ZW5lZERlY3J5cHQpKHtcbiAgICAgICAgY2lwaGVydGV4dCxcbiAgICAgICAgaXY6IChpdiB8fCB1bmRlZmluZWQpLFxuICAgICAgICBwcm90ZWN0ZWQ6IHByb3RlY3RlZEhlYWRlciB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRhZzogKHRhZyB8fCB1bmRlZmluZWQpLFxuICAgICAgICBlbmNyeXB0ZWRfa2V5OiBlbmNyeXB0ZWRLZXkgfHwgdW5kZWZpbmVkLFxuICAgIH0sIGtleSwgb3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0geyBwbGFpbnRleHQ6IGRlY3J5cHRlZC5wbGFpbnRleHQsIHByb3RlY3RlZEhlYWRlcjogZGVjcnlwdGVkLnByb3RlY3RlZEhlYWRlciB9O1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5OiBkZWNyeXB0ZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNvbXBhY3REZWNyeXB0ID0gY29tcGFjdERlY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhbERlY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL2RlY3J5cHQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9pc19vYmplY3QuanNcIik7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmFsRGVjcnlwdChqd2UsIGtleSwgb3B0aW9ucykge1xuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGp3ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0dlbmVyYWwgSldFIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShqd2UucmVjaXBpZW50cykgfHwgIWp3ZS5yZWNpcGllbnRzLmV2ZXJ5KGlzX29iamVjdF9qc18xLmRlZmF1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUmVjaXBpZW50cyBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmICghandlLnJlY2lwaWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUmVjaXBpZW50cyBoYXMgbm8gbWVtYmVycycpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHJlY2lwaWVudCBvZiBqd2UucmVjaXBpZW50cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBkZWNyeXB0X2pzXzEuZmxhdHRlbmVkRGVjcnlwdCkoe1xuICAgICAgICAgICAgICAgIGFhZDogandlLmFhZCxcbiAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBqd2UuY2lwaGVydGV4dCxcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfa2V5OiByZWNpcGllbnQuZW5jcnlwdGVkX2tleSxcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHJlY2lwaWVudC5oZWFkZXIsXG4gICAgICAgICAgICAgICAgaXY6IGp3ZS5pdixcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQ6IGp3ZS5wcm90ZWN0ZWQsXG4gICAgICAgICAgICAgICAgdGFnOiBqd2UudGFnLFxuICAgICAgICAgICAgICAgIHVucHJvdGVjdGVkOiBqd2UudW5wcm90ZWN0ZWQsXG4gICAgICAgICAgICB9LCBrZXksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFRGVjcnlwdGlvbkZhaWxlZCgpO1xufVxuZXhwb3J0cy5nZW5lcmFsRGVjcnlwdCA9IGdlbmVyYWxEZWNyeXB0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0YWdJbnRlZ2VyID0gMHgwMjtcbmNvbnN0IHRhZ1NlcXVlbmNlID0gMHgzMDtcbmNsYXNzIEFzbjFTZXF1ZW5jZURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICBpZiAoYnVmZmVyWzBdICE9PSB0YWdTZXF1ZW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDE7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMuZGVjb2RlTGVuZ3RoKCk7XG4gICAgICAgIGlmIChsZW4gIT09IGJ1ZmZlci5sZW5ndGggLSB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlY29kZUxlbmd0aCgpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdO1xuICAgICAgICBpZiAobGVuZ3RoICYgMHg4MCkge1xuICAgICAgICAgICAgY29uc3QgbkJ5dGVzID0gbGVuZ3RoICYgfjB4ODA7XG4gICAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuQnl0ZXM7IGkrKylcbiAgICAgICAgICAgICAgICBsZW5ndGggPSAobGVuZ3RoIDw8IDgpIHwgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQgKyBpXTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IG5CeXRlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICB1bnNpZ25lZEludGVnZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSAhPT0gdGFnSW50ZWdlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmRlY29kZUxlbmd0aCgpO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJbdGhpcy5vZmZzZXRdID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCAhPT0gdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBc24xU2VxdWVuY2VEZWNvZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGFzbjFfc2VxdWVuY2VfZGVjb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBnZXRfbmFtZWRfY3VydmVfanNfMSA9IHJlcXVpcmUoXCIuL2dldF9uYW1lZF9jdXJ2ZS5qc1wiKTtcbmNvbnN0IHdlYmNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vd2ViY3J5cHRvLmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuY29uc3QgW21ham9yLCBtaW5vcl0gPSBwcm9jZXNzLnZlcnNpb25cbiAgICAuc2xpY2UoMSlcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5tYXAoKHN0cikgPT4gcGFyc2VJbnQoc3RyLCAxMCkpO1xuY29uc3QgandrRXhwb3J0U3VwcG9ydGVkID0gbWFqb3IgPj0gMTYgfHwgKG1ham9yID09PSAxNSAmJiBtaW5vciA+PSA5KTtcbmNvbnN0IGtleVRvSldLID0gKGtleSkgPT4ge1xuICAgIGxldCBrZXlPYmplY3Q7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICBpZiAoIWtleS5leHRyYWN0YWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGlzIG5vdCBleHRyYWN0YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGtleU9iamVjdCA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICBrZXlPYmplY3QgPSBrZXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICBrOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShrZXkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMsICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBpZiAoandrRXhwb3J0U3VwcG9ydGVkKSB7XG4gICAgICAgIGlmIChrZXlPYmplY3QudHlwZSAhPT0gJ3NlY3JldCcgJiZcbiAgICAgICAgICAgICFbJ3JzYScsICdlYycsICdlZDI1NTE5JywgJ3gyNTUxOScsICdlZDQ0OCcsICd4NDQ4J10uaW5jbHVkZXMoa2V5T2JqZWN0LmFzeW1tZXRyaWNLZXlUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIGtleSBhc3ltbWV0cmljS2V5VHlwZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXlPYmplY3QuZXhwb3J0KHsgZm9ybWF0OiAnandrJyB9KTtcbiAgICB9XG4gICAgc3dpdGNoIChrZXlPYmplY3QudHlwZSkge1xuICAgICAgICBjYXNlICdzZWNyZXQnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBrdHk6ICdvY3QnLFxuICAgICAgICAgICAgICAgIGs6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGtleU9iamVjdC5leHBvcnQoKSksXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdwcml2YXRlJzpcbiAgICAgICAgY2FzZSAncHVibGljJzoge1xuICAgICAgICAgICAgc3dpdGNoIChrZXlPYmplY3QuYXN5bW1ldHJpY0tleVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdyc2EnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyBmb3JtYXQ6ICdkZXInLCB0eXBlOiAncGtjczEnIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWMgPSBuZXcgYXNuMV9zZXF1ZW5jZV9kZWNvZGVyX2pzXzEuZGVmYXVsdChkZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjLnVuc2lnbmVkSW50ZWdlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGp3aztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleU9iamVjdC50eXBlID09PSAncHJpdmF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGp3ayA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlYy51bnNpZ25lZEludGVnZXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcTogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcTogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxaTogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVjLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBrdHk6ICdSU0EnLCBuLCBlLCAuLi5qd2sgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZWMnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNydiA9ICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5kZWZhdWx0KShrZXlPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29ycmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjcnYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlY3AyNTZrMSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gNjQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMzEgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1AtMjU2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAzNCArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUC0zODQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDk2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDMzICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gLTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQLTUyMSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gMTMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDMzICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gLTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBjdXJ2ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlPYmplY3QudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAnc3BraScsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt0eTogJ0VDJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcnYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVyLnN1YmFycmF5KC1sZW4sIC1sZW4gLyAyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVyLnN1YmFycmF5KC1sZW4gLyAyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAncGtjczgnLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVyLmxlbmd0aCA8IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGNvcnJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmtleVRvSldLKCgwLCBjcnlwdG9fMS5jcmVhdGVQdWJsaWNLZXkpKGtleU9iamVjdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuIC8gMikpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdlZDI1NTE5JzpcbiAgICAgICAgICAgICAgICBjYXNlICd4MjU1MTknOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNydiA9ICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5kZWZhdWx0KShrZXlPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXIgPSBrZXlPYmplY3QuZXhwb3J0KHsgdHlwZTogJ3Nwa2knLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdHk6ICdPS1AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNydixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLTMyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAncGtjczgnLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5VG9KV0soKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5T2JqZWN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLTMyKSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2VkNDQ4JzpcbiAgICAgICAgICAgICAgICBjYXNlICd4NDQ4Jzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcnYgPSAoMCwgZ2V0X25hbWVkX2N1cnZlX2pzXzEuZGVmYXVsdCkoa2V5T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleU9iamVjdC50eXBlID09PSAncHVibGljJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdzcGtpJywgZm9ybWF0OiAnZGVyJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga3R5OiAnT0tQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcnYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVyLnN1YmFycmF5KGNydiA9PT0gJ0VkNDQ4JyA/IC01NyA6IC01NikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXIgPSBrZXlPYmplY3QuZXhwb3J0KHsgdHlwZTogJ3BrY3M4JywgZm9ybWF0OiAnZGVyJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmtleVRvSldLKCgwLCBjcnlwdG9fMS5jcmVhdGVQdWJsaWNLZXkpKGtleU9iamVjdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVyLnN1YmFycmF5KGNydiA9PT0gJ0VkNDQ4JyA/IC01NyA6IC01NikpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQga2V5IGFzeW1tZXRyaWNLZXlUeXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBrZXkgdHlwZScpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBrZXlUb0pXSztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBvcnRKV0sgPSBleHBvcnRzLmV4cG9ydFBLQ1M4ID0gZXhwb3J0cy5leHBvcnRTUEtJID0gdm9pZCAwO1xuY29uc3QgYXNuMV9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYXNuMS5qc1wiKTtcbmNvbnN0IGFzbjFfanNfMiA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2FzbjEuanNcIik7XG5jb25zdCBrZXlfdG9fandrX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9rZXlfdG9fandrLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZXhwb3J0U1BLSShrZXkpIHtcbiAgICByZXR1cm4gKDAsIGFzbjFfanNfMS50b1NQS0kpKGtleSk7XG59XG5leHBvcnRzLmV4cG9ydFNQS0kgPSBleHBvcnRTUEtJO1xuYXN5bmMgZnVuY3Rpb24gZXhwb3J0UEtDUzgoa2V5KSB7XG4gICAgcmV0dXJuICgwLCBhc24xX2pzXzIudG9QS0NTOCkoa2V5KTtcbn1cbmV4cG9ydHMuZXhwb3J0UEtDUzggPSBleHBvcnRQS0NTODtcbmFzeW5jIGZ1bmN0aW9uIGV4cG9ydEpXSyhrZXkpIHtcbiAgICByZXR1cm4gKDAsIGtleV90b19qd2tfanNfMS5kZWZhdWx0KShrZXkpO1xufVxuZXhwb3J0cy5leHBvcnRKV0sgPSBleHBvcnRKV0s7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFlc2t3X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9hZXNrdy5qc1wiKTtcbmNvbnN0IEVDREggPSByZXF1aXJlKFwiLi4vcnVudGltZS9lY2RoZXMuanNcIik7XG5jb25zdCBwYmVzMmt3X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9wYmVzMmt3LmpzXCIpO1xuY29uc3QgcnNhZXNfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3JzYWVzLmpzXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBjZWtfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY2VrLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBleHBvcnRfanNfMSA9IHJlcXVpcmUoXCIuLi9rZXkvZXhwb3J0LmpzXCIpO1xuY29uc3QgY2hlY2tfa2V5X3R5cGVfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX2tleV90eXBlLmpzXCIpO1xuY29uc3QgYWVzZ2Nta3dfanNfMSA9IHJlcXVpcmUoXCIuL2Flc2djbWt3LmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZW5jcnlwdEtleU1hbmFnZW1lbnQoYWxnLCBlbmMsIGtleSwgcHJvdmlkZWRDZWssIHByb3ZpZGVkUGFyYW1ldGVycyA9IHt9KSB7XG4gICAgbGV0IGVuY3J5cHRlZEtleTtcbiAgICBsZXQgcGFyYW1ldGVycztcbiAgICBsZXQgY2VrO1xuICAgICgwLCBjaGVja19rZXlfdHlwZV9qc18xLmRlZmF1bHQpKGFsZywga2V5LCAnZW5jcnlwdCcpO1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ2Rpcic6IHtcbiAgICAgICAgICAgIGNlayA9IGtleTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VDREgtRVMnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMjU2S1cnOiB7XG4gICAgICAgICAgICBpZiAoIUVDREguZWNkaEFsbG93ZWQoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdFQ0RIIHdpdGggdGhlIHByb3ZpZGVkIGtleSBpcyBub3QgYWxsb3dlZCBvciBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGFwdSwgYXB2IH0gPSBwcm92aWRlZFBhcmFtZXRlcnM7XG4gICAgICAgICAgICBsZXQgeyBlcGs6IGVwaGVtZXJhbEtleSB9ID0gcHJvdmlkZWRQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgZXBoZW1lcmFsS2V5IHx8IChlcGhlbWVyYWxLZXkgPSAoYXdhaXQgRUNESC5nZW5lcmF0ZUVwayhrZXkpKS5wcml2YXRlS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSwgY3J2LCBrdHkgfSA9IGF3YWl0ICgwLCBleHBvcnRfanNfMS5leHBvcnRKV0spKGVwaGVtZXJhbEtleSk7XG4gICAgICAgICAgICBjb25zdCBzaGFyZWRTZWNyZXQgPSBhd2FpdCBFQ0RILmRlcml2ZUtleShrZXksIGVwaGVtZXJhbEtleSwgYWxnID09PSAnRUNESC1FUycgPyBlbmMgOiBhbGcsIGFsZyA9PT0gJ0VDREgtRVMnID8gKDAsIGNla19qc18xLmJpdExlbmd0aCkoZW5jKSA6IHBhcnNlSW50KGFsZy5zbGljZSgtNSwgLTIpLCAxMCksIGFwdSwgYXB2KTtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7IGVwazogeyB4LCBjcnYsIGt0eSB9IH07XG4gICAgICAgICAgICBpZiAoa3R5ID09PSAnRUMnKVxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZXBrLnkgPSB5O1xuICAgICAgICAgICAgaWYgKGFwdSlcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmFwdSA9ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGFwdSk7XG4gICAgICAgICAgICBpZiAoYXB2KVxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYXB2ID0gKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoYXB2KTtcbiAgICAgICAgICAgIGlmIChhbGcgPT09ICdFQ0RILUVTJykge1xuICAgICAgICAgICAgICAgIGNlayA9IHNoYXJlZFNlY3JldDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNlayA9IHByb3ZpZGVkQ2VrIHx8ICgwLCBjZWtfanNfMS5kZWZhdWx0KShlbmMpO1xuICAgICAgICAgICAgY29uc3Qga3dBbGcgPSBhbGcuc2xpY2UoLTYpO1xuICAgICAgICAgICAgZW5jcnlwdGVkS2V5ID0gYXdhaXQgKDAsIGFlc2t3X2pzXzEud3JhcCkoa3dBbGcsIHNoYXJlZFNlY3JldCwgY2VrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgKDAsIGNla19qc18xLmRlZmF1bHQpKGVuYyk7XG4gICAgICAgICAgICBlbmNyeXB0ZWRLZXkgPSBhd2FpdCAoMCwgcnNhZXNfanNfMS5lbmNyeXB0KShhbGcsIGtleSwgY2VrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1BCRVMyLUhTMjU2K0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ1BCRVMyLUhTMzg0K0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ1BCRVMyLUhTNTEyK0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGNlayA9IHByb3ZpZGVkQ2VrIHx8ICgwLCBjZWtfanNfMS5kZWZhdWx0KShlbmMpO1xuICAgICAgICAgICAgY29uc3QgeyBwMmMsIHAycyB9ID0gcHJvdmlkZWRQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgKHsgZW5jcnlwdGVkS2V5LCAuLi5wYXJhbWV0ZXJzIH0gPSBhd2FpdCAoMCwgcGJlczJrd19qc18xLmVuY3J5cHQpKGFsZywga2V5LCBjZWssIHAyYywgcDJzKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdBMTI4S1cnOlxuICAgICAgICBjYXNlICdBMTkyS1cnOlxuICAgICAgICBjYXNlICdBMjU2S1cnOiB7XG4gICAgICAgICAgICBjZWsgPSBwcm92aWRlZENlayB8fCAoMCwgY2VrX2pzXzEuZGVmYXVsdCkoZW5jKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEtleSA9IGF3YWl0ICgwLCBhZXNrd19qc18xLndyYXApKGFsZywga2V5LCBjZWspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQTEyOEdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgKDAsIGNla19qc18xLmRlZmF1bHQpKGVuYyk7XG4gICAgICAgICAgICBjb25zdCB7IGl2IH0gPSBwcm92aWRlZFBhcmFtZXRlcnM7XG4gICAgICAgICAgICAoeyBlbmNyeXB0ZWRLZXksIC4uLnBhcmFtZXRlcnMgfSA9IGF3YWl0ICgwLCBhZXNnY21rd19qc18xLndyYXApKGFsZywga2V5LCBjZWssIGl2KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBcImFsZ1wiIChKV0UgQWxnb3JpdGhtKSBoZWFkZXIgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBjZWssIGVuY3J5cHRlZEtleSwgcGFyYW1ldGVycyB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZW5jcnlwdEtleU1hbmFnZW1lbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmxhdHRlbmVkRW5jcnlwdCA9IGV4cG9ydHMudW5wcm90ZWN0ZWQgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2VuY3J5cHQuanNcIik7XG5jb25zdCB6bGliX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS96bGliLmpzXCIpO1xuY29uc3QgaXZfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXYuanNcIik7XG5jb25zdCBlbmNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2VuY3J5cHRfa2V5X21hbmFnZW1lbnQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGlzX2Rpc2pvaW50X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2lzX2Rpc2pvaW50LmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IHZhbGlkYXRlX2NyaXRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qc1wiKTtcbmV4cG9ydHMudW5wcm90ZWN0ZWQgPSBTeW1ib2woKTtcbmNsYXNzIEZsYXR0ZW5lZEVuY3J5cHQge1xuICAgIGNvbnN0cnVjdG9yKHBsYWludGV4dCkge1xuICAgICAgICBpZiAoIShwbGFpbnRleHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGxhaW50ZXh0IG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BsYWludGV4dCA9IHBsYWludGV4dDtcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICBpZiAodGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRQcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlcihzaGFyZWRVbnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFNoYXJlZFVucHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIgPSBzaGFyZWRVbnByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFVucHJvdGVjdGVkSGVhZGVyKHVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0VW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91bnByb3RlY3RlZEhlYWRlciA9IHVucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhKGFhZCkge1xuICAgICAgICB0aGlzLl9hYWQgPSBhYWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRDb250ZW50RW5jcnlwdGlvbktleShjZWspIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nlaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0Q29udGVudEVuY3J5cHRpb25LZXkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jZWsgPSBjZWs7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRJbml0aWFsaXphdGlvblZlY3Rvcihpdikge1xuICAgICAgICBpZiAodGhpcy5faXYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldEluaXRpYWxpemF0aW9uVmVjdG9yIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXYgPSBpdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIGVuY3J5cHQoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJvdGVjdGVkSGVhZGVyICYmICF0aGlzLl91bnByb3RlY3RlZEhlYWRlciAmJiAhdGhpcy5fc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdlaXRoZXIgc2V0UHJvdGVjdGVkSGVhZGVyLCBzZXRVbnByb3RlY3RlZEhlYWRlciwgb3Igc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIgbXVzdCBiZSBjYWxsZWQgYmVmb3JlICNlbmNyeXB0KCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCBpc19kaXNqb2ludF9qc18xLmRlZmF1bHQpKHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsIHRoaXMuX3NoYXJlZFVucHJvdGVjdGVkSGVhZGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBQcm90ZWN0ZWQsIEpXRSBTaGFyZWQgVW5wcm90ZWN0ZWQgYW5kIEpXRSBQZXItUmVjaXBpZW50IEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAuLi50aGlzLl91bnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgIC4uLnRoaXMuX3NoYXJlZFVucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICB9O1xuICAgICAgICAoMCwgdmFsaWRhdGVfY3JpdF9qc18xLmRlZmF1bHQpKGVycm9yc19qc18xLkpXRUludmFsaWQsIG5ldyBNYXAoKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQsIHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgam9zZUhlYWRlcik7XG4gICAgICAgIGlmIChqb3NlSGVhZGVyLnppcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZEhlYWRlciB8fCAhdGhpcy5fcHJvdGVjdGVkSGVhZGVyLnppcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJ6aXBcIiAoQ29tcHJlc3Npb24gQWxnb3JpdGhtKSBIZWFkZXIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoam9zZUhlYWRlci56aXAgIT09ICdERUYnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFsZywgZW5jIH0gPSBqb3NlSGVhZGVyO1xuICAgICAgICBpZiAodHlwZW9mIGFsZyAhPT0gJ3N0cmluZycgfHwgIWFsZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnIHx8ICFlbmMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJlbmNcIiAoRW5jcnlwdGlvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVuY3J5cHRlZEtleTtcbiAgICAgICAgaWYgKGFsZyA9PT0gJ2RpcicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRDb250ZW50RW5jcnlwdGlvbktleSBjYW5ub3QgYmUgY2FsbGVkIHdoZW4gdXNpbmcgRGlyZWN0IEVuY3J5cHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGcgPT09ICdFQ0RILUVTJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nlaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldENvbnRlbnRFbmNyeXB0aW9uS2V5IGNhbm5vdCBiZSBjYWxsZWQgd2hlbiB1c2luZyBEaXJlY3QgS2V5IEFncmVlbWVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjZWs7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgKHsgY2VrLCBlbmNyeXB0ZWRLZXksIHBhcmFtZXRlcnMgfSA9IGF3YWl0ICgwLCBlbmNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEuZGVmYXVsdCkoYWxnLCBlbmMsIGtleSwgdGhpcy5fY2VrLCB0aGlzLl9rZXlNYW5hZ2VtZW50UGFyYW1ldGVycykpO1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBleHBvcnRzLnVucHJvdGVjdGVkIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRVbnByb3RlY3RlZEhlYWRlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyID0geyAuLi50aGlzLl91bnByb3RlY3RlZEhlYWRlciwgLi4ucGFyYW1ldGVycyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQcm90ZWN0ZWRIZWFkZXIocGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgLi4ucGFyYW1ldGVycyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2l2IHx8ICh0aGlzLl9pdiA9ICgwLCBpdl9qc18xLmRlZmF1bHQpKGVuYykpO1xuICAgICAgICBsZXQgYWRkaXRpb25hbERhdGE7XG4gICAgICAgIGxldCBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIGxldCBhYWRNZW1iZXI7XG4gICAgICAgIGlmICh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEhlYWRlciA9IGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKCgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKEpTT04uc3RyaW5naWZ5KHRoaXMuX3Byb3RlY3RlZEhlYWRlcikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEhlYWRlciA9IGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYWFkKSB7XG4gICAgICAgICAgICBhYWRNZW1iZXIgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKSh0aGlzLl9hYWQpO1xuICAgICAgICAgICAgYWRkaXRpb25hbERhdGEgPSAoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KShwcm90ZWN0ZWRIZWFkZXIsIGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKCcuJyksIGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKGFhZE1lbWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWRkaXRpb25hbERhdGEgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNpcGhlcnRleHQ7XG4gICAgICAgIGxldCB0YWc7XG4gICAgICAgIGlmIChqb3NlSGVhZGVyLnppcCA9PT0gJ0RFRicpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmxhdGVkID0gYXdhaXQgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVmbGF0ZVJhdykgfHwgemxpYl9qc18xLmRlZmxhdGUpKHRoaXMuX3BsYWludGV4dCk7XG4gICAgICAgICAgICAoeyBjaXBoZXJ0ZXh0LCB0YWcgfSA9IGF3YWl0ICgwLCBlbmNyeXB0X2pzXzEuZGVmYXVsdCkoZW5jLCBkZWZsYXRlZCwgY2VrLCB0aGlzLl9pdiwgYWRkaXRpb25hbERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgICh7IGNpcGhlcnRleHQsIHRhZyB9ID0gYXdhaXQgKDAsIGVuY3J5cHRfanNfMS5kZWZhdWx0KShlbmMsIHRoaXMuX3BsYWludGV4dCwgY2VrLCB0aGlzLl9pdiwgYWRkaXRpb25hbERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqd2UgPSB7XG4gICAgICAgICAgICBjaXBoZXJ0ZXh0OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShjaXBoZXJ0ZXh0KSxcbiAgICAgICAgICAgIGl2OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKSh0aGlzLl9pdiksXG4gICAgICAgICAgICB0YWc6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKHRhZyksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbmNyeXB0ZWRLZXkpIHtcbiAgICAgICAgICAgIGp3ZS5lbmNyeXB0ZWRfa2V5ID0gKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZW5jcnlwdGVkS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWFkTWVtYmVyKSB7XG4gICAgICAgICAgICBqd2UuYWFkID0gYWFkTWVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIGp3ZS5wcm90ZWN0ZWQgPSBidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShwcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgandlLnVucHJvdGVjdGVkID0gdGhpcy5fc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICBqd2UuaGVhZGVyID0gdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3ZTtcbiAgICB9XG59XG5leHBvcnRzLkZsYXR0ZW5lZEVuY3J5cHQgPSBGbGF0dGVuZWRFbmNyeXB0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyYWxFbmNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZW5jcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBjZWtfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvY2VrLmpzXCIpO1xuY29uc3QgaXNfZGlzam9pbnRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfZGlzam9pbnQuanNcIik7XG5jb25zdCBlbmNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2VuY3J5cHRfa2V5X21hbmFnZW1lbnQuanNcIik7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IHZhbGlkYXRlX2NyaXRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qc1wiKTtcbmNsYXNzIEluZGl2aWR1YWxSZWNpcGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGVuYywga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gZW5jO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgc2V0VW5wcm90ZWN0ZWRIZWFkZXIodW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFVucHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnByb3RlY3RlZEhlYWRlciA9IHVucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkUmVjaXBpZW50KC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmFkZFJlY2lwaWVudCguLi5hcmdzKTtcbiAgICB9XG4gICAgZW5jcnlwdCguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5lbmNyeXB0KC4uLmFyZ3MpO1xuICAgIH1cbiAgICBkb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgfVxufVxuY2xhc3MgR2VuZXJhbEVuY3J5cHQge1xuICAgIGNvbnN0cnVjdG9yKHBsYWludGV4dCkge1xuICAgICAgICB0aGlzLl9yZWNpcGllbnRzID0gW107XG4gICAgICAgIHRoaXMuX3BsYWludGV4dCA9IHBsYWludGV4dDtcbiAgICB9XG4gICAgYWRkUmVjaXBpZW50KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWNpcGllbnQgPSBuZXcgSW5kaXZpZHVhbFJlY2lwaWVudCh0aGlzLCBrZXksIHsgY3JpdDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQgfSk7XG4gICAgICAgIHRoaXMuX3JlY2lwaWVudHMucHVzaChyZWNpcGllbnQpO1xuICAgICAgICByZXR1cm4gcmVjaXBpZW50O1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKHNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91bnByb3RlY3RlZEhlYWRlciA9IHNoYXJlZFVucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhKGFhZCkge1xuICAgICAgICB0aGlzLl9hYWQgPSBhYWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmICghdGhpcy5fcmVjaXBpZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdhdCBsZWFzdCBvbmUgcmVjaXBpZW50IG11c3QgYmUgYWRkZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0geyBkZWZsYXRlUmF3OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVmbGF0ZVJhdyB9O1xuICAgICAgICBpZiAodGhpcy5fcmVjaXBpZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IFtyZWNpcGllbnRdID0gdGhpcy5fcmVjaXBpZW50cztcbiAgICAgICAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IGF3YWl0IG5ldyBlbmNyeXB0X2pzXzEuRmxhdHRlbmVkRW5jcnlwdCh0aGlzLl9wbGFpbnRleHQpXG4gICAgICAgICAgICAgICAgLnNldEFkZGl0aW9uYWxBdXRoZW50aWNhdGVkRGF0YSh0aGlzLl9hYWQpXG4gICAgICAgICAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgLnNldFNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKVxuICAgICAgICAgICAgICAgIC5zZXRVbnByb3RlY3RlZEhlYWRlcihyZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgLmVuY3J5cHQocmVjaXBpZW50LmtleSwgeyAuLi5yZWNpcGllbnQub3B0aW9ucywgLi4ub3B0aW9ucyB9KTtcbiAgICAgICAgICAgIGxldCBqd2UgPSB7XG4gICAgICAgICAgICAgICAgY2lwaGVydGV4dDogZmxhdHRlbmVkLmNpcGhlcnRleHQsXG4gICAgICAgICAgICAgICAgaXY6IGZsYXR0ZW5lZC5pdixcbiAgICAgICAgICAgICAgICByZWNpcGllbnRzOiBbe31dLFxuICAgICAgICAgICAgICAgIHRhZzogZmxhdHRlbmVkLnRhZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkLmFhZClcbiAgICAgICAgICAgICAgICBqd2UuYWFkID0gZmxhdHRlbmVkLmFhZDtcbiAgICAgICAgICAgIGlmIChmbGF0dGVuZWQucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgIGp3ZS5wcm90ZWN0ZWQgPSBmbGF0dGVuZWQucHJvdGVjdGVkO1xuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC51bnByb3RlY3RlZClcbiAgICAgICAgICAgICAgICBqd2UudW5wcm90ZWN0ZWQgPSBmbGF0dGVuZWQudW5wcm90ZWN0ZWQ7XG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkLmVuY3J5cHRlZF9rZXkpXG4gICAgICAgICAgICAgICAgandlLnJlY2lwaWVudHNbMF0uZW5jcnlwdGVkX2tleSA9IGZsYXR0ZW5lZC5lbmNyeXB0ZWRfa2V5O1xuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5oZWFkZXIpXG4gICAgICAgICAgICAgICAgandlLnJlY2lwaWVudHNbMF0uaGVhZGVyID0gZmxhdHRlbmVkLmhlYWRlcjtcbiAgICAgICAgICAgIHJldHVybiBqd2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVuYztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZWNpcGllbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWNpcGllbnQgPSB0aGlzLl9yZWNpcGllbnRzW2ldO1xuICAgICAgICAgICAgaWYgKCEoMCwgaXNfZGlzam9pbnRfanNfMS5kZWZhdWx0KSh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLCByZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBQcm90ZWN0ZWQsIEpXRSBTaGFyZWQgVW5wcm90ZWN0ZWQgYW5kIEpXRSBQZXItUmVjaXBpZW50IEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgam9zZUhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4ucmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgYWxnIH0gPSBqb3NlSGVhZGVyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGcgIT09ICdzdHJpbmcnIHx8ICFhbGcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFwiYWxnXCIgKEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBtaXNzaW5nIG9yIGludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGcgPT09ICdkaXInIHx8IGFsZyA9PT0gJ0VDREgtRVMnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ1wiZGlyXCIgYW5kIFwiRUNESC1FU1wiIGFsZyBtYXkgb25seSBiZSB1c2VkIHdpdGggYSBzaW5nbGUgcmVjaXBpZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIuZW5jICE9PSAnc3RyaW5nJyB8fCAham9zZUhlYWRlci5lbmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFwiZW5jXCIgKEVuY3J5cHRpb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG1pc3Npbmcgb3IgaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmMpIHtcbiAgICAgICAgICAgICAgICBlbmMgPSBqb3NlSGVhZGVyLmVuYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuYyAhPT0gam9zZUhlYWRlci5lbmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFwiZW5jXCIgKEVuY3J5cHRpb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgdGhlIHNhbWUgZm9yIGFsbCByZWNpcGllbnRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgdmFsaWRhdGVfY3JpdF9qc18xLmRlZmF1bHQpKGVycm9yc19qc18xLkpXRUludmFsaWQsIG5ldyBNYXAoKSwgcmVjaXBpZW50Lm9wdGlvbnMuY3JpdCwgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKTtcbiAgICAgICAgICAgIGlmIChqb3NlSGVhZGVyLnppcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgfHwgIXRoaXMuX3Byb3RlY3RlZEhlYWRlci56aXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBNVVNUIGJlIGludGVncml0eSBwcm90ZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2VrID0gKDAsIGNla19qc18xLmRlZmF1bHQpKGVuYyk7XG4gICAgICAgIGxldCBqd2UgPSB7XG4gICAgICAgICAgICBjaXBoZXJ0ZXh0OiAnJyxcbiAgICAgICAgICAgIGl2OiAnJyxcbiAgICAgICAgICAgIHJlY2lwaWVudHM6IFtdLFxuICAgICAgICAgICAgdGFnOiAnJyxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZWNpcGllbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWNpcGllbnQgPSB0aGlzLl9yZWNpcGllbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgICAgICAgICBqd2UucmVjaXBpZW50cy5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgICAgICAuLi50aGlzLl91bnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgICAgICAuLi5yZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcDJjID0gam9zZUhlYWRlci5hbGcuc3RhcnRzV2l0aCgnUEJFUzInKSA/IDIwNDggKyBpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmbGF0dGVuZWQgPSBhd2FpdCBuZXcgZW5jcnlwdF9qc18xLkZsYXR0ZW5lZEVuY3J5cHQodGhpcy5fcGxhaW50ZXh0KVxuICAgICAgICAgICAgICAgICAgICAuc2V0QWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhKHRoaXMuX2FhZClcbiAgICAgICAgICAgICAgICAgICAgLnNldENvbnRlbnRFbmNyeXB0aW9uS2V5KGNlaylcbiAgICAgICAgICAgICAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlcih0aGlzLl91bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgLnNldFVucHJvdGVjdGVkSGVhZGVyKHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgLnNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHsgcDJjIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lbmNyeXB0KHJlY2lwaWVudC5rZXksIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVjaXBpZW50Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIFtlbmNyeXB0X2pzXzEudW5wcm90ZWN0ZWRdOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGp3ZS5jaXBoZXJ0ZXh0ID0gZmxhdHRlbmVkLmNpcGhlcnRleHQ7XG4gICAgICAgICAgICAgICAgandlLml2ID0gZmxhdHRlbmVkLml2O1xuICAgICAgICAgICAgICAgIGp3ZS50YWcgPSBmbGF0dGVuZWQudGFnO1xuICAgICAgICAgICAgICAgIGlmIChmbGF0dGVuZWQuYWFkKVxuICAgICAgICAgICAgICAgICAgICBqd2UuYWFkID0gZmxhdHRlbmVkLmFhZDtcbiAgICAgICAgICAgICAgICBpZiAoZmxhdHRlbmVkLnByb3RlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgandlLnByb3RlY3RlZCA9IGZsYXR0ZW5lZC5wcm90ZWN0ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC51bnByb3RlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgandlLnVucHJvdGVjdGVkID0gZmxhdHRlbmVkLnVucHJvdGVjdGVkO1xuICAgICAgICAgICAgICAgIHRhcmdldC5lbmNyeXB0ZWRfa2V5ID0gZmxhdHRlbmVkLmVuY3J5cHRlZF9rZXk7XG4gICAgICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5oZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5oZWFkZXIgPSBmbGF0dGVuZWQuaGVhZGVyO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBlbmNyeXB0ZWRLZXksIHBhcmFtZXRlcnMgfSA9IGF3YWl0ICgwLCBlbmNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEuZGVmYXVsdCkoKChfYSA9IHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFsZykgfHxcbiAgICAgICAgICAgICAgICAoKF9iID0gdGhpcy5fcHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYWxnKSB8fFxuICAgICAgICAgICAgICAgICgoX2MgPSB0aGlzLl91bnByb3RlY3RlZEhlYWRlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFsZyksIGVuYywgcmVjaXBpZW50LmtleSwgY2VrLCB7IHAyYyB9KTtcbiAgICAgICAgICAgIHRhcmdldC5lbmNyeXB0ZWRfa2V5ID0gKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZW5jcnlwdGVkS2V5KTtcbiAgICAgICAgICAgIGlmIChyZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIgfHwgcGFyYW1ldGVycylcbiAgICAgICAgICAgICAgICB0YXJnZXQuaGVhZGVyID0geyAuLi5yZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIsIC4uLnBhcmFtZXRlcnMgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gandlO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJhbEVuY3J5cHQgPSBHZW5lcmFsRW5jcnlwdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBkc2FEaWdlc3QoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnUFMyNTYnOlxuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgY2FzZSAnRVMyNTZLJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMjU2JztcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMzg0JztcbiAgICAgICAgY2FzZSAnUFM1MTInOlxuICAgICAgICBjYXNlICdSUzUxMic6XG4gICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhNTEyJztcbiAgICAgICAgY2FzZSAnRWREU0EnOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHthbGd9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkc2FEaWdlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGdldF9uYW1lZF9jdXJ2ZV9qc18xID0gcmVxdWlyZShcIi4vZ2V0X25hbWVkX2N1cnZlLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xID0gcmVxdWlyZShcIi4vY2hlY2tfbW9kdWx1c19sZW5ndGguanNcIik7XG5jb25zdCBbbWFqb3IsIG1pbm9yXSA9IHByb2Nlc3MudmVyc2lvblxuICAgIC5zbGljZSgxKVxuICAgIC5zcGxpdCgnLicpXG4gICAgLm1hcCgoc3RyKSA9PiBwYXJzZUludChzdHIsIDEwKSk7XG5jb25zdCBlbGVjdHJvbiA9ICdlbGVjdHJvbicgaW4gcHJvY2Vzcy52ZXJzaW9ucztcbmNvbnN0IHJzYVBzc1BhcmFtcyA9ICFlbGVjdHJvbiAmJiAobWFqb3IgPj0gMTcgfHwgKG1ham9yID09PSAxNiAmJiBtaW5vciA+PSA5KSk7XG5jb25zdCBQU1MgPSB7XG4gICAgcGFkZGluZzogY3J5cHRvXzEuY29uc3RhbnRzLlJTQV9QS0NTMV9QU1NfUEFERElORyxcbiAgICBzYWx0TGVuZ3RoOiBjcnlwdG9fMS5jb25zdGFudHMuUlNBX1BTU19TQUxUTEVOX0RJR0VTVCxcbn07XG5jb25zdCBlY0N1cnZlQWxnTWFwID0gbmV3IE1hcChbXG4gICAgWydFUzI1NicsICdQLTI1NiddLFxuICAgIFsnRVMyNTZLJywgJ3NlY3AyNTZrMSddLFxuICAgIFsnRVMzODQnLCAnUC0zODQnXSxcbiAgICBbJ0VTNTEyJywgJ1AtNTIxJ10sXG5dKTtcbmZ1bmN0aW9uIGtleUZvckNyeXB0byhhbGcsIGtleSkge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ0VkRFNBJzpcbiAgICAgICAgICAgIGlmICghWydlZDI1NTE5JywgJ2VkNDQ4J10uaW5jbHVkZXMoa2V5LmFzeW1tZXRyaWNLZXlUeXBlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQga2V5IGZvciB0aGlzIG9wZXJhdGlvbiwgaXRzIGFzeW1tZXRyaWNLZXlUeXBlIG11c3QgYmUgZWQyNTUxOSBvciBlZDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzpcbiAgICAgICAgICAgIGlmIChrZXkuYXN5bW1ldHJpY0tleVR5cGUgIT09ICdyc2EnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBrZXkgZm9yIHRoaXMgb3BlcmF0aW9uLCBpdHMgYXN5bW1ldHJpY0tleVR5cGUgbXVzdCBiZSByc2EnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xLmRlZmF1bHQpKGtleSwgYWxnKTtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIGNhc2UgcnNhUHNzUGFyYW1zICYmICdQUzI1Nic6XG4gICAgICAgIGNhc2UgcnNhUHNzUGFyYW1zICYmICdQUzM4NCc6XG4gICAgICAgIGNhc2UgcnNhUHNzUGFyYW1zICYmICdQUzUxMic6XG4gICAgICAgICAgICBpZiAoa2V5LmFzeW1tZXRyaWNLZXlUeXBlID09PSAncnNhLXBzcycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGhhc2hBbGdvcml0aG0sIG1nZjFIYXNoQWxnb3JpdGhtLCBzYWx0TGVuZ3RoIH0gPSBrZXkuYXN5bW1ldHJpY0tleURldGFpbHM7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoQWxnb3JpdGhtICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKGhhc2hBbGdvcml0aG0gIT09IGBzaGEke2xlbmd0aH1gIHx8IG1nZjFIYXNoQWxnb3JpdGhtICE9PSBoYXNoQWxnb3JpdGhtKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIGl0cyBSU0EtUFNTIHBhcmFtZXRlcnMgZG8gbm90IG1lZXQgdGhlIHJlcXVpcmVtZW50cyBvZiBcImFsZ1wiICR7YWxnfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2FsdExlbmd0aCAhPT0gdW5kZWZpbmVkICYmIHNhbHRMZW5ndGggPiBsZW5ndGggPj4gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIGl0cyBSU0EtUFNTIHBhcmFtZXRlciBzYWx0TGVuZ3RoIGRvZXMgbm90IG1lZXQgdGhlIHJlcXVpcmVtZW50cyBvZiBcImFsZ1wiICR7YWxnfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleS5hc3ltbWV0cmljS2V5VHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIGl0cyBhc3ltbWV0cmljS2V5VHlwZSBtdXN0IGJlIHJzYSBvciByc2EtcHNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMS5kZWZhdWx0KShrZXksIGFsZyk7XG4gICAgICAgICAgICByZXR1cm4geyBrZXksIC4uLlBTUyB9O1xuICAgICAgICBjYXNlICFyc2FQc3NQYXJhbXMgJiYgJ1BTMjU2JzpcbiAgICAgICAgY2FzZSAhcnNhUHNzUGFyYW1zICYmICdQUzM4NCc6XG4gICAgICAgIGNhc2UgIXJzYVBzc1BhcmFtcyAmJiAnUFM1MTInOlxuICAgICAgICAgICAgaWYgKGtleS5hc3ltbWV0cmljS2V5VHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIGl0cyBhc3ltbWV0cmljS2V5VHlwZSBtdXN0IGJlIHJzYScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEuZGVmYXVsdCkoa2V5LCBhbGcpO1xuICAgICAgICAgICAgcmV0dXJuIHsga2V5LCAuLi5QU1MgfTtcbiAgICAgICAgY2FzZSAnRVMyNTYnOlxuICAgICAgICBjYXNlICdFUzI1NksnOlxuICAgICAgICBjYXNlICdFUzM4NCc6XG4gICAgICAgIGNhc2UgJ0VTNTEyJzoge1xuICAgICAgICAgICAgaWYgKGtleS5hc3ltbWV0cmljS2V5VHlwZSAhPT0gJ2VjJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQga2V5IGZvciB0aGlzIG9wZXJhdGlvbiwgaXRzIGFzeW1tZXRyaWNLZXlUeXBlIG11c3QgYmUgZWMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbCA9ICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5kZWZhdWx0KShrZXkpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBlY0N1cnZlQWxnTWFwLmdldChhbGcpO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBjdXJ2ZSBmb3IgdGhlIGFsZ29yaXRobSwgaXRzIGN1cnZlIG11c3QgYmUgJHtleHBlY3RlZH0sIGdvdCAke2FjdHVhbH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRzYUVuY29kaW5nOiAnaWVlZS1wMTM2MycsIGtleSB9O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7YWxnfSBpcyBub3Qgc3VwcG9ydGVkIGVpdGhlciBieSBKT1NFIG9yIHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0ga2V5Rm9yQ3J5cHRvO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGhtYWNEaWdlc3QoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnSFMyNTYnOlxuICAgICAgICAgICAgcmV0dXJuICdzaGEyNTYnO1xuICAgICAgICBjYXNlICdIUzM4NCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTM4NCc7XG4gICAgICAgIGNhc2UgJ0hTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhNTEyJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHthbGd9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBobWFjRGlnZXN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGNyeXB0b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY3J5cHRvX2tleS5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gZ2V0U2lnblZlcmlmeUtleShhbGcsIGtleSwgdXNhZ2UpIHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBpZiAoIWFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KShrZXkpO1xuICAgIH1cbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgY3J5cHRvXzEuS2V5T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja1NpZ0NyeXB0b0tleSkoa2V5LCBhbGcsIHVzYWdlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldFNpZ25WZXJpZnlLZXk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGRzYV9kaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuL2RzYV9kaWdlc3QuanNcIik7XG5jb25zdCBobWFjX2RpZ2VzdF9qc18xID0gcmVxdWlyZShcIi4vaG1hY19kaWdlc3QuanNcIik7XG5jb25zdCBub2RlX2tleV9qc18xID0gcmVxdWlyZShcIi4vbm9kZV9rZXkuanNcIik7XG5jb25zdCBnZXRfc2lnbl92ZXJpZnlfa2V5X2pzXzEgPSByZXF1aXJlKFwiLi9nZXRfc2lnbl92ZXJpZnlfa2V5LmpzXCIpO1xubGV0IG9uZVNob3RTaWduO1xuaWYgKGNyeXB0by5zaWduLmxlbmd0aCA+IDMpIHtcbiAgICBvbmVTaG90U2lnbiA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShjcnlwdG8uc2lnbik7XG59XG5lbHNlIHtcbiAgICBvbmVTaG90U2lnbiA9IGNyeXB0by5zaWduO1xufVxuY29uc3Qgc2lnbiA9IGFzeW5jIChhbGcsIGtleSwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IGtleU9iamVjdCA9ICgwLCBnZXRfc2lnbl92ZXJpZnlfa2V5X2pzXzEuZGVmYXVsdCkoYWxnLCBrZXksICdzaWduJyk7XG4gICAgaWYgKGFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICAgIGNvbnN0IGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygoMCwgaG1hY19kaWdlc3RfanNfMS5kZWZhdWx0KShhbGcpLCBrZXlPYmplY3QpO1xuICAgICAgICBobWFjLnVwZGF0ZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIGhtYWMuZGlnZXN0KCk7XG4gICAgfVxuICAgIHJldHVybiBvbmVTaG90U2lnbigoMCwgZHNhX2RpZ2VzdF9qc18xLmRlZmF1bHQpKGFsZyksIGRhdGEsICgwLCBub2RlX2tleV9qc18xLmRlZmF1bHQpKGFsZywga2V5T2JqZWN0KSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gc2lnbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgZHNhX2RpZ2VzdF9qc18xID0gcmVxdWlyZShcIi4vZHNhX2RpZ2VzdC5qc1wiKTtcbmNvbnN0IG5vZGVfa2V5X2pzXzEgPSByZXF1aXJlKFwiLi9ub2RlX2tleS5qc1wiKTtcbmNvbnN0IHNpZ25fanNfMSA9IHJlcXVpcmUoXCIuL3NpZ24uanNcIik7XG5jb25zdCBnZXRfc2lnbl92ZXJpZnlfa2V5X2pzXzEgPSByZXF1aXJlKFwiLi9nZXRfc2lnbl92ZXJpZnlfa2V5LmpzXCIpO1xuY29uc3QgW21ham9yLCBtaW5vcl0gPSBwcm9jZXNzLnZlcnNpb25cbiAgICAuc2xpY2UoMSlcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5tYXAoKHN0cikgPT4gcGFyc2VJbnQoc3RyLCAxMCkpO1xuY29uc3Qgb25lU2hvdENhbGxiYWNrU3VwcG9ydGVkID0gbWFqb3IgPj0gMTYgfHwgKG1ham9yID09PSAxNSAmJiBtaW5vciA+PSAxMyk7XG5sZXQgb25lU2hvdFZlcmlmeTtcbmlmIChjcnlwdG8udmVyaWZ5Lmxlbmd0aCA+IDQgJiYgb25lU2hvdENhbGxiYWNrU3VwcG9ydGVkKSB7XG4gICAgb25lU2hvdFZlcmlmeSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShjcnlwdG8udmVyaWZ5KTtcbn1cbmVsc2Uge1xuICAgIG9uZVNob3RWZXJpZnkgPSBjcnlwdG8udmVyaWZ5O1xufVxuY29uc3QgdmVyaWZ5ID0gYXN5bmMgKGFsZywga2V5LCBzaWduYXR1cmUsIGRhdGEpID0+IHtcbiAgICBjb25zdCBrZXlPYmplY3QgPSAoMCwgZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xLmRlZmF1bHQpKGFsZywga2V5LCAndmVyaWZ5Jyk7XG4gICAgaWYgKGFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkID0gYXdhaXQgKDAsIHNpZ25fanNfMS5kZWZhdWx0KShhbGcsIGtleU9iamVjdCwgZGF0YSk7XG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IHNpZ25hdHVyZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhbGdvcml0aG0gPSAoMCwgZHNhX2RpZ2VzdF9qc18xLmRlZmF1bHQpKGFsZyk7XG4gICAgY29uc3Qga2V5SW5wdXQgPSAoMCwgbm9kZV9rZXlfanNfMS5kZWZhdWx0KShhbGcsIGtleU9iamVjdCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG9uZVNob3RWZXJpZnkoYWxnb3JpdGhtLCBkYXRhLCBrZXlJbnB1dCwgc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZlcmlmeTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mbGF0dGVuZWRWZXJpZnkgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IHZlcmlmeV9qc18xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvdmVyaWZ5LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgaXNfZGlzam9pbnRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfZGlzam9pbnQuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuY29uc3QgY2hlY2tfa2V5X3R5cGVfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvY2hlY2tfa2V5X3R5cGUuanNcIik7XG5jb25zdCB2YWxpZGF0ZV9jcml0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL3ZhbGlkYXRlX2NyaXQuanNcIik7XG5jb25zdCB2YWxpZGF0ZV9hbGdvcml0aG1zX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL3ZhbGlkYXRlX2FsZ29yaXRobXMuanNcIik7XG5hc3luYyBmdW5jdGlvbiBmbGF0dGVuZWRWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandzKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnRmxhdHRlbmVkIEpXUyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoandzLnByb3RlY3RlZCA9PT0gdW5kZWZpbmVkICYmIGp3cy5oZWFkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnRmxhdHRlbmVkIEpXUyBtdXN0IGhhdmUgZWl0aGVyIG9mIHRoZSBcInByb3RlY3RlZFwiIG9yIFwiaGVhZGVyXCIgbWVtYmVycycpO1xuICAgIH1cbiAgICBpZiAoandzLnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBqd3MucHJvdGVjdGVkICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBIZWFkZXIgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3cy5wYXlsb2FkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ0pXUyBQYXlsb2FkIG1pc3NpbmcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd3Muc2lnbmF0dXJlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFNpZ25hdHVyZSBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd3MuaGVhZGVyICE9PSB1bmRlZmluZWQgJiYgISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd3MuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFVucHJvdGVjdGVkIEhlYWRlciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkUHJvdCA9IHt9O1xuICAgIGlmIChqd3MucHJvdGVjdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd3MucHJvdGVjdGVkKTtcbiAgICAgICAgICAgIHBhcnNlZFByb3QgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKHByb3RlY3RlZEhlYWRlcikpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdKV1MgUHJvdGVjdGVkIEhlYWRlciBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEoMCwgaXNfZGlzam9pbnRfanNfMS5kZWZhdWx0KShwYXJzZWRQcm90LCBqd3MuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBhbmQgSldTIFVucHJvdGVjdGVkIEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgIH1cbiAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAuLi5wYXJzZWRQcm90LFxuICAgICAgICAuLi5qd3MuaGVhZGVyLFxuICAgIH07XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9ICgwLCB2YWxpZGF0ZV9jcml0X2pzXzEuZGVmYXVsdCkoZXJyb3JzX2pzXzEuSldTSW52YWxpZCwgbmV3IE1hcChbWydiNjQnLCB0cnVlXV0pLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JpdCwgcGFyc2VkUHJvdCwgam9zZUhlYWRlcik7XG4gICAgbGV0IGI2NCA9IHRydWU7XG4gICAgaWYgKGV4dGVuc2lvbnMuaGFzKCdiNjQnKSkge1xuICAgICAgICBiNjQgPSBwYXJzZWRQcm90LmI2NDtcbiAgICAgICAgaWYgKHR5cGVvZiBiNjQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ1RoZSBcImI2NFwiIChiYXNlNjR1cmwtZW5jb2RlIHBheWxvYWQpIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSBhIGJvb2xlYW4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGFsZyB9ID0gam9zZUhlYWRlcjtcbiAgICBpZiAodHlwZW9mIGFsZyAhPT0gJ3N0cmluZycgfHwgIWFsZykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFwiYWxnXCIgKEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBtaXNzaW5nIG9yIGludmFsaWQnKTtcbiAgICB9XG4gICAgY29uc3QgYWxnb3JpdGhtcyA9IG9wdGlvbnMgJiYgKDAsIHZhbGlkYXRlX2FsZ29yaXRobXNfanNfMS5kZWZhdWx0KSgnYWxnb3JpdGhtcycsIG9wdGlvbnMuYWxnb3JpdGhtcyk7XG4gICAgaWYgKGFsZ29yaXRobXMgJiYgIWFsZ29yaXRobXMuaGFzKGFsZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VBbGdOb3RBbGxvd2VkKCdcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gICAgaWYgKGI2NCkge1xuICAgICAgICBpZiAodHlwZW9mIGp3cy5wYXlsb2FkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ0pXUyBQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgandzLnBheWxvYWQgIT09ICdzdHJpbmcnICYmICEoandzLnBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFBheWxvYWQgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBVaW50OEFycmF5IGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGxldCByZXNvbHZlZEtleSA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGF3YWl0IGtleShwYXJzZWRQcm90LCBqd3MpO1xuICAgICAgICByZXNvbHZlZEtleSA9IHRydWU7XG4gICAgfVxuICAgICgwLCBjaGVja19rZXlfdHlwZV9qc18xLmRlZmF1bHQpKGFsZywga2V5LCAndmVyaWZ5Jyk7XG4gICAgY29uc3QgZGF0YSA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKChfYSA9IGp3cy5wcm90ZWN0ZWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKSwgYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoJy4nKSwgdHlwZW9mIGp3cy5wYXlsb2FkID09PSAnc3RyaW5nJyA/IGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKGp3cy5wYXlsb2FkKSA6IGp3cy5wYXlsb2FkKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd3Muc2lnbmF0dXJlKTtcbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5kZWZhdWx0KShhbGcsIGtleSwgc2lnbmF0dXJlLCBkYXRhKTtcbiAgICBpZiAoIXZlcmlmaWVkKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQoKTtcbiAgICB9XG4gICAgbGV0IHBheWxvYWQ7XG4gICAgaWYgKGI2NCkge1xuICAgICAgICBwYXlsb2FkID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandzLnBheWxvYWQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgandzLnBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBheWxvYWQgPSBidWZmZXJfdXRpbHNfanNfMS5lbmNvZGVyLmVuY29kZShqd3MucGF5bG9hZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXlsb2FkID0gandzLnBheWxvYWQ7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZCB9O1xuICAgIGlmIChqd3MucHJvdGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnByb3RlY3RlZEhlYWRlciA9IHBhcnNlZFByb3Q7XG4gICAgfVxuICAgIGlmIChqd3MuaGVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnVucHJvdGVjdGVkSGVhZGVyID0gandzLmhlYWRlcjtcbiAgICB9XG4gICAgaWYgKHJlc29sdmVkS2V5KSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZsYXR0ZW5lZFZlcmlmeSA9IGZsYXR0ZW5lZFZlcmlmeTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21wYWN0VmVyaWZ5ID0gdm9pZCAwO1xuY29uc3QgdmVyaWZ5X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL3ZlcmlmeS5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGNvbXBhY3RWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoandzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBqd3MgPSBidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShqd3MpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3cyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ0NvbXBhY3QgSldTIG11c3QgYmUgYSBzdHJpbmcgb3IgVWludDhBcnJheScpO1xuICAgIH1cbiAgICBjb25zdCB7IDA6IHByb3RlY3RlZEhlYWRlciwgMTogcGF5bG9hZCwgMjogc2lnbmF0dXJlLCBsZW5ndGggfSA9IGp3cy5zcGxpdCgnLicpO1xuICAgIGlmIChsZW5ndGggIT09IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ0ludmFsaWQgQ29tcGFjdCBKV1MnKTtcbiAgICB9XG4gICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCAoMCwgdmVyaWZ5X2pzXzEuZmxhdHRlbmVkVmVyaWZ5KSh7IHBheWxvYWQsIHByb3RlY3RlZDogcHJvdGVjdGVkSGVhZGVyLCBzaWduYXR1cmUgfSwga2V5LCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQ6IHZlcmlmaWVkLnBheWxvYWQsIHByb3RlY3RlZEhlYWRlcjogdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IHZlcmlmaWVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb21wYWN0VmVyaWZ5ID0gY29tcGFjdFZlcmlmeTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZW5lcmFsVmVyaWZ5ID0gdm9pZCAwO1xuY29uc3QgdmVyaWZ5X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL3ZlcmlmeS5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYWxWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdHZW5lcmFsIEpXUyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoandzLnNpZ25hdHVyZXMpIHx8ICFqd3Muc2lnbmF0dXJlcy5ldmVyeShpc19vYmplY3RfanNfMS5kZWZhdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFNpZ25hdHVyZXMgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNpZ25hdHVyZSBvZiBqd3Muc2lnbmF0dXJlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5mbGF0dGVuZWRWZXJpZnkpKHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHNpZ25hdHVyZS5oZWFkZXIsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogandzLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkOiBzaWduYXR1cmUucHJvdGVjdGVkLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLnNpZ25hdHVyZSxcbiAgICAgICAgICAgIH0sIGtleSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQoKTtcbn1cbmV4cG9ydHMuZ2VuZXJhbFZlcmlmeSA9IGdlbmVyYWxWZXJpZnk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IChkYXRlKSA9PiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1pbnV0ZSA9IDYwO1xuY29uc3QgaG91ciA9IG1pbnV0ZSAqIDYwO1xuY29uc3QgZGF5ID0gaG91ciAqIDI0O1xuY29uc3Qgd2VlayA9IGRheSAqIDc7XG5jb25zdCB5ZWFyID0gZGF5ICogMzY1LjI1O1xuY29uc3QgUkVHRVggPSAvXihcXGQrfFxcZCtcXC5cXGQrKSA/KHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSkkL2k7XG5leHBvcnRzLmRlZmF1bHQgPSAoc3RyKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hlZCA9IFJFR0VYLmV4ZWMoc3RyKTtcbiAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0aW1lIHBlcmlvZCBmb3JtYXQnKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KG1hdGNoZWRbMV0pO1xuICAgIGNvbnN0IHVuaXQgPSBtYXRjaGVkWzJdLnRvTG93ZXJDYXNlKCk7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgIGNhc2UgJ3NlYyc6XG4gICAgICAgIGNhc2UgJ3NlY3MnOlxuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBjYXNlICdzZWNvbmRzJzpcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgICAgICBjYXNlICdtaW4nOlxuICAgICAgICBjYXNlICdtaW5zJzpcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIG1pbnV0ZSk7XG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICBjYXNlICdob3Vycyc6XG4gICAgICAgIGNhc2UgJ2hyJzpcbiAgICAgICAgY2FzZSAnaHJzJzpcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIGhvdXIpO1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICBjYXNlICdkYXlzJzpcbiAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIGRheSk7XG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBjYXNlICd3ZWVrcyc6XG4gICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiB3ZWVrKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogeWVhcik7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGVwb2NoX2pzXzEgPSByZXF1aXJlKFwiLi9lcG9jaC5qc1wiKTtcbmNvbnN0IHNlY3NfanNfMSA9IHJlcXVpcmUoXCIuL3NlY3MuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX29iamVjdC5qc1wiKTtcbmNvbnN0IG5vcm1hbGl6ZVR5cCA9ICh2YWx1ZSkgPT4gdmFsdWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eYXBwbGljYXRpb25cXC8vLCAnJyk7XG5jb25zdCBjaGVja0F1ZGllbmNlUHJlc2VuY2UgPSAoYXVkUGF5bG9hZCwgYXVkT3B0aW9uKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBhdWRQYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXVkT3B0aW9uLmluY2x1ZGVzKGF1ZFBheWxvYWQpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhdWRQYXlsb2FkKSkge1xuICAgICAgICByZXR1cm4gYXVkT3B0aW9uLnNvbWUoU2V0LnByb3RvdHlwZS5oYXMuYmluZChuZXcgU2V0KGF1ZFBheWxvYWQpKSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSAocHJvdGVjdGVkSGVhZGVyLCBlbmNvZGVkUGF5bG9hZCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgeyB0eXAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cCAmJlxuICAgICAgICAodHlwZW9mIHByb3RlY3RlZEhlYWRlci50eXAgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICBub3JtYWxpemVUeXAocHJvdGVjdGVkSGVhZGVyLnR5cCkgIT09IG5vcm1hbGl6ZVR5cCh0eXApKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCd1bmV4cGVjdGVkIFwidHlwXCIgSldUIGhlYWRlciB2YWx1ZScsICd0eXAnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGxldCBwYXlsb2FkO1xuICAgIHRyeSB7XG4gICAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGVuY29kZWRQYXlsb2FkKSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkocGF5bG9hZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0pXVCBDbGFpbXMgU2V0IG11c3QgYmUgYSB0b3AtbGV2ZWwgSlNPTiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBpc3N1ZXIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGlzc3VlciAmJiAhKEFycmF5LmlzQXJyYXkoaXNzdWVyKSA/IGlzc3VlciA6IFtpc3N1ZXJdKS5pbmNsdWRlcyhwYXlsb2FkLmlzcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgndW5leHBlY3RlZCBcImlzc1wiIGNsYWltIHZhbHVlJywgJ2lzcycsICdjaGVja19mYWlsZWQnKTtcbiAgICB9XG4gICAgY29uc3QgeyBzdWJqZWN0IH0gPSBvcHRpb25zO1xuICAgIGlmIChzdWJqZWN0ICYmIHBheWxvYWQuc3ViICE9PSBzdWJqZWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJzdWJcIiBjbGFpbSB2YWx1ZScsICdzdWInLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYXVkaWVuY2UgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGF1ZGllbmNlICYmXG4gICAgICAgICFjaGVja0F1ZGllbmNlUHJlc2VuY2UocGF5bG9hZC5hdWQsIHR5cGVvZiBhdWRpZW5jZSA9PT0gJ3N0cmluZycgPyBbYXVkaWVuY2VdIDogYXVkaWVuY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJhdWRcIiBjbGFpbSB2YWx1ZScsICdhdWQnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGxldCB0b2xlcmFuY2U7XG4gICAgc3dpdGNoICh0eXBlb2Ygb3B0aW9ucy5jbG9ja1RvbGVyYW5jZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gKDAsIHNlY3NfanNfMS5kZWZhdWx0KShvcHRpb25zLmNsb2NrVG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gb3B0aW9ucy5jbG9ja1RvbGVyYW5jZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjbG9ja1RvbGVyYW5jZSBvcHRpb24gdHlwZScpO1xuICAgIH1cbiAgICBjb25zdCB7IGN1cnJlbnREYXRlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG5vdyA9ICgwLCBlcG9jaF9qc18xLmRlZmF1bHQpKGN1cnJlbnREYXRlIHx8IG5ldyBEYXRlKCkpO1xuICAgIGlmICgocGF5bG9hZC5pYXQgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLm1heFRva2VuQWdlKSAmJiB0eXBlb2YgcGF5bG9hZC5pYXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wiaWF0XCIgY2xhaW0gbXVzdCBiZSBhIG51bWJlcicsICdpYXQnLCAnaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5uYmYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJuYmZcIiBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyJywgJ25iZicsICdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQubmJmID4gbm93ICsgdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcIm5iZlwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQnLCAnbmJmJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXlsb2FkLmV4cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcImV4cFwiIGNsYWltIG11c3QgYmUgYSBudW1iZXInLCAnZXhwJywgJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5leHAgPD0gbm93IC0gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldURXhwaXJlZCgnXCJleHBcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkJywgJ2V4cCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5tYXhUb2tlbkFnZSkge1xuICAgICAgICBjb25zdCBhZ2UgPSBub3cgLSBwYXlsb2FkLmlhdDtcbiAgICAgICAgY29uc3QgbWF4ID0gdHlwZW9mIG9wdGlvbnMubWF4VG9rZW5BZ2UgPT09ICdudW1iZXInID8gb3B0aW9ucy5tYXhUb2tlbkFnZSA6ICgwLCBzZWNzX2pzXzEuZGVmYXVsdCkob3B0aW9ucy5tYXhUb2tlbkFnZSk7XG4gICAgICAgIGlmIChhZ2UgLSB0b2xlcmFuY2UgPiBtYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RFeHBpcmVkKCdcImlhdFwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQgKHRvbyBmYXIgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWdlIDwgMCAtIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJpYXRcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkIChpdCBzaG91bGQgYmUgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuand0VmVyaWZ5ID0gdm9pZCAwO1xuY29uc3QgdmVyaWZ5X2pzXzEgPSByZXF1aXJlKFwiLi4vandzL2NvbXBhY3QvdmVyaWZ5LmpzXCIpO1xuY29uc3Qgand0X2NsYWltc19zZXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvand0X2NsYWltc19zZXQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGp3dFZlcmlmeShqd3QsIGtleSwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5jb21wYWN0VmVyaWZ5KShqd3QsIGtleSwgb3B0aW9ucyk7XG4gICAgaWYgKCgoX2EgPSB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIuY3JpdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY2x1ZGVzKCdiNjQnKSkgJiYgdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyLmI2NCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0pXVHMgTVVTVCBOT1QgdXNlIHVuZW5jb2RlZCBwYXlsb2FkJyk7XG4gICAgfVxuICAgIGNvbnN0IHBheWxvYWQgPSAoMCwgand0X2NsYWltc19zZXRfanNfMS5kZWZhdWx0KSh2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIsIHZlcmlmaWVkLnBheWxvYWQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogdmVyaWZpZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmp3dFZlcmlmeSA9IGp3dFZlcmlmeTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5qd3REZWNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZGVjcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2p3ZS9jb21wYWN0L2RlY3J5cHQuanNcIik7XG5jb25zdCBqd3RfY2xhaW1zX3NldF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9qd3RfY2xhaW1zX3NldC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gand0RGVjcnlwdChqd3QsIGtleSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0ICgwLCBkZWNyeXB0X2pzXzEuY29tcGFjdERlY3J5cHQpKGp3dCwga2V5LCBvcHRpb25zKTtcbiAgICBjb25zdCBwYXlsb2FkID0gKDAsIGp3dF9jbGFpbXNfc2V0X2pzXzEuZGVmYXVsdCkoZGVjcnlwdGVkLnByb3RlY3RlZEhlYWRlciwgZGVjcnlwdGVkLnBsYWludGV4dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBwcm90ZWN0ZWRIZWFkZXIgfSA9IGRlY3J5cHRlZDtcbiAgICBpZiAocHJvdGVjdGVkSGVhZGVyLmlzcyAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlci5pc3MgIT09IHBheWxvYWQuaXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3JlcGxpY2F0ZWQgXCJpc3NcIiBjbGFpbSBoZWFkZXIgcGFyYW1ldGVyIG1pc21hdGNoJywgJ2lzcycsICdtaXNtYXRjaCcpO1xuICAgIH1cbiAgICBpZiAocHJvdGVjdGVkSGVhZGVyLnN1YiAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlci5zdWIgIT09IHBheWxvYWQuc3ViKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3JlcGxpY2F0ZWQgXCJzdWJcIiBjbGFpbSBoZWFkZXIgcGFyYW1ldGVyIG1pc21hdGNoJywgJ3N1YicsICdtaXNtYXRjaCcpO1xuICAgIH1cbiAgICBpZiAocHJvdGVjdGVkSGVhZGVyLmF1ZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3RlY3RlZEhlYWRlci5hdWQpICE9PSBKU09OLnN0cmluZ2lmeShwYXlsb2FkLmF1ZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgncmVwbGljYXRlZCBcImF1ZFwiIGNsYWltIGhlYWRlciBwYXJhbWV0ZXIgbWlzbWF0Y2gnLCAnYXVkJywgJ21pc21hdGNoJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IGRlY3J5cHRlZC5rZXkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuand0RGVjcnlwdCA9IGp3dERlY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tcGFjdEVuY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBlbmNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL2VuY3J5cHQuanNcIik7XG5jbGFzcyBDb21wYWN0RW5jcnlwdCB7XG4gICAgY29uc3RydWN0b3IocGxhaW50ZXh0KSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZCA9IG5ldyBlbmNyeXB0X2pzXzEuRmxhdHRlbmVkRW5jcnlwdChwbGFpbnRleHQpO1xuICAgIH1cbiAgICBzZXRDb250ZW50RW5jcnlwdGlvbktleShjZWspIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldENvbnRlbnRFbmNyeXB0aW9uS2V5KGNlayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRJbml0aWFsaXphdGlvblZlY3Rvcihpdikge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRLZXlNYW5hZ2VtZW50UGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRLZXlNYW5hZ2VtZW50UGFyYW1ldGVycyhwYXJhbWV0ZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIGVuY3J5cHQoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGp3ZSA9IGF3YWl0IHRoaXMuX2ZsYXR0ZW5lZC5lbmNyeXB0KGtleSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBbandlLnByb3RlY3RlZCwgandlLmVuY3J5cHRlZF9rZXksIGp3ZS5pdiwgandlLmNpcGhlcnRleHQsIGp3ZS50YWddLmpvaW4oJy4nKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbXBhY3RFbmNyeXB0ID0gQ29tcGFjdEVuY3J5cHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmxhdHRlbmVkU2lnbiA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3Qgc2lnbl9qc18xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvc2lnbi5qc1wiKTtcbmNvbnN0IGlzX2Rpc2pvaW50X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2lzX2Rpc2pvaW50LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgY2hlY2tfa2V5X3R5cGVfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvY2hlY2tfa2V5X3R5cGUuanNcIik7XG5jb25zdCB2YWxpZGF0ZV9jcml0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL3ZhbGlkYXRlX2NyaXQuanNcIik7XG5jbGFzcyBGbGF0dGVuZWRTaWduIHtcbiAgICBjb25zdHJ1Y3RvcihwYXlsb2FkKSB7XG4gICAgICAgIGlmICghKHBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF5bG9hZCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRQcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRVbnByb3RlY3RlZEhlYWRlcih1bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFVucHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIgPSB1bnByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJvdGVjdGVkSGVhZGVyICYmICF0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ2VpdGhlciBzZXRQcm90ZWN0ZWRIZWFkZXIgb3Igc2V0VW5wcm90ZWN0ZWRIZWFkZXIgbXVzdCBiZSBjYWxsZWQgYmVmb3JlICNzaWduKCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCBpc19kaXNqb2ludF9qc18xLmRlZmF1bHQpKHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBhbmQgSldTIFVucHJvdGVjdGVkIEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAuLi50aGlzLl91bnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9ICgwLCB2YWxpZGF0ZV9jcml0X2pzXzEuZGVmYXVsdCkoZXJyb3JzX2pzXzEuSldTSW52YWxpZCwgbmV3IE1hcChbWydiNjQnLCB0cnVlXV0pLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JpdCwgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKTtcbiAgICAgICAgbGV0IGI2NCA9IHRydWU7XG4gICAgICAgIGlmIChleHRlbnNpb25zLmhhcygnYjY0JykpIHtcbiAgICAgICAgICAgIGI2NCA9IHRoaXMuX3Byb3RlY3RlZEhlYWRlci5iNjQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGI2NCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ1RoZSBcImI2NFwiIChiYXNlNjR1cmwtZW5jb2RlIHBheWxvYWQpIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSBhIGJvb2xlYW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFsZyB9ID0gam9zZUhlYWRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBhbGcgIT09ICdzdHJpbmcnIHx8ICFhbGcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdKV1MgXCJhbGdcIiAoQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG1pc3Npbmcgb3IgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgICgwLCBjaGVja19rZXlfdHlwZV9qc18xLmRlZmF1bHQpKGFsZywga2V5LCAnc2lnbicpO1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHRoaXMuX3BheWxvYWQ7XG4gICAgICAgIGlmIChiNjQpIHtcbiAgICAgICAgICAgIHBheWxvYWQgPSBidWZmZXJfdXRpbHNfanNfMS5lbmNvZGVyLmVuY29kZSgoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShwYXlsb2FkKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgcHJvdGVjdGVkSGVhZGVyID0gYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoSlNPTi5zdHJpbmdpZnkodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvdGVjdGVkSGVhZGVyID0gYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoJycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSAoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KShwcm90ZWN0ZWRIZWFkZXIsIGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKCcuJyksIHBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCAoMCwgc2lnbl9qc18xLmRlZmF1bHQpKGFsZywga2V5LCBkYXRhKTtcbiAgICAgICAgY29uc3QgandzID0ge1xuICAgICAgICAgICAgc2lnbmF0dXJlOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShzaWduYXR1cmUpLFxuICAgICAgICAgICAgcGF5bG9hZDogJycsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChiNjQpIHtcbiAgICAgICAgICAgIGp3cy5wYXlsb2FkID0gYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICBqd3MuaGVhZGVyID0gdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgandzLnByb3RlY3RlZCA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKHByb3RlY3RlZEhlYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3cztcbiAgICB9XG59XG5leHBvcnRzLkZsYXR0ZW5lZFNpZ24gPSBGbGF0dGVuZWRTaWduO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBhY3RTaWduID0gdm9pZCAwO1xuY29uc3Qgc2lnbl9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9zaWduLmpzXCIpO1xuY2xhc3MgQ29tcGFjdFNpZ24ge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkID0gbmV3IHNpZ25fanNfMS5GbGF0dGVuZWRTaWduKHBheWxvYWQpO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGp3cyA9IGF3YWl0IHRoaXMuX2ZsYXR0ZW5lZC5zaWduKGtleSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChqd3MucGF5bG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1c2UgdGhlIGZsYXR0ZW5lZCBtb2R1bGUgZm9yIGNyZWF0aW5nIEpXUyB3aXRoIGI2NDogZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7andzLnByb3RlY3RlZH0uJHtqd3MucGF5bG9hZH0uJHtqd3Muc2lnbmF0dXJlfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wYWN0U2lnbiA9IENvbXBhY3RTaWduO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyYWxTaWduID0gdm9pZCAwO1xuY29uc3Qgc2lnbl9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9zaWduLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jbGFzcyBJbmRpdmlkdWFsU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihzaWcsIGtleSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHNpZztcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRQcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3RlY3RlZEhlYWRlciA9IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFVucHJvdGVjdGVkSGVhZGVyKHVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLnVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRVbnByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5wcm90ZWN0ZWRIZWFkZXIgPSB1bnByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZFNpZ25hdHVyZSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5hZGRTaWduYXR1cmUoLi4uYXJncyk7XG4gICAgfVxuICAgIHNpZ24oLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuc2lnbiguLi5hcmdzKTtcbiAgICB9XG4gICAgZG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH1cbn1cbmNsYXNzIEdlbmVyYWxTaWduIHtcbiAgICBjb25zdHJ1Y3RvcihwYXlsb2FkKSB7XG4gICAgICAgIHRoaXMuX3NpZ25hdHVyZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgfVxuICAgIGFkZFNpZ25hdHVyZShrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gbmV3IEluZGl2aWR1YWxTaWduYXR1cmUodGhpcywga2V5LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc2lnbmF0dXJlcy5wdXNoKHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmU7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2lnbmF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdhdCBsZWFzdCBvbmUgc2lnbmF0dXJlIG11c3QgYmUgYWRkZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqd3MgPSB7XG4gICAgICAgICAgICBzaWduYXR1cmVzOiBbXSxcbiAgICAgICAgICAgIHBheWxvYWQ6ICcnLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpZ25hdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMuX3NpZ25hdHVyZXNbaV07XG4gICAgICAgICAgICBjb25zdCBmbGF0dGVuZWQgPSBuZXcgc2lnbl9qc18xLkZsYXR0ZW5lZFNpZ24odGhpcy5fcGF5bG9hZCk7XG4gICAgICAgICAgICBmbGF0dGVuZWQuc2V0UHJvdGVjdGVkSGVhZGVyKHNpZ25hdHVyZS5wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICAgICAgZmxhdHRlbmVkLnNldFVucHJvdGVjdGVkSGVhZGVyKHNpZ25hdHVyZS51bnByb3RlY3RlZEhlYWRlcik7XG4gICAgICAgICAgICBjb25zdCB7IHBheWxvYWQsIC4uLnJlc3QgfSA9IGF3YWl0IGZsYXR0ZW5lZC5zaWduKHNpZ25hdHVyZS5rZXksIHNpZ25hdHVyZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgandzLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoandzLnBheWxvYWQgIT09IHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnaW5jb25zaXN0ZW50IHVzZSBvZiBKV1MgVW5lbmNvZGVkIFBheWxvYWQgT3B0aW9uIChSRkM3Nzk3KScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgandzLnNpZ25hdHVyZXMucHVzaChyZXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gandzO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJhbFNpZ24gPSBHZW5lcmFsU2lnbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm9kdWNlSldUID0gdm9pZCAwO1xuY29uc3QgZXBvY2hfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvZXBvY2guanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuY29uc3Qgc2Vjc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9zZWNzLmpzXCIpO1xuY2xhc3MgUHJvZHVjZUpXVCB7XG4gICAgY29uc3RydWN0b3IocGF5bG9hZCkge1xuICAgICAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShwYXlsb2FkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSldUIENsYWltcyBTZXQgTVVTVCBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG4gICAgc2V0SXNzdWVyKGlzc3Vlcikge1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBpc3M6IGlzc3VlciB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0U3ViamVjdChzdWJqZWN0KSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIHN1Yjogc3ViamVjdCB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QXVkaWVuY2UoYXVkaWVuY2UpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgYXVkOiBhdWRpZW5jZSB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SnRpKGp3dElkKSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGp0aTogand0SWQgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldE5vdEJlZm9yZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgbmJmOiBpbnB1dCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgbmJmOiAoMCwgZXBvY2hfanNfMS5kZWZhdWx0KShuZXcgRGF0ZSgpKSArICgwLCBzZWNzX2pzXzEuZGVmYXVsdCkoaW5wdXQpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEV4cGlyYXRpb25UaW1lKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBleHA6IGlucHV0IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBleHA6ICgwLCBlcG9jaF9qc18xLmRlZmF1bHQpKG5ldyBEYXRlKCkpICsgKDAsIHNlY3NfanNfMS5kZWZhdWx0KShpbnB1dCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SXNzdWVkQXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGlhdDogKDAsIGVwb2NoX2pzXzEuZGVmYXVsdCkobmV3IERhdGUoKSkgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGlhdDogaW5wdXQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlByb2R1Y2VKV1QgPSBQcm9kdWNlSldUO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZ25KV1QgPSB2b2lkIDA7XG5jb25zdCBzaWduX2pzXzEgPSByZXF1aXJlKFwiLi4vandzL2NvbXBhY3Qvc2lnbi5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IHByb2R1Y2VfanNfMSA9IHJlcXVpcmUoXCIuL3Byb2R1Y2UuanNcIik7XG5jbGFzcyBTaWduSldUIGV4dGVuZHMgcHJvZHVjZV9qc18xLlByb2R1Y2VKV1Qge1xuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgc2lnbihrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzaWcgPSBuZXcgc2lnbl9qc18xLkNvbXBhY3RTaWduKGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BheWxvYWQpKSk7XG4gICAgICAgIHNpZy5zZXRQcm90ZWN0ZWRIZWFkZXIodGhpcy5fcHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoKF9hID0gdGhpcy5fcHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JpdCkgJiZcbiAgICAgICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlci5jcml0LmluY2x1ZGVzKCdiNjQnKSAmJlxuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLmI2NCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1RzIE1VU1QgTk9UIHVzZSB1bmVuY29kZWQgcGF5bG9hZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWcuc2lnbihrZXksIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2lnbkpXVCA9IFNpZ25KV1Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW5jcnlwdEpXVCA9IHZvaWQgMDtcbmNvbnN0IGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9qd2UvY29tcGFjdC9lbmNyeXB0LmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IHByb2R1Y2VfanNfMSA9IHJlcXVpcmUoXCIuL3Byb2R1Y2UuanNcIik7XG5jbGFzcyBFbmNyeXB0SldUIGV4dGVuZHMgcHJvZHVjZV9qc18xLlByb2R1Y2VKV1Qge1xuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICBpZiAodGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKSB7XG4gICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldENvbnRlbnRFbmNyeXB0aW9uS2V5IGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2VrID0gY2VrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRJbml0aWFsaXphdGlvblZlY3RvciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2l2ID0gaXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXBsaWNhdGVJc3N1ZXJBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlSXNzdWVyQXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlU3ViamVjdEFzSGVhZGVyKCkge1xuICAgICAgICB0aGlzLl9yZXBsaWNhdGVTdWJqZWN0QXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBlbmMgPSBuZXcgZW5jcnlwdF9qc18xLkNvbXBhY3RFbmNyeXB0KGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BheWxvYWQpKSk7XG4gICAgICAgIGlmICh0aGlzLl9yZXBsaWNhdGVJc3N1ZXJBc0hlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0geyAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIGlzczogdGhpcy5fcGF5bG9hZC5pc3MgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcmVwbGljYXRlU3ViamVjdEFzSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgc3ViOiB0aGlzLl9wYXlsb2FkLnN1YiB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZXBsaWNhdGVBdWRpZW5jZUFzSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgYXVkOiB0aGlzLl9wYXlsb2FkLmF1ZCB9O1xuICAgICAgICB9XG4gICAgICAgIGVuYy5zZXRQcm90ZWN0ZWRIZWFkZXIodGhpcy5fcHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgaWYgKHRoaXMuX2l2KSB7XG4gICAgICAgICAgICBlbmMuc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IodGhpcy5faXYpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgIGVuYy5zZXRDb250ZW50RW5jcnlwdGlvbktleSh0aGlzLl9jZWspO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9rZXlNYW5hZ2VtZW50UGFyYW1ldGVycykge1xuICAgICAgICAgICAgZW5jLnNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHRoaXMuX2tleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jLmVuY3J5cHQoa2V5LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkVuY3J5cHRKV1QgPSBFbmNyeXB0SldUO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmkgPSBleHBvcnRzLmNhbGN1bGF0ZUp3a1RodW1icHJpbnQgPSB2b2lkIDA7XG5jb25zdCBkaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2RpZ2VzdC5qc1wiKTtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmNvbnN0IGNoZWNrID0gKHZhbHVlLCBkZXNjcmlwdGlvbikgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8ICF2YWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldLSW52YWxpZChgJHtkZXNjcmlwdGlvbn0gbWlzc2luZyBvciBpbnZhbGlkYCk7XG4gICAgfVxufTtcbmFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZUp3a1RodW1icHJpbnQoandrLCBkaWdlc3RBbGdvcml0aG0pIHtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd2spKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0pXSyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBkaWdlc3RBbGdvcml0aG0gIT09IG51bGwgJiYgZGlnZXN0QWxnb3JpdGhtICE9PSB2b2lkIDAgPyBkaWdlc3RBbGdvcml0aG0gOiAoZGlnZXN0QWxnb3JpdGhtID0gJ3NoYTI1NicpO1xuICAgIGlmIChkaWdlc3RBbGdvcml0aG0gIT09ICdzaGEyNTYnICYmXG4gICAgICAgIGRpZ2VzdEFsZ29yaXRobSAhPT0gJ3NoYTM4NCcgJiZcbiAgICAgICAgZGlnZXN0QWxnb3JpdGhtICE9PSAnc2hhNTEyJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaWdlc3RBbGdvcml0aG0gbXVzdCBvbmUgb2YgXCJzaGEyNTZcIiwgXCJzaGEzODRcIiwgb3IgXCJzaGE1MTJcIicpO1xuICAgIH1cbiAgICBsZXQgY29tcG9uZW50cztcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnRUMnOlxuICAgICAgICAgICAgY2hlY2soandrLmNydiwgJ1wiY3J2XCIgKEN1cnZlKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNoZWNrKGp3ay54LCAnXCJ4XCIgKFggQ29vcmRpbmF0ZSkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjaGVjayhqd2sueSwgJ1wieVwiIChZIENvb3JkaW5hdGUpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IHsgY3J2OiBqd2suY3J2LCBrdHk6IGp3ay5rdHksIHg6IGp3ay54LCB5OiBqd2sueSB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ09LUCc6XG4gICAgICAgICAgICBjaGVjayhqd2suY3J2LCAnXCJjcnZcIiAoU3VidHlwZSBvZiBLZXkgUGFpcikgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjaGVjayhqd2sueCwgJ1wieFwiIChQdWJsaWMgS2V5KSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7IGNydjogandrLmNydiwga3R5OiBqd2sua3R5LCB4OiBqd2sueCB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JTQSc6XG4gICAgICAgICAgICBjaGVjayhqd2suZSwgJ1wiZVwiIChFeHBvbmVudCkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjaGVjayhqd2subiwgJ1wiblwiIChNb2R1bHVzKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7IGU6IGp3ay5lLCBrdHk6IGp3ay5rdHksIG46IGp3ay5uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb2N0JzpcbiAgICAgICAgICAgIGNoZWNrKGp3ay5rLCAnXCJrXCIgKEtleSBWYWx1ZSkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjb21wb25lbnRzID0geyBrOiBqd2suaywga3R5OiBqd2sua3R5IH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdcImt0eVwiIChLZXkgVHlwZSkgUGFyYW1ldGVyIG1pc3Npbmcgb3IgdW5zdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpKTtcbiAgICByZXR1cm4gKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoYXdhaXQgKDAsIGRpZ2VzdF9qc18xLmRlZmF1bHQpKGRpZ2VzdEFsZ29yaXRobSwgZGF0YSkpO1xufVxuZXhwb3J0cy5jYWxjdWxhdGVKd2tUaHVtYnByaW50ID0gY2FsY3VsYXRlSndrVGh1bWJwcmludDtcbmFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmkoandrLCBkaWdlc3RBbGdvcml0aG0pIHtcbiAgICBkaWdlc3RBbGdvcml0aG0gIT09IG51bGwgJiYgZGlnZXN0QWxnb3JpdGhtICE9PSB2b2lkIDAgPyBkaWdlc3RBbGdvcml0aG0gOiAoZGlnZXN0QWxnb3JpdGhtID0gJ3NoYTI1NicpO1xuICAgIGNvbnN0IHRodW1icHJpbnQgPSBhd2FpdCBjYWxjdWxhdGVKd2tUaHVtYnByaW50KGp3aywgZGlnZXN0QWxnb3JpdGhtKTtcbiAgICByZXR1cm4gYHVybjppZXRmOnBhcmFtczpvYXV0aDpqd2stdGh1bWJwcmludDpzaGEtJHtkaWdlc3RBbGdvcml0aG0uc2xpY2UoLTMpfToke3RodW1icHJpbnR9YDtcbn1cbmV4cG9ydHMuY2FsY3VsYXRlSndrVGh1bWJwcmludFVyaSA9IGNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1iZWRkZWRKV0sgPSB2b2lkIDA7XG5jb25zdCBpbXBvcnRfanNfMSA9IHJlcXVpcmUoXCIuLi9rZXkvaW1wb3J0LmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gRW1iZWRkZWRKV0socHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgIC4uLnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgLi4udG9rZW4uaGVhZGVyLFxuICAgIH07XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoam9zZUhlYWRlci5qd2spKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdcImp3a1wiIChKU09OIFdlYiBLZXkpIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSBhIEpTT04gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGF3YWl0ICgwLCBpbXBvcnRfanNfMS5pbXBvcnRKV0spKHsgLi4uam9zZUhlYWRlci5qd2ssIGV4dDogdHJ1ZSB9LCBqb3NlSGVhZGVyLmFsZywgdHJ1ZSk7XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwga2V5LnR5cGUgIT09ICdwdWJsaWMnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdcImp3a1wiIChKU09OIFdlYiBLZXkpIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSBhIHB1YmxpYyBrZXknKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbmV4cG9ydHMuRW1iZWRkZWRKV0sgPSBFbWJlZGRlZEpXSztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVMb2NhbEpXS1NldCA9IGV4cG9ydHMuTG9jYWxKV0tTZXQgPSBleHBvcnRzLmlzSldLU0xpa2UgPSB2b2lkIDA7XG5jb25zdCBpbXBvcnRfanNfMSA9IHJlcXVpcmUoXCIuLi9rZXkvaW1wb3J0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuZnVuY3Rpb24gZ2V0S3R5RnJvbUFsZyhhbGcpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBhbGcgPT09ICdzdHJpbmcnICYmIGFsZy5zbGljZSgwLCAyKSkge1xuICAgICAgICBjYXNlICdSUyc6XG4gICAgICAgIGNhc2UgJ1BTJzpcbiAgICAgICAgICAgIHJldHVybiAnUlNBJztcbiAgICAgICAgY2FzZSAnRVMnOlxuICAgICAgICAgICAgcmV0dXJuICdFQyc7XG4gICAgICAgIGNhc2UgJ0VkJzpcbiAgICAgICAgICAgIHJldHVybiAnT0tQJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBcImFsZ1wiIHZhbHVlIGZvciBhIEpTT04gV2ViIEtleSBTZXQnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0pXS1NMaWtlKGp3a3MpIHtcbiAgICByZXR1cm4gKGp3a3MgJiZcbiAgICAgICAgdHlwZW9mIGp3a3MgPT09ICdvYmplY3QnICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkoandrcy5rZXlzKSAmJlxuICAgICAgICBqd2tzLmtleXMuZXZlcnkoaXNKV0tMaWtlKSk7XG59XG5leHBvcnRzLmlzSldLU0xpa2UgPSBpc0pXS1NMaWtlO1xuZnVuY3Rpb24gaXNKV0tMaWtlKGtleSkge1xuICAgIHJldHVybiAoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KTtcbn1cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICAgIGlmICh0eXBlb2Ygc3RydWN0dXJlZENsb25lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmUob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5jbGFzcyBMb2NhbEpXS1NldCB7XG4gICAgY29uc3RydWN0b3Ioandrcykge1xuICAgICAgICB0aGlzLl9jYWNoZWQgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICBpZiAoIWlzSldLU0xpa2UoandrcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0tTSW52YWxpZCgnSlNPTiBXZWIgS2V5IFNldCBtYWxmb3JtZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9qd2tzID0gY2xvbmUoandrcyk7XG4gICAgfVxuICAgIGFzeW5jIGdldEtleShwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHsgYWxnLCBraWQgfSA9IHsgLi4ucHJvdGVjdGVkSGVhZGVyLCAuLi50b2tlbi5oZWFkZXIgfTtcbiAgICAgICAgY29uc3Qga3R5ID0gZ2V0S3R5RnJvbUFsZyhhbGcpO1xuICAgICAgICBjb25zdCBjYW5kaWRhdGVzID0gdGhpcy5fandrcy5rZXlzLmZpbHRlcigoandrKSA9PiB7XG4gICAgICAgICAgICBsZXQgY2FuZGlkYXRlID0ga3R5ID09PSBqd2sua3R5O1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAmJiB0eXBlb2Yga2lkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGtpZCA9PT0gandrLmtpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUgJiYgdHlwZW9mIGp3ay5hbGcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gYWxnID09PSBqd2suYWxnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAmJiB0eXBlb2YgandrLnVzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2sudXNlID09PSAnc2lnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUgJiYgQXJyYXkuaXNBcnJheShqd2sua2V5X29wcykpIHtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2sua2V5X29wcy5pbmNsdWRlcygndmVyaWZ5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlICYmIGFsZyA9PT0gJ0VkRFNBJykge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5jcnYgPT09ICdFZDI1NTE5JyB8fCBqd2suY3J2ID09PSAnRWQ0NDgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5jcnYgPT09ICdQLTI1Nic7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRVMyNTZLJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5jcnYgPT09ICdzZWNwMjU2azEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5jcnYgPT09ICdQLTM4NCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmNydiA9PT0gJ1AtNTIxJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IDA6IGp3aywgbGVuZ3RoIH0gPSBjYW5kaWRhdGVzO1xuICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldLU05vTWF0Y2hpbmdLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLl9jYWNoZWQuZ2V0KGp3aykgfHwgdGhpcy5fY2FjaGVkLnNldChqd2ssIHt9KS5nZXQoandrKTtcbiAgICAgICAgaWYgKGNhY2hlZFthbGddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleU9iamVjdCA9IGF3YWl0ICgwLCBpbXBvcnRfanNfMS5pbXBvcnRKV0spKHsgLi4uandrLCBleHQ6IHRydWUgfSwgYWxnKTtcbiAgICAgICAgICAgIGlmIChrZXlPYmplY3QgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGtleU9iamVjdC50eXBlICE9PSAncHVibGljJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0tTSW52YWxpZCgnSlNPTiBXZWIgS2V5IFNldCBtZW1iZXJzIG11c3QgYmUgcHVibGljIGtleXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlZFthbGddID0ga2V5T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZWRbYWxnXTtcbiAgICB9XG59XG5leHBvcnRzLkxvY2FsSldLU2V0ID0gTG9jYWxKV0tTZXQ7XG5mdW5jdGlvbiBjcmVhdGVMb2NhbEpXS1NldChqd2tzKSB7XG4gICAgcmV0dXJuIExvY2FsSldLU2V0LnByb3RvdHlwZS5nZXRLZXkuYmluZChuZXcgTG9jYWxKV0tTZXQoandrcykpO1xufVxuZXhwb3J0cy5jcmVhdGVMb2NhbEpXS1NldCA9IGNyZWF0ZUxvY2FsSldLU2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGZldGNoSndrcyA9IGFzeW5jICh1cmwsIHRpbWVvdXQsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgZ2V0O1xuICAgIHN3aXRjaCAodXJsLnByb3RvY29sKSB7XG4gICAgICAgIGNhc2UgJ2h0dHBzOic6XG4gICAgICAgICAgICBnZXQgPSBodHRwcy5nZXQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaHR0cDonOlxuICAgICAgICAgICAgZ2V0ID0gaHR0cC5nZXQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vuc3VwcG9ydGVkIFVSTCBwcm90b2NvbC4nKTtcbiAgICB9XG4gICAgY29uc3QgeyBhZ2VudCwgaGVhZGVycyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCByZXEgPSBnZXQodXJsLmhyZWYsIHtcbiAgICAgICAgYWdlbnQsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfSk7XG4gICAgY29uc3QgW3Jlc3BvbnNlXSA9IChhd2FpdCBQcm9taXNlLnJhY2UoWygwLCBldmVudHNfMS5vbmNlKShyZXEsICdyZXNwb25zZScpLCAoMCwgZXZlbnRzXzEub25jZSkocmVxLCAndGltZW91dCcpXSkpO1xuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgcmVxLmRlc3Ryb3koKTtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXS1NUaW1lb3V0KCk7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VFcnJvcignRXhwZWN0ZWQgMjAwIE9LIGZyb20gdGhlIEpTT04gV2ViIEtleSBTZXQgSFRUUCByZXNwb25zZScpO1xuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciBhd2FpdCAoY29uc3QgcGFydCBvZiByZXNwb25zZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZSgoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KSguLi5wYXJ0cykpKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRUVycm9yKCdGYWlsZWQgdG8gcGFyc2UgdGhlIEpTT04gV2ViIEtleSBTZXQgSFRUUCByZXNwb25zZSBhcyBKU09OJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZldGNoSndrcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVSZW1vdGVKV0tTZXQgPSB2b2lkIDA7XG5jb25zdCBmZXRjaF9qd2tzX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9mZXRjaF9qd2tzLmpzXCIpO1xuY29uc3QgZW52X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9lbnYuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGxvY2FsX2pzXzEgPSByZXF1aXJlKFwiLi9sb2NhbC5qc1wiKTtcbmNsYXNzIFJlbW90ZUpXS1NldCBleHRlbmRzIGxvY2FsX2pzXzEuTG9jYWxKV0tTZXQge1xuICAgIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IGtleXM6IFtdIH0pO1xuICAgICAgICB0aGlzLl9qd2tzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoISh1cmwgaW5zdGFuY2VvZiBVUkwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1cmwgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBVUkwnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cmwgPSBuZXcgVVJMKHVybC5ocmVmKTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHsgYWdlbnQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hZ2VudCwgaGVhZGVyczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMgfTtcbiAgICAgICAgdGhpcy5fdGltZW91dER1cmF0aW9uID1cbiAgICAgICAgICAgIHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXREdXJhdGlvbikgPT09ICdudW1iZXInID8gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXREdXJhdGlvbiA6IDUwMDA7XG4gICAgICAgIHRoaXMuX2Nvb2xkb3duRHVyYXRpb24gPVxuICAgICAgICAgICAgdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29vbGRvd25EdXJhdGlvbikgPT09ICdudW1iZXInID8gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvb2xkb3duRHVyYXRpb24gOiAzMDAwMDtcbiAgICAgICAgdGhpcy5fY2FjaGVNYXhBZ2UgPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYWNoZU1heEFnZSkgPT09ICdudW1iZXInID8gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhY2hlTWF4QWdlIDogNjAwMDAwO1xuICAgIH1cbiAgICBjb29saW5nRG93bigpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9qd2tzVGltZXN0YW1wID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBEYXRlLm5vdygpIDwgdGhpcy5fandrc1RpbWVzdGFtcCArIHRoaXMuX2Nvb2xkb3duRHVyYXRpb25cbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIGZyZXNoKCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2p3a3NUaW1lc3RhbXAgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IERhdGUubm93KCkgPCB0aGlzLl9qd2tzVGltZXN0YW1wICsgdGhpcy5fY2FjaGVNYXhBZ2VcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIGdldEtleShwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKSB7XG4gICAgICAgIGlmICghdGhpcy5fandrcyB8fCAhdGhpcy5mcmVzaCgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZ2V0S2V5KHByb3RlY3RlZEhlYWRlciwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBlcnJvcnNfanNfMS5KV0tTTm9NYXRjaGluZ0tleSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvb2xpbmdEb3duKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci5nZXRLZXkocHJvdGVjdGVkSGVhZGVyLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJlbG9hZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdGZXRjaCAmJiAoMCwgZW52X2pzXzEuaXNDbG91ZGZsYXJlV29ya2VycykoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNEb25lID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0ZldGNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoaXNEb25lLCA1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaXNEb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdGZXRjaCkge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0ZldGNoID0gKDAsIGZldGNoX2p3a3NfanNfMS5kZWZhdWx0KSh0aGlzLl91cmwsIHRoaXMuX3RpbWVvdXREdXJhdGlvbiwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigoanNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghKDAsIGxvY2FsX2pzXzEuaXNKV0tTTGlrZSkoanNvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXS1NJbnZhbGlkKCdKU09OIFdlYiBLZXkgU2V0IG1hbGZvcm1lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9qd2tzID0geyBrZXlzOiBqc29uLmtleXMgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9qd2tzVGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nRmV0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0ZldGNoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuX3BlbmRpbmdGZXRjaDtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSZW1vdGVKV0tTZXQodXJsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIFJlbW90ZUpXS1NldC5wcm90b3R5cGUuZ2V0S2V5LmJpbmQobmV3IFJlbW90ZUpXS1NldCh1cmwsIG9wdGlvbnMpKTtcbn1cbmV4cG9ydHMuY3JlYXRlUmVtb3RlSldLU2V0ID0gY3JlYXRlUmVtb3RlSldLU2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVuc2VjdXJlZEpXVCA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybCA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGp3dF9jbGFpbXNfc2V0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2p3dF9jbGFpbXNfc2V0LmpzXCIpO1xuY29uc3QgcHJvZHVjZV9qc18xID0gcmVxdWlyZShcIi4vcHJvZHVjZS5qc1wiKTtcbmNsYXNzIFVuc2VjdXJlZEpXVCBleHRlbmRzIHByb2R1Y2VfanNfMS5Qcm9kdWNlSldUIHtcbiAgICBlbmNvZGUoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoeyBhbGc6ICdub25lJyB9KSk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBiYXNlNjR1cmwuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BheWxvYWQpKTtcbiAgICAgICAgcmV0dXJuIGAke2hlYWRlcn0uJHtwYXlsb2FkfS5gO1xuICAgIH1cbiAgICBzdGF0aWMgZGVjb2RlKGp3dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGp3dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdVbnNlY3VyZWQgSldUIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IDA6IGVuY29kZWRIZWFkZXIsIDE6IGVuY29kZWRQYXlsb2FkLCAyOiBzaWduYXR1cmUsIGxlbmd0aCB9ID0gand0LnNwbGl0KCcuJyk7XG4gICAgICAgIGlmIChsZW5ndGggIT09IDMgfHwgc2lnbmF0dXJlICE9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ludmFsaWQgVW5zZWN1cmVkIEpXVCcpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBoZWFkZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBoZWFkZXIgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGJhc2U2NHVybC5kZWNvZGUoZW5jb2RlZEhlYWRlcikpKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXIuYWxnICE9PSAnbm9uZScpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ludmFsaWQgVW5zZWN1cmVkIEpXVCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSAoMCwgand0X2NsYWltc19zZXRfanNfMS5kZWZhdWx0KShoZWFkZXIsIGJhc2U2NHVybC5kZWNvZGUoZW5jb2RlZFBheWxvYWQpLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHsgcGF5bG9hZCwgaGVhZGVyIH07XG4gICAgfVxufVxuZXhwb3J0cy5VbnNlY3VyZWRKV1QgPSBVbnNlY3VyZWRKV1Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5lbmNvZGUgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5leHBvcnRzLmVuY29kZSA9IGJhc2U2NHVybC5lbmNvZGU7XG5leHBvcnRzLmRlY29kZSA9IGJhc2U2NHVybC5kZWNvZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlUHJvdGVjdGVkSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmZ1bmN0aW9uIGRlY29kZVByb3RlY3RlZEhlYWRlcih0b2tlbikge1xuICAgIGxldCBwcm90ZWN0ZWRCNjR1O1xuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMyB8fCBwYXJ0cy5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIFtwcm90ZWN0ZWRCNjR1XSA9IHBhcnRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ29iamVjdCcgJiYgdG9rZW4pIHtcbiAgICAgICAgaWYgKCdwcm90ZWN0ZWQnIGluIHRva2VuKSB7XG4gICAgICAgICAgICBwcm90ZWN0ZWRCNjR1ID0gdG9rZW4ucHJvdGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVG9rZW4gZG9lcyBub3QgY29udGFpbiBhIFByb3RlY3RlZCBIZWFkZXInKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHByb3RlY3RlZEI2NHUgIT09ICdzdHJpbmcnIHx8ICFwcm90ZWN0ZWRCNjR1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKCgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKHByb3RlY3RlZEI2NHUpKSk7XG4gICAgICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBUb2tlbiBvciBQcm90ZWN0ZWQgSGVhZGVyIGZvcm1hdHRpbmcnKTtcbiAgICB9XG59XG5leHBvcnRzLmRlY29kZVByb3RlY3RlZEhlYWRlciA9IGRlY29kZVByb3RlY3RlZEhlYWRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVKd3QgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBkZWNvZGVKd3Qoand0KSB7XG4gICAgaWYgKHR5cGVvZiBqd3QgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSldUcyBtdXN0IHVzZSBDb21wYWN0IEpXUyBzZXJpYWxpemF0aW9uLCBKV1QgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIGNvbnN0IHsgMTogcGF5bG9hZCwgbGVuZ3RoIH0gPSBqd3Quc3BsaXQoJy4nKTtcbiAgICBpZiAobGVuZ3RoID09PSA1KVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnT25seSBKV1RzIHVzaW5nIENvbXBhY3QgSldTIHNlcmlhbGl6YXRpb24gY2FuIGJlIGRlY29kZWQnKTtcbiAgICBpZiAobGVuZ3RoICE9PSAzKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSW52YWxpZCBKV1QnKTtcbiAgICBpZiAoIXBheWxvYWQpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1RzIG11c3QgY29udGFpbiBhIHBheWxvYWQnKTtcbiAgICBsZXQgZGVjb2RlZDtcbiAgICB0cnkge1xuICAgICAgICBkZWNvZGVkID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkocGF5bG9hZCk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ZhaWxlZCB0byBwYXJzZSB0aGUgYmFzZTY0dXJsIGVuY29kZWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoZGVjb2RlZCkpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdGYWlsZWQgdG8gcGFyc2UgdGhlIGRlY29kZWQgcGF5bG9hZCBhcyBKU09OJyk7XG4gICAgfVxuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKHJlc3VsdCkpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdJbnZhbGlkIEpXVCBDbGFpbXMgU2V0Jyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZGVjb2RlSnd0ID0gZGVjb2RlSnd0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IGV4cG9ydHMuZ2VuZXJhdGVTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHJhbmRvbV9qc18xID0gcmVxdWlyZShcIi4vcmFuZG9tLmpzXCIpO1xuY29uc3QgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBnZW5lcmF0ZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShjcnlwdG9fMS5nZW5lcmF0ZUtleVBhaXIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTZWNyZXQoYWxnLCBvcHRpb25zKSB7XG4gICAgbGV0IGxlbmd0aDtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgIGNhc2UgJ0hTMzg0JzpcbiAgICAgICAgY2FzZSAnSFM1MTInOlxuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZLVyc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgICAgICBsZW5ndGggPSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KSgoMCwgcmFuZG9tX2pzXzEuZGVmYXVsdCkobmV3IFVpbnQ4QXJyYXkobGVuZ3RoID4+IDMpKSk7XG59XG5leHBvcnRzLmdlbmVyYXRlU2VjcmV0ID0gZ2VuZXJhdGVTZWNyZXQ7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoYWxnLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ1JTMzg0JzpcbiAgICAgICAgY2FzZSAnUlM1MTInOlxuICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgY2FzZSAnUFM1MTInOlxuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsdXNMZW5ndGggPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubW9kdWx1c0xlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMjA0ODtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWx1c0xlbmd0aCAhPT0gJ251bWJlcicgfHwgbW9kdWx1c0xlbmd0aCA8IDIwNDgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBtb2R1bHVzTGVuZ3RoIG9wdGlvbiBwcm92aWRlZCwgMjA0OCBiaXRzIG9yIGxhcmdlciBrZXlzIG11c3QgYmUgdXNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5cGFpciA9IGF3YWl0IGdlbmVyYXRlKCdyc2EnLCB7XG4gICAgICAgICAgICAgICAgbW9kdWx1c0xlbmd0aCxcbiAgICAgICAgICAgICAgICBwdWJsaWNFeHBvbmVudDogMHgxMDAwMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKDAsIGNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEuc2V0TW9kdWx1c0xlbmd0aCkoa2V5cGFpci5wcml2YXRlS2V5LCBtb2R1bHVzTGVuZ3RoKTtcbiAgICAgICAgICAgICgwLCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xLnNldE1vZHVsdXNMZW5ndGgpKGtleXBhaXIucHVibGljS2V5LCBtb2R1bHVzTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBrZXlwYWlyO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZSgnZWMnLCB7IG5hbWVkQ3VydmU6ICdQLTI1NicgfSk7XG4gICAgICAgIGNhc2UgJ0VTMjU2Syc6XG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VjJywgeyBuYW1lZEN1cnZlOiAnc2VjcDI1NmsxJyB9KTtcbiAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlYycsIHsgbmFtZWRDdXJ2ZTogJ1AtMzg0JyB9KTtcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlYycsIHsgbmFtZWRDdXJ2ZTogJ1AtNTIxJyB9KTtcbiAgICAgICAgY2FzZSAnRWREU0EnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICBjYXNlICdFZDI1NTE5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlZDI1NTE5Jyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnRWQ0NDgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VkNDQ4Jyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY3J2IG9wdGlvbiBwcm92aWRlZCwgc3VwcG9ydGVkIHZhbHVlcyBhcmUgRWQyNTUxOSBhbmQgRWQ0NDgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFQ0RILUVTJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMTI4S1cnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTI1NktXJzpcbiAgICAgICAgICAgIGNvbnN0IGNydiA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdQLTI1Nic7XG4gICAgICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1AtMjU2JzpcbiAgICAgICAgICAgICAgICBjYXNlICdQLTM4NCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUC01MjEnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VjJywgeyBuYW1lZEN1cnZlOiBjcnYgfSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnWDI1NTE5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCd4MjU1MTknKTtcbiAgICAgICAgICAgICAgICBjYXNlICdYNDQ4JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCd4NDQ4Jyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY3J2IG9wdGlvbiBwcm92aWRlZCwgc3VwcG9ydGVkIHZhbHVlcyBhcmUgUC0yNTYsIFAtMzg0LCBQLTUyMSwgWDI1NTE5LCBhbmQgWDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgfVxufVxuZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXIgPSBnZW5lcmF0ZUtleVBhaXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gdm9pZCAwO1xuY29uc3QgZ2VuZXJhdGVfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2dlbmVyYXRlLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXlQYWlyKGFsZywgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgZ2VuZXJhdGVfanNfMS5nZW5lcmF0ZUtleVBhaXIpKGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IGdlbmVyYXRlS2V5UGFpcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZW5lcmF0ZVNlY3JldCA9IHZvaWQgMDtcbmNvbnN0IGdlbmVyYXRlX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9nZW5lcmF0ZS5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU2VjcmV0KGFsZywgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgZ2VuZXJhdGVfanNfMS5nZW5lcmF0ZVNlY3JldCkoYWxnLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVTZWNyZXQgPSBnZW5lcmF0ZVNlY3JldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iYXNlNjR1cmwgPSBleHBvcnRzLmdlbmVyYXRlU2VjcmV0ID0gZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXIgPSBleHBvcnRzLmVycm9ycyA9IGV4cG9ydHMuZGVjb2RlSnd0ID0gZXhwb3J0cy5kZWNvZGVQcm90ZWN0ZWRIZWFkZXIgPSBleHBvcnRzLmltcG9ydEpXSyA9IGV4cG9ydHMuaW1wb3J0WDUwOSA9IGV4cG9ydHMuaW1wb3J0UEtDUzggPSBleHBvcnRzLmltcG9ydFNQS0kgPSBleHBvcnRzLmV4cG9ydEpXSyA9IGV4cG9ydHMuZXhwb3J0U1BLSSA9IGV4cG9ydHMuZXhwb3J0UEtDUzggPSBleHBvcnRzLlVuc2VjdXJlZEpXVCA9IGV4cG9ydHMuY3JlYXRlUmVtb3RlSldLU2V0ID0gZXhwb3J0cy5jcmVhdGVMb2NhbEpXS1NldCA9IGV4cG9ydHMuRW1iZWRkZWRKV0sgPSBleHBvcnRzLmNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmkgPSBleHBvcnRzLmNhbGN1bGF0ZUp3a1RodW1icHJpbnQgPSBleHBvcnRzLkVuY3J5cHRKV1QgPSBleHBvcnRzLlNpZ25KV1QgPSBleHBvcnRzLkdlbmVyYWxTaWduID0gZXhwb3J0cy5GbGF0dGVuZWRTaWduID0gZXhwb3J0cy5Db21wYWN0U2lnbiA9IGV4cG9ydHMuRmxhdHRlbmVkRW5jcnlwdCA9IGV4cG9ydHMuQ29tcGFjdEVuY3J5cHQgPSBleHBvcnRzLmp3dERlY3J5cHQgPSBleHBvcnRzLmp3dFZlcmlmeSA9IGV4cG9ydHMuZ2VuZXJhbFZlcmlmeSA9IGV4cG9ydHMuZmxhdHRlbmVkVmVyaWZ5ID0gZXhwb3J0cy5jb21wYWN0VmVyaWZ5ID0gZXhwb3J0cy5HZW5lcmFsRW5jcnlwdCA9IGV4cG9ydHMuZ2VuZXJhbERlY3J5cHQgPSBleHBvcnRzLmZsYXR0ZW5lZERlY3J5cHQgPSBleHBvcnRzLmNvbXBhY3REZWNyeXB0ID0gdm9pZCAwO1xudmFyIGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuL2p3ZS9jb21wYWN0L2RlY3J5cHQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wYWN0RGVjcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjcnlwdF9qc18xLmNvbXBhY3REZWNyeXB0OyB9IH0pO1xudmFyIGRlY3J5cHRfanNfMiA9IHJlcXVpcmUoXCIuL2p3ZS9mbGF0dGVuZWQvZGVjcnlwdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZsYXR0ZW5lZERlY3J5cHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY3J5cHRfanNfMi5mbGF0dGVuZWREZWNyeXB0OyB9IH0pO1xudmFyIGRlY3J5cHRfanNfMyA9IHJlcXVpcmUoXCIuL2p3ZS9nZW5lcmFsL2RlY3J5cHQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZW5lcmFsRGVjcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjcnlwdF9qc18zLmdlbmVyYWxEZWNyeXB0OyB9IH0pO1xudmFyIGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuL2p3ZS9nZW5lcmFsL2VuY3J5cHQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmFsRW5jcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jcnlwdF9qc18xLkdlbmVyYWxFbmNyeXB0OyB9IH0pO1xudmFyIHZlcmlmeV9qc18xID0gcmVxdWlyZShcIi4vandzL2NvbXBhY3QvdmVyaWZ5LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcGFjdFZlcmlmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmVyaWZ5X2pzXzEuY29tcGFjdFZlcmlmeTsgfSB9KTtcbnZhciB2ZXJpZnlfanNfMiA9IHJlcXVpcmUoXCIuL2p3cy9mbGF0dGVuZWQvdmVyaWZ5LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmxhdHRlbmVkVmVyaWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJpZnlfanNfMi5mbGF0dGVuZWRWZXJpZnk7IH0gfSk7XG52YXIgdmVyaWZ5X2pzXzMgPSByZXF1aXJlKFwiLi9qd3MvZ2VuZXJhbC92ZXJpZnkuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZW5lcmFsVmVyaWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJpZnlfanNfMy5nZW5lcmFsVmVyaWZ5OyB9IH0pO1xudmFyIHZlcmlmeV9qc180ID0gcmVxdWlyZShcIi4vand0L3ZlcmlmeS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImp3dFZlcmlmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmVyaWZ5X2pzXzQuand0VmVyaWZ5OyB9IH0pO1xudmFyIGRlY3J5cHRfanNfNCA9IHJlcXVpcmUoXCIuL2p3dC9kZWNyeXB0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiand0RGVjcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjcnlwdF9qc180Lmp3dERlY3J5cHQ7IH0gfSk7XG52YXIgZW5jcnlwdF9qc18yID0gcmVxdWlyZShcIi4vandlL2NvbXBhY3QvZW5jcnlwdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbXBhY3RFbmNyeXB0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNyeXB0X2pzXzIuQ29tcGFjdEVuY3J5cHQ7IH0gfSk7XG52YXIgZW5jcnlwdF9qc18zID0gcmVxdWlyZShcIi4vandlL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmxhdHRlbmVkRW5jcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jcnlwdF9qc18zLkZsYXR0ZW5lZEVuY3J5cHQ7IH0gfSk7XG52YXIgc2lnbl9qc18xID0gcmVxdWlyZShcIi4vandzL2NvbXBhY3Qvc2lnbi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbXBhY3RTaWduXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduX2pzXzEuQ29tcGFjdFNpZ247IH0gfSk7XG52YXIgc2lnbl9qc18yID0gcmVxdWlyZShcIi4vandzL2ZsYXR0ZW5lZC9zaWduLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmxhdHRlbmVkU2lnblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbl9qc18yLkZsYXR0ZW5lZFNpZ247IH0gfSk7XG52YXIgc2lnbl9qc18zID0gcmVxdWlyZShcIi4vandzL2dlbmVyYWwvc2lnbi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdlbmVyYWxTaWduXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduX2pzXzMuR2VuZXJhbFNpZ247IH0gfSk7XG52YXIgc2lnbl9qc180ID0gcmVxdWlyZShcIi4vand0L3NpZ24uanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaWduSldUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduX2pzXzQuU2lnbkpXVDsgfSB9KTtcbnZhciBlbmNyeXB0X2pzXzQgPSByZXF1aXJlKFwiLi9qd3QvZW5jcnlwdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuY3J5cHRKV1RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY3J5cHRfanNfNC5FbmNyeXB0SldUOyB9IH0pO1xudmFyIHRodW1icHJpbnRfanNfMSA9IHJlcXVpcmUoXCIuL2p3ay90aHVtYnByaW50LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2FsY3VsYXRlSndrVGh1bWJwcmludFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGh1bWJwcmludF9qc18xLmNhbGN1bGF0ZUp3a1RodW1icHJpbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYWxjdWxhdGVKd2tUaHVtYnByaW50VXJpXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHVtYnByaW50X2pzXzEuY2FsY3VsYXRlSndrVGh1bWJwcmludFVyaTsgfSB9KTtcbnZhciBlbWJlZGRlZF9qc18xID0gcmVxdWlyZShcIi4vandrL2VtYmVkZGVkLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW1iZWRkZWRKV0tcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtYmVkZGVkX2pzXzEuRW1iZWRkZWRKV0s7IH0gfSk7XG52YXIgbG9jYWxfanNfMSA9IHJlcXVpcmUoXCIuL2p3a3MvbG9jYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVMb2NhbEpXS1NldFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9jYWxfanNfMS5jcmVhdGVMb2NhbEpXS1NldDsgfSB9KTtcbnZhciByZW1vdGVfanNfMSA9IHJlcXVpcmUoXCIuL2p3a3MvcmVtb3RlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlUmVtb3RlSldLU2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdGVfanNfMS5jcmVhdGVSZW1vdGVKV0tTZXQ7IH0gfSk7XG52YXIgdW5zZWN1cmVkX2pzXzEgPSByZXF1aXJlKFwiLi9qd3QvdW5zZWN1cmVkLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5zZWN1cmVkSldUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bnNlY3VyZWRfanNfMS5VbnNlY3VyZWRKV1Q7IH0gfSk7XG52YXIgZXhwb3J0X2pzXzEgPSByZXF1aXJlKFwiLi9rZXkvZXhwb3J0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhwb3J0UEtDUzhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4cG9ydF9qc18xLmV4cG9ydFBLQ1M4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhwb3J0U1BLSVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb3J0X2pzXzEuZXhwb3J0U1BLSTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4cG9ydEpXS1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb3J0X2pzXzEuZXhwb3J0SldLOyB9IH0pO1xudmFyIGltcG9ydF9qc18xID0gcmVxdWlyZShcIi4va2V5L2ltcG9ydC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImltcG9ydFNQS0lcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltcG9ydF9qc18xLmltcG9ydFNQS0k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbXBvcnRQS0NTOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW1wb3J0X2pzXzEuaW1wb3J0UEtDUzg7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbXBvcnRYNTA5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfanNfMS5pbXBvcnRYNTA5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW1wb3J0SldLXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfanNfMS5pbXBvcnRKV0s7IH0gfSk7XG52YXIgZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXJfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVQcm90ZWN0ZWRIZWFkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9wcm90ZWN0ZWRfaGVhZGVyX2pzXzEuZGVjb2RlUHJvdGVjdGVkSGVhZGVyOyB9IH0pO1xudmFyIGRlY29kZV9qd3RfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZGVjb2RlX2p3dC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUp3dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2p3dF9qc18xLmRlY29kZUp3dDsgfSB9KTtcbmV4cG9ydHMuZXJyb3JzID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvcnMuanNcIik7XG52YXIgZ2VuZXJhdGVfa2V5X3BhaXJfanNfMSA9IHJlcXVpcmUoXCIuL2tleS9nZW5lcmF0ZV9rZXlfcGFpci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdlbmVyYXRlS2V5UGFpclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdGVfa2V5X3BhaXJfanNfMS5nZW5lcmF0ZUtleVBhaXI7IH0gfSk7XG52YXIgZ2VuZXJhdGVfc2VjcmV0X2pzXzEgPSByZXF1aXJlKFwiLi9rZXkvZ2VuZXJhdGVfc2VjcmV0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2VuZXJhdGVTZWNyZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRlX3NlY3JldF9qc18xLmdlbmVyYXRlU2VjcmV0OyB9IH0pO1xuZXhwb3J0cy5iYXNlNjR1cmwgPSByZXF1aXJlKFwiLi91dGlsL2Jhc2U2NHVybC5qc1wiKTtcbiIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJzsgLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG5sZXQgX25vZGVJZDtcblxubGV0IF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG5cblxubGV0IF9sYXN0TVNlY3MgPSAwO1xubGV0IF9sYXN0TlNlY3MgPSAwOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IHVuc2FmZVN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiLCJpbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcblxuICBjb25zdCBieXRlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCBjb25zdCBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBjb25zdCBVUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHYzNShuYW1lLCB2ZXJzaW9uLCBoYXNoZnVuYykge1xuICBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQodmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICB2YXIgX25hbWVzcGFjZTtcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICBpZiAoKChfbmFtZXNwYWNlID0gbmFtZXNwYWNlKSA9PT0gbnVsbCB8fCBfbmFtZXNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbmFtZXNwYWNlLmxlbmd0aCkgIT09IDE2KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9IC8vIENvbXB1dGUgaGFzaCBvZiBuYW1lc3BhY2UgYW5kIHZhbHVlLCBQZXIgNC4zXG4gICAgLy8gRnV0dXJlOiBVc2Ugc3ByZWFkIHN5bnRheCB3aGVuIHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zLCBlLmcuIGBieXRlcyA9XG4gICAgLy8gaGFzaGZ1bmMoWy4uLm5hbWVzcGFjZSwgLi4uIHZhbHVlXSlgXG5cblxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWUubGVuZ3RoKTtcbiAgICBieXRlcy5zZXQobmFtZXNwYWNlKTtcbiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpO1xuICAgIGJ5dGVzID0gaGFzaGZ1bmMoYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gYnl0ZXNbNl0gJiAweDBmIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7XG5cbiAgICBpZiAoYnVmKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cblxuICAgIHJldHVybiB1bnNhZmVTdHJpbmdpZnkoYnl0ZXMpO1xuICB9IC8vIEZ1bmN0aW9uI25hbWUgaXMgbm90IHNldHRhYmxlIG9uIHNvbWUgcGxhdGZvcm1zICgjMjcwKVxuXG5cbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICB9IGNhdGNoIChlcnIpIHt9IC8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5cblxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSIsIi8qXG4gKiBCcm93c2VyLWNvbXBhdGlibGUgSmF2YVNjcmlwdCBNRDVcbiAqXG4gKiBNb2RpZmljYXRpb24gb2YgSmF2YVNjcmlwdCBNRDVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0phdmFTY3JpcHQtTUQ1XG4gKlxuICogQ29weXJpZ2h0IDIwMTEsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqIEJhc2VkIG9uXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlXG4gKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLlxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IChDKSBQYXVsIEpvaG5zdG9uIDE5OTkgLSAyMDA5XG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cbmZ1bmN0aW9uIG1kNShieXRlcykge1xuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShtc2cubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlc1tpXSA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZDVUb0hleEVuY29kZWRBcnJheSh3b3Jkc1RvTWQ1KGJ5dGVzVG9Xb3JkcyhieXRlcyksIGJ5dGVzLmxlbmd0aCAqIDgpKTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMgdG8gYW4gYXJyYXkgb2YgYnl0ZXNcbiAqL1xuXG5cbmZ1bmN0aW9uIG1kNVRvSGV4RW5jb2RlZEFycmF5KGlucHV0KSB7XG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBjb25zdCBsZW5ndGgzMiA9IGlucHV0Lmxlbmd0aCAqIDMyO1xuICBjb25zdCBoZXhUYWIgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGgzMjsgaSArPSA4KSB7XG4gICAgY29uc3QgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgY29uc3QgaGV4ID0gcGFyc2VJbnQoaGV4VGFiLmNoYXJBdCh4ID4+PiA0ICYgMHgwZikgKyBoZXhUYWIuY2hhckF0KHggJiAweDBmKSwgMTYpO1xuICAgIG91dHB1dC5wdXNoKGhleCk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgb3V0cHV0IGxlbmd0aCB3aXRoIHBhZGRpbmcgYW5kIGJpdCBsZW5ndGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aDgpIHtcbiAgcmV0dXJuIChpbnB1dExlbmd0aDggKyA2NCA+Pj4gOSA8PCA0KSArIDE0ICsgMTtcbn1cbi8qXG4gKiBDYWxjdWxhdGUgdGhlIE1ENSBvZiBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoLlxuICovXG5cblxuZnVuY3Rpb24gd29yZHNUb01kNSh4LCBsZW4pIHtcbiAgLyogYXBwZW5kIHBhZGRpbmcgKi9cbiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCBsZW4gJSAzMjtcbiAgeFtnZXRPdXRwdXRMZW5ndGgobGVuKSAtIDFdID0gbGVuO1xuICBsZXQgYSA9IDE3MzI1ODQxOTM7XG4gIGxldCBiID0gLTI3MTczMzg3OTtcbiAgbGV0IGMgPSAtMTczMjU4NDE5NDtcbiAgbGV0IGQgPSAyNzE3MzM4Nzg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikge1xuICAgIGNvbnN0IG9sZGEgPSBhO1xuICAgIGNvbnN0IG9sZGIgPSBiO1xuICAgIGNvbnN0IG9sZGMgPSBjO1xuICAgIGNvbnN0IG9sZGQgPSBkO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2ldLCA3LCAtNjgwODc2OTM2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgNF0sIDcsIC0xNzY0MTg4OTcpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyA2XSwgMTcsIC0xNDczMjMxMzQxKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgN10sIDIyLCAtNDU3MDU5ODMpO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE3LCAtNDIwNjMpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNywgMTgwNDYwMzY4Mik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgMTVdLCAyMiwgMTIzNjUzNTMyOSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA1LCAtMTY1Nzk2NTEwKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgNl0sIDksIC0xMDY5NTAxNjMyKTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNCwgNjQzNzE3NzEzKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNSwgLTcwMTU1ODY5MSk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDEwXSwgOSwgMzgwMTYwODMpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgOV0sIDUsIDU2ODQ0NjQzOCk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgOSwgLTEwMTk4MDM2OTApO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA4XSwgMjAsIDExNjM1MzE1MDEpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDUsIC0xNDQ0NjgxNDY3KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMl0sIDksIC01MTQwMzc4NCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNCwgMTczNTMyODQ3Myk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgNV0sIDQsIC0zNzg1NTgpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2Mik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA0LCAtMTUzMDk5MjA2MCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1Myk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2ldLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNiwgLTcyMjUyMTk3OSk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNCwgLTY0MDM2NDQ4Nyk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDEyXSwgMTEsIC00MjE4MTU4MzUpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2ldLCA2LCAtMTk4NjMwODQ0KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgN10sIDEwLCAxMTI2ODkxNDE1KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNiwgMTcwMDQ4NTU3MSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDE1XSwgMTAsIC0zMDYxMTc0NCk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgNF0sIDYsIC0xNDU1MjMwNzApO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgOV0sIDIxLCAtMzQzNDg1NTUxKTtcbiAgICBhID0gc2FmZUFkZChhLCBvbGRhKTtcbiAgICBiID0gc2FmZUFkZChiLCBvbGRiKTtcbiAgICBjID0gc2FmZUFkZChjLCBvbGRjKTtcbiAgICBkID0gc2FmZUFkZChkLCBvbGRkKTtcbiAgfVxuXG4gIHJldHVybiBbYSwgYiwgYywgZF07XG59XG4vKlxuICogQ29udmVydCBhbiBhcnJheSBieXRlcyB0byBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzXG4gKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ5dGVzVG9Xb3JkcyhpbnB1dCkge1xuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG4gIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgobGVuZ3RoOCkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoODsgaSArPSA4KSB7XG4gICAgb3V0cHV0W2kgPj4gNV0gfD0gKGlucHV0W2kgLyA4XSAmIDB4ZmYpIDw8IGkgJSAzMjtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNhZmVBZGQoeCwgeSkge1xuICBjb25zdCBsc3cgPSAoeCAmIDB4ZmZmZikgKyAoeSAmIDB4ZmZmZik7XG4gIGNvbnN0IG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbmNvbnN0IHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiLCJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEXG59OyIsImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsIi8vIEFkYXB0ZWQgZnJvbSBDaHJpcyBWZW5lc3MnIFNIQTEgY29kZSBhdFxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9zaGExLmh0bWxcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4geCAmIHkgXiB+eCAmIHo7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHggJiB5IF4geCAmIHogXiB5ICYgejtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG4gIH1cbn1cblxuZnVuY3Rpb24gUk9UTCh4LCBuKSB7XG4gIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47XG59XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgY29uc3QgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgY29uc3QgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcy5wdXNoKG1zZy5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgLy8gQ29udmVydCBBcnJheS1saWtlIHRvIEFycmF5XG4gICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICBjb25zdCBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIGNvbnN0IE4gPSBNYXRoLmNlaWwobCAvIDE2KTtcbiAgY29uc3QgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW2kgKiA2NCArIGogKiA0XSA8PCAyNCB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tpICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tpICogNjQgKyBqICogNCArIDNdO1xuICAgIH1cblxuICAgIE1baV0gPSBhcnI7XG4gIH1cblxuICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpO1xuICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gIE1bTiAtIDFdWzE1XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggJiAweGZmZmZmZmZmO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgY29uc3QgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW2ldW3RdO1xuICAgIH1cblxuICAgIGZvciAobGV0IHQgPSAxNjsgdCA8IDgwOyArK3QpIHtcbiAgICAgIFdbdF0gPSBST1RMKFdbdCAtIDNdIF4gV1t0IC0gOF0gXiBXW3QgLSAxNF0gXiBXW3QgLSAxNl0sIDEpO1xuICAgIH1cblxuICAgIGxldCBhID0gSFswXTtcbiAgICBsZXQgYiA9IEhbMV07XG4gICAgbGV0IGMgPSBIWzJdO1xuICAgIGxldCBkID0gSFszXTtcbiAgICBsZXQgZSA9IEhbNF07XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDgwOyArK3QpIHtcbiAgICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICBjb25zdCBUID0gUk9UTChhLCA1KSArIGYocywgYiwgYywgZCkgKyBlICsgS1tzXSArIFdbdF0gPj4+IDA7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gVDtcbiAgICB9XG5cbiAgICBIWzBdID0gSFswXSArIGEgPj4+IDA7XG4gICAgSFsxXSA9IEhbMV0gKyBiID4+PiAwO1xuICAgIEhbMl0gPSBIWzJdICsgYyA+Pj4gMDtcbiAgICBIWzNdID0gSFszXSArIGQgPj4+IDA7XG4gICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwO1xuICB9XG5cbiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAweGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiLCJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBzaGExIGZyb20gJy4vc2hhMS5qcyc7XG5jb25zdCB2NSA9IHYzNSgndjUnLCAweDUwLCBzaGExKTtcbmV4cG9ydCBkZWZhdWx0IHY1OyIsImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE1KSwgMTYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2ZXJzaW9uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyb3NzRmV0Y2ggPSByZXF1aXJlKCdjcm9zcy1mZXRjaCcpO1xudmFyIGpvc2UgPSByZXF1aXJlKCdqb3NlJyk7XG52YXIgdXVpZCA9IHJlcXVpcmUoJ3V1aWQnKTtcblxuY29uc3QgU09MSURfQ0xJRU5UX0FVVEhOX0tFWV9QUkVGSVggPSBcInNvbGlkQ2xpZW50QXV0aG46XCI7XHJcbmNvbnN0IFBSRUZFUlJFRF9TSUdOSU5HX0FMRyA9IFtcIkVTMjU2XCIsIFwiUlMyNTZcIl07XHJcbmNvbnN0IEVWRU5UUyA9IHtcclxuICAgIEVSUk9SOiBcImVycm9yXCIsXHJcbiAgICBMT0dJTjogXCJsb2dpblwiLFxyXG4gICAgTE9HT1VUOiBcImxvZ291dFwiLFxyXG4gICAgTkVXX1JFRlJFU0hfVE9LRU46IFwibmV3UmVmcmVzaFRva2VuXCIsXHJcbiAgICBTRVNTSU9OX0VYUElSRUQ6IFwic2Vzc2lvbkV4cGlyZWRcIixcclxuICAgIFNFU1NJT05fRVhURU5ERUQ6IFwic2Vzc2lvbkV4dGVuZGVkXCIsXHJcbiAgICBTRVNTSU9OX1JFU1RPUkVEOiBcInNlc3Npb25SZXN0b3JlXCIsXHJcbiAgICBUSU1FT1VUX1NFVDogXCJ0aW1lb3V0U2V0XCIsXHJcbn07XHJcbmNvbnN0IFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EUyA9IDU7XHJcbmNvbnN0IFNDT1BFX09QRU5JRCA9IFwib3BlbmlkXCI7XHJcbmNvbnN0IFNDT1BFX09GRkxJTkUgPSBcIm9mZmxpbmVfYWNjZXNzXCI7XHJcbmNvbnN0IFNDT1BFX1dFQklEID0gXCJ3ZWJpZFwiO1xyXG5jb25zdCBERUZBVUxUX1NDT1BFUyA9IFtTQ09QRV9PUEVOSUQsIFNDT1BFX09GRkxJTkUsIFNDT1BFX1dFQklEXS5qb2luKFwiIFwiKTtcblxuY2xhc3MgQWdncmVnYXRlSGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihoYW5kbGVhYmxlcykge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlYWJsZXMgPSBoYW5kbGVhYmxlcztcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFByb3BlckhhbmRsZXIocGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgY2FuSGFuZGxlTGlzdCA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMuaGFuZGxlYWJsZXMubWFwKChoYW5kbGVhYmxlKSA9PiBoYW5kbGVhYmxlLmNhbkhhbmRsZSguLi5wYXJhbXMpKSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5IYW5kbGVMaXN0Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChjYW5IYW5kbGVMaXN0W2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVhYmxlc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGFzeW5jIGNhbkhhbmRsZSguLi5wYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0UHJvcGVySGFuZGxlcihwYXJhbXMpKSAhPT0gbnVsbDtcclxuICAgIH1cclxuICAgIGFzeW5jIGhhbmRsZSguLi5wYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gYXdhaXQgdGhpcy5nZXRQcm9wZXJIYW5kbGVyKHBhcmFtcyk7XHJcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuaGFuZGxlKC4uLnBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gY2Fubm90IGZpbmQgYSBzdWl0YWJsZSBoYW5kbGVyIGZvcjogJHtwYXJhbXNcclxuICAgICAgICAgICAgLm1hcCgocGFyYW0pID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuam9pbihcIiwgXCIpfWApO1xyXG4gICAgfVxyXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoSndrcyhqd2tzSXJpLCBpc3N1ZXJJcmkpIHtcclxuICAgIGNvbnN0IGp3a3NSZXNwb25zZSA9IGF3YWl0IGNyb3NzRmV0Y2guZmV0Y2goandrc0lyaSk7XHJcbiAgICBpZiAoandrc1Jlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmV0Y2ggSldLUyBmb3IgWyR7aXNzdWVySXJpfV0gYXQgWyR7andrc0lyaX1dOiAke2p3a3NSZXNwb25zZS5zdGF0dXN9ICR7andrc1Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICB9XHJcbiAgICBsZXQgandrO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBqd2sgPSAoYXdhaXQgandrc1Jlc3BvbnNlLmpzb24oKSkua2V5c1swXTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYWxmb3JtZWQgSldLUyBmb3IgWyR7aXNzdWVySXJpfV0gYXQgWyR7andrc0lyaX1dOiAke2UubWVzc2FnZX1gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBqd2s7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkKGlkVG9rZW4sIGp3a3NJcmksIGlzc3VlcklyaSwgY2xpZW50SWQpIHtcclxuICAgIGNvbnN0IGp3ayA9IGF3YWl0IGZldGNoSndrcyhqd2tzSXJpLCBpc3N1ZXJJcmkpO1xyXG4gICAgbGV0IHBheWxvYWQ7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHsgcGF5bG9hZDogdmVyaWZpZWRQYXlsb2FkIH0gPSBhd2FpdCBqb3NlLmp3dFZlcmlmeShpZFRva2VuLCBhd2FpdCBqb3NlLmltcG9ydEpXSyhqd2spLCB7XHJcbiAgICAgICAgICAgIGlzc3VlcjogaXNzdWVySXJpLFxyXG4gICAgICAgICAgICBhdWRpZW5jZTogY2xpZW50SWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGF5bG9hZCA9IHZlcmlmaWVkUGF5bG9hZDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb2tlbiB2ZXJpZmljYXRpb24gZmFpbGVkOiAke2Uuc3RhY2t9YCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHBheWxvYWQud2ViaWQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcGF5bG9hZC53ZWJpZDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5zdWIgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB0b2tlbiAke0pTT04uc3RyaW5naWZ5KHBheWxvYWQpfSBpcyBpbnZhbGlkOiBpdCBoYXMgbm8gJ3dlYmlkJyBjbGFpbSBhbmQgbm8gJ3N1YicgY2xhaW0uYCk7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5ldyBVUkwocGF5bG9hZC5zdWIpO1xyXG4gICAgICAgIHJldHVybiBwYXlsb2FkLnN1YjtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgdG9rZW4gaGFzIG5vICd3ZWJpZCcgY2xhaW0sIGFuZCBpdHMgJ3N1YicgY2xhaW0gb2YgWyR7cGF5bG9hZC5zdWJ9XSBpcyBpbnZhbGlkIGFzIGEgVVJMIC0gZXJyb3IgWyR7ZX1dLmApO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkVG9rZW5UeXBlKHRva2VuKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRva2VuID09PSBcInN0cmluZ1wiICYmIFtcIkRQb1BcIiwgXCJCZWFyZXJcIl0uaW5jbHVkZXModG9rZW4pO1xyXG59XG5cbmNvbnN0IFVTRVJfU0VTU0lPTl9QUkVGSVggPSBcInNvbGlkQ2xpZW50QXV0aGVudGljYXRpb25Vc2VyXCI7XG5cbmZ1bmN0aW9uIGlzVmFsaWRVcmwodXJsKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5ldyBVUkwodXJsKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkZXRlcm1pbmVTaWduaW5nQWxnKHN1cHBvcnRlZCwgcHJlZmVycmVkKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gKChfYSA9IHByZWZlcnJlZC5maW5kKChzaWduaW5nQWxnKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZC5pbmNsdWRlcyhzaWduaW5nQWxnKTtcclxuICAgIH0pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsKTtcclxufVxyXG5mdW5jdGlvbiBkZXRlcm1pbmVDbGllbnRUeXBlKG9wdGlvbnMsIGlzc3VlckNvbmZpZykge1xyXG4gICAgaWYgKG9wdGlvbnMuY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiAhaXNWYWxpZFVybChvcHRpb25zLmNsaWVudElkKSkge1xyXG4gICAgICAgIHJldHVybiBcInN0YXRpY1wiO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzc3VlckNvbmZpZy5zY29wZXNTdXBwb3J0ZWQuaW5jbHVkZXMoXCJ3ZWJpZFwiKSAmJlxyXG4gICAgICAgIG9wdGlvbnMuY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIGlzVmFsaWRVcmwob3B0aW9ucy5jbGllbnRJZCkpIHtcclxuICAgICAgICByZXR1cm4gXCJzb2xpZC1vaWRjXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCJkeW5hbWljXCI7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVnaXN0cmF0aW9uKG9wdGlvbnMsIGlzc3VlckNvbmZpZywgc3RvcmFnZVV0aWxpdHksIGNsaWVudFJlZ2lzdHJhcikge1xyXG4gICAgY29uc3QgY2xpZW50VHlwZSA9IGRldGVybWluZUNsaWVudFR5cGUob3B0aW9ucywgaXNzdWVyQ29uZmlnKTtcclxuICAgIGlmIChjbGllbnRUeXBlID09PSBcImR5bmFtaWNcIikge1xyXG4gICAgICAgIHJldHVybiBjbGllbnRSZWdpc3RyYXIuZ2V0Q2xpZW50KHtcclxuICAgICAgICAgICAgc2Vzc2lvbklkOiBvcHRpb25zLnNlc3Npb25JZCxcclxuICAgICAgICAgICAgY2xpZW50TmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxyXG4gICAgICAgICAgICByZWRpcmVjdFVybDogb3B0aW9ucy5yZWRpcmVjdFVybCxcclxuICAgICAgICB9LCBpc3N1ZXJDb25maWcpO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihvcHRpb25zLnNlc3Npb25JZCwge1xyXG4gICAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxyXG4gICAgfSk7XHJcbiAgICBpZiAob3B0aW9ucy5jbGllbnRTZWNyZXQpIHtcclxuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCB7XHJcbiAgICAgICAgICAgIGNsaWVudFNlY3JldDogb3B0aW9ucy5jbGllbnRTZWNyZXQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5jbGllbnROYW1lKSB7XHJcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihvcHRpb25zLnNlc3Npb25JZCwge1xyXG4gICAgICAgICAgICBjbGllbnROYW1lOiBvcHRpb25zLmNsaWVudE5hbWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgIGNsaWVudFNlY3JldDogb3B0aW9ucy5jbGllbnRTZWNyZXQsXHJcbiAgICAgICAgY2xpZW50TmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxyXG4gICAgICAgIGNsaWVudFR5cGUsXHJcbiAgICB9O1xyXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb25JZEZyb21PYXV0aFN0YXRlKHN0b3JhZ2VVdGlsaXR5LCBvYXV0aFN0YXRlKSB7XHJcbiAgICByZXR1cm4gc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihvYXV0aFN0YXRlLCBcInNlc3Npb25JZFwiKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBsb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZShzZXNzaW9uSWQsIHN0b3JhZ2VVdGlsaXR5LCBjb25maWdGZXRjaGVyKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IFtpc3N1ZXJJcmksIGNvZGVWZXJpZmllciwgc3RvcmVkUmVkaXJlY3RJcmksIGRwb3BdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJpc3N1ZXJcIiwge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JJZk51bGw6IHRydWUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJjb2RlVmVyaWZpZXJcIiksXHJcbiAgICAgICAgICAgIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoc2Vzc2lvbklkLCBcInJlZGlyZWN0VXJsXCIpLFxyXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJkcG9wXCIsIHsgZXJyb3JJZk51bGw6IHRydWUgfSksXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuZGVsZXRlRm9yVXNlcihzZXNzaW9uSWQsIFwiY29kZVZlcmlmaWVyXCIpO1xyXG4gICAgICAgIGNvbnN0IGlzc3VlckNvbmZpZyA9IGF3YWl0IGNvbmZpZ0ZldGNoZXIuZmV0Y2hDb25maWcoaXNzdWVySXJpKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb2RlVmVyaWZpZXIsXHJcbiAgICAgICAgICAgIHJlZGlyZWN0VXJsOiBzdG9yZWRSZWRpcmVjdElyaSxcclxuICAgICAgICAgICAgaXNzdWVyQ29uZmlnLFxyXG4gICAgICAgICAgICBkcG9wOiBkcG9wID09PSBcInRydWVcIixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byByZXRyaWV2ZSBPSURDIGNvbnRleHQgZnJvbSBzdG9yYWdlIGFzc29jaWF0ZWQgd2l0aCBzZXNzaW9uIFske3Nlc3Npb25JZH1dOiAke2V9YCk7XHJcbiAgICB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gc2F2ZVNlc3Npb25JbmZvVG9TdG9yYWdlKHN0b3JhZ2VVdGlsaXR5LCBzZXNzaW9uSWQsIHdlYklkLCBpc0xvZ2dlZEluLCByZWZyZXNoVG9rZW4sIHNlY3VyZSwgZHBvcEtleSkge1xyXG4gICAgaWYgKHJlZnJlc2hUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHsgcmVmcmVzaFRva2VuIH0sIHsgc2VjdXJlIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHdlYklkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKHNlc3Npb25JZCwgeyB3ZWJJZCB9LCB7IHNlY3VyZSB9KTtcclxuICAgIH1cclxuICAgIGlmIChpc0xvZ2dlZEluICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKHNlc3Npb25JZCwgeyBpc0xvZ2dlZEluIH0sIHsgc2VjdXJlIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGRwb3BLZXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIoc2Vzc2lvbklkLCB7XHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogSlNPTi5zdHJpbmdpZnkoZHBvcEtleS5wdWJsaWNLZXkpLFxyXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBKU09OLnN0cmluZ2lmeShhd2FpdCBqb3NlLmV4cG9ydEpXSyhkcG9wS2V5LnByaXZhdGVLZXkpKSxcclxuICAgICAgICB9LCB7IHNlY3VyZSB9KTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBTdG9yYWdlVXRpbGl0eSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWN1cmVTdG9yYWdlLCBpbnNlY3VyZVN0b3JhZ2UpIHtcclxuICAgICAgICB0aGlzLnNlY3VyZVN0b3JhZ2UgPSBzZWN1cmVTdG9yYWdlO1xyXG4gICAgICAgIHRoaXMuaW5zZWN1cmVTdG9yYWdlID0gaW5zZWN1cmVTdG9yYWdlO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5KHVzZXJJZCkge1xyXG4gICAgICAgIHJldHVybiBgc29saWRDbGllbnRBdXRoZW50aWNhdGlvblVzZXI6JHt1c2VySWR9YDtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFVzZXJEYXRhKHVzZXJJZCwgc2VjdXJlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkID0gYXdhaXQgKHNlY3VyZVxyXG4gICAgICAgICAgICA/IHRoaXMuc2VjdXJlU3RvcmFnZVxyXG4gICAgICAgICAgICA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5nZXQodGhpcy5nZXRLZXkodXNlcklkKSk7XHJcbiAgICAgICAgaWYgKHN0b3JlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RvcmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGEgZm9yIHVzZXIgWyR7dXNlcklkfV0gaW4gWyR7c2VjdXJlID8gXCJzZWN1cmVcIiA6IFwidW5zZWN1cmVcIn1dIHN0b3JhZ2UgaXMgY29ycnVwdGVkIC0gZXhwZWN0ZWQgdmFsaWQgSlNPTiwgYnV0IGdvdDogJHtzdG9yZWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgc2V0VXNlckRhdGEodXNlcklkLCBkYXRhLCBzZWN1cmUpIHtcclxuICAgICAgICBhd2FpdCAoc2VjdXJlID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldCh0aGlzLmdldEtleSh1c2VySWQpLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXQoa2V5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpXHJcbiAgICAgICAgICAgID8gdGhpcy5zZWN1cmVTdG9yYWdlXHJcbiAgICAgICAgICAgIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLmdldChrZXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7a2V5fV0gaXMgbm90IHN0b3JlZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZXQoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGRlbGV0ZShrZXksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKSA/IHRoaXMuc2VjdXJlU3RvcmFnZSA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldEZvclVzZXIodXNlcklkLCBrZXksIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IHRoaXMuZ2V0VXNlckRhdGEodXNlcklkLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcclxuICAgICAgICBsZXQgdmFsdWU7XHJcbiAgICAgICAgaWYgKCF1c2VyRGF0YSB8fCAhdXNlckRhdGFba2V5XSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsdWUgPSB1c2VyRGF0YVtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgWyR7a2V5fV0gZm9yIHVzZXIgWyR7dXNlcklkfV0gaXMgbm90IHN0b3JlZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUgfHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgc2V0Rm9yVXNlcih1c2VySWQsIHZhbHVlcywgb3B0aW9ucykge1xyXG4gICAgICAgIGxldCB1c2VyRGF0YTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB1c2VyRGF0YSA9IGF3YWl0IHRoaXMuZ2V0VXNlckRhdGEodXNlcklkLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgIHVzZXJEYXRhID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0VXNlckRhdGEodXNlcklkLCB7IC4uLnVzZXJEYXRhLCAuLi52YWx1ZXMgfSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNlY3VyZSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBkZWxldGVGb3JVc2VyKHVzZXJJZCwga2V5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCB0aGlzLmdldFVzZXJEYXRhKHVzZXJJZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNlY3VyZSk7XHJcbiAgICAgICAgZGVsZXRlIHVzZXJEYXRhW2tleV07XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRVc2VyRGF0YSh1c2VySWQsIHVzZXJEYXRhLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGRlbGV0ZUFsbFVzZXJEYXRhKHVzZXJJZCwgb3B0aW9ucykge1xyXG4gICAgICAgIGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNlY3VyZSkgPyB0aGlzLnNlY3VyZVN0b3JhZ2UgOiB0aGlzLmluc2VjdXJlU3RvcmFnZSkuZGVsZXRlKHRoaXMuZ2V0S2V5KHVzZXJJZCkpO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIEluTWVtb3J5U3RvcmFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm1hcCA9IHt9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcFtrZXldIHx8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5tYXBba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZGVsZXRlKGtleSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm1hcFtrZXldO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIENvbmZpZ3VyYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBOb3RJbXBsZW1lbnRlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWV0aG9kTmFtZSkge1xyXG4gICAgICAgIHN1cGVyKGBbJHttZXRob2ROYW1lfV0gaXMgbm90IGltcGxlbWVudGVkYCk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgSW52YWxpZFJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtaXNzaW5nRmllbGRzKSB7XHJcbiAgICAgICAgc3VwZXIoYEludmFsaWQgcmVzcG9uc2UgZnJvbSBPSURDIHByb3ZpZGVyOiBtaXNzaW5nIGZpZWxkcyAke21pc3NpbmdGaWVsZHN9YCk7XHJcbiAgICAgICAgdGhpcy5taXNzaW5nRmllbGRzID0gbWlzc2luZ0ZpZWxkcztcclxuICAgIH1cclxufVxuXG5jbGFzcyBPaWRjUHJvdmlkZXJFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGVycm9yLCBlcnJvckRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuZXJyb3JEZXNjcmlwdGlvbiA9IGVycm9yRGVzY3JpcHRpb247XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplSFRVKGF1ZGllbmNlKSB7XHJcbiAgICBjb25zdCBhdWRpZW5jZVVybCA9IG5ldyBVUkwoYXVkaWVuY2UpO1xyXG4gICAgcmV0dXJuIG5ldyBVUkwoYXVkaWVuY2VVcmwucGF0aG5hbWUsIGF1ZGllbmNlVXJsLm9yaWdpbikudG9TdHJpbmcoKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEcG9wSGVhZGVyKGF1ZGllbmNlLCBtZXRob2QsIGRwb3BLZXkpIHtcclxuICAgIHJldHVybiBuZXcgam9zZS5TaWduSldUKHtcclxuICAgICAgICBodHU6IG5vcm1hbGl6ZUhUVShhdWRpZW5jZSksXHJcbiAgICAgICAgaHRtOiBtZXRob2QudG9VcHBlckNhc2UoKSxcclxuICAgICAgICBqdGk6IHV1aWQudjQoKSxcclxuICAgIH0pXHJcbiAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih7XHJcbiAgICAgICAgYWxnOiBQUkVGRVJSRURfU0lHTklOR19BTEdbMF0sXHJcbiAgICAgICAgandrOiBkcG9wS2V5LnB1YmxpY0tleSxcclxuICAgICAgICB0eXA6IFwiZHBvcCtqd3RcIixcclxuICAgIH0pXHJcbiAgICAgICAgLnNldElzc3VlZEF0KClcclxuICAgICAgICAuc2lnbihkcG9wS2V5LnByaXZhdGVLZXksIHt9KTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZURwb3BLZXlQYWlyKCkge1xyXG4gICAgY29uc3QgeyBwcml2YXRlS2V5LCBwdWJsaWNLZXkgfSA9IGF3YWl0IGpvc2UuZ2VuZXJhdGVLZXlQYWlyKFBSRUZFUlJFRF9TSUdOSU5HX0FMR1swXSk7XHJcbiAgICBjb25zdCBkcG9wS2V5UGFpciA9IHtcclxuICAgICAgICBwcml2YXRlS2V5LFxyXG4gICAgICAgIHB1YmxpY0tleTogYXdhaXQgam9zZS5leHBvcnRKV0socHVibGljS2V5KSxcclxuICAgIH07XHJcbiAgICBbZHBvcEtleVBhaXIucHVibGljS2V5LmFsZ10gPSBQUkVGRVJSRURfU0lHTklOR19BTEc7XHJcbiAgICByZXR1cm4gZHBvcEtleVBhaXI7XHJcbn1cblxuY29uc3QgREVGQVVMVF9FWFBJUkFUSU9OX1RJTUVfU0VDT05EUyA9IDYwMDtcclxuZnVuY3Rpb24gaXNFeHBlY3RlZEF1dGhFcnJvcihzdGF0dXNDb2RlKSB7XHJcbiAgICByZXR1cm4gWzQwMSwgNDAzXS5pbmNsdWRlcyhzdGF0dXNDb2RlKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBidWlsZERwb3BGZXRjaE9wdGlvbnModGFyZ2V0VXJsLCBhdXRoVG9rZW4sIGRwb3BLZXksIGRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IGNyb3NzRmV0Y2guSGVhZGVycyhkZWZhdWx0T3B0aW9ucyA9PT0gbnVsbCB8fCBkZWZhdWx0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdE9wdGlvbnMuaGVhZGVycyk7XHJcbiAgICBoZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYERQb1AgJHthdXRoVG9rZW59YCk7XHJcbiAgICBoZWFkZXJzLnNldChcIkRQb1BcIiwgYXdhaXQgY3JlYXRlRHBvcEhlYWRlcih0YXJnZXRVcmwsIChfYSA9IGRlZmF1bHRPcHRpb25zID09PSBudWxsIHx8IGRlZmF1bHRPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0T3B0aW9ucy5tZXRob2QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiZ2V0XCIsIGRwb3BLZXkpKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXHJcbiAgICAgICAgaGVhZGVycyxcclxuICAgIH07XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gYnVpbGRBdXRoZW50aWNhdGVkSGVhZGVycyh0YXJnZXRVcmwsIGF1dGhUb2tlbiwgZHBvcEtleSwgZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgIGlmIChkcG9wS2V5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gYnVpbGREcG9wRmV0Y2hPcHRpb25zKHRhcmdldFVybCwgYXV0aFRva2VuLCBkcG9wS2V5LCBkZWZhdWx0T3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IGNyb3NzRmV0Y2guSGVhZGVycyhkZWZhdWx0T3B0aW9ucyA9PT0gbnVsbCB8fCBkZWZhdWx0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdE9wdGlvbnMuaGVhZGVycyk7XHJcbiAgICBoZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXHJcbiAgICAgICAgaGVhZGVycyxcclxuICAgIH07XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gbWFrZUF1dGhlbnRpY2F0ZWRSZXF1ZXN0KHVuYXV0aEZldGNoLCBhY2Nlc3NUb2tlbiwgdXJsLCBkZWZhdWx0UmVxdWVzdEluaXQsIGRwb3BLZXkpIHtcclxuICAgIHJldHVybiB1bmF1dGhGZXRjaCh1cmwsIGF3YWl0IGJ1aWxkQXV0aGVudGljYXRlZEhlYWRlcnModXJsLnRvU3RyaW5nKCksIGFjY2Vzc1Rva2VuLCBkcG9wS2V5LCBkZWZhdWx0UmVxdWVzdEluaXQpKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoQWNjZXNzVG9rZW4ocmVmcmVzaE9wdGlvbnMsIGRwb3BLZXksIGV2ZW50RW1pdHRlcikge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgdG9rZW5TZXQgPSBhd2FpdCByZWZyZXNoT3B0aW9ucy50b2tlblJlZnJlc2hlci5yZWZyZXNoKHJlZnJlc2hPcHRpb25zLnNlc3Npb25JZCwgcmVmcmVzaE9wdGlvbnMucmVmcmVzaFRva2VuLCBkcG9wS2V5KTtcclxuICAgIGV2ZW50RW1pdHRlciA9PT0gbnVsbCB8fCBldmVudEVtaXR0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5TRVNTSU9OX0VYVEVOREVELCAoX2EgPSB0b2tlblNldC5leHBpcmVzSW4pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfRVhQSVJBVElPTl9USU1FX1NFQ09ORFMpO1xyXG4gICAgaWYgKHR5cGVvZiB0b2tlblNldC5yZWZyZXNoVG9rZW4gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBldmVudEVtaXR0ZXIgPT09IG51bGwgfHwgZXZlbnRFbWl0dGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudEVtaXR0ZXIuZW1pdChFVkVOVFMuTkVXX1JFRlJFU0hfVE9LRU4sIHRva2VuU2V0LnJlZnJlc2hUb2tlbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFjY2Vzc1Rva2VuOiB0b2tlblNldC5hY2Nlc3NUb2tlbixcclxuICAgICAgICByZWZyZXNoVG9rZW46IHRva2VuU2V0LnJlZnJlc2hUb2tlbixcclxuICAgICAgICBleHBpcmVzSW46IHRva2VuU2V0LmV4cGlyZXNJbixcclxuICAgIH07XHJcbn1cclxuY29uc3QgY29tcHV0ZVJlZnJlc2hEZWxheSA9IChleHBpcmVzSW4pID0+IHtcclxuICAgIGlmIChleHBpcmVzSW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBleHBpcmVzSW4gLSBSRUZSRVNIX0JFRk9SRV9FWFBJUkFUSU9OX1NFQ09ORFMgPiAwXHJcbiAgICAgICAgICAgID9cclxuICAgICAgICAgICAgICAgIGV4cGlyZXNJbiAtIFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EU1xyXG4gICAgICAgICAgICA6IGV4cGlyZXNJbjtcclxuICAgIH1cclxuICAgIHJldHVybiBERUZBVUxUX0VYUElSQVRJT05fVElNRV9TRUNPTkRTO1xyXG59O1xyXG5hc3luYyBmdW5jdGlvbiBidWlsZEF1dGhlbnRpY2F0ZWRGZXRjaCh1bmF1dGhGZXRjaCwgYWNjZXNzVG9rZW4sIG9wdGlvbnMpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGxldCBjdXJyZW50QWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcclxuICAgIGxldCBsYXRlc3RUaW1lb3V0O1xyXG4gICAgY29uc3QgY3VycmVudFJlZnJlc2hPcHRpb25zID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZnJlc2hPcHRpb25zO1xyXG4gICAgaWYgKGN1cnJlbnRSZWZyZXNoT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvYWN0aXZlbHlSZWZyZXNoVG9rZW4gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgYWNjZXNzVG9rZW46IHJlZnJlc2hlZEFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4sIGV4cGlyZXNJbiwgfSA9IGF3YWl0IHJlZnJlc2hBY2Nlc3NUb2tlbihjdXJyZW50UmVmcmVzaE9wdGlvbnMsIG9wdGlvbnMuZHBvcEtleSwgb3B0aW9ucy5ldmVudEVtaXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEFjY2Vzc1Rva2VuID0gcmVmcmVzaGVkQWNjZXNzVG9rZW47XHJcbiAgICAgICAgICAgICAgICBpZiAocmVmcmVzaFRva2VuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVmcmVzaE9wdGlvbnMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxhdGVzdFRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgbGF0ZXN0VGltZW91dCA9IHNldFRpbWVvdXQocHJvYWN0aXZlbHlSZWZyZXNoVG9rZW4sIGNvbXB1dGVSZWZyZXNoRGVsYXkoZXhwaXJlc0luKSAqIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgKF9hID0gb3B0aW9ucy5ldmVudEVtaXR0ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbWl0KEVWRU5UUy5USU1FT1VUX1NFVCwgbGF0ZXN0VGltZW91dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgT2lkY1Byb3ZpZGVyRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXZlbnRFbWl0dGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZW1pdChFVkVOVFMuRVJST1IsIGUuZXJyb3IsIGUuZXJyb3JEZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgKF9jID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmVtaXQoRVZFTlRTLlNFU1NJT05fRVhQSVJFRCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRSZXNwb25zZUVycm9yICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZS5taXNzaW5nRmllbGRzLmluY2x1ZGVzKFwiYWNjZXNzX3Rva2VuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmVtaXQoRVZFTlRTLlNFU1NJT05fRVhQSVJFRCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxhdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KHByb2FjdGl2ZWx5UmVmcmVzaFRva2VuLCBjb21wdXRlUmVmcmVzaERlbGF5KG9wdGlvbnMuZXhwaXJlc0luKSAqIDEwMDApO1xyXG4gICAgICAgIChfYSA9IG9wdGlvbnMuZXZlbnRFbWl0dGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW1pdChFVkVOVFMuVElNRU9VVF9TRVQsIGxhdGVzdFRpbWVvdXQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuZXZlbnRFbWl0dGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zdCBleHBpcmF0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBvcHRpb25zLmV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5TRVNTSU9OX0VYUElSRUQpO1xyXG4gICAgICAgIH0sIGNvbXB1dGVSZWZyZXNoRGVsYXkob3B0aW9ucy5leHBpcmVzSW4pICogMTAwMCk7XHJcbiAgICAgICAgb3B0aW9ucy5ldmVudEVtaXR0ZXIuZW1pdChFVkVOVFMuVElNRU9VVF9TRVQsIGV4cGlyYXRpb25UaW1lb3V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBhc3luYyAodXJsLCByZXF1ZXN0SW5pdCkgPT4ge1xyXG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IG1ha2VBdXRoZW50aWNhdGVkUmVxdWVzdCh1bmF1dGhGZXRjaCwgY3VycmVudEFjY2Vzc1Rva2VuLCB1cmwsIHJlcXVlc3RJbml0LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZHBvcEtleSk7XHJcbiAgICAgICAgY29uc3QgZmFpbGVkQnV0Tm90RXhwZWN0ZWRBdXRoRXJyb3IgPSAhcmVzcG9uc2Uub2sgJiYgIWlzRXhwZWN0ZWRBdXRoRXJyb3IocmVzcG9uc2Uuc3RhdHVzKTtcclxuICAgICAgICBpZiAocmVzcG9uc2Uub2sgfHwgZmFpbGVkQnV0Tm90RXhwZWN0ZWRBdXRoRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoYXNCZWVuUmVkaXJlY3RlZCA9IHJlc3BvbnNlLnVybCAhPT0gdXJsO1xyXG4gICAgICAgIGlmIChoYXNCZWVuUmVkaXJlY3RlZCAmJiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRwb3BLZXkpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBtYWtlQXV0aGVudGljYXRlZFJlcXVlc3QodW5hdXRoRmV0Y2gsIGN1cnJlbnRBY2Nlc3NUb2tlbiwgcmVzcG9uc2UudXJsLCByZXF1ZXN0SW5pdCwgb3B0aW9ucy5kcG9wS2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfTtcclxufVxuXG5jb25zdCBTdG9yYWdlVXRpbGl0eUdldFJlc3BvbnNlID0gXCJnZXRSZXNwb25zZVwiO1xyXG5jb25zdCBTdG9yYWdlVXRpbGl0eU1vY2sgPSB7XHJcbiAgICBnZXQ6IGFzeW5jIChrZXksIG9wdGlvbnMpID0+IFN0b3JhZ2VVdGlsaXR5R2V0UmVzcG9uc2UsXHJcbiAgICBzZXQ6IGFzeW5jIChrZXksIHZhbHVlKSA9PiB7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlOiBhc3luYyAoa2V5KSA9PiB7XHJcbiAgICB9LFxyXG4gICAgZ2V0Rm9yVXNlcjogYXN5bmMgKHVzZXJJZCwga2V5LCBvcHRpb25zKSA9PiBTdG9yYWdlVXRpbGl0eUdldFJlc3BvbnNlLFxyXG4gICAgc2V0Rm9yVXNlcjogYXN5bmMgKHVzZXJJZCwgdmFsdWVzLCBvcHRpb25zKSA9PiB7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlRm9yVXNlcjogYXN5bmMgKHVzZXJJZCwga2V5LCBvcHRpb25zKSA9PiB7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlQWxsVXNlckRhdGE6IGFzeW5jICh1c2VySWQsIG9wdGlvbnMpID0+IHtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IG1vY2tTdG9yYWdlID0gKHN0b3JlZCkgPT4ge1xyXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZWQ7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldDogYXN5bmMgKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3RvcmVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RvcmVba2V5XSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0b3JlW2tleV0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBhc3luYyAoa2V5LCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBzdG9yZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGU6IGFzeW5jIChrZXkpID0+IHtcclxuICAgICAgICAgICAgZGVsZXRlIHN0b3JlW2tleV07XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn07XHJcbmNvbnN0IG1vY2tTdG9yYWdlVXRpbGl0eSA9IChzdG9yZWQsIGlzU2VjdXJlID0gZmFsc2UpID0+IHtcclxuICAgIGlmIChpc1NlY3VyZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZVV0aWxpdHkobW9ja1N0b3JhZ2Uoc3RvcmVkKSwgbW9ja1N0b3JhZ2Uoe30pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgU3RvcmFnZVV0aWxpdHkobW9ja1N0b3JhZ2Uoe30pLCBtb2NrU3RvcmFnZShzdG9yZWQpKTtcclxufTtcblxuZXhwb3J0cy5BZ2dyZWdhdGVIYW5kbGVyID0gQWdncmVnYXRlSGFuZGxlcjtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbkVycm9yID0gQ29uZmlndXJhdGlvbkVycm9yO1xuZXhwb3J0cy5ERUZBVUxUX1NDT1BFUyA9IERFRkFVTFRfU0NPUEVTO1xuZXhwb3J0cy5FVkVOVFMgPSBFVkVOVFM7XG5leHBvcnRzLkluTWVtb3J5U3RvcmFnZSA9IEluTWVtb3J5U3RvcmFnZTtcbmV4cG9ydHMuSW52YWxpZFJlc3BvbnNlRXJyb3IgPSBJbnZhbGlkUmVzcG9uc2VFcnJvcjtcbmV4cG9ydHMuTm90SW1wbGVtZW50ZWRFcnJvciA9IE5vdEltcGxlbWVudGVkRXJyb3I7XG5leHBvcnRzLk9pZGNQcm92aWRlckVycm9yID0gT2lkY1Byb3ZpZGVyRXJyb3I7XG5leHBvcnRzLlBSRUZFUlJFRF9TSUdOSU5HX0FMRyA9IFBSRUZFUlJFRF9TSUdOSU5HX0FMRztcbmV4cG9ydHMuUkVGUkVTSF9CRUZPUkVfRVhQSVJBVElPTl9TRUNPTkRTID0gUkVGUkVTSF9CRUZPUkVfRVhQSVJBVElPTl9TRUNPTkRTO1xuZXhwb3J0cy5TT0xJRF9DTElFTlRfQVVUSE5fS0VZX1BSRUZJWCA9IFNPTElEX0NMSUVOVF9BVVRITl9LRVlfUFJFRklYO1xuZXhwb3J0cy5TdG9yYWdlVXRpbGl0eSA9IFN0b3JhZ2VVdGlsaXR5O1xuZXhwb3J0cy5TdG9yYWdlVXRpbGl0eUdldFJlc3BvbnNlID0gU3RvcmFnZVV0aWxpdHlHZXRSZXNwb25zZTtcbmV4cG9ydHMuU3RvcmFnZVV0aWxpdHlNb2NrID0gU3RvcmFnZVV0aWxpdHlNb2NrO1xuZXhwb3J0cy5VU0VSX1NFU1NJT05fUFJFRklYID0gVVNFUl9TRVNTSU9OX1BSRUZJWDtcbmV4cG9ydHMuYnVpbGRBdXRoZW50aWNhdGVkRmV0Y2ggPSBidWlsZEF1dGhlbnRpY2F0ZWRGZXRjaDtcbmV4cG9ydHMuY3JlYXRlRHBvcEhlYWRlciA9IGNyZWF0ZURwb3BIZWFkZXI7XG5leHBvcnRzLmRldGVybWluZVNpZ25pbmdBbGcgPSBkZXRlcm1pbmVTaWduaW5nQWxnO1xuZXhwb3J0cy5mZXRjaEp3a3MgPSBmZXRjaEp3a3M7XG5leHBvcnRzLmdlbmVyYXRlRHBvcEtleVBhaXIgPSBnZW5lcmF0ZURwb3BLZXlQYWlyO1xuZXhwb3J0cy5nZXRTZXNzaW9uSWRGcm9tT2F1dGhTdGF0ZSA9IGdldFNlc3Npb25JZEZyb21PYXV0aFN0YXRlO1xuZXhwb3J0cy5nZXRXZWJpZEZyb21Ub2tlblBheWxvYWQgPSBnZXRXZWJpZEZyb21Ub2tlblBheWxvYWQ7XG5leHBvcnRzLmhhbmRsZVJlZ2lzdHJhdGlvbiA9IGhhbmRsZVJlZ2lzdHJhdGlvbjtcbmV4cG9ydHMuaXNTdXBwb3J0ZWRUb2tlblR5cGUgPSBpc1N1cHBvcnRlZFRva2VuVHlwZTtcbmV4cG9ydHMubG9hZE9pZGNDb250ZXh0RnJvbVN0b3JhZ2UgPSBsb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZTtcbmV4cG9ydHMubW9ja1N0b3JhZ2UgPSBtb2NrU3RvcmFnZTtcbmV4cG9ydHMubW9ja1N0b3JhZ2VVdGlsaXR5ID0gbW9ja1N0b3JhZ2VVdGlsaXR5O1xuZXhwb3J0cy5zYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2UgPSBzYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNsYXNzIFN0b3JhZ2VVdGlsaXR5Tm9kZSBleHRlbmRzIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuU3RvcmFnZVV0aWxpdHkge1xuICAgIGNvbnN0cnVjdG9yKHNlY3VyZVN0b3JhZ2UsIGluc2VjdXJlU3RvcmFnZSkge1xuICAgICAgICBzdXBlcihzZWN1cmVTdG9yYWdlLCBpbnNlY3VyZVN0b3JhZ2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0b3JhZ2VVdGlsaXR5Tm9kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VVdGlsaXR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3Jvc3NfZmV0Y2hfMSA9IHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbmNsYXNzIENsaWVudEF1dGhlbnRpY2F0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2dpbkhhbmRsZXIsIHJlZGlyZWN0SGFuZGxlciwgbG9nb3V0SGFuZGxlciwgc2Vzc2lvbkluZm9NYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMubG9naW5IYW5kbGVyID0gbG9naW5IYW5kbGVyO1xuICAgICAgICB0aGlzLnJlZGlyZWN0SGFuZGxlciA9IHJlZGlyZWN0SGFuZGxlcjtcbiAgICAgICAgdGhpcy5sb2dvdXRIYW5kbGVyID0gbG9nb3V0SGFuZGxlcjtcbiAgICAgICAgdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIgPSBzZXNzaW9uSW5mb01hbmFnZXI7XG4gICAgICAgIHRoaXMubG9naW4gPSBhc3luYyAoc2Vzc2lvbklkLCBvcHRpb25zLCBldmVudEVtaXR0ZXIpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5yZWdpc3RlcihzZXNzaW9uSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9naW5SZXR1cm4gPSBhd2FpdCB0aGlzLmxvZ2luSGFuZGxlci5oYW5kbGUoe1xuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBvaWRjSXNzdWVyOiBvcHRpb25zLm9pZGNJc3N1ZXIsXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RVcmw6IG9wdGlvbnMucmVkaXJlY3RVcmxcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgVVJMKG9wdGlvbnMucmVkaXJlY3RVcmwpLmhyZWZcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0OiBvcHRpb25zLmNsaWVudFNlY3JldCxcbiAgICAgICAgICAgICAgICBjbGllbnROYW1lOiAoX2EgPSBvcHRpb25zLmNsaWVudE5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgcmVmcmVzaFRva2VuOiBvcHRpb25zLnJlZnJlc2hUb2tlbixcbiAgICAgICAgICAgICAgICBoYW5kbGVSZWRpcmVjdDogb3B0aW9ucy5oYW5kbGVSZWRpcmVjdCxcbiAgICAgICAgICAgICAgICB0b2tlblR5cGU6IChfYiA9IG9wdGlvbnMudG9rZW5UeXBlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIkRQb1BcIixcbiAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChsb2dpblJldHVybiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaCA9IGxvZ2luUmV0dXJuLmZldGNoO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9nZ2VkSW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgd2ViSWQ6IGxvZ2luUmV0dXJuLndlYklkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZldGNoID0gY3Jvc3NfZmV0Y2hfMS5mZXRjaDtcbiAgICAgICAgdGhpcy5sb2dvdXQgPSBhc3luYyAoc2Vzc2lvbklkKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvZ291dEhhbmRsZXIuaGFuZGxlKHNlc3Npb25JZCk7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gY3Jvc3NfZmV0Y2hfMS5mZXRjaDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRTZXNzaW9uSW5mbyA9IGFzeW5jIChzZXNzaW9uSWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5nZXQoc2Vzc2lvbklkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRTZXNzaW9uSWRBbGwgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIuZ2V0UmVnaXN0ZXJlZFNlc3Npb25JZEFsbCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlZ2lzdGVyU2Vzc2lvbiA9IGFzeW5jIChzZXNzaW9uSWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5yZWdpc3RlcihzZXNzaW9uSWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsZWFyU2Vzc2lvbkFsbCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5jbGVhckFsbCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldEFsbFNlc3Npb25JbmZvID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbkluZm9NYW5hZ2VyLmdldEFsbCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZUluY29taW5nUmVkaXJlY3QgPSBhc3luYyAodXJsLCBldmVudEVtaXR0ZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0SW5mbyA9IGF3YWl0IHRoaXMucmVkaXJlY3RIYW5kbGVyLmhhbmRsZSh1cmwsIGV2ZW50RW1pdHRlcik7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gcmVkaXJlY3RJbmZvLmZldGNoO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0xvZ2dlZEluOiByZWRpcmVjdEluZm8uaXNMb2dnZWRJbixcbiAgICAgICAgICAgICAgICB3ZWJJZDogcmVkaXJlY3RJbmZvLndlYklkLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZDogcmVkaXJlY3RJbmZvLnNlc3Npb25JZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ2xpZW50QXV0aGVudGljYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGllbnRBdXRoZW50aWNhdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmZ1bmN0aW9uIGhhc0lzc3VlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLm9pZGNJc3N1ZXIgPT09IFwic3RyaW5nXCI7XG59XG5jbGFzcyBPaWRjTG9naW5IYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlVXRpbGl0eSwgb2lkY0hhbmRsZXIsIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhcikge1xuICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5ID0gc3RvcmFnZVV0aWxpdHk7XG4gICAgICAgIHRoaXMub2lkY0hhbmRsZXIgPSBvaWRjSGFuZGxlcjtcbiAgICAgICAgdGhpcy5pc3N1ZXJDb25maWdGZXRjaGVyID0gaXNzdWVyQ29uZmlnRmV0Y2hlcjtcbiAgICAgICAgdGhpcy5jbGllbnRSZWdpc3RyYXIgPSBjbGllbnRSZWdpc3RyYXI7XG4gICAgfVxuICAgIGFzeW5jIGNhbkhhbmRsZShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBoYXNJc3N1ZXIob3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFoYXNJc3N1ZXIob3B0aW9ucykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkNvbmZpZ3VyYXRpb25FcnJvcihgT2lkY0xvZ2luSGFuZGxlciByZXF1aXJlcyBhbiBPSURDIGlzc3VlcjogbWlzc2luZyBwcm9wZXJ0eSAnb2lkY0lzc3VlcicgaW4gJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc3N1ZXJDb25maWcgPSBhd2FpdCB0aGlzLmlzc3VlckNvbmZpZ0ZldGNoZXIuZmV0Y2hDb25maWcob3B0aW9ucy5vaWRjSXNzdWVyKTtcbiAgICAgICAgY29uc3QgY2xpZW50SW5mbyA9IGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLmhhbmRsZVJlZ2lzdHJhdGlvbikob3B0aW9ucywgaXNzdWVyQ29uZmlnLCB0aGlzLnN0b3JhZ2VVdGlsaXR5LCB0aGlzLmNsaWVudFJlZ2lzdHJhcik7XG4gICAgICAgIGNvbnN0IG9pZGNPcHRpb25zID0ge1xuICAgICAgICAgICAgaXNzdWVyOiBpc3N1ZXJDb25maWcuaXNzdWVyLFxuICAgICAgICAgICAgZHBvcDogb3B0aW9ucy50b2tlblR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJkcG9wXCIsXG4gICAgICAgICAgICByZWRpcmVjdFVybDogb3B0aW9ucy5yZWRpcmVjdFVybCxcbiAgICAgICAgICAgIGlzc3VlckNvbmZpZ3VyYXRpb246IGlzc3VlckNvbmZpZyxcbiAgICAgICAgICAgIGNsaWVudDogY2xpZW50SW5mbyxcbiAgICAgICAgICAgIHNlc3Npb25JZDogb3B0aW9ucy5zZXNzaW9uSWQsXG4gICAgICAgICAgICByZWZyZXNoVG9rZW46IChfYSA9IG9wdGlvbnMucmVmcmVzaFRva2VuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCBcInJlZnJlc2hUb2tlblwiKSksXG4gICAgICAgICAgICBoYW5kbGVSZWRpcmVjdDogb3B0aW9ucy5oYW5kbGVSZWRpcmVjdCxcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcjogb3B0aW9ucy5ldmVudEVtaXR0ZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLm9pZGNIYW5kbGVyLmhhbmRsZShvaWRjT3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gT2lkY0xvZ2luSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9pZGNMb2dpbkhhbmRsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xID0gcmVxdWlyZShcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIik7XG5jbGFzcyBBZ2dyZWdhdGVPaWRjSGFuZGxlciBleHRlbmRzIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuQWdncmVnYXRlSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3Iob2lkY0xvZ2luSGFuZGxlcnMpIHtcbiAgICAgICAgc3VwZXIob2lkY0xvZ2luSGFuZGxlcnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEFnZ3JlZ2F0ZU9pZGNIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWdncmVnYXRlT2lkY0hhbmRsZXIuanMubWFwIiwiY29uc3QgeyBmb3JtYXQgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY2xhc3MgT1BFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoeyBlcnJvcl9kZXNjcmlwdGlvbiwgZXJyb3IsIGVycm9yX3VyaSwgc2Vzc2lvbl9zdGF0ZSwgc3RhdGUsIHNjb3BlIH0sIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIoIWVycm9yX2Rlc2NyaXB0aW9uID8gZXJyb3IgOiBgJHtlcnJvcn0gKCR7ZXJyb3JfZGVzY3JpcHRpb259KWApO1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMsXG4gICAgICB7IGVycm9yIH0sXG4gICAgICBlcnJvcl9kZXNjcmlwdGlvbiAmJiB7IGVycm9yX2Rlc2NyaXB0aW9uIH0sXG4gICAgICBlcnJvcl91cmkgJiYgeyBlcnJvcl91cmkgfSxcbiAgICAgIHN0YXRlICYmIHsgc3RhdGUgfSxcbiAgICAgIHNjb3BlICYmIHsgc2NvcGUgfSxcbiAgICAgIHNlc3Npb25fc3RhdGUgJiYgeyBzZXNzaW9uX3N0YXRlIH0sXG4gICAgKTtcblxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXNwb25zZScsIHtcbiAgICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbmNsYXNzIFJQRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdXBlcihmb3JtYXQoLi4uYXJncykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IG1lc3NhZ2UsIHByaW50ZiwgcmVzcG9uc2UsIC4uLnJlc3QgfSA9IGFyZ3NbMF07XG4gICAgICBpZiAocHJpbnRmKSB7XG4gICAgICAgIHN1cGVyKGZvcm1hdCguLi5wcmludGYpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCByZXN0KTtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Jlc3BvbnNlJywge1xuICAgICAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBPUEVycm9yLFxuICBSUEVycm9yLFxufTtcbiIsImNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBbbWFqb3IsIG1pbm9yXSA9IHByb2Nlc3MudmVyc2lvbi5zdWJzdHIoMSkuc3BsaXQoJy4nKS5tYXAoKHgpID0+IHBhcnNlSW50KHgsIDEwKSk7XG5jb25zdCB4b2ZPdXRwdXRMZW5ndGggPSBtYWpvciA+IDEyIHx8IChtYWpvciA9PT0gMTIgJiYgbWlub3IgPj0gOCk7XG5jb25zdCBzaGFrZTI1NiA9IHhvZk91dHB1dExlbmd0aCAmJiBjcnlwdG8uZ2V0SGFzaGVzKCkuaW5jbHVkZXMoJ3NoYWtlMjU2Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2hha2UyNTY7XG4iLCJjb25zdCB7IHN0cmljdDogYXNzZXJ0IH0gPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCB7IGZvcm1hdCB9ID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBzaGFrZTI1NiA9IHJlcXVpcmUoJy4vc2hha2UyNTYnKTtcblxubGV0IGVuY29kZTtcbmlmIChCdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcbiAgZW5jb2RlID0gKGlucHV0KSA9PiBpbnB1dC50b1N0cmluZygnYmFzZTY0dXJsJyk7XG59IGVsc2Uge1xuICBjb25zdCBmcm9tQmFzZTY0ID0gKGJhc2U2NCkgPT4gYmFzZTY0LnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xuICBlbmNvZGUgPSAoaW5wdXQpID0+IGZyb21CYXNlNjQoaW5wdXQudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbn1cblxuLyoqIFNQRUNJRklDQVRJT05cbiAqIEl0cyAoX2hhc2gpIHZhbHVlIGlzIHRoZSBiYXNlNjR1cmwgZW5jb2Rpbmcgb2YgdGhlIGxlZnQtbW9zdCBoYWxmIG9mIHRoZSBoYXNoIG9mIHRoZSBvY3RldHMgb2ZcbiAqIHRoZSBBU0NJSSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdG9rZW4gdmFsdWUsIHdoZXJlIHRoZSBoYXNoIGFsZ29yaXRobSB1c2VkIGlzIHRoZSBoYXNoIGFsZ29yaXRobVxuICogdXNlZCBpbiB0aGUgYWxnIEhlYWRlciBQYXJhbWV0ZXIgb2YgdGhlIElEIFRva2VuJ3MgSk9TRSBIZWFkZXIuIEZvciBpbnN0YW5jZSwgaWYgdGhlIGFsZyBpc1xuICogUlMyNTYsIGhhc2ggdGhlIHRva2VuIHZhbHVlIHdpdGggU0hBLTI1NiwgdGhlbiB0YWtlIHRoZSBsZWZ0LW1vc3QgMTI4IGJpdHMgYW5kIGJhc2U2NHVybCBlbmNvZGVcbiAqIHRoZW0uIFRoZSBfaGFzaCB2YWx1ZSBpcyBhIGNhc2Ugc2Vuc2l0aXZlIHN0cmluZy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldEhhc2hcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqIHJldHVybnMgdGhlIHNoYSBsZW5ndGggYmFzZWQgb2ZmIHRoZSBKT1NFIGFsZyBoZWFkZSB2YWx1ZSwgZGVmYXVsdHMgdG8gc2hhMjU2XG4gKlxuICogQHBhcmFtIHRva2VuIHtTdHJpbmd9IHRva2VuIHZhbHVlIHRvIGdlbmVyYXRlIHRoZSBoYXNoIGZyb21cbiAqIEBwYXJhbSBhbGcge1N0cmluZ30gSUQgVG9rZW4gSk9TRSBoZWFkZXIgYWxnIHZhbHVlIChpLmUuIFJTMjU2LCBIUzM4NCwgRVM1MTIsIFBTMjU2KVxuICogQHBhcmFtIFtjcnZdIHtTdHJpbmd9IEZvciBFZERTQSB0aGUgY3VydmUgZGVjaWRlcyB3aGF0IGhhc2ggYWxnb3JpdGhtIGlzIHVzZWQuIFJlcXVpcmVkIGZvciBFZERTQVxuICovXG5mdW5jdGlvbiBnZXRIYXNoKGFsZywgY3J2KSB7XG4gIHN3aXRjaCAoYWxnKSB7XG4gICAgY2FzZSAnSFMyNTYnOlxuICAgIGNhc2UgJ1JTMjU2JzpcbiAgICBjYXNlICdQUzI1Nic6XG4gICAgY2FzZSAnRVMyNTYnOlxuICAgIGNhc2UgJ0VTMjU2Syc6XG4gICAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2Jyk7XG5cbiAgICBjYXNlICdIUzM4NCc6XG4gICAgY2FzZSAnUlMzODQnOlxuICAgIGNhc2UgJ1BTMzg0JzpcbiAgICBjYXNlICdFUzM4NCc6XG4gICAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMzg0Jyk7XG5cbiAgICBjYXNlICdIUzUxMic6XG4gICAgY2FzZSAnUlM1MTInOlxuICAgIGNhc2UgJ1BTNTEyJzpcbiAgICBjYXNlICdFUzUxMic6XG4gICAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhNTEyJyk7XG5cbiAgICBjYXNlICdFZERTQSc6XG4gICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICBjYXNlICdFZDI1NTE5JzpcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhNTEyJyk7XG4gICAgICAgIGNhc2UgJ0VkNDQ4JzpcbiAgICAgICAgICBpZiAoIXNoYWtlMjU2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFZDQ0OCAqX2hhc2ggY2FsY3VsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIE5vZGUuanMgcnVudGltZSB2ZXJzaW9uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYWtlMjU2JywgeyBvdXRwdXRMZW5ndGg6IDExNCB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnJlY29nbml6ZWQgb3IgaW52YWxpZCBFZERTQSBjdXJ2ZSBwcm92aWRlZCcpO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VucmVjb2duaXplZCBvciBpbnZhbGlkIEpXUyBhbGdvcml0aG0gcHJvdmlkZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZSh0b2tlbiwgYWxnLCBjcnYpIHtcbiAgY29uc3QgZGlnZXN0ID0gZ2V0SGFzaChhbGcsIGNydikudXBkYXRlKHRva2VuKS5kaWdlc3QoKTtcbiAgcmV0dXJuIGVuY29kZShkaWdlc3Quc2xpY2UoMCwgZGlnZXN0Lmxlbmd0aCAvIDIpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGUobmFtZXMsIGFjdHVhbCwgc291cmNlLCBhbGcsIGNydikge1xuICBpZiAodHlwZW9mIG5hbWVzLmNsYWltICE9PSAnc3RyaW5nJyB8fCAhbmFtZXMuY2xhaW0pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lcy5jbGFpbSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBuYW1lcy5zb3VyY2UgIT09ICdzdHJpbmcnIHx8ICFuYW1lcy5zb3VyY2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lcy5zb3VyY2UgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgfVxuXG4gIGFzc2VydCh0eXBlb2YgYWN0dWFsID09PSAnc3RyaW5nJyAmJiBhY3R1YWwsIGAke25hbWVzLmNsYWltfSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ2ApO1xuICBhc3NlcnQodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgc291cmNlLCBgJHtuYW1lcy5zb3VyY2V9IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nYCk7XG5cbiAgbGV0IGV4cGVjdGVkO1xuICBsZXQgbXNnO1xuICB0cnkge1xuICAgIGV4cGVjdGVkID0gZ2VuZXJhdGUoc291cmNlLCBhbGcsIGNydik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG1zZyA9IGZvcm1hdCgnJXMgY291bGQgbm90IGJlIHZhbGlkYXRlZCAoJXMpJywgbmFtZXMuY2xhaW0sIGVyci5tZXNzYWdlKTtcbiAgfVxuXG4gIG1zZyA9IG1zZyB8fCBmb3JtYXQoJyVzIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIG5hbWVzLmNsYWltLCBleHBlY3RlZCwgYWN0dWFsKTtcblxuICBhc3NlcnQuZXF1YWwoZXhwZWN0ZWQsIGFjdHVhbCwgbXNnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlLFxuICBnZW5lcmF0ZSxcbn07XG4iLCJjb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbC50eXBlcy5pc0tleU9iamVjdCB8fCAoKG9iaikgPT4gb2JqICYmIG9iaiBpbnN0YW5jZW9mIGNyeXB0by5LZXlPYmplY3QpO1xuIiwibGV0IGVuY29kZTtcbmlmIChCdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcbiAgZW5jb2RlID0gKGlucHV0LCBlbmNvZGluZyA9ICd1dGY4JykgPT4gQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKS50b1N0cmluZygnYmFzZTY0dXJsJyk7XG59IGVsc2Uge1xuICBjb25zdCBmcm9tQmFzZTY0ID0gKGJhc2U2NCkgPT4gYmFzZTY0LnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xuICBlbmNvZGUgPSAoaW5wdXQsIGVuY29kaW5nID0gJ3V0ZjgnKSA9PlxuICAgIGZyb21CYXNlNjQoQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKS50b1N0cmluZygnYmFzZTY0JykpO1xufVxuXG5jb25zdCBkZWNvZGUgPSAoaW5wdXQpID0+IEJ1ZmZlci5mcm9tKGlucHV0LCAnYmFzZTY0Jyk7XG5cbm1vZHVsZS5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbiIsImNvbnN0IGJhc2U2NHVybCA9IHJlcXVpcmUoJy4vYmFzZTY0dXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHRva2VuKSA9PiB7XG4gIGlmICh0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnIHx8ICF0b2tlbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0pXVCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBjb25zdCB7IDA6IGhlYWRlciwgMTogcGF5bG9hZCwgMjogc2lnbmF0dXJlLCBsZW5ndGggfSA9IHRva2VuLnNwbGl0KCcuJyk7XG5cbiAgaWYgKGxlbmd0aCA9PT0gNSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY3J5cHRlZCBKV1RzIGNhbm5vdCBiZSBkZWNvZGVkJyk7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdKV1RzIG11c3QgaGF2ZSB0aHJlZSBjb21wb25lbnRzJyk7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWFkZXI6IEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShoZWFkZXIpKSxcbiAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShwYXlsb2FkKSksXG4gICAgICBzaWduYXR1cmUsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdKV1QgaXMgbWFsZm9ybWVkJyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChhKSA9PiAhIWEgJiYgYS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuIiwiY29uc3QgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNfcGxhaW5fb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRzKGRlZXAsIHRhcmdldCwgLi4uc291cmNlcykge1xuICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzb3VyY2UpKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlZXAgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgZGVmYXVsdHModHJ1ZSwgdGFyZ2V0W2tleV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzLmJpbmQodW5kZWZpbmVkLCBmYWxzZSk7XG5tb2R1bGUuZXhwb3J0cy5kZWVwID0gZGVmYXVsdHMuYmluZCh1bmRlZmluZWQsIHRydWUpO1xuIiwiY29uc3QgUkVHRVhQID0gLyhcXHcrKT0oXCJbXlwiXSpcIikvZztcblxubW9kdWxlLmV4cG9ydHMgPSAod3d3QXV0aGVudGljYXRlKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHt9O1xuICB0cnkge1xuICAgIHdoaWxlIChSRUdFWFAuZXhlYyh3d3dBdXRoZW50aWNhdGUpICE9PSBudWxsKSB7XG4gICAgICBpZiAoUmVnRXhwLiQxICYmIFJlZ0V4cC4kMikge1xuICAgICAgICBwYXJhbXNbUmVnRXhwLiQxXSA9IFJlZ0V4cC4kMi5zbGljZSgxLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgcmV0dXJuIHBhcmFtcztcbn07XG4iLCJmdW5jdGlvbiBhc3NlcnRTaWduaW5nQWxnVmFsdWVzU3VwcG9ydChlbmRwb2ludCwgaXNzdWVyLCBwcm9wZXJ0aWVzKSB7XG4gIGlmICghaXNzdWVyW2Ake2VuZHBvaW50fV9lbmRwb2ludGBdKSByZXR1cm47XG5cbiAgY29uc3QgZWFtID0gYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfbWV0aG9kYDtcbiAgY29uc3QgZWFzYSA9IGAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnYDtcbiAgY29uc3QgZWFzYXZzID0gYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZGA7XG5cbiAgaWYgKHByb3BlcnRpZXNbZWFtXSAmJiBwcm9wZXJ0aWVzW2VhbV0uZW5kc1dpdGgoJ19qd3QnKSAmJiAhcHJvcGVydGllc1tlYXNhXSAmJiAhaXNzdWVyW2Vhc2F2c10pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgYCR7ZWFzYXZzfSBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGlzc3VlciBpZiAke2Vhc2F9IGlzIG5vdCBkZWZpbmVkIG9uIGEgY2xpZW50YCxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24oaXNzdWVyLCBlbmRwb2ludCkge1xuICBpZiAoIWlzc3VlcltlbmRwb2ludF0pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2VuZHBvaW50fSBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGlzc3VlcmApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRTaWduaW5nQWxnVmFsdWVzU3VwcG9ydCxcbiAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbixcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBpY2sob2JqZWN0LCAuLi5wYXRocykge1xuICBjb25zdCBvYmogPSB7fTtcbiAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgaWYgKG9iamVjdFtwYXRoXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmpbcGF0aF0gPSBvYmplY3RbcGF0aF07XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59O1xuIiwiY29uc3QgeyBTVEFUVVNfQ09ERVMgfSA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IHsgZm9ybWF0IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5cbmNvbnN0IHsgT1BFcnJvciB9ID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5jb25zdCBwYXJzZVd3d0F1dGhlbnRpY2F0ZSA9IHJlcXVpcmUoJy4vd3d3X2F1dGhlbnRpY2F0ZV9wYXJzZXInKTtcblxuY29uc3QgdGhyb3dBdXRoZW50aWNhdGVFcnJvcnMgPSAocmVzcG9uc2UpID0+IHtcbiAgY29uc3QgcGFyYW1zID0gcGFyc2VXd3dBdXRoZW50aWNhdGUocmVzcG9uc2UuaGVhZGVyc1snd3d3LWF1dGhlbnRpY2F0ZSddKTtcblxuICBpZiAocGFyYW1zLmVycm9yKSB7XG4gICAgdGhyb3cgbmV3IE9QRXJyb3IocGFyYW1zLCByZXNwb25zZSk7XG4gIH1cbn07XG5cbmNvbnN0IGlzU3RhbmRhcmRCb2R5RXJyb3IgPSAocmVzcG9uc2UpID0+IHtcbiAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGxldCBqc29uYm9keTtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgIT09ICdvYmplY3QnIHx8IEJ1ZmZlci5pc0J1ZmZlcihyZXNwb25zZS5ib2R5KSkge1xuICAgICAganNvbmJvZHkgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBqc29uYm9keSA9IHJlc3BvbnNlLmJvZHk7XG4gICAgfVxuICAgIHJlc3VsdCA9IHR5cGVvZiBqc29uYm9keS5lcnJvciA9PT0gJ3N0cmluZycgJiYganNvbmJvZHkuZXJyb3IubGVuZ3RoO1xuICAgIGlmIChyZXN1bHQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwb25zZSwgJ2JvZHknLCB7IHZhbHVlOiBqc29uYm9keSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIHByb2Nlc3NSZXNwb25zZShyZXNwb25zZSwgeyBzdGF0dXNDb2RlID0gMjAwLCBib2R5ID0gdHJ1ZSwgYmVhcmVyID0gZmFsc2UgfSA9IHt9KSB7XG4gIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSBzdGF0dXNDb2RlKSB7XG4gICAgaWYgKGJlYXJlcikge1xuICAgICAgdGhyb3dBdXRoZW50aWNhdGVFcnJvcnMocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGlmIChpc1N0YW5kYXJkQm9keUVycm9yKHJlc3BvbnNlKSkge1xuICAgICAgdGhyb3cgbmV3IE9QRXJyb3IocmVzcG9uc2UuYm9keSwgcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBPUEVycm9yKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZm9ybWF0KFxuICAgICAgICAgICdleHBlY3RlZCAlaSAlcywgZ290OiAlaSAlcycsXG4gICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICBTVEFUVVNfQ09ERVNbc3RhdHVzQ29kZV0sXG4gICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgICBTVEFUVVNfQ09ERVNbcmVzcG9uc2Uuc3RhdHVzQ29kZV0sXG4gICAgICAgICksXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2UsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChib2R5ICYmICFyZXNwb25zZS5ib2R5KSB7XG4gICAgdGhyb3cgbmV3IE9QRXJyb3IoXG4gICAgICB7XG4gICAgICAgIGVycm9yOiBmb3JtYXQoXG4gICAgICAgICAgJ2V4cGVjdGVkICVpICVzIHdpdGggYm9keSBidXQgbm8gYm9keSB3YXMgcmV0dXJuZWQnLFxuICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdLFxuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNlLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2UuYm9keTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzUmVzcG9uc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuIiwiY29uc3QgYmFzZTY0dXJsID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Jhc2U2NHVybCcpO1xuY29uc3Qgbm93ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3VuaXhfdGltZXN0YW1wJyk7XG5cbmNsYXNzIFRva2VuU2V0IHtcbiAgY29uc3RydWN0b3IodmFsdWVzKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB2YWx1ZXMpO1xuICAgIGNvbnN0IHsgY29uc3RydWN0b3IsIC4uLnByb3BlcnRpZXMgfSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHByb3BlcnRpZXMpO1xuICB9XG5cbiAgc2V0IGV4cGlyZXNfaW4odmFsdWUpIHtcbiAgICB0aGlzLmV4cGlyZXNfYXQgPSBub3coKSArIE51bWJlcih2YWx1ZSk7XG4gIH1cblxuICBnZXQgZXhwaXJlc19pbigpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgW3RoaXMuZXhwaXJlc19hdCAtIG5vdygpLCAwXSk7XG4gIH1cblxuICBleHBpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLmV4cGlyZXNfaW4gPT09IDA7XG4gIH1cblxuICBjbGFpbXMoKSB7XG4gICAgaWYgKCF0aGlzLmlkX3Rva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpZF90b2tlbiBub3QgcHJlc2VudCBpbiBUb2tlblNldCcpO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnBhcnNlKGJhc2U2NHVybC5kZWNvZGUodGhpcy5pZF90b2tlbi5zcGxpdCgnLicpWzFdKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUb2tlblNldDtcbiIsImNvbnN0IHsgY3JlYXRlSGFzaCwgcmFuZG9tQnl0ZXMgfSA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKCcuL2Jhc2U2NHVybCcpO1xuXG5jb25zdCByYW5kb20gPSAoYnl0ZXMgPSAzMikgPT4gYmFzZTY0dXJsLmVuY29kZShyYW5kb21CeXRlcyhieXRlcykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmFuZG9tLFxuICBzdGF0ZTogcmFuZG9tLFxuICBub25jZTogcmFuZG9tLFxuICBjb2RlVmVyaWZpZXI6IHJhbmRvbSxcbiAgY29kZUNoYWxsZW5nZTogKGNvZGVWZXJpZmllcikgPT5cbiAgICBiYXNlNjR1cmwuZW5jb2RlKGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShjb2RlVmVyaWZpZXIpLmRpZ2VzdCgpKSxcbn07XG4iLCIndXNlIHN0cmljdCdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFlhbGxpc3QpIHtcbiAgWWFsbGlzdC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKiAoKSB7XG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXI7IHdhbGtlciA9IHdhbGtlci5uZXh0KSB7XG4gICAgICB5aWVsZCB3YWxrZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSBZYWxsaXN0XG5cbllhbGxpc3QuTm9kZSA9IE5vZGVcbllhbGxpc3QuY3JlYXRlID0gWWFsbGlzdFxuXG5mdW5jdGlvbiBZYWxsaXN0IChsaXN0KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgWWFsbGlzdCkpIHtcbiAgICBzZWxmID0gbmV3IFlhbGxpc3QoKVxuICB9XG5cbiAgc2VsZi50YWlsID0gbnVsbFxuICBzZWxmLmhlYWQgPSBudWxsXG4gIHNlbGYubGVuZ3RoID0gMFxuXG4gIGlmIChsaXN0ICYmIHR5cGVvZiBsaXN0LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHNlbGYucHVzaChpdGVtKVxuICAgIH0pXG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHNlbGYucHVzaChhcmd1bWVudHNbaV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmVtb3ZlTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmIChub2RlLmxpc3QgIT09IHRoaXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW92aW5nIG5vZGUgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoaXMgbGlzdCcpXG4gIH1cblxuICB2YXIgbmV4dCA9IG5vZGUubmV4dFxuICB2YXIgcHJldiA9IG5vZGUucHJldlxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5wcmV2ID0gcHJldlxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Lm5leHQgPSBuZXh0XG4gIH1cblxuICBpZiAobm9kZSA9PT0gdGhpcy5oZWFkKSB7XG4gICAgdGhpcy5oZWFkID0gbmV4dFxuICB9XG4gIGlmIChub2RlID09PSB0aGlzLnRhaWwpIHtcbiAgICB0aGlzLnRhaWwgPSBwcmV2XG4gIH1cblxuICBub2RlLmxpc3QubGVuZ3RoLS1cbiAgbm9kZS5uZXh0ID0gbnVsbFxuICBub2RlLnByZXYgPSBudWxsXG4gIG5vZGUubGlzdCA9IG51bGxcblxuICByZXR1cm4gbmV4dFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS51bnNoaWZ0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmIChub2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChub2RlLmxpc3QpIHtcbiAgICBub2RlLmxpc3QucmVtb3ZlTm9kZShub2RlKVxuICB9XG5cbiAgdmFyIGhlYWQgPSB0aGlzLmhlYWRcbiAgbm9kZS5saXN0ID0gdGhpc1xuICBub2RlLm5leHQgPSBoZWFkXG4gIGlmIChoZWFkKSB7XG4gICAgaGVhZC5wcmV2ID0gbm9kZVxuICB9XG5cbiAgdGhpcy5oZWFkID0gbm9kZVxuICBpZiAoIXRoaXMudGFpbCkge1xuICAgIHRoaXMudGFpbCA9IG5vZGVcbiAgfVxuICB0aGlzLmxlbmd0aCsrXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnB1c2hOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IHRoaXMudGFpbCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKG5vZGUubGlzdCkge1xuICAgIG5vZGUubGlzdC5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cblxuICB2YXIgdGFpbCA9IHRoaXMudGFpbFxuICBub2RlLmxpc3QgPSB0aGlzXG4gIG5vZGUucHJldiA9IHRhaWxcbiAgaWYgKHRhaWwpIHtcbiAgICB0YWlsLm5leHQgPSBub2RlXG4gIH1cblxuICB0aGlzLnRhaWwgPSBub2RlXG4gIGlmICghdGhpcy5oZWFkKSB7XG4gICAgdGhpcy5oZWFkID0gbm9kZVxuICB9XG4gIHRoaXMubGVuZ3RoKytcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcHVzaCh0aGlzLCBhcmd1bWVudHNbaV0pXG4gIH1cbiAgcmV0dXJuIHRoaXMubGVuZ3RoXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHVuc2hpZnQodGhpcywgYXJndW1lbnRzW2ldKVxuICB9XG4gIHJldHVybiB0aGlzLmxlbmd0aFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy50YWlsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIHJlcyA9IHRoaXMudGFpbC52YWx1ZVxuICB0aGlzLnRhaWwgPSB0aGlzLnRhaWwucHJldlxuICBpZiAodGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsLm5leHQgPSBudWxsXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oZWFkID0gbnVsbFxuICB9XG4gIHRoaXMubGVuZ3RoLS1cbiAgcmV0dXJuIHJlc1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgcmVzID0gdGhpcy5oZWFkLnZhbHVlXG4gIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0XG4gIGlmICh0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQucHJldiA9IG51bGxcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRhaWwgPSBudWxsXG4gIH1cbiAgdGhpcy5sZW5ndGgtLVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLmhlYWQsIGkgPSAwOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgaSwgdGhpcylcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLmZvckVhY2hSZXZlcnNlID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy50YWlsLCBpID0gdGhpcy5sZW5ndGggLSAxOyB3YWxrZXIgIT09IG51bGw7IGktLSkge1xuICAgIGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgaSwgdGhpcylcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuKSB7XG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgbjsgaSsrKSB7XG4gICAgLy8gYWJvcnQgb3V0IG9mIHRoZSBsaXN0IGVhcmx5IGlmIHdlIGhpdCBhIGN5Y2xlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICBpZiAoaSA9PT0gbiAmJiB3YWxrZXIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gd2Fsa2VyLnZhbHVlXG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZ2V0UmV2ZXJzZSA9IGZ1bmN0aW9uIChuKSB7XG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgbjsgaSsrKSB7XG4gICAgLy8gYWJvcnQgb3V0IG9mIHRoZSBsaXN0IGVhcmx5IGlmIHdlIGhpdCBhIGN5Y2xlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICBpZiAoaSA9PT0gbiAmJiB3YWxrZXIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gd2Fsa2VyLnZhbHVlXG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgdmFyIHJlcyA9IG5ldyBZYWxsaXN0KClcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgcmVzLnB1c2goZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCB0aGlzKSlcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUubWFwUmV2ZXJzZSA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIHZhciByZXMgPSBuZXcgWWFsbGlzdCgpXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgIHJlcy5wdXNoKGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgdGhpcykpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbCkge1xuICB2YXIgYWNjXG4gIHZhciB3YWxrZXIgPSB0aGlzLmhlYWRcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgYWNjID0gaW5pdGlhbFxuICB9IGVsc2UgaWYgKHRoaXMuaGVhZCkge1xuICAgIHdhbGtlciA9IHRoaXMuaGVhZC5uZXh0XG4gICAgYWNjID0gdGhpcy5oZWFkLnZhbHVlXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlJylcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGFjYyA9IGZuKGFjYywgd2Fsa2VyLnZhbHVlLCBpKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cblxuICByZXR1cm4gYWNjXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlZHVjZVJldmVyc2UgPSBmdW5jdGlvbiAoZm4sIGluaXRpYWwpIHtcbiAgdmFyIGFjY1xuICB2YXIgd2Fsa2VyID0gdGhpcy50YWlsXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGFjYyA9IGluaXRpYWxcbiAgfSBlbHNlIGlmICh0aGlzLnRhaWwpIHtcbiAgICB3YWxrZXIgPSB0aGlzLnRhaWwucHJldlxuICAgIGFjYyA9IHRoaXMudGFpbC52YWx1ZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBsaXN0IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpXG4gIH1cblxuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyB3YWxrZXIgIT09IG51bGw7IGktLSkge1xuICAgIGFjYyA9IGZuKGFjYywgd2Fsa2VyLnZhbHVlLCBpKVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cblxuICByZXR1cm4gYWNjXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYXJyW2ldID0gd2Fsa2VyLnZhbHVlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICByZXR1cm4gYXJyXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnRvQXJyYXlSZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGFycltpXSA9IHdhbGtlci52YWx1ZVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbiAgcmV0dXJuIGFyclxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICB0byA9IHRvIHx8IHRoaXMubGVuZ3RoXG4gIGlmICh0byA8IDApIHtcbiAgICB0byArPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZyb20gPSBmcm9tIHx8IDBcbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSArPSB0aGlzLmxlbmd0aFxuICB9XG4gIHZhciByZXQgPSBuZXcgWWFsbGlzdCgpXG4gIGlmICh0byA8IGZyb20gfHwgdG8gPCAwKSB7XG4gICAgcmV0dXJuIHJldFxuICB9XG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gPSAwXG4gIH1cbiAgaWYgKHRvID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0byA9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBmcm9tOyBpKyspIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIGZvciAoOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IHRvOyBpKyssIHdhbGtlciA9IHdhbGtlci5uZXh0KSB7XG4gICAgcmV0LnB1c2god2Fsa2VyLnZhbHVlKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc2xpY2VSZXZlcnNlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gIHRvID0gdG8gfHwgdGhpcy5sZW5ndGhcbiAgaWYgKHRvIDwgMCkge1xuICAgIHRvICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZnJvbSA9IGZyb20gfHwgMFxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgdmFyIHJldCA9IG5ldyBZYWxsaXN0KClcbiAgaWYgKHRvIDwgZnJvbSB8fCB0byA8IDApIHtcbiAgICByZXR1cm4gcmV0XG4gIH1cbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSA9IDBcbiAgfVxuICBpZiAodG8gPiB0aGlzLmxlbmd0aCkge1xuICAgIHRvID0gdGhpcy5sZW5ndGhcbiAgfVxuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGgsIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPiB0bzsgaS0tKSB7XG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICBmb3IgKDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPiBmcm9tOyBpLS0sIHdhbGtlciA9IHdhbGtlci5wcmV2KSB7XG4gICAgcmV0LnB1c2god2Fsa2VyLnZhbHVlKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc3BsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4ubm9kZXMpIHtcbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICBzdGFydCA9IHRoaXMubGVuZ3RoIC0gMVxuICB9XG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IHRoaXMubGVuZ3RoICsgc3RhcnQ7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IHN0YXJ0OyBpKyspIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG5cbiAgdmFyIHJldCA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyB3YWxrZXIgJiYgaSA8IGRlbGV0ZUNvdW50OyBpKyspIHtcbiAgICByZXQucHVzaCh3YWxrZXIudmFsdWUpXG4gICAgd2Fsa2VyID0gdGhpcy5yZW1vdmVOb2RlKHdhbGtlcilcbiAgfVxuICBpZiAod2Fsa2VyID09PSBudWxsKSB7XG4gICAgd2Fsa2VyID0gdGhpcy50YWlsXG4gIH1cblxuICBpZiAod2Fsa2VyICE9PSB0aGlzLmhlYWQgJiYgd2Fsa2VyICE9PSB0aGlzLnRhaWwpIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHdhbGtlciA9IGluc2VydCh0aGlzLCB3YWxrZXIsIG5vZGVzW2ldKVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkID0gdGhpcy5oZWFkXG4gIHZhciB0YWlsID0gdGhpcy50YWlsXG4gIGZvciAodmFyIHdhbGtlciA9IGhlYWQ7IHdhbGtlciAhPT0gbnVsbDsgd2Fsa2VyID0gd2Fsa2VyLnByZXYpIHtcbiAgICB2YXIgcCA9IHdhbGtlci5wcmV2XG4gICAgd2Fsa2VyLnByZXYgPSB3YWxrZXIubmV4dFxuICAgIHdhbGtlci5uZXh0ID0gcFxuICB9XG4gIHRoaXMuaGVhZCA9IHRhaWxcbiAgdGhpcy50YWlsID0gaGVhZFxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBpbnNlcnQgKHNlbGYsIG5vZGUsIHZhbHVlKSB7XG4gIHZhciBpbnNlcnRlZCA9IG5vZGUgPT09IHNlbGYuaGVhZCA/XG4gICAgbmV3IE5vZGUodmFsdWUsIG51bGwsIG5vZGUsIHNlbGYpIDpcbiAgICBuZXcgTm9kZSh2YWx1ZSwgbm9kZSwgbm9kZS5uZXh0LCBzZWxmKVxuXG4gIGlmIChpbnNlcnRlZC5uZXh0ID09PSBudWxsKSB7XG4gICAgc2VsZi50YWlsID0gaW5zZXJ0ZWRcbiAgfVxuICBpZiAoaW5zZXJ0ZWQucHJldiA9PT0gbnVsbCkge1xuICAgIHNlbGYuaGVhZCA9IGluc2VydGVkXG4gIH1cblxuICBzZWxmLmxlbmd0aCsrXG5cbiAgcmV0dXJuIGluc2VydGVkXG59XG5cbmZ1bmN0aW9uIHB1c2ggKHNlbGYsIGl0ZW0pIHtcbiAgc2VsZi50YWlsID0gbmV3IE5vZGUoaXRlbSwgc2VsZi50YWlsLCBudWxsLCBzZWxmKVxuICBpZiAoIXNlbGYuaGVhZCkge1xuICAgIHNlbGYuaGVhZCA9IHNlbGYudGFpbFxuICB9XG4gIHNlbGYubGVuZ3RoKytcbn1cblxuZnVuY3Rpb24gdW5zaGlmdCAoc2VsZiwgaXRlbSkge1xuICBzZWxmLmhlYWQgPSBuZXcgTm9kZShpdGVtLCBudWxsLCBzZWxmLmhlYWQsIHNlbGYpXG4gIGlmICghc2VsZi50YWlsKSB7XG4gICAgc2VsZi50YWlsID0gc2VsZi5oZWFkXG4gIH1cbiAgc2VsZi5sZW5ndGgrK1xufVxuXG5mdW5jdGlvbiBOb2RlICh2YWx1ZSwgcHJldiwgbmV4dCwgbGlzdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICByZXR1cm4gbmV3IE5vZGUodmFsdWUsIHByZXYsIG5leHQsIGxpc3QpXG4gIH1cblxuICB0aGlzLmxpc3QgPSBsaXN0XG4gIHRoaXMudmFsdWUgPSB2YWx1ZVxuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5uZXh0ID0gdGhpc1xuICAgIHRoaXMucHJldiA9IHByZXZcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnByZXYgPSBudWxsXG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQucHJldiA9IHRoaXNcbiAgICB0aGlzLm5leHQgPSBuZXh0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5uZXh0ID0gbnVsbFxuICB9XG59XG5cbnRyeSB7XG4gIC8vIGFkZCBpZiBzdXBwb3J0IGZvciBTeW1ib2wuaXRlcmF0b3IgaXMgcHJlc2VudFxuICByZXF1aXJlKCcuL2l0ZXJhdG9yLmpzJykoWWFsbGlzdClcbn0gY2F0Y2ggKGVyKSB7fVxuIiwiJ3VzZSBzdHJpY3QnXG5cbi8vIEEgbGlua2VkIGxpc3QgdG8ga2VlcCB0cmFjayBvZiByZWNlbnRseS11c2VkLW5lc3NcbmNvbnN0IFlhbGxpc3QgPSByZXF1aXJlKCd5YWxsaXN0JylcblxuY29uc3QgTUFYID0gU3ltYm9sKCdtYXgnKVxuY29uc3QgTEVOR1RIID0gU3ltYm9sKCdsZW5ndGgnKVxuY29uc3QgTEVOR1RIX0NBTENVTEFUT1IgPSBTeW1ib2woJ2xlbmd0aENhbGN1bGF0b3InKVxuY29uc3QgQUxMT1dfU1RBTEUgPSBTeW1ib2woJ2FsbG93U3RhbGUnKVxuY29uc3QgTUFYX0FHRSA9IFN5bWJvbCgnbWF4QWdlJylcbmNvbnN0IERJU1BPU0UgPSBTeW1ib2woJ2Rpc3Bvc2UnKVxuY29uc3QgTk9fRElTUE9TRV9PTl9TRVQgPSBTeW1ib2woJ25vRGlzcG9zZU9uU2V0JylcbmNvbnN0IExSVV9MSVNUID0gU3ltYm9sKCdscnVMaXN0JylcbmNvbnN0IENBQ0hFID0gU3ltYm9sKCdjYWNoZScpXG5jb25zdCBVUERBVEVfQUdFX09OX0dFVCA9IFN5bWJvbCgndXBkYXRlQWdlT25HZXQnKVxuXG5jb25zdCBuYWl2ZUxlbmd0aCA9ICgpID0+IDFcblxuLy8gbHJ1TGlzdCBpcyBhIHlhbGxpc3Qgd2hlcmUgdGhlIGhlYWQgaXMgdGhlIHlvdW5nZXN0XG4vLyBpdGVtLCBhbmQgdGhlIHRhaWwgaXMgdGhlIG9sZGVzdC4gIHRoZSBsaXN0IGNvbnRhaW5zIHRoZSBIaXRcbi8vIG9iamVjdHMgYXMgdGhlIGVudHJpZXMuXG4vLyBFYWNoIEhpdCBvYmplY3QgaGFzIGEgcmVmZXJlbmNlIHRvIGl0cyBZYWxsaXN0Lk5vZGUuICBUaGlzXG4vLyBuZXZlciBjaGFuZ2VzLlxuLy9cbi8vIGNhY2hlIGlzIGEgTWFwIChvciBQc2V1ZG9NYXApIHRoYXQgbWF0Y2hlcyB0aGUga2V5cyB0b1xuLy8gdGhlIFlhbGxpc3QuTm9kZSBvYmplY3QuXG5jbGFzcyBMUlVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJylcbiAgICAgIG9wdGlvbnMgPSB7IG1heDogb3B0aW9ucyB9XG5cbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICBvcHRpb25zID0ge31cblxuICAgIGlmIChvcHRpb25zLm1heCAmJiAodHlwZW9mIG9wdGlvbnMubWF4ICE9PSAnbnVtYmVyJyB8fCBvcHRpb25zLm1heCA8IDApKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyJylcbiAgICAvLyBLaW5kIG9mIHdlaXJkIHRvIGhhdmUgYSBkZWZhdWx0IG1heCBvZiBJbmZpbml0eSwgYnV0IG9oIHdlbGwuXG4gICAgY29uc3QgbWF4ID0gdGhpc1tNQVhdID0gb3B0aW9ucy5tYXggfHwgSW5maW5pdHlcblxuICAgIGNvbnN0IGxjID0gb3B0aW9ucy5sZW5ndGggfHwgbmFpdmVMZW5ndGhcbiAgICB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSA9ICh0eXBlb2YgbGMgIT09ICdmdW5jdGlvbicpID8gbmFpdmVMZW5ndGggOiBsY1xuICAgIHRoaXNbQUxMT1dfU1RBTEVdID0gb3B0aW9ucy5zdGFsZSB8fCBmYWxzZVxuICAgIGlmIChvcHRpb25zLm1heEFnZSAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhBZ2UgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4QWdlIG11c3QgYmUgYSBudW1iZXInKVxuICAgIHRoaXNbTUFYX0FHRV0gPSBvcHRpb25zLm1heEFnZSB8fCAwXG4gICAgdGhpc1tESVNQT1NFXSA9IG9wdGlvbnMuZGlzcG9zZVxuICAgIHRoaXNbTk9fRElTUE9TRV9PTl9TRVRdID0gb3B0aW9ucy5ub0Rpc3Bvc2VPblNldCB8fCBmYWxzZVxuICAgIHRoaXNbVVBEQVRFX0FHRV9PTl9HRVRdID0gb3B0aW9ucy51cGRhdGVBZ2VPbkdldCB8fCBmYWxzZVxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgLy8gcmVzaXplIHRoZSBjYWNoZSB3aGVuIHRoZSBtYXggY2hhbmdlcy5cbiAgc2V0IG1heCAobUwpIHtcbiAgICBpZiAodHlwZW9mIG1MICE9PSAnbnVtYmVyJyB8fCBtTCA8IDApXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuXG4gICAgdGhpc1tNQVhdID0gbUwgfHwgSW5maW5pdHlcbiAgICB0cmltKHRoaXMpXG4gIH1cbiAgZ2V0IG1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUFYXVxuICB9XG5cbiAgc2V0IGFsbG93U3RhbGUgKGFsbG93U3RhbGUpIHtcbiAgICB0aGlzW0FMTE9XX1NUQUxFXSA9ICEhYWxsb3dTdGFsZVxuICB9XG4gIGdldCBhbGxvd1N0YWxlICgpIHtcbiAgICByZXR1cm4gdGhpc1tBTExPV19TVEFMRV1cbiAgfVxuXG4gIHNldCBtYXhBZ2UgKG1BKSB7XG4gICAgaWYgKHR5cGVvZiBtQSAhPT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhBZ2UgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuXG4gICAgdGhpc1tNQVhfQUdFXSA9IG1BXG4gICAgdHJpbSh0aGlzKVxuICB9XG4gIGdldCBtYXhBZ2UgKCkge1xuICAgIHJldHVybiB0aGlzW01BWF9BR0VdXG4gIH1cblxuICAvLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIGxlbmd0aENhbGN1bGF0b3IgY2hhbmdlcy5cbiAgc2V0IGxlbmd0aENhbGN1bGF0b3IgKGxDKSB7XG4gICAgaWYgKHR5cGVvZiBsQyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIGxDID0gbmFpdmVMZW5ndGhcblxuICAgIGlmIChsQyAhPT0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0pIHtcbiAgICAgIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdID0gbENcbiAgICAgIHRoaXNbTEVOR1RIXSA9IDBcbiAgICAgIHRoaXNbTFJVX0xJU1RdLmZvckVhY2goaGl0ID0+IHtcbiAgICAgICAgaGl0Lmxlbmd0aCA9IHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdKGhpdC52YWx1ZSwgaGl0LmtleSlcbiAgICAgICAgdGhpc1tMRU5HVEhdICs9IGhpdC5sZW5ndGhcbiAgICAgIH0pXG4gICAgfVxuICAgIHRyaW0odGhpcylcbiAgfVxuICBnZXQgbGVuZ3RoQ2FsY3VsYXRvciAoKSB7IHJldHVybiB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7IHJldHVybiB0aGlzW0xFTkdUSF0gfVxuICBnZXQgaXRlbUNvdW50ICgpIHsgcmV0dXJuIHRoaXNbTFJVX0xJU1RdLmxlbmd0aCB9XG5cbiAgcmZvckVhY2ggKGZuLCB0aGlzcCkge1xuICAgIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICAgIGZvciAobGV0IHdhbGtlciA9IHRoaXNbTFJVX0xJU1RdLnRhaWw7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICAgIGNvbnN0IHByZXYgPSB3YWxrZXIucHJldlxuICAgICAgZm9yRWFjaFN0ZXAodGhpcywgZm4sIHdhbGtlciwgdGhpc3ApXG4gICAgICB3YWxrZXIgPSBwcmV2XG4gICAgfVxuICB9XG5cbiAgZm9yRWFjaCAoZm4sIHRoaXNwKSB7XG4gICAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpc1tMUlVfTElTVF0uaGVhZDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgY29uc3QgbmV4dCA9IHdhbGtlci5uZXh0XG4gICAgICBmb3JFYWNoU3RlcCh0aGlzLCBmbiwgd2Fsa2VyLCB0aGlzcClcbiAgICAgIHdhbGtlciA9IG5leHRcbiAgICB9XG4gIH1cblxuICBrZXlzICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0udG9BcnJheSgpLm1hcChrID0+IGsua2V5KVxuICB9XG5cbiAgdmFsdWVzICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0udG9BcnJheSgpLm1hcChrID0+IGsudmFsdWUpXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgaWYgKHRoaXNbRElTUE9TRV0gJiZcbiAgICAgICAgdGhpc1tMUlVfTElTVF0gJiZcbiAgICAgICAgdGhpc1tMUlVfTElTVF0ubGVuZ3RoKSB7XG4gICAgICB0aGlzW0xSVV9MSVNUXS5mb3JFYWNoKGhpdCA9PiB0aGlzW0RJU1BPU0VdKGhpdC5rZXksIGhpdC52YWx1ZSkpXG4gICAgfVxuXG4gICAgdGhpc1tDQUNIRV0gPSBuZXcgTWFwKCkgLy8gaGFzaCBvZiBpdGVtcyBieSBrZXlcbiAgICB0aGlzW0xSVV9MSVNUXSA9IG5ldyBZYWxsaXN0KCkgLy8gbGlzdCBvZiBpdGVtcyBpbiBvcmRlciBvZiB1c2UgcmVjZW5jeVxuICAgIHRoaXNbTEVOR1RIXSA9IDAgLy8gbGVuZ3RoIG9mIGl0ZW1zIGluIHRoZSBsaXN0XG4gIH1cblxuICBkdW1wICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0ubWFwKGhpdCA9PlxuICAgICAgaXNTdGFsZSh0aGlzLCBoaXQpID8gZmFsc2UgOiB7XG4gICAgICAgIGs6IGhpdC5rZXksXG4gICAgICAgIHY6IGhpdC52YWx1ZSxcbiAgICAgICAgZTogaGl0Lm5vdyArIChoaXQubWF4QWdlIHx8IDApXG4gICAgICB9KS50b0FycmF5KCkuZmlsdGVyKGggPT4gaClcbiAgfVxuXG4gIGR1bXBMcnUgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXVxuICB9XG5cbiAgc2V0IChrZXksIHZhbHVlLCBtYXhBZ2UpIHtcbiAgICBtYXhBZ2UgPSBtYXhBZ2UgfHwgdGhpc1tNQVhfQUdFXVxuXG4gICAgaWYgKG1heEFnZSAmJiB0eXBlb2YgbWF4QWdlICE9PSAnbnVtYmVyJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heEFnZSBtdXN0IGJlIGEgbnVtYmVyJylcblxuICAgIGNvbnN0IG5vdyA9IG1heEFnZSA/IERhdGUubm93KCkgOiAwXG4gICAgY29uc3QgbGVuID0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0odmFsdWUsIGtleSlcblxuICAgIGlmICh0aGlzW0NBQ0hFXS5oYXMoa2V5KSkge1xuICAgICAgaWYgKGxlbiA+IHRoaXNbTUFYXSkge1xuICAgICAgICBkZWwodGhpcywgdGhpc1tDQUNIRV0uZ2V0KGtleSkpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlID0gdGhpc1tDQUNIRV0uZ2V0KGtleSlcbiAgICAgIGNvbnN0IGl0ZW0gPSBub2RlLnZhbHVlXG5cbiAgICAgIC8vIGRpc3Bvc2Ugb2YgdGhlIG9sZCBvbmUgYmVmb3JlIG92ZXJ3cml0aW5nXG4gICAgICAvLyBzcGxpdCBvdXQgaW50byAyIGlmcyBmb3IgYmV0dGVyIGNvdmVyYWdlIHRyYWNraW5nXG4gICAgICBpZiAodGhpc1tESVNQT1NFXSkge1xuICAgICAgICBpZiAoIXRoaXNbTk9fRElTUE9TRV9PTl9TRVRdKVxuICAgICAgICAgIHRoaXNbRElTUE9TRV0oa2V5LCBpdGVtLnZhbHVlKVxuICAgICAgfVxuXG4gICAgICBpdGVtLm5vdyA9IG5vd1xuICAgICAgaXRlbS5tYXhBZ2UgPSBtYXhBZ2VcbiAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZVxuICAgICAgdGhpc1tMRU5HVEhdICs9IGxlbiAtIGl0ZW0ubGVuZ3RoXG4gICAgICBpdGVtLmxlbmd0aCA9IGxlblxuICAgICAgdGhpcy5nZXQoa2V5KVxuICAgICAgdHJpbSh0aGlzKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBoaXQgPSBuZXcgRW50cnkoa2V5LCB2YWx1ZSwgbGVuLCBub3csIG1heEFnZSlcblxuICAgIC8vIG92ZXJzaXplZCBvYmplY3RzIGZhbGwgb3V0IG9mIGNhY2hlIGF1dG9tYXRpY2FsbHkuXG4gICAgaWYgKGhpdC5sZW5ndGggPiB0aGlzW01BWF0pIHtcbiAgICAgIGlmICh0aGlzW0RJU1BPU0VdKVxuICAgICAgICB0aGlzW0RJU1BPU0VdKGtleSwgdmFsdWUpXG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXNbTEVOR1RIXSArPSBoaXQubGVuZ3RoXG4gICAgdGhpc1tMUlVfTElTVF0udW5zaGlmdChoaXQpXG4gICAgdGhpc1tDQUNIRV0uc2V0KGtleSwgdGhpc1tMUlVfTElTVF0uaGVhZClcbiAgICB0cmltKHRoaXMpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGhhcyAoa2V5KSB7XG4gICAgaWYgKCF0aGlzW0NBQ0hFXS5oYXMoa2V5KSkgcmV0dXJuIGZhbHNlXG4gICAgY29uc3QgaGl0ID0gdGhpc1tDQUNIRV0uZ2V0KGtleSkudmFsdWVcbiAgICByZXR1cm4gIWlzU3RhbGUodGhpcywgaGl0KVxuICB9XG5cbiAgZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGtleSwgdHJ1ZSlcbiAgfVxuXG4gIHBlZWsgKGtleSkge1xuICAgIHJldHVybiBnZXQodGhpcywga2V5LCBmYWxzZSlcbiAgfVxuXG4gIHBvcCAoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXNbTFJVX0xJU1RdLnRhaWxcbiAgICBpZiAoIW5vZGUpXG4gICAgICByZXR1cm4gbnVsbFxuXG4gICAgZGVsKHRoaXMsIG5vZGUpXG4gICAgcmV0dXJuIG5vZGUudmFsdWVcbiAgfVxuXG4gIGRlbCAoa2V5KSB7XG4gICAgZGVsKHRoaXMsIHRoaXNbQ0FDSEVdLmdldChrZXkpKVxuICB9XG5cbiAgbG9hZCAoYXJyKSB7XG4gICAgLy8gcmVzZXQgdGhlIGNhY2hlXG4gICAgdGhpcy5yZXNldCgpXG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gICAgLy8gQSBwcmV2aW91cyBzZXJpYWxpemVkIGNhY2hlIGhhcyB0aGUgbW9zdCByZWNlbnQgaXRlbXMgZmlyc3RcbiAgICBmb3IgKGxldCBsID0gYXJyLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICBjb25zdCBoaXQgPSBhcnJbbF1cbiAgICAgIGNvbnN0IGV4cGlyZXNBdCA9IGhpdC5lIHx8IDBcbiAgICAgIGlmIChleHBpcmVzQXQgPT09IDApXG4gICAgICAgIC8vIHRoZSBpdGVtIHdhcyBjcmVhdGVkIHdpdGhvdXQgZXhwaXJhdGlvbiBpbiBhIG5vbiBhZ2VkIGNhY2hlXG4gICAgICAgIHRoaXMuc2V0KGhpdC5rLCBoaXQudilcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXhBZ2UgPSBleHBpcmVzQXQgLSBub3dcbiAgICAgICAgLy8gZG9udCBhZGQgYWxyZWFkeSBleHBpcmVkIGl0ZW1zXG4gICAgICAgIGlmIChtYXhBZ2UgPiAwKSB7XG4gICAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52LCBtYXhBZ2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcnVuZSAoKSB7XG4gICAgdGhpc1tDQUNIRV0uZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gZ2V0KHRoaXMsIGtleSwgZmFsc2UpKVxuICB9XG59XG5cbmNvbnN0IGdldCA9IChzZWxmLCBrZXksIGRvVXNlKSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBzZWxmW0NBQ0hFXS5nZXQoa2V5KVxuICBpZiAobm9kZSkge1xuICAgIGNvbnN0IGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgICBkZWwoc2VsZiwgbm9kZSlcbiAgICAgIGlmICghc2VsZltBTExPV19TVEFMRV0pXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRvVXNlKSB7XG4gICAgICAgIGlmIChzZWxmW1VQREFURV9BR0VfT05fR0VUXSlcbiAgICAgICAgICBub2RlLnZhbHVlLm5vdyA9IERhdGUubm93KClcbiAgICAgICAgc2VsZltMUlVfTElTVF0udW5zaGlmdE5vZGUobm9kZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpdC52YWx1ZVxuICB9XG59XG5cbmNvbnN0IGlzU3RhbGUgPSAoc2VsZiwgaGl0KSA9PiB7XG4gIGlmICghaGl0IHx8ICghaGl0Lm1heEFnZSAmJiAhc2VsZltNQVhfQUdFXSkpXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgY29uc3QgZGlmZiA9IERhdGUubm93KCkgLSBoaXQubm93XG4gIHJldHVybiBoaXQubWF4QWdlID8gZGlmZiA+IGhpdC5tYXhBZ2VcbiAgICA6IHNlbGZbTUFYX0FHRV0gJiYgKGRpZmYgPiBzZWxmW01BWF9BR0VdKVxufVxuXG5jb25zdCB0cmltID0gc2VsZiA9PiB7XG4gIGlmIChzZWxmW0xFTkdUSF0gPiBzZWxmW01BWF0pIHtcbiAgICBmb3IgKGxldCB3YWxrZXIgPSBzZWxmW0xSVV9MSVNUXS50YWlsO1xuICAgICAgc2VsZltMRU5HVEhdID4gc2VsZltNQVhdICYmIHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICAgIC8vIFdlIGtub3cgdGhhdCB3ZSdyZSBhYm91dCB0byBkZWxldGUgdGhpcyBvbmUsIGFuZCBhbHNvXG4gICAgICAvLyB3aGF0IHRoZSBuZXh0IGxlYXN0IHJlY2VudGx5IHVzZWQga2V5IHdpbGwgYmUsIHNvIGp1c3RcbiAgICAgIC8vIGdvIGFoZWFkIGFuZCBzZXQgaXQgbm93LlxuICAgICAgY29uc3QgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgICBkZWwoc2VsZiwgd2Fsa2VyKVxuICAgICAgd2Fsa2VyID0gcHJldlxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBkZWwgPSAoc2VsZiwgbm9kZSkgPT4ge1xuICBpZiAobm9kZSkge1xuICAgIGNvbnN0IGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAoc2VsZltESVNQT1NFXSlcbiAgICAgIHNlbGZbRElTUE9TRV0oaGl0LmtleSwgaGl0LnZhbHVlKVxuXG4gICAgc2VsZltMRU5HVEhdIC09IGhpdC5sZW5ndGhcbiAgICBzZWxmW0NBQ0hFXS5kZWxldGUoaGl0LmtleSlcbiAgICBzZWxmW0xSVV9MSVNUXS5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cbn1cblxuY2xhc3MgRW50cnkge1xuICBjb25zdHJ1Y3RvciAoa2V5LCB2YWx1ZSwgbGVuZ3RoLCBub3csIG1heEFnZSkge1xuICAgIHRoaXMua2V5ID0ga2V5XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGhcbiAgICB0aGlzLm5vdyA9IG5vd1xuICAgIHRoaXMubWF4QWdlID0gbWF4QWdlIHx8IDBcbiAgfVxufVxuXG5jb25zdCBmb3JFYWNoU3RlcCA9IChzZWxmLCBmbiwgbm9kZSwgdGhpc3ApID0+IHtcbiAgbGV0IGhpdCA9IG5vZGUudmFsdWVcbiAgaWYgKGlzU3RhbGUoc2VsZiwgaGl0KSkge1xuICAgIGRlbChzZWxmLCBub2RlKVxuICAgIGlmICghc2VsZltBTExPV19TVEFMRV0pXG4gICAgICBoaXQgPSB1bmRlZmluZWRcbiAgfVxuICBpZiAoaGl0KVxuICAgIGZuLmNhbGwodGhpc3AsIGhpdC52YWx1ZSwgaGl0LmtleSwgc2VsZilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMUlVDYWNoZVxuIiwiY29uc3QgSFRUUF9PUFRJT05TID0gU3ltYm9sKCk7XG5jb25zdCBDTE9DS19UT0xFUkFOQ0UgPSBTeW1ib2woKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENMT0NLX1RPTEVSQU5DRSxcbiAgSFRUUF9PUFRJT05TLFxufTtcbiIsImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbmNvbnN0IHsgb25jZSB9ID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB7IFVSTCB9ID0gcmVxdWlyZSgndXJsJyk7XG5cbmNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpO1xuXG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbmNvbnN0IHsgUlBFcnJvciB9ID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5cbmNvbnN0IHBpY2sgPSByZXF1aXJlKCcuL3BpY2snKTtcbmNvbnN0IHsgZGVlcDogZGVmYXVsdHNEZWVwIH0gPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5jb25zdCB7IEhUVFBfT1BUSU9OUyB9ID0gcmVxdWlyZSgnLi9jb25zdHMnKTtcblxubGV0IERFRkFVTFRfSFRUUF9PUFRJT05TO1xuY29uc3QgTlFDSEFSID0gL15bXFx4MjFcXHgyMy1cXHg1QlxceDVELVxceDdFXSskLztcblxuY29uc3QgYWxsb3dlZCA9IFtcbiAgJ2FnZW50JyxcbiAgJ2NhJyxcbiAgJ2NlcnQnLFxuICAnY3JsJyxcbiAgJ2hlYWRlcnMnLFxuICAna2V5JyxcbiAgJ2xvb2t1cCcsXG4gICdwYXNzcGhyYXNlJyxcbiAgJ3BmeCcsXG4gICd0aW1lb3V0Jyxcbl07XG5cbmNvbnN0IHNldERlZmF1bHRzID0gKHByb3BzLCBvcHRpb25zKSA9PiB7XG4gIERFRkFVTFRfSFRUUF9PUFRJT05TID0gZGVmYXVsdHNEZWVwKFxuICAgIHt9LFxuICAgIHByb3BzLmxlbmd0aCA/IHBpY2sob3B0aW9ucywgLi4ucHJvcHMpIDogb3B0aW9ucyxcbiAgICBERUZBVUxUX0hUVFBfT1BUSU9OUyxcbiAgKTtcbn07XG5cbnNldERlZmF1bHRzKFtdLCB7XG4gIGhlYWRlcnM6IHsgJ1VzZXItQWdlbnQnOiBgJHtwa2cubmFtZX0vJHtwa2cudmVyc2lvbn0gKCR7cGtnLmhvbWVwYWdlfSlgIH0sXG4gIHRpbWVvdXQ6IDM1MDAsXG59KTtcblxuZnVuY3Rpb24gc2VuZChyZXEsIGJvZHksIGNvbnRlbnRUeXBlKSB7XG4gIGlmIChjb250ZW50VHlwZSkge1xuICAgIHJlcS5yZW1vdmVIZWFkZXIoJ2NvbnRlbnQtdHlwZScpO1xuICAgIHJlcS5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsIGNvbnRlbnRUeXBlKTtcbiAgfVxuICBpZiAoYm9keSkge1xuICAgIHJlcS5yZW1vdmVIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJyk7XG4gICAgcmVxLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KSk7XG4gICAgcmVxLndyaXRlKGJvZHkpO1xuICB9XG4gIHJlcS5lbmQoKTtcbn1cblxuY29uc3Qgbm9uY2VzID0gbmV3IExSVSh7IG1heDogMTAwIH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3Qob3B0aW9ucywgeyBhY2Nlc3NUb2tlbiwgbVRMUyA9IGZhbHNlLCBEUG9QIH0gPSB7fSkge1xuICBsZXQgdXJsO1xuICB0cnkge1xuICAgIHVybCA9IG5ldyBVUkwob3B0aW9ucy51cmwpO1xuICAgIGRlbGV0ZSBvcHRpb25zLnVybDtcbiAgICBhc3NlcnQoL14oaHR0cHM/OikkLy50ZXN0KHVybC5wcm90b2NvbCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvbmx5IHZhbGlkIGFic29sdXRlIFVSTHMgY2FuIGJlIHJlcXVlc3RlZCcpO1xuICB9XG4gIGNvbnN0IG9wdHNGbiA9IHRoaXNbSFRUUF9PUFRJT05TXTtcbiAgbGV0IG9wdHMgPSBvcHRpb25zO1xuXG4gIGNvbnN0IG5vbmNlS2V5ID0gYCR7dXJsLm9yaWdpbn0ke3VybC5wYXRobmFtZX1gO1xuICBpZiAoRFBvUCAmJiAnZHBvcFByb29mJyBpbiB0aGlzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9O1xuICAgIG9wdHMuaGVhZGVycy5EUG9QID0gYXdhaXQgdGhpcy5kcG9wUHJvb2YoXG4gICAgICB7XG4gICAgICAgIGh0dTogYCR7dXJsLm9yaWdpbn0ke3VybC5wYXRobmFtZX1gLFxuICAgICAgICBodG06IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICBub25jZTogbm9uY2VzLmdldChub25jZUtleSksXG4gICAgICB9LFxuICAgICAgRFBvUCxcbiAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICk7XG4gIH1cblxuICBsZXQgdXNlck9wdGlvbnM7XG4gIGlmIChvcHRzRm4pIHtcbiAgICB1c2VyT3B0aW9ucyA9IHBpY2soXG4gICAgICBvcHRzRm4uY2FsbCh0aGlzLCB1cmwsIGRlZmF1bHRzRGVlcCh7fSwgb3B0cywgREVGQVVMVF9IVFRQX09QVElPTlMpKSxcbiAgICAgIC4uLmFsbG93ZWQsXG4gICAgKTtcbiAgfVxuICBvcHRzID0gZGVmYXVsdHNEZWVwKHt9LCB1c2VyT3B0aW9ucywgb3B0cywgREVGQVVMVF9IVFRQX09QVElPTlMpO1xuXG4gIGlmIChtVExTICYmICFvcHRzLnBmeCAmJiAhKG9wdHMua2V5ICYmIG9wdHMuY2VydCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXR1YWwtVExTIGNlcnRpZmljYXRlIGFuZCBrZXkgbm90IHNldCcpO1xuICB9XG5cbiAgaWYgKG9wdHMuc2VhcmNoUGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0cy5zZWFyY2hQYXJhbXMpKSB7XG4gICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShrZXkpO1xuICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3BvbnNlVHlwZTtcbiAgbGV0IGZvcm07XG4gIGxldCBqc29uO1xuICBsZXQgYm9keTtcbiAgKHsgZm9ybSwgcmVzcG9uc2VUeXBlLCBqc29uLCBib2R5LCAuLi5vcHRzIH0gPSBvcHRzKTtcblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvcHRzLmhlYWRlcnMgfHwge30pKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSBvcHRzLmhlYWRlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVzcG9uc2U7XG4gIGNvbnN0IHJlcSA9ICh1cmwucHJvdG9jb2wgPT09ICdodHRwczonID8gaHR0cHMucmVxdWVzdCA6IGh0dHAucmVxdWVzdCkodXJsLmhyZWYsIG9wdHMpO1xuICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICBpZiAoanNvbikge1xuICAgICAgc2VuZChyZXEsIEpTT04uc3RyaW5naWZ5KGpzb24pLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgIH0gZWxzZSBpZiAoZm9ybSkge1xuICAgICAgc2VuZChyZXEsIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShmb3JtKSwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIH0gZWxzZSBpZiAoYm9keSkge1xuICAgICAgc2VuZChyZXEsIGJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kKHJlcSk7XG4gICAgfVxuXG4gICAgW3Jlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UucmFjZShbb25jZShyZXEsICdyZXNwb25zZScpLCBvbmNlKHJlcSwgJ3RpbWVvdXQnKV0pO1xuXG4gICAgLy8gdGltZW91dCByZWFjaGVkXG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgcmVxLmRlc3Ryb3koKTtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKGBvdXRnb2luZyByZXF1ZXN0IHRpbWVkIG91dCBhZnRlciAke29wdHMudGltZW91dH1tc2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnRzID0gW107XG5cbiAgICBmb3IgYXdhaXQgKGNvbnN0IHBhcnQgb2YgcmVzcG9uc2UpIHtcbiAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCkge1xuICAgICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgY2FzZSAnanNvbic6IHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsICdib2R5Jywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBCdWZmZXIuY29uY2F0KHBhcnRzKTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAncmVzcG9uc2UnLCB7IHZhbHVlOiByZXNwb25zZSB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCAnYm9keScsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBjYXNlICdidWZmZXInOiB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCAnYm9keScsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBCdWZmZXIuY29uY2F0KHBhcnRzKTtcbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCAnYm9keScsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIHJlc3BvbnNlVHlwZSByZXF1ZXN0IG9wdGlvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSkoKVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdyZXNwb25zZScsIHsgdmFsdWU6IHJlc3BvbnNlIH0pO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgY29uc3QgZHBvcE5vbmNlID0gcmVzcG9uc2UgJiYgcmVzcG9uc2UuaGVhZGVyc1snZHBvcC1ub25jZSddO1xuICAgICAgaWYgKGRwb3BOb25jZSAmJiBOUUNIQVIudGVzdChkcG9wTm9uY2UpKSB7XG4gICAgICAgIG5vbmNlcy5zZXQobm9uY2VLZXksIGRwb3BOb25jZSk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5zZXREZWZhdWx0cyA9IHNldERlZmF1bHRzLmJpbmQodW5kZWZpbmVkLCBhbGxvd2VkKTtcbiIsIm1vZHVsZS5leHBvcnRzLmtleXN0b3JlcyA9IG5ldyBXZWFrTWFwKCk7XG4iLCJjb25zdCB2OCA9IHJlcXVpcmUoJ3Y4Jyk7XG5cbmNvbnN0IGpvc2UgPSByZXF1aXJlKCdqb3NlJyk7XG5cbmNvbnN0IGNsb25lID0gZ2xvYmFsVGhpcy5zdHJ1Y3R1cmVkQ2xvbmUgfHwgKCh2YWx1ZSkgPT4gdjguZGVzZXJpYWxpemUodjguc2VyaWFsaXplKHZhbHVlKSkpO1xuXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc19wbGFpbl9vYmplY3QnKTtcbmNvbnN0IGlzS2V5T2JqZWN0ID0gcmVxdWlyZSgnLi9pc19rZXlfb2JqZWN0Jyk7XG5cbmNvbnN0IGludGVybmFsID0gU3ltYm9sKCk7XG5cbmZ1bmN0aW9uIGZhdXhBbGcoa3R5KSB7XG4gIHN3aXRjaCAoa3R5KSB7XG4gICAgY2FzZSAnUlNBJzpcbiAgICAgIHJldHVybiAnUlNBLU9BRVAnO1xuICAgIGNhc2UgJ0VDJzpcbiAgICAgIHJldHVybiAnRUNESC1FUyc7XG4gICAgY2FzZSAnT0tQJzpcbiAgICAgIHJldHVybiAnRUNESC1FUyc7XG4gICAgY2FzZSAnb2N0JzpcbiAgICAgIHJldHVybiAnSFMyNTYnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmNvbnN0IGtleXNjb3JlID0gKGtleSwgeyBhbGcsIHVzZSB9KSA9PiB7XG4gIGxldCBzY29yZSA9IDA7XG5cbiAgaWYgKGFsZyAmJiBrZXkuYWxnKSB7XG4gICAgc2NvcmUrKztcbiAgfVxuXG4gIGlmICh1c2UgJiYga2V5LnVzZSkge1xuICAgIHNjb3JlKys7XG4gIH1cblxuICByZXR1cm4gc2NvcmU7XG59O1xuXG5mdW5jdGlvbiBnZXRLdHlGcm9tQWxnKGFsZykge1xuICBzd2l0Y2ggKHR5cGVvZiBhbGcgPT09ICdzdHJpbmcnICYmIGFsZy5zbGljZSgwLCAyKSkge1xuICAgIGNhc2UgJ1JTJzpcbiAgICBjYXNlICdQUyc6XG4gICAgICByZXR1cm4gJ1JTQSc7XG4gICAgY2FzZSAnRVMnOlxuICAgICAgcmV0dXJuICdFQyc7XG4gICAgY2FzZSAnRWQnOlxuICAgICAgcmV0dXJuICdPS1AnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFsZ29yaXRobXModXNlLCBhbGcsIGt0eSwgY3J2KSB7XG4gIC8vIEVkMjU1MTksIEVkNDQ4LCBhbmQgc2VjcDI1NmsxIGFsd2F5cyBoYXZlIFwiYWxnXCJcbiAgLy8gT0tQIGFsd2F5cyBoYXMgdXNlXG4gIGlmIChhbGcpIHtcbiAgICByZXR1cm4gbmV3IFNldChbYWxnXSk7XG4gIH1cblxuICBzd2l0Y2ggKGt0eSkge1xuICAgIGNhc2UgJ0VDJzoge1xuICAgICAgbGV0IGFsZ3MgPSBbXTtcblxuICAgICAgaWYgKHVzZSA9PT0gJ2VuYycgfHwgdXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxncyA9IGFsZ3MuY29uY2F0KFsnRUNESC1FUycsICdFQ0RILUVTK0ExMjhLVycsICdFQ0RILUVTK0ExOTJLVycsICdFQ0RILUVTK0EyNTZLVyddKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZSA9PT0gJ3NpZycgfHwgdXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxncyA9IGFsZ3MuY29uY2F0KFtgRVMke2Nydi5zbGljZSgtMyl9YC5yZXBsYWNlKCcyMScsICcxMicpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgU2V0KGFsZ3MpO1xuICAgIH1cbiAgICBjYXNlICdPS1AnOiB7XG4gICAgICByZXR1cm4gbmV3IFNldChbJ0VDREgtRVMnLCAnRUNESC1FUytBMTI4S1cnLCAnRUNESC1FUytBMTkyS1cnLCAnRUNESC1FUytBMjU2S1cnXSk7XG4gICAgfVxuICAgIGNhc2UgJ1JTQSc6IHtcbiAgICAgIGxldCBhbGdzID0gW107XG5cbiAgICAgIGlmICh1c2UgPT09ICdlbmMnIHx8IHVzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFsZ3MgPSBhbGdzLmNvbmNhdChbJ1JTQS1PQUVQJywgJ1JTQS1PQUVQLTI1NicsICdSU0EtT0FFUC0zODQnLCAnUlNBLU9BRVAtNTEyJywgJ1JTQTFfNSddKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZSA9PT0gJ3NpZycgfHwgdXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxncyA9IGFsZ3MuY29uY2F0KFsnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLCAnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgU2V0KGFsZ3MpO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlYWNoYWJsZScpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgS2V5U3RvcmUge1xuICAja2V5cztcblxuICBjb25zdHJ1Y3RvcihpLCBrZXlzKSB7XG4gICAgaWYgKGkgIT09IGludGVybmFsKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY29uc3RydWN0b3IgY2FsbCcpO1xuICAgIHRoaXMuI2tleXMgPSBrZXlzO1xuICB9XG5cbiAgdG9KV0tTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXlzOiB0aGlzLm1hcCgoeyBqd2s6IHsgZCwgcCwgcSwgZHAsIGRxLCBxaSwgLi4uandrIH0gfSkgPT4gandrKSxcbiAgICB9O1xuICB9XG5cbiAgYWxsKHsgYWxnLCBraWQsIHVzZSB9ID0ge30pIHtcbiAgICBpZiAoIXVzZSB8fCAhYWxnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG5cbiAgICBjb25zdCBrdHkgPSBnZXRLdHlGcm9tQWxnKGFsZyk7XG5cbiAgICBjb25zdCBzZWFyY2ggPSB7IGFsZywgdXNlIH07XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgIGxldCBjYW5kaWRhdGUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2FuZGlkYXRlICYmIGt0eSAhPT0gdW5kZWZpbmVkICYmIGtleS5qd2sua3R5ICE9PSBrdHkpIHtcbiAgICAgICAgY2FuZGlkYXRlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW5kaWRhdGUgJiYga2lkICE9PSB1bmRlZmluZWQgJiYga2V5Lmp3ay5raWQgIT09IGtpZCkge1xuICAgICAgICBjYW5kaWRhdGUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbmRpZGF0ZSAmJiB1c2UgIT09IHVuZGVmaW5lZCAmJiBrZXkuandrLnVzZSAhPT0gdW5kZWZpbmVkICYmIGtleS5qd2sudXNlICE9PSB1c2UpIHtcbiAgICAgICAgY2FuZGlkYXRlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW5kaWRhdGUgJiYga2V5Lmp3ay5hbGcgJiYga2V5Lmp3ay5hbGcgIT09IGFsZykge1xuICAgICAgICBjYW5kaWRhdGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIWtleS5hbGdvcml0aG1zLmhhcyhhbGcpKSB7XG4gICAgICAgIGNhbmRpZGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgIH0pLnNvcnQoKGZpcnN0LCBzZWNvbmQpID0+IGtleXNjb3JlKHNlY29uZCwgc2VhcmNoKSAtIGtleXNjb3JlKGZpcnN0LCBzZWFyY2gpKTtcbiAgfVxuXG4gIGdldCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsKC4uLmFyZ3MpWzBdO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21KV0tTKGp3a3MsIHsgb25seVB1YmxpYyA9IGZhbHNlLCBvbmx5UHJpdmF0ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmIChcbiAgICAgICFpc1BsYWluT2JqZWN0KGp3a3MpIHx8XG4gICAgICAhQXJyYXkuaXNBcnJheShqd2tzLmtleXMpIHx8XG4gICAgICBqd2tzLmtleXMuc29tZSgoaykgPT4gIWlzUGxhaW5PYmplY3QoaykgfHwgISgna3R5JyBpbiBrKSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2p3a3MgbXVzdCBiZSBhIEpTT04gV2ViIEtleSBTZXQgZm9ybWF0dGVkIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IGp3ayBvZiBqd2tzLmtleXMpIHtcbiAgICAgIGp3ayA9IGNsb25lKGp3ayk7XG4gICAgICBjb25zdCB7IGt0eSwga2lkLCBjcnYgfSA9IGp3aztcblxuICAgICAgbGV0IHsgYWxnLCB1c2UgfSA9IGp3aztcblxuICAgICAgaWYgKHR5cGVvZiBrdHkgIT09ICdzdHJpbmcnIHx8ICFrdHkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh1c2UgIT09IHVuZGVmaW5lZCAmJiB1c2UgIT09ICdzaWcnICYmIHVzZSAhPT0gJ2VuYycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyAmJiBhbGcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBraWQgIT09ICdzdHJpbmcnICYmIGtpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoa3R5ID09PSAnRUMnICYmIHVzZSA9PT0gJ3NpZycpIHtcbiAgICAgICAgc3dpdGNoIChjcnYpIHtcbiAgICAgICAgICBjYXNlICdQLTI1Nic6XG4gICAgICAgICAgICBhbGcgPSAnRVMyNTYnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnUC0zODQnOlxuICAgICAgICAgICAgYWxnID0gJ0VTMzg0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1AtNTIxJzpcbiAgICAgICAgICAgIGFsZyA9ICdFUzUxMic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNydiA9PT0gJ3NlY3AyNTZrMScpIHtcbiAgICAgICAgdXNlID0gJ3NpZyc7XG4gICAgICAgIGFsZyA9ICdFUzI1NksnO1xuICAgICAgfVxuXG4gICAgICBpZiAoa3R5ID09PSAnT0tQJykge1xuICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgIGNhc2UgJ0VkMjU1MTknOlxuICAgICAgICAgIGNhc2UgJ0VkNDQ4JzpcbiAgICAgICAgICAgIHVzZSA9ICdzaWcnO1xuICAgICAgICAgICAgYWxnID0gJ0VkRFNBJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1gyNTUxOSc6XG4gICAgICAgICAgY2FzZSAnWDQ0OCc6XG4gICAgICAgICAgICB1c2UgPSAnZW5jJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWxnICYmICF1c2UpIHtcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgY2FzZSBhbGcuc3RhcnRzV2l0aCgnRUNESCcpOlxuICAgICAgICAgICAgdXNlID0gJ2VuYyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIGFsZy5zdGFydHNXaXRoKCdSU0EnKTpcbiAgICAgICAgICAgIHVzZSA9ICdlbmMnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleU9iamVjdCA9IGF3YWl0IGpvc2UuaW1wb3J0SldLKGp3aywgYWxnIHx8IGZhdXhBbGcoandrLmt0eSkpLmNhdGNoKCgpID0+IHt9KTtcblxuICAgICAgaWYgKCFrZXlPYmplY3QpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoa2V5T2JqZWN0IGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBrZXlPYmplY3QudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgaWYgKG9ubHlQcml2YXRlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdqd2tzIG11c3Qgb25seSBjb250YWluIHByaXZhdGUga2V5cycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzS2V5T2JqZWN0KGtleU9iamVjdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aGF0PyEnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9ubHlQcml2YXRlICYmIGtleU9iamVjdC50eXBlICE9PSAncHJpdmF0ZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdqd2tzIG11c3Qgb25seSBjb250YWluIHByaXZhdGUga2V5cycpO1xuICAgICAgfVxuXG4gICAgICBpZiAob25seVB1YmxpYyAmJiBrZXlPYmplY3QudHlwZSAhPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChrdHkgPT09ICdSU0EnICYmIGtleU9iamVjdC5hc3ltbWV0cmljS2V5U2l6ZSA8IDIwNDgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIGp3azogeyAuLi5qd2ssIGFsZywgdXNlIH0sXG4gICAgICAgIGtleU9iamVjdCxcbiAgICAgICAgZ2V0IGFsZ29yaXRobXMoKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdhbGdvcml0aG1zJywge1xuICAgICAgICAgICAgdmFsdWU6IGdldEFsZ29yaXRobXModGhpcy5qd2sudXNlLCB0aGlzLmp3ay5hbGcsIHRoaXMuandrLmt0eSwgdGhpcy5qd2suY3J2KSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLmFsZ29yaXRobXM7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMoaW50ZXJuYWwsIGtleXMpO1xuICB9XG5cbiAgZmlsdGVyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4ja2V5cy5maWx0ZXIoLi4uYXJncyk7XG4gIH1cblxuICBmaW5kKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4ja2V5cy5maW5kKC4uLmFyZ3MpO1xuICB9XG5cbiAgZXZlcnkoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNrZXlzLmV2ZXJ5KC4uLmFyZ3MpO1xuICB9XG5cbiAgc29tZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2tleXMuc29tZSguLi5hcmdzKTtcbiAgfVxuXG4gIG1hcCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2tleXMubWFwKC4uLmFyZ3MpO1xuICB9XG5cbiAgZm9yRWFjaCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2tleXMuZm9yRWFjaCguLi5hcmdzKTtcbiAgfVxuXG4gIHJlZHVjZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2tleXMucmVkdWNlKC4uLmFyZ3MpO1xuICB9XG5cbiAgc29ydCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2tleXMuc29ydCguLi5hcmdzKTtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLiNrZXlzKSB7XG4gICAgICB5aWVsZCBrZXk7XG4gICAgfVxuICB9XG59O1xuIiwiY29uc3QgeyBzZXJpYWxpemUsIGRlc2VyaWFsaXplIH0gPSByZXF1aXJlKCd2OCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFRoaXMuc3RydWN0dXJlZENsb25lIHx8ICgob2JqKSA9PiBkZXNlcmlhbGl6ZShzZXJpYWxpemUob2JqKSkpO1xuIiwiY29uc3QgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNfcGxhaW5fb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgLi4uc291cmNlcykge1xuICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzb3VyY2UpKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IG1lcmdlKHRhcmdldFtrZXldLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIiwiY29uc3Qgam9zZSA9IHJlcXVpcmUoJ2pvc2UnKTtcblxuY29uc3QgeyBSUEVycm9yIH0gPSByZXF1aXJlKCcuLi9lcnJvcnMnKTtcblxuY29uc3QgeyBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuL2Fzc2VydCcpO1xuY29uc3QgeyByYW5kb20gfSA9IHJlcXVpcmUoJy4vZ2VuZXJhdG9ycycpO1xuY29uc3Qgbm93ID0gcmVxdWlyZSgnLi91bml4X3RpbWVzdGFtcCcpO1xuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpO1xuY29uc3QgeyBrZXlzdG9yZXMgfSA9IHJlcXVpcmUoJy4vd2Vha19jYWNoZScpO1xuY29uc3QgbWVyZ2UgPSByZXF1aXJlKCcuL21lcmdlJyk7XG5cbmNvbnN0IGZvcm1VcmxFbmNvZGUgPSAodmFsdWUpID0+IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvJTIwL2csICcrJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWVudEFzc2VydGlvbihlbmRwb2ludCwgcGF5bG9hZCkge1xuICBsZXQgYWxnID0gdGhpc1tgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ2BdO1xuICBpZiAoIWFsZykge1xuICAgIGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24oXG4gICAgICB0aGlzLmlzc3VlcixcbiAgICAgIGAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWRgLFxuICAgICk7XG4gIH1cblxuICBpZiAodGhpc1tgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgXSA9PT0gJ2NsaWVudF9zZWNyZXRfand0Jykge1xuICAgIGlmICghYWxnKSB7XG4gICAgICBjb25zdCBzdXBwb3J0ZWQgPSB0aGlzLmlzc3VlcltgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkYF07XG4gICAgICBhbGcgPVxuICAgICAgICBBcnJheS5pc0FycmF5KHN1cHBvcnRlZCkgJiYgc3VwcG9ydGVkLmZpbmQoKHNpZ25BbGcpID0+IC9eSFMoPzoyNTZ8Mzg0fDUxMikvLnRlc3Qoc2lnbkFsZykpO1xuICAgIH1cblxuICAgIGlmICghYWxnKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcihcbiAgICAgICAgYGZhaWxlZCB0byBkZXRlcm1pbmUgYSBKV1MgQWxnb3JpdGhtIHRvIHVzZSBmb3IgJHtcbiAgICAgICAgICB0aGlzW2Ake2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX21ldGhvZGBdXG4gICAgICAgIH0gQ2xpZW50IEFzc2VydGlvbmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgam9zZS5Db21wYWN0U2lnbihCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShwYXlsb2FkKSkpXG4gICAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnIH0pXG4gICAgICAuc2lnbih0aGlzLnNlY3JldEZvckFsZyhhbGcpKTtcbiAgfVxuXG4gIGNvbnN0IGtleXN0b3JlID0gYXdhaXQga2V5c3RvcmVzLmdldCh0aGlzKTtcblxuICBpZiAoIWtleXN0b3JlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm8gY2xpZW50IGp3a3MgcHJvdmlkZWQgZm9yIHNpZ25pbmcgYSBjbGllbnQgYXNzZXJ0aW9uIHdpdGgnKTtcbiAgfVxuXG4gIGlmICghYWxnKSB7XG4gICAgY29uc3Qgc3VwcG9ydGVkID0gdGhpcy5pc3N1ZXJbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZGBdO1xuICAgIGFsZyA9XG4gICAgICBBcnJheS5pc0FycmF5KHN1cHBvcnRlZCkgJiZcbiAgICAgIHN1cHBvcnRlZC5maW5kKChzaWduQWxnKSA9PiBrZXlzdG9yZS5nZXQoeyBhbGc6IHNpZ25BbGcsIHVzZTogJ3NpZycgfSkpO1xuICB9XG5cbiAgaWYgKCFhbGcpIHtcbiAgICB0aHJvdyBuZXcgUlBFcnJvcihcbiAgICAgIGBmYWlsZWQgdG8gZGV0ZXJtaW5lIGEgSldTIEFsZ29yaXRobSB0byB1c2UgZm9yICR7XG4gICAgICAgIHRoaXNbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfbWV0aG9kYF1cbiAgICAgIH0gQ2xpZW50IEFzc2VydGlvbmAsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGtleXN0b3JlLmdldCh7IGFsZywgdXNlOiAnc2lnJyB9KTtcbiAgaWYgKCFrZXkpIHtcbiAgICB0aHJvdyBuZXcgUlBFcnJvcihcbiAgICAgIGBubyBrZXkgZm91bmQgaW4gY2xpZW50IGp3a3MgdG8gc2lnbiBhIGNsaWVudCBhc3NlcnRpb24gd2l0aCB1c2luZyBhbGcgJHthbGd9YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBqb3NlLkNvbXBhY3RTaWduKEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSlcbiAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnLCBraWQ6IGtleS5qd2sgJiYga2V5Lmp3ay5raWQgfSlcbiAgICAuc2lnbihrZXkua2V5T2JqZWN0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXV0aEZvcihlbmRwb2ludCwgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkIH0gPSB7fSkge1xuICBjb25zdCBhdXRoTWV0aG9kID0gdGhpc1tgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgXTtcbiAgc3dpdGNoIChhdXRoTWV0aG9kKSB7XG4gICAgY2FzZSAnc2VsZl9zaWduZWRfdGxzX2NsaWVudF9hdXRoJzpcbiAgICBjYXNlICd0bHNfY2xpZW50X2F1dGgnOlxuICAgIGNhc2UgJ25vbmUnOlxuICAgICAgcmV0dXJuIHsgZm9ybTogeyBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkIH0gfTtcbiAgICBjYXNlICdjbGllbnRfc2VjcmV0X3Bvc3QnOlxuICAgICAgaWYgKCF0aGlzLmNsaWVudF9zZWNyZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnY2xpZW50X3NlY3JldF9wb3N0IGNsaWVudCBhdXRoZW50aWNhdGlvbiBtZXRob2QgcmVxdWlyZXMgYSBjbGllbnRfc2VjcmV0JyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGZvcm06IHsgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZCwgY2xpZW50X3NlY3JldDogdGhpcy5jbGllbnRfc2VjcmV0IH0gfTtcbiAgICBjYXNlICdwcml2YXRlX2tleV9qd3QnOlxuICAgIGNhc2UgJ2NsaWVudF9zZWNyZXRfand0Jzoge1xuICAgICAgY29uc3QgdGltZXN0YW1wID0gbm93KCk7XG4gICAgICBjb25zdCBhdWRpZW5jZSA9IFtcbiAgICAgICAgLi4ubmV3IFNldChbdGhpcy5pc3N1ZXIuaXNzdWVyLCB0aGlzLmlzc3Vlci50b2tlbl9lbmRwb2ludF0uZmlsdGVyKEJvb2xlYW4pKSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IGFzc2VydGlvbiA9IGF3YWl0IGNsaWVudEFzc2VydGlvbi5jYWxsKHRoaXMsIGVuZHBvaW50LCB7XG4gICAgICAgIGlhdDogdGltZXN0YW1wLFxuICAgICAgICBleHA6IHRpbWVzdGFtcCArIDYwLFxuICAgICAgICBqdGk6IHJhbmRvbSgpLFxuICAgICAgICBpc3M6IHRoaXMuY2xpZW50X2lkLFxuICAgICAgICBzdWI6IHRoaXMuY2xpZW50X2lkLFxuICAgICAgICBhdWQ6IGF1ZGllbmNlLFxuICAgICAgICAuLi5jbGllbnRBc3NlcnRpb25QYXlsb2FkLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkLFxuICAgICAgICAgIGNsaWVudF9hc3NlcnRpb246IGFzc2VydGlvbixcbiAgICAgICAgICBjbGllbnRfYXNzZXJ0aW9uX3R5cGU6ICd1cm46aWV0ZjpwYXJhbXM6b2F1dGg6Y2xpZW50LWFzc2VydGlvbi10eXBlOmp3dC1iZWFyZXInLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSAnY2xpZW50X3NlY3JldF9iYXNpYyc6IHtcbiAgICAgIC8vIFRoaXMgaXMgY29ycmVjdCBiZWhhdmlvdXIsIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjc0OSNzZWN0aW9uLTIuMy4xIGFuZCB0aGVcbiAgICAgIC8vIHJlbGF0ZWQgYXBwZW5kaXguIChhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9wYW52YS9ub2RlLW9wZW5pZC1jbGllbnQvcHVsbC85MSlcbiAgICAgIC8vID4gVGhlIGNsaWVudCBpZGVudGlmaWVyIGlzIGVuY29kZWQgdXNpbmcgdGhlXG4gICAgICAvLyA+IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgZW5jb2RpbmcgYWxnb3JpdGhtIHBlclxuICAgICAgLy8gPiBBcHBlbmRpeCBCLCBhbmQgdGhlIGVuY29kZWQgdmFsdWUgaXMgdXNlZCBhcyB0aGUgdXNlcm5hbWU7IHRoZSBjbGllbnRcbiAgICAgIC8vID4gcGFzc3dvcmQgaXMgZW5jb2RlZCB1c2luZyB0aGUgc2FtZSBhbGdvcml0aG0gYW5kIHVzZWQgYXMgdGhlXG4gICAgICAvLyA+IHBhc3N3b3JkLlxuICAgICAgaWYgKCF0aGlzLmNsaWVudF9zZWNyZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnY2xpZW50X3NlY3JldF9iYXNpYyBjbGllbnQgYXV0aGVudGljYXRpb24gbWV0aG9kIHJlcXVpcmVzIGEgY2xpZW50X3NlY3JldCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBlbmNvZGVkID0gYCR7Zm9ybVVybEVuY29kZSh0aGlzLmNsaWVudF9pZCl9OiR7Zm9ybVVybEVuY29kZSh0aGlzLmNsaWVudF9zZWNyZXQpfWA7XG4gICAgICBjb25zdCB2YWx1ZSA9IEJ1ZmZlci5mcm9tKGVuY29kZWQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgIHJldHVybiB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogYEJhc2ljICR7dmFsdWV9YCB9IH07XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYG1pc3NpbmcsIG9yIHVuc3VwcG9ydGVkLCAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX21ldGhvZGApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVzcG9uc2VUeXBlKCkge1xuICBjb25zdCB7IGxlbmd0aCwgMDogdmFsdWUgfSA9IHRoaXMucmVzcG9uc2VfdHlwZXM7XG5cbiAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSZWRpcmVjdFVyaSgpIHtcbiAgY29uc3QgeyBsZW5ndGgsIDA6IHZhbHVlIH0gPSB0aGlzLnJlZGlyZWN0X3VyaXMgfHwgW107XG5cbiAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWRQb3N0KFxuICBlbmRwb2ludCxcbiAgb3B0cyxcbiAgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkLCBlbmRwb2ludEF1dGhNZXRob2QgPSBlbmRwb2ludCwgRFBvUCB9ID0ge30sXG4pIHtcbiAgY29uc3QgYXV0aCA9IGF3YWl0IGF1dGhGb3IuY2FsbCh0aGlzLCBlbmRwb2ludEF1dGhNZXRob2QsIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCB9KTtcbiAgY29uc3QgcmVxdWVzdE9wdHMgPSBtZXJnZShvcHRzLCBhdXRoKTtcblxuICBjb25zdCBtVExTID1cbiAgICB0aGlzW2Ake2VuZHBvaW50QXV0aE1ldGhvZH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgXS5pbmNsdWRlcygndGxzX2NsaWVudF9hdXRoJykgfHxcbiAgICAoZW5kcG9pbnQgPT09ICd0b2tlbicgJiYgdGhpcy50bHNfY2xpZW50X2NlcnRpZmljYXRlX2JvdW5kX2FjY2Vzc190b2tlbnMpO1xuXG4gIGxldCB0YXJnZXRVcmw7XG4gIGlmIChtVExTICYmIHRoaXMuaXNzdWVyLm10bHNfZW5kcG9pbnRfYWxpYXNlcykge1xuICAgIHRhcmdldFVybCA9IHRoaXMuaXNzdWVyLm10bHNfZW5kcG9pbnRfYWxpYXNlc1tgJHtlbmRwb2ludH1fZW5kcG9pbnRgXTtcbiAgfVxuXG4gIHRhcmdldFVybCA9IHRhcmdldFVybCB8fCB0aGlzLmlzc3VlcltgJHtlbmRwb2ludH1fZW5kcG9pbnRgXTtcblxuICBpZiAoJ2Zvcm0nIGluIHJlcXVlc3RPcHRzKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVxdWVzdE9wdHMuZm9ybSkpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0cy5mb3JtW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3QuY2FsbChcbiAgICB0aGlzLFxuICAgIHtcbiAgICAgIC4uLnJlcXVlc3RPcHRzLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmw6IHRhcmdldFVybCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLi4uKGVuZHBvaW50ICE9PSAncmV2b2NhdGlvbidcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICAuLi5yZXF1ZXN0T3B0cy5oZWFkZXJzLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHsgbVRMUywgRFBvUCB9LFxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVzb2x2ZVJlc3BvbnNlVHlwZSxcbiAgcmVzb2x2ZVJlZGlyZWN0VXJpLFxuICBhdXRoRm9yLFxuICBhdXRoZW50aWNhdGVkUG9zdCxcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuLyoqXG4gKiBFeHBvcnRlZCBmdW5jdGlvblxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGFsZ29yaXRobWAgaGFzaCBhbGdvIHRvIGJlIHVzZWQgYnkgdGhpcyBpbnN0YW5jZTogKidzaGExJywgJ21kNSdcbiAqICAtIGBleGNsdWRlVmFsdWVzYCB7dHJ1ZXwqZmFsc2V9IGhhc2ggb2JqZWN0IGtleXMsIHZhbHVlcyBpZ25vcmVkXG4gKiAgLSBgZW5jb2RpbmdgIGhhc2ggZW5jb2RpbmcsIHN1cHBvcnRzICdidWZmZXInLCAnKmhleCcsICdiaW5hcnknLCAnYmFzZTY0J1xuICogIC0gYGlnbm9yZVVua25vd25gIHt0cnVlfCpmYWxzZX0gaWdub3JlIHVua25vd24gb2JqZWN0IHR5cGVzXG4gKiAgLSBgcmVwbGFjZXJgIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZXMgdmFsdWVzIGJlZm9yZSBoYXNoaW5nXG4gKiAgLSBgcmVzcGVjdEZ1bmN0aW9uUHJvcGVydGllc2Ageyp0cnVlfGZhbHNlfSBjb25zaWRlciBmdW5jdGlvbiBwcm9wZXJ0aWVzIHdoZW4gaGFzaGluZ1xuICogIC0gYHJlc3BlY3RGdW5jdGlvbk5hbWVzYCB7KnRydWV8ZmFsc2V9IGNvbnNpZGVyICduYW1lJyBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgZm9yIGhhc2hpbmdcbiAqICAtIGByZXNwZWN0VHlwZWAgeyp0cnVlfGZhbHNlfSBSZXNwZWN0IHNwZWNpYWwgcHJvcGVydGllcyAocHJvdG90eXBlLCBjb25zdHJ1Y3RvcilcbiAqICAgIHdoZW4gaGFzaGluZyB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR5cGVzXG4gKiAgLSBgdW5vcmRlcmVkQXJyYXlzYCB7dHJ1ZXwqZmFsc2V9IFNvcnQgYWxsIGFycmF5cyBiZWZvcmUgaGFzaGluZ1xuICogIC0gYHVub3JkZXJlZFNldHNgIHsqdHJ1ZXxmYWxzZX0gU29ydCBgU2V0YCBhbmQgYE1hcGAgaW5zdGFuY2VzIGJlZm9yZSBoYXNoaW5nXG4gKiAgKiA9IGRlZmF1bHRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0IHZhbHVlIHRvIGhhc2hcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIGhhc2hpbmcgb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfSBoYXNoIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBvYmplY3RIYXNoO1xuXG5mdW5jdGlvbiBvYmplY3RIYXNoKG9iamVjdCwgb3B0aW9ucyl7XG4gIG9wdGlvbnMgPSBhcHBseURlZmF1bHRzKG9iamVjdCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGhhc2gob2JqZWN0LCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBFeHBvcnRlZCBzdWdhciBtZXRob2RzXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCB2YWx1ZSB0byBoYXNoXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGhhc2ggdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHMuc2hhMSA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3RIYXNoKG9iamVjdCk7XG59O1xuZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdEhhc2gob2JqZWN0LCB7ZXhjbHVkZVZhbHVlczogdHJ1ZSwgYWxnb3JpdGhtOiAnc2hhMScsIGVuY29kaW5nOiAnaGV4J30pO1xufTtcbmV4cG9ydHMuTUQ1ID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdEhhc2gob2JqZWN0LCB7YWxnb3JpdGhtOiAnbWQ1JywgZW5jb2Rpbmc6ICdoZXgnfSk7XG59O1xuZXhwb3J0cy5rZXlzTUQ1ID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdEhhc2gob2JqZWN0LCB7YWxnb3JpdGhtOiAnbWQ1JywgZW5jb2Rpbmc6ICdoZXgnLCBleGNsdWRlVmFsdWVzOiB0cnVlfSk7XG59O1xuXG4vLyBJbnRlcm5hbHNcbnZhciBoYXNoZXMgPSBjcnlwdG8uZ2V0SGFzaGVzID8gY3J5cHRvLmdldEhhc2hlcygpLnNsaWNlKCkgOiBbJ3NoYTEnLCAnbWQ1J107XG5oYXNoZXMucHVzaCgncGFzc3Rocm91Z2gnKTtcbnZhciBlbmNvZGluZ3MgPSBbJ2J1ZmZlcicsICdoZXgnLCAnYmluYXJ5JywgJ2Jhc2U2NCddO1xuXG5mdW5jdGlvbiBhcHBseURlZmF1bHRzKG9iamVjdCwgc291cmNlT3B0aW9ucyl7XG4gIHNvdXJjZU9wdGlvbnMgPSBzb3VyY2VPcHRpb25zIHx8IHt9O1xuXG4gIC8vIGNyZWF0ZSBhIGNvcHkgcmF0aGVyIHRoYW4gbXV0YXRpbmdcbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgb3B0aW9ucy5hbGdvcml0aG0gPSBzb3VyY2VPcHRpb25zLmFsZ29yaXRobSB8fCAnc2hhMSc7XG4gIG9wdGlvbnMuZW5jb2RpbmcgPSBzb3VyY2VPcHRpb25zLmVuY29kaW5nIHx8ICdoZXgnO1xuICBvcHRpb25zLmV4Y2x1ZGVWYWx1ZXMgPSBzb3VyY2VPcHRpb25zLmV4Y2x1ZGVWYWx1ZXMgPyB0cnVlIDogZmFsc2U7XG4gIG9wdGlvbnMuYWxnb3JpdGhtID0gb3B0aW9ucy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKTtcbiAgb3B0aW9ucy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgb3B0aW9ucy5pZ25vcmVVbmtub3duID0gc291cmNlT3B0aW9ucy5pZ25vcmVVbmtub3duICE9PSB0cnVlID8gZmFsc2UgOiB0cnVlOyAvLyBkZWZhdWx0IHRvIGZhbHNlXG4gIG9wdGlvbnMucmVzcGVjdFR5cGUgPSBzb3VyY2VPcHRpb25zLnJlc3BlY3RUeXBlID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTsgLy8gZGVmYXVsdCB0byB0cnVlXG4gIG9wdGlvbnMucmVzcGVjdEZ1bmN0aW9uTmFtZXMgPSBzb3VyY2VPcHRpb25zLnJlc3BlY3RGdW5jdGlvbk5hbWVzID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgb3B0aW9ucy5yZXNwZWN0RnVuY3Rpb25Qcm9wZXJ0aWVzID0gc291cmNlT3B0aW9ucy5yZXNwZWN0RnVuY3Rpb25Qcm9wZXJ0aWVzID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgb3B0aW9ucy51bm9yZGVyZWRBcnJheXMgPSBzb3VyY2VPcHRpb25zLnVub3JkZXJlZEFycmF5cyAhPT0gdHJ1ZSA/IGZhbHNlIDogdHJ1ZTsgLy8gZGVmYXVsdCB0byBmYWxzZVxuICBvcHRpb25zLnVub3JkZXJlZFNldHMgPSBzb3VyY2VPcHRpb25zLnVub3JkZXJlZFNldHMgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlOyAvLyBkZWZhdWx0IHRvIGZhbHNlXG4gIG9wdGlvbnMudW5vcmRlcmVkT2JqZWN0cyA9IHNvdXJjZU9wdGlvbnMudW5vcmRlcmVkT2JqZWN0cyA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7IC8vIGRlZmF1bHQgdG8gdHJ1ZVxuICBvcHRpb25zLnJlcGxhY2VyID0gc291cmNlT3B0aW9ucy5yZXBsYWNlciB8fCB1bmRlZmluZWQ7XG4gIG9wdGlvbnMuZXhjbHVkZUtleXMgPSBzb3VyY2VPcHRpb25zLmV4Y2x1ZGVLZXlzIHx8IHVuZGVmaW5lZDtcblxuICBpZih0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0IGFyZ3VtZW50IHJlcXVpcmVkLicpO1xuICB9XG5cbiAgLy8gaWYgdGhlcmUgaXMgYSBjYXNlLWluc2Vuc2l0aXZlIG1hdGNoIGluIHRoZSBoYXNoZXMgbGlzdCwgYWNjZXB0IGl0XG4gIC8vIChpLmUuIFNIQTI1NiBmb3Igc2hhMjU2KVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhhc2hlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChoYXNoZXNbaV0udG9Mb3dlckNhc2UoKSA9PT0gb3B0aW9ucy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgb3B0aW9ucy5hbGdvcml0aG0gPSBoYXNoZXNbaV07XG4gICAgfVxuICB9XG5cbiAgaWYoaGFzaGVzLmluZGV4T2Yob3B0aW9ucy5hbGdvcml0aG0pID09PSAtMSl7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbGdvcml0aG0gXCInICsgb3B0aW9ucy5hbGdvcml0aG0gKyAnXCIgIG5vdCBzdXBwb3J0ZWQuICcgK1xuICAgICAgJ3N1cHBvcnRlZCB2YWx1ZXM6ICcgKyBoYXNoZXMuam9pbignLCAnKSk7XG4gIH1cblxuICBpZihlbmNvZGluZ3MuaW5kZXhPZihvcHRpb25zLmVuY29kaW5nKSA9PT0gLTEgJiZcbiAgICAgb3B0aW9ucy5hbGdvcml0aG0gIT09ICdwYXNzdGhyb3VnaCcpe1xuICAgIHRocm93IG5ldyBFcnJvcignRW5jb2RpbmcgXCInICsgb3B0aW9ucy5lbmNvZGluZyArICdcIiAgbm90IHN1cHBvcnRlZC4gJyArXG4gICAgICAnc3VwcG9ydGVkIHZhbHVlczogJyArIGVuY29kaW5ncy5qb2luKCcsICcpKTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKiogQ2hlY2sgaWYgdGhlIGdpdmVuIGZ1bmN0aW9uIGlzIGEgbmF0aXZlIGZ1bmN0aW9uICovXG5mdW5jdGlvbiBpc05hdGl2ZUZ1bmN0aW9uKGYpIHtcbiAgaWYgKCh0eXBlb2YgZikgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGV4cCA9IC9eZnVuY3Rpb25cXHMrXFx3KlxccypcXChcXHMqXFwpXFxzKntcXHMrXFxbbmF0aXZlIGNvZGVcXF1cXHMrfSQvaTtcbiAgcmV0dXJuIGV4cC5leGVjKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGYpKSAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBoYXNoKG9iamVjdCwgb3B0aW9ucykge1xuICB2YXIgaGFzaGluZ1N0cmVhbTtcblxuICBpZiAob3B0aW9ucy5hbGdvcml0aG0gIT09ICdwYXNzdGhyb3VnaCcpIHtcbiAgICBoYXNoaW5nU3RyZWFtID0gY3J5cHRvLmNyZWF0ZUhhc2gob3B0aW9ucy5hbGdvcml0aG0pO1xuICB9IGVsc2Uge1xuICAgIGhhc2hpbmdTdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaGFzaGluZ1N0cmVhbS53cml0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBoYXNoaW5nU3RyZWFtLndyaXRlID0gaGFzaGluZ1N0cmVhbS51cGRhdGU7XG4gICAgaGFzaGluZ1N0cmVhbS5lbmQgICA9IGhhc2hpbmdTdHJlYW0udXBkYXRlO1xuICB9XG5cbiAgdmFyIGhhc2hlciA9IHR5cGVIYXNoZXIob3B0aW9ucywgaGFzaGluZ1N0cmVhbSk7XG4gIGhhc2hlci5kaXNwYXRjaChvYmplY3QpO1xuICBpZiAoIWhhc2hpbmdTdHJlYW0udXBkYXRlKSB7XG4gICAgaGFzaGluZ1N0cmVhbS5lbmQoJycpO1xuICB9XG5cbiAgaWYgKGhhc2hpbmdTdHJlYW0uZGlnZXN0KSB7XG4gICAgcmV0dXJuIGhhc2hpbmdTdHJlYW0uZGlnZXN0KG9wdGlvbnMuZW5jb2RpbmcgPT09ICdidWZmZXInID8gdW5kZWZpbmVkIDogb3B0aW9ucy5lbmNvZGluZyk7XG4gIH1cblxuICB2YXIgYnVmID0gaGFzaGluZ1N0cmVhbS5yZWFkKCk7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nID09PSAnYnVmZmVyJykge1xuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gYnVmLnRvU3RyaW5nKG9wdGlvbnMuZW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEV4cG9zZSBzdHJlYW1pbmcgQVBJXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCAgVmFsdWUgdG8gc2VyaWFsaXplXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAgT3B0aW9ucywgYXMgZm9yIGhhc2goKVxuICogQHBhcmFtIHtvYmplY3R9IHN0cmVhbSAgQSBzdHJlYW0gdG8gd3JpdGUgdGhlIHNlcmlhbGl6aWF0aW9uIHRvXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLndyaXRlVG9TdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIG9wdGlvbnMsIHN0cmVhbSkge1xuICBpZiAodHlwZW9mIHN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdHJlYW0gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBhcHBseURlZmF1bHRzKG9iamVjdCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHR5cGVIYXNoZXIob3B0aW9ucywgc3RyZWFtKS5kaXNwYXRjaChvYmplY3QpO1xufTtcblxuZnVuY3Rpb24gdHlwZUhhc2hlcihvcHRpb25zLCB3cml0ZVRvLCBjb250ZXh0KXtcbiAgY29udGV4dCA9IGNvbnRleHQgfHwgW107XG4gIHZhciB3cml0ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICh3cml0ZVRvLnVwZGF0ZSkge1xuICAgICAgcmV0dXJuIHdyaXRlVG8udXBkYXRlKHN0ciwgJ3V0ZjgnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHdyaXRlVG8ud3JpdGUoc3RyLCAndXRmOCcpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGRpc3BhdGNoOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZiAob3B0aW9ucy5yZXBsYWNlcikge1xuICAgICAgICB2YWx1ZSA9IG9wdGlvbnMucmVwbGFjZXIodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB0eXBlID0gJ251bGwnO1xuICAgICAgfVxuXG4gICAgICAvL2NvbnNvbGUubG9nKFwiW0RFQlVHXSBEaXNwYXRjaDogXCIsIHZhbHVlLCBcIi0+XCIsIHR5cGUsIFwiIC0+IFwiLCBcIl9cIiArIHR5cGUpO1xuXG4gICAgICByZXR1cm4gdGhpc1snXycgKyB0eXBlXSh2YWx1ZSk7XG4gICAgfSxcbiAgICBfb2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBwYXR0ZXJuID0gKC9cXFtvYmplY3QgKC4qKVxcXS9pKTtcbiAgICAgIHZhciBvYmpTdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KTtcbiAgICAgIHZhciBvYmpUeXBlID0gcGF0dGVybi5leGVjKG9ialN0cmluZyk7XG4gICAgICBpZiAoIW9ialR5cGUpIHsgLy8gb2JqZWN0IHR5cGUgZGlkIG5vdCBtYXRjaCBbb2JqZWN0IC4uLl1cbiAgICAgICAgb2JqVHlwZSA9ICd1bmtub3duOlsnICsgb2JqU3RyaW5nICsgJ10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqVHlwZSA9IG9ialR5cGVbMV07IC8vIHRha2Ugb25seSB0aGUgY2xhc3MgbmFtZVxuICAgICAgfVxuXG4gICAgICBvYmpUeXBlID0gb2JqVHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICB2YXIgb2JqZWN0TnVtYmVyID0gbnVsbDtcblxuICAgICAgaWYgKChvYmplY3ROdW1iZXIgPSBjb250ZXh0LmluZGV4T2Yob2JqZWN0KSkgPj0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaCgnW0NJUkNVTEFSOicgKyBvYmplY3ROdW1iZXIgKyAnXScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5wdXNoKG9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIuaXNCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgd3JpdGUoJ2J1ZmZlcjonKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlKG9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIGlmKG9ialR5cGUgIT09ICdvYmplY3QnICYmIG9ialR5cGUgIT09ICdmdW5jdGlvbicgJiYgb2JqVHlwZSAhPT0gJ2FzeW5jZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmKHRoaXNbJ18nICsgb2JqVHlwZV0pIHtcbiAgICAgICAgICB0aGlzWydfJyArIG9ialR5cGVdKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pZ25vcmVVbmtub3duKSB7XG4gICAgICAgICAgcmV0dXJuIHdyaXRlKCdbJyArIG9ialR5cGUgKyAnXScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBvYmplY3QgdHlwZSBcIicgKyBvYmpUeXBlICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgICAgIGlmIChvcHRpb25zLnVub3JkZXJlZE9iamVjdHMpIHtcbiAgICAgICAgICBrZXlzID0ga2V5cy5zb3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGluY29ycG9yYXRlIHNwZWNpYWwgcHJvcGVydGllcywgc29cbiAgICAgICAgLy8gVHlwZXMgd2l0aCBkaWZmZXJlbnQgcHJvdG90eXBlcyB3aWxsIHByb2R1Y2VcbiAgICAgICAgLy8gYSBkaWZmZXJlbnQgaGFzaCBhbmQgb2JqZWN0cyBkZXJpdmVkIGZyb21cbiAgICAgICAgLy8gZGlmZmVyZW50IGZ1bmN0aW9ucyAoYG5ldyBGb29gLCBgbmV3IEJhcmApIHdpbGxcbiAgICAgICAgLy8gcHJvZHVjZSBkaWZmZXJlbnQgaGFzaGVzLlxuICAgICAgICAvLyBXZSBuZXZlciBkbyB0aGlzIGZvciBuYXRpdmUgZnVuY3Rpb25zIHNpbmNlIHNvbWVcbiAgICAgICAgLy8gc2VlbSB0byBicmVhayBiZWNhdXNlIG9mIHRoYXQuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3BlY3RUeXBlICE9PSBmYWxzZSAmJiAhaXNOYXRpdmVGdW5jdGlvbihvYmplY3QpKSB7XG4gICAgICAgICAga2V5cy5zcGxpY2UoMCwgMCwgJ3Byb3RvdHlwZScsICdfX3Byb3RvX18nLCAnY29uc3RydWN0b3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmV4Y2x1ZGVLZXlzKSB7XG4gICAgICAgICAga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gIW9wdGlvbnMuZXhjbHVkZUtleXMoa2V5KTsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB3cml0ZSgnb2JqZWN0OicgKyBrZXlzLmxlbmd0aCArICc6Jyk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xuICAgICAgICAgIHNlbGYuZGlzcGF0Y2goa2V5KTtcbiAgICAgICAgICB3cml0ZSgnOicpO1xuICAgICAgICAgIGlmKCFvcHRpb25zLmV4Y2x1ZGVWYWx1ZXMpIHtcbiAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2gob2JqZWN0W2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3cml0ZSgnLCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9hcnJheTogZnVuY3Rpb24oYXJyLCB1bm9yZGVyZWQpe1xuICAgICAgdW5vcmRlcmVkID0gdHlwZW9mIHVub3JkZXJlZCAhPT0gJ3VuZGVmaW5lZCcgPyB1bm9yZGVyZWQgOlxuICAgICAgICBvcHRpb25zLnVub3JkZXJlZEFycmF5cyAhPT0gZmFsc2U7IC8vIGRlZmF1bHQgdG8gb3B0aW9ucy51bm9yZGVyZWRBcnJheXNcblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgd3JpdGUoJ2FycmF5OicgKyBhcnIubGVuZ3RoICsgJzonKTtcbiAgICAgIGlmICghdW5vcmRlcmVkIHx8IGFyci5sZW5ndGggPD0gMSkge1xuICAgICAgICByZXR1cm4gYXJyLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5kaXNwYXRjaChlbnRyeSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGUgdW5vcmRlcmVkIGNhc2UgaXMgYSBsaXR0bGUgbW9yZSBjb21wbGljYXRlZDpcbiAgICAgIC8vIHNpbmNlIHRoZXJlIGlzIG5vIGNhbm9uaWNhbCBvcmRlcmluZyBvbiBvYmplY3RzLFxuICAgICAgLy8gaS5lLiB7YToxfSA8IHthOjJ9IGFuZCB7YToxfSA+IHthOjJ9IGFyZSBib3RoIGZhbHNlLFxuICAgICAgLy8gd2UgZmlyc3Qgc2VyaWFsaXplIGVhY2ggZW50cnkgdXNpbmcgYSBQYXNzVGhyb3VnaCBzdHJlYW1cbiAgICAgIC8vIGJlZm9yZSBzb3J0aW5nLlxuICAgICAgLy8gYWxzbzogd2UgY2Fu4oCZdCB1c2UgdGhlIHNhbWUgY29udGV4dCBhcnJheSBmb3IgYWxsIGVudHJpZXNcbiAgICAgIC8vIHNpbmNlIHRoZSBvcmRlciBvZiBoYXNoaW5nIHNob3VsZCAqbm90KiBtYXR0ZXIuIGluc3RlYWQsXG4gICAgICAvLyB3ZSBrZWVwIHRyYWNrIG9mIHRoZSBhZGRpdGlvbnMgdG8gYSBjb3B5IG9mIHRoZSBjb250ZXh0IGFycmF5XG4gICAgICAvLyBhbmQgYWRkIGFsbCBvZiB0aGVtIHRvIHRoZSBnbG9iYWwgY29udGV4dCBhcnJheSB3aGVuIHdl4oCZcmUgZG9uZVxuICAgICAgdmFyIGNvbnRleHRBZGRpdGlvbnMgPSBbXTtcbiAgICAgIHZhciBlbnRyaWVzID0gYXJyLm1hcChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICB2YXIgc3RybSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICAgICAgICB2YXIgbG9jYWxDb250ZXh0ID0gY29udGV4dC5zbGljZSgpOyAvLyBtYWtlIGNvcHlcbiAgICAgICAgdmFyIGhhc2hlciA9IHR5cGVIYXNoZXIob3B0aW9ucywgc3RybSwgbG9jYWxDb250ZXh0KTtcbiAgICAgICAgaGFzaGVyLmRpc3BhdGNoKGVudHJ5KTtcbiAgICAgICAgLy8gdGFrZSBvbmx5IHdoYXQgd2FzIGFkZGVkIHRvIGxvY2FsQ29udGV4dCBhbmQgYXBwZW5kIGl0IHRvIGNvbnRleHRBZGRpdGlvbnNcbiAgICAgICAgY29udGV4dEFkZGl0aW9ucyA9IGNvbnRleHRBZGRpdGlvbnMuY29uY2F0KGxvY2FsQ29udGV4dC5zbGljZShjb250ZXh0Lmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gc3RybS5yZWFkKCkudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY29uY2F0KGNvbnRleHRBZGRpdGlvbnMpO1xuICAgICAgZW50cmllcy5zb3J0KCk7XG4gICAgICByZXR1cm4gdGhpcy5fYXJyYXkoZW50cmllcywgZmFsc2UpO1xuICAgIH0sXG4gICAgX2RhdGU6IGZ1bmN0aW9uKGRhdGUpe1xuICAgICAgcmV0dXJuIHdyaXRlKCdkYXRlOicgKyBkYXRlLnRvSlNPTigpKTtcbiAgICB9LFxuICAgIF9zeW1ib2w6IGZ1bmN0aW9uKHN5bSl7XG4gICAgICByZXR1cm4gd3JpdGUoJ3N5bWJvbDonICsgc3ltLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Vycm9yOiBmdW5jdGlvbihlcnIpe1xuICAgICAgcmV0dXJuIHdyaXRlKCdlcnJvcjonICsgZXJyLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Jvb2xlYW46IGZ1bmN0aW9uKGJvb2wpe1xuICAgICAgcmV0dXJuIHdyaXRlKCdib29sOicgKyBib29sLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX3N0cmluZzogZnVuY3Rpb24oc3RyaW5nKXtcbiAgICAgIHdyaXRlKCdzdHJpbmc6JyArIHN0cmluZy5sZW5ndGggKyAnOicpO1xuICAgICAgd3JpdGUoc3RyaW5nLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Z1bmN0aW9uOiBmdW5jdGlvbihmbil7XG4gICAgICB3cml0ZSgnZm46Jyk7XG4gICAgICBpZiAoaXNOYXRpdmVGdW5jdGlvbihmbikpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnW25hdGl2ZV0nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goZm4udG9TdHJpbmcoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnJlc3BlY3RGdW5jdGlvbk5hbWVzICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgY2FuIHN0aWxsIGRpc3Rpbmd1aXNoIG5hdGl2ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYnkgdGhlaXIgbmFtZSwgb3RoZXJ3aXNlIFN0cmluZyBhbmQgRnVuY3Rpb24gd2lsbFxuICAgICAgICAvLyBoYXZlIHRoZSBzYW1lIGhhc2hcbiAgICAgICAgdGhpcy5kaXNwYXRjaChcImZ1bmN0aW9uLW5hbWU6XCIgKyBTdHJpbmcoZm4ubmFtZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5yZXNwZWN0RnVuY3Rpb25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMuX29iamVjdChmbik7XG4gICAgICB9XG4gICAgfSxcbiAgICBfbnVtYmVyOiBmdW5jdGlvbihudW1iZXIpe1xuICAgICAgcmV0dXJuIHdyaXRlKCdudW1iZXI6JyArIG51bWJlci50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF94bWw6IGZ1bmN0aW9uKHhtbCl7XG4gICAgICByZXR1cm4gd3JpdGUoJ3htbDonICsgeG1sLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX251bGw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHdyaXRlKCdOdWxsJyk7XG4gICAgfSxcbiAgICBfdW5kZWZpbmVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB3cml0ZSgnVW5kZWZpbmVkJyk7XG4gICAgfSxcbiAgICBfcmVnZXhwOiBmdW5jdGlvbihyZWdleCl7XG4gICAgICByZXR1cm4gd3JpdGUoJ3JlZ2V4OicgKyByZWdleC50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF91aW50OGFycmF5OiBmdW5jdGlvbihhcnIpe1xuICAgICAgd3JpdGUoJ3VpbnQ4YXJyYXk6Jyk7XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF91aW50OGNsYW1wZWRhcnJheTogZnVuY3Rpb24oYXJyKXtcbiAgICAgIHdyaXRlKCd1aW50OGNsYW1wZWRhcnJheTonKTtcbiAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2ludDhhcnJheTogZnVuY3Rpb24oYXJyKXtcbiAgICAgIHdyaXRlKCd1aW50OGFycmF5OicpO1xuICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKSk7XG4gICAgfSxcbiAgICBfdWludDE2YXJyYXk6IGZ1bmN0aW9uKGFycil7XG4gICAgICB3cml0ZSgndWludDE2YXJyYXk6Jyk7XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9pbnQxNmFycmF5OiBmdW5jdGlvbihhcnIpe1xuICAgICAgd3JpdGUoJ3VpbnQxNmFycmF5OicpO1xuICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKSk7XG4gICAgfSxcbiAgICBfdWludDMyYXJyYXk6IGZ1bmN0aW9uKGFycil7XG4gICAgICB3cml0ZSgndWludDMyYXJyYXk6Jyk7XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9pbnQzMmFycmF5OiBmdW5jdGlvbihhcnIpe1xuICAgICAgd3JpdGUoJ3VpbnQzMmFycmF5OicpO1xuICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKSk7XG4gICAgfSxcbiAgICBfZmxvYXQzMmFycmF5OiBmdW5jdGlvbihhcnIpe1xuICAgICAgd3JpdGUoJ2Zsb2F0MzJhcnJheTonKTtcbiAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2Zsb2F0NjRhcnJheTogZnVuY3Rpb24oYXJyKXtcbiAgICAgIHdyaXRlKCdmbG9hdDY0YXJyYXk6Jyk7XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9hcnJheWJ1ZmZlcjogZnVuY3Rpb24oYXJyKXtcbiAgICAgIHdyaXRlKCdhcnJheWJ1ZmZlcjonKTtcbiAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKG5ldyBVaW50OEFycmF5KGFycikpO1xuICAgIH0sXG4gICAgX3VybDogZnVuY3Rpb24odXJsKSB7XG4gICAgICByZXR1cm4gd3JpdGUoJ3VybDonICsgdXJsLnRvU3RyaW5nKCksICd1dGY4Jyk7XG4gICAgfSxcbiAgICBfbWFwOiBmdW5jdGlvbihtYXApIHtcbiAgICAgIHdyaXRlKCdtYXA6Jyk7XG4gICAgICB2YXIgYXJyID0gQXJyYXkuZnJvbShtYXApO1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGFyciwgb3B0aW9ucy51bm9yZGVyZWRTZXRzICE9PSBmYWxzZSk7XG4gICAgfSxcbiAgICBfc2V0OiBmdW5jdGlvbihzZXQpIHtcbiAgICAgIHdyaXRlKCdzZXQ6Jyk7XG4gICAgICB2YXIgYXJyID0gQXJyYXkuZnJvbShzZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGFyciwgb3B0aW9ucy51bm9yZGVyZWRTZXRzICE9PSBmYWxzZSk7XG4gICAgfSxcbiAgICBfZmlsZTogZnVuY3Rpb24oZmlsZSkge1xuICAgICAgd3JpdGUoJ2ZpbGU6Jyk7XG4gICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChbZmlsZS5uYW1lLCBmaWxlLnNpemUsIGZpbGUudHlwZSwgZmlsZS5sYXN0TW9kZmllZF0pO1xuICAgIH0sXG4gICAgX2Jsb2I6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG9wdGlvbnMuaWdub3JlVW5rbm93bikge1xuICAgICAgICByZXR1cm4gd3JpdGUoJ1tibG9iXScpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBFcnJvcignSGFzaGluZyBCbG9iIG9iamVjdHMgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWRcXG4nICtcbiAgICAgICAgJyhzZWUgaHR0cHM6Ly9naXRodWIuY29tL3B1bGVvcy9vYmplY3QtaGFzaC9pc3N1ZXMvMjYpXFxuJyArXG4gICAgICAgICdVc2UgXCJvcHRpb25zLnJlcGxhY2VyXCIgb3IgXCJvcHRpb25zLmlnbm9yZVVua25vd25cIlxcbicpO1xuICAgIH0sXG4gICAgX2RvbXdpbmRvdzogZnVuY3Rpb24oKSB7IHJldHVybiB3cml0ZSgnZG9td2luZG93Jyk7IH0sXG4gICAgX2JpZ2ludDogZnVuY3Rpb24obnVtYmVyKXtcbiAgICAgIHJldHVybiB3cml0ZSgnYmlnaW50OicgKyBudW1iZXIudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICAvKiBOb2RlLmpzIHN0YW5kYXJkIG5hdGl2ZSBvYmplY3RzICovXG4gICAgX3Byb2Nlc3M6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3Byb2Nlc3MnKTsgfSxcbiAgICBfdGltZXI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3RpbWVyJyk7IH0sXG4gICAgX3BpcGU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3BpcGUnKTsgfSxcbiAgICBfdGNwOiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCd0Y3AnKTsgfSxcbiAgICBfdWRwOiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCd1ZHAnKTsgfSxcbiAgICBfdHR5OiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCd0dHknKTsgfSxcbiAgICBfc3RhdHdhdGNoZXI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3N0YXR3YXRjaGVyJyk7IH0sXG4gICAgX3NlY3VyZWNvbnRleHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3NlY3VyZWNvbnRleHQnKTsgfSxcbiAgICBfY29ubmVjdGlvbjogZnVuY3Rpb24oKSB7IHJldHVybiB3cml0ZSgnY29ubmVjdGlvbicpOyB9LFxuICAgIF96bGliOiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCd6bGliJyk7IH0sXG4gICAgX2NvbnRleHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ2NvbnRleHQnKTsgfSxcbiAgICBfbm9kZXNjcmlwdDogZnVuY3Rpb24oKSB7IHJldHVybiB3cml0ZSgnbm9kZXNjcmlwdCcpOyB9LFxuICAgIF9odHRwcGFyc2VyOiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCdodHRwcGFyc2VyJyk7IH0sXG4gICAgX2RhdGF2aWV3OiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCdkYXRhdmlldycpOyB9LFxuICAgIF9zaWduYWw6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3NpZ25hbCcpOyB9LFxuICAgIF9mc2V2ZW50OiBmdW5jdGlvbigpIHsgcmV0dXJuIHdyaXRlKCdmc2V2ZW50Jyk7IH0sXG4gICAgX3Rsc3dyYXA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd3JpdGUoJ3Rsc3dyYXAnKTsgfSxcbiAgfTtcbn1cblxuLy8gTWluaS1pbXBsZW1lbnRhdGlvbiBvZiBzdHJlYW0uUGFzc1Rocm91Z2hcbi8vIFdlIGFyZSBmYXIgZnJvbSBoYXZpbmcgbmVlZCBmb3IgdGhlIGZ1bGwgaW1wbGVtZW50YXRpb24sIGFuZCB3ZSBjYW5cbi8vIG1ha2UgYXNzdW1wdGlvbnMgbGlrZSBcIm1hbnkgd3JpdGVzLCB0aGVuIG9ubHkgb25lIGZpbmFsIHJlYWRcIlxuLy8gYW5kIHdlIGNhbiBpZ25vcmUgZW5jb2Rpbmcgc3BlY2lmaWNzXG5mdW5jdGlvbiBQYXNzVGhyb3VnaCgpIHtcbiAgcmV0dXJuIHtcbiAgICBidWY6ICcnLFxuXG4gICAgd3JpdGU6IGZ1bmN0aW9uKGIpIHtcbiAgICAgIHRoaXMuYnVmICs9IGI7XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24oYikge1xuICAgICAgdGhpcy5idWYgKz0gYjtcbiAgICB9LFxuXG4gICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWY7XG4gICAgfVxuICB9O1xufVxuIiwiY29uc3Qgb2JqZWN0SGFzaCA9IHJlcXVpcmUoJ29iamVjdC1oYXNoJyk7XG5jb25zdCBMUlUgPSByZXF1aXJlKCdscnUtY2FjaGUnKTtcblxuY29uc3QgeyBSUEVycm9yIH0gPSByZXF1aXJlKCcuLi9lcnJvcnMnKTtcblxuY29uc3QgeyBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuL2Fzc2VydCcpO1xuY29uc3QgS2V5U3RvcmUgPSByZXF1aXJlKCcuL2tleXN0b3JlJyk7XG5jb25zdCB7IGtleXN0b3JlcyB9ID0gcmVxdWlyZSgnLi93ZWFrX2NhY2hlJyk7XG5jb25zdCBwcm9jZXNzUmVzcG9uc2UgPSByZXF1aXJlKCcuL3Byb2Nlc3NfcmVzcG9uc2UnKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcblxuY29uc3QgaW5GbGlnaHQgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgY2FjaGVzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGxydXMgPSAoY3R4KSA9PiB7XG4gIGlmICghY2FjaGVzLmhhcyhjdHgpKSB7XG4gICAgY2FjaGVzLnNldChjdHgsIG5ldyBMUlUoeyBtYXg6IDEwMCB9KSk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlcy5nZXQoY3R4KTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEtleVN0b3JlKHJlbG9hZCA9IGZhbHNlKSB7XG4gIGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24odGhpcywgJ2p3a3NfdXJpJyk7XG5cbiAgY29uc3Qga2V5c3RvcmUgPSBrZXlzdG9yZXMuZ2V0KHRoaXMpO1xuICBjb25zdCBjYWNoZSA9IGxydXModGhpcyk7XG5cbiAgaWYgKHJlbG9hZCB8fCAha2V5c3RvcmUpIHtcbiAgICBpZiAoaW5GbGlnaHQuaGFzKHRoaXMpKSB7XG4gICAgICByZXR1cm4gaW5GbGlnaHQuZ2V0KHRoaXMpO1xuICAgIH1cbiAgICBjYWNoZS5yZXNldCgpO1xuICAgIGluRmxpZ2h0LnNldChcbiAgICAgIHRoaXMsXG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RcbiAgICAgICAgICAuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgICAgICB1cmw6IHRoaXMuandrc191cmksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24sIGFwcGxpY2F0aW9uL2p3ay1zZXQranNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgaW5GbGlnaHQuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBjb25zdCBqd2tzID0gcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcblxuICAgICAgICBjb25zdCBqb3NlS2V5U3RvcmUgPSBLZXlTdG9yZS5mcm9tSldLUyhqd2tzLCB7IG9ubHlQdWJsaWM6IHRydWUgfSk7XG4gICAgICAgIGNhY2hlLnNldCgndGhyb3R0bGUnLCB0cnVlLCA2MCAqIDEwMDApO1xuICAgICAgICBrZXlzdG9yZXMuc2V0KHRoaXMsIGpvc2VLZXlTdG9yZSk7XG5cbiAgICAgICAgcmV0dXJuIGpvc2VLZXlTdG9yZTtcbiAgICAgIH0pKCksXG4gICAgKTtcblxuICAgIHJldHVybiBpbkZsaWdodC5nZXQodGhpcyk7XG4gIH1cblxuICByZXR1cm4ga2V5c3RvcmU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5S2V5U3RvcmUoeyBraWQsIGt0eSwgYWxnLCB1c2UgfSwgeyBhbGxvd011bHRpID0gZmFsc2UgfSA9IHt9KSB7XG4gIGNvbnN0IGNhY2hlID0gbHJ1cyh0aGlzKTtcblxuICBjb25zdCBkZWYgPSB7XG4gICAga2lkLFxuICAgIGt0eSxcbiAgICBhbGcsXG4gICAgdXNlLFxuICB9O1xuXG4gIGNvbnN0IGRlZkhhc2ggPSBvYmplY3RIYXNoKGRlZiwge1xuICAgIGFsZ29yaXRobTogJ3NoYTI1NicsXG4gICAgaWdub3JlVW5rbm93bjogdHJ1ZSxcbiAgICB1bm9yZGVyZWRBcnJheXM6IHRydWUsXG4gICAgdW5vcmRlcmVkU2V0czogdHJ1ZSxcbiAgfSk7XG5cbiAgLy8gcmVmcmVzaCBrZXlzdG9yZSBvbiBldmVyeSB1bmtub3duIGtleSBidXQgYWxzbyBvbmx5IHVwdG8gb25jZSBldmVyeSBtaW51dGVcbiAgY29uc3QgZnJlc2hKd2tzVXJpID0gY2FjaGUuZ2V0KGRlZkhhc2gpIHx8IGNhY2hlLmdldCgndGhyb3R0bGUnKTtcblxuICBjb25zdCBrZXlzdG9yZSA9IGF3YWl0IGdldEtleVN0b3JlLmNhbGwodGhpcywgIWZyZXNoSndrc1VyaSk7XG4gIGNvbnN0IGtleXMgPSBrZXlzdG9yZS5hbGwoZGVmKTtcblxuICBkZWxldGUgZGVmLnVzZTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgcHJpbnRmOiBbXCJubyB2YWxpZCBrZXkgZm91bmQgaW4gaXNzdWVyJ3Mgandrc191cmkgZm9yIGtleSBwYXJhbWV0ZXJzICVqXCIsIGRlZl0sXG4gICAgICBqd2tzOiBrZXlzdG9yZSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghYWxsb3dNdWx0aSAmJiBrZXlzLmxlbmd0aCA+IDEgJiYgIWtpZCkge1xuICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgIHByaW50ZjogW1xuICAgICAgICBcIm11bHRpcGxlIG1hdGNoaW5nIGtleXMgZm91bmQgaW4gaXNzdWVyJ3Mgandrc191cmkgZm9yIGtleSBwYXJhbWV0ZXJzICVqLCBraWQgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGlzIGNhc2VcIixcbiAgICAgICAgZGVmLFxuICAgICAgXSxcbiAgICAgIGp3a3M6IGtleXN0b3JlLFxuICAgIH0pO1xuICB9XG5cbiAgY2FjaGUuc2V0KGRlZkhhc2gsIHRydWUpO1xuXG4gIHJldHVybiBrZXlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5xdWVyeUtleVN0b3JlID0gcXVlcnlLZXlTdG9yZTtcbm1vZHVsZS5leHBvcnRzLmtleXN0b3JlID0gZ2V0S2V5U3RvcmU7XG4iLCJjb25zdCB7IGluc3BlY3QgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgeyBSUEVycm9yLCBPUEVycm9yIH0gPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuY29uc3Qgbm93ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3VuaXhfdGltZXN0YW1wJyk7XG5cbmNsYXNzIERldmljZUZsb3dIYW5kbGUge1xuICAjYWJvcnRlZDtcbiAgI2NsaWVudDtcbiAgI2NsaWVudEFzc2VydGlvblBheWxvYWQ7XG4gICNEUG9QO1xuICAjZXhjaGFuZ2VCb2R5O1xuICAjZXhwaXJlc19hdDtcbiAgI2ludGVydmFsO1xuICAjbWF4QWdlO1xuICAjcmVzcG9uc2U7XG4gIGNvbnN0cnVjdG9yKHsgY2xpZW50LCBleGNoYW5nZUJvZHksIGNsaWVudEFzc2VydGlvblBheWxvYWQsIHJlc3BvbnNlLCBtYXhBZ2UsIERQb1AgfSkge1xuICAgIFsndmVyaWZpY2F0aW9uX3VyaScsICd1c2VyX2NvZGUnLCAnZGV2aWNlX2NvZGUnXS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHJlc3BvbnNlW3Byb3BdICE9PSAnc3RyaW5nJyB8fCAhcmVzcG9uc2VbcHJvcF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3IoXG4gICAgICAgICAgYGV4cGVjdGVkICR7cHJvcH0gc3RyaW5nIHRvIGJlIHJldHVybmVkIGJ5IERldmljZSBBdXRob3JpemF0aW9uIFJlc3BvbnNlLCBnb3QgJWpgLFxuICAgICAgICAgIHJlc3BvbnNlW3Byb3BdLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihyZXNwb25zZS5leHBpcmVzX2luKSkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3IoXG4gICAgICAgICdleHBlY3RlZCBleHBpcmVzX2luIG51bWJlciB0byBiZSByZXR1cm5lZCBieSBEZXZpY2UgQXV0aG9yaXphdGlvbiBSZXNwb25zZSwgZ290ICVqJyxcbiAgICAgICAgcmVzcG9uc2UuZXhwaXJlc19pbixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy4jZXhwaXJlc19hdCA9IG5vdygpICsgcmVzcG9uc2UuZXhwaXJlc19pbjtcbiAgICB0aGlzLiNjbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy4jRFBvUCA9IERQb1A7XG4gICAgdGhpcy4jbWF4QWdlID0gbWF4QWdlO1xuICAgIHRoaXMuI2V4Y2hhbmdlQm9keSA9IGV4Y2hhbmdlQm9keTtcbiAgICB0aGlzLiNjbGllbnRBc3NlcnRpb25QYXlsb2FkID0gY2xpZW50QXNzZXJ0aW9uUGF5bG9hZDtcbiAgICB0aGlzLiNyZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuI2ludGVydmFsID0gcmVzcG9uc2UuaW50ZXJ2YWwgKiAxMDAwIHx8IDUwMDA7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLiNhYm9ydGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIHBvbGwoeyBzaWduYWwgfSA9IHt9KSB7XG4gICAgaWYgKChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHx8IHRoaXMuI2Fib3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKCdwb2xsaW5nIGFib3J0ZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5leHBpcmVkKCkpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKFxuICAgICAgICAndGhlIGRldmljZSBjb2RlICVqIGhhcyBleHBpcmVkIGFuZCB0aGUgZGV2aWNlIGF1dGhvcml6YXRpb24gc2Vzc2lvbiBoYXMgY29uY2x1ZGVkJyxcbiAgICAgICAgdGhpcy5kZXZpY2VfY29kZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy4jaW50ZXJ2YWwpKTtcblxuICAgIGxldCB0b2tlbnNldDtcbiAgICB0cnkge1xuICAgICAgdG9rZW5zZXQgPSBhd2FpdCB0aGlzLiNjbGllbnQuZ3JhbnQoXG4gICAgICAgIHtcbiAgICAgICAgICAuLi50aGlzLiNleGNoYW5nZUJvZHksXG4gICAgICAgICAgZ3JhbnRfdHlwZTogJ3VybjppZXRmOnBhcmFtczpvYXV0aDpncmFudC10eXBlOmRldmljZV9jb2RlJyxcbiAgICAgICAgICBkZXZpY2VfY29kZTogdGhpcy5kZXZpY2VfY29kZSxcbiAgICAgICAgfSxcbiAgICAgICAgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkOiB0aGlzLiNjbGllbnRBc3NlcnRpb25QYXlsb2FkLCBEUG9QOiB0aGlzLiNEUG9QIH0sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc3dpdGNoIChlcnIgaW5zdGFuY2VvZiBPUEVycm9yICYmIGVyci5lcnJvcikge1xuICAgICAgICBjYXNlICdzbG93X2Rvd24nOlxuICAgICAgICAgIHRoaXMuI2ludGVydmFsICs9IDUwMDA7XG4gICAgICAgIGNhc2UgJ2F1dGhvcml6YXRpb25fcGVuZGluZyc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucG9sbCh7IHNpZ25hbCB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCdpZF90b2tlbicgaW4gdG9rZW5zZXQpIHtcbiAgICAgIGF3YWl0IHRoaXMuI2NsaWVudC5kZWNyeXB0SWRUb2tlbih0b2tlbnNldCk7XG4gICAgICBhd2FpdCB0aGlzLiNjbGllbnQudmFsaWRhdGVJZFRva2VuKHRva2Vuc2V0LCB1bmRlZmluZWQsICd0b2tlbicsIHRoaXMuI21heEFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRva2Vuc2V0O1xuICB9XG5cbiAgZ2V0IGRldmljZV9jb2RlKCkge1xuICAgIHJldHVybiB0aGlzLiNyZXNwb25zZS5kZXZpY2VfY29kZTtcbiAgfVxuXG4gIGdldCB1c2VyX2NvZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3Jlc3BvbnNlLnVzZXJfY29kZTtcbiAgfVxuXG4gIGdldCB2ZXJpZmljYXRpb25fdXJpKCkge1xuICAgIHJldHVybiB0aGlzLiNyZXNwb25zZS52ZXJpZmljYXRpb25fdXJpO1xuICB9XG5cbiAgZ2V0IHZlcmlmaWNhdGlvbl91cmlfY29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3Jlc3BvbnNlLnZlcmlmaWNhdGlvbl91cmlfY29tcGxldGU7XG4gIH1cblxuICBnZXQgZXhwaXJlc19pbigpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgW3RoaXMuI2V4cGlyZXNfYXQgLSBub3coKSwgMF0pO1xuICB9XG5cbiAgZXhwaXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBpcmVzX2luID09PSAwO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgW2luc3BlY3QuY3VzdG9tXSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSAke2luc3BlY3QodGhpcy4jcmVzcG9uc2UsIHtcbiAgICAgIGRlcHRoOiBJbmZpbml0eSxcbiAgICAgIGNvbG9yczogcHJvY2Vzcy5zdGRvdXQuaXNUVFksXG4gICAgICBjb21wYWN0OiBmYWxzZSxcbiAgICAgIHNvcnRlZDogdHJ1ZSxcbiAgICB9KX1gO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGV2aWNlRmxvd0hhbmRsZTtcbiIsImNvbnN0IHsgaW5zcGVjdCB9ID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3Qgc3RkaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgeyBzdHJpY3Q6IGFzc2VydCB9ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5jb25zdCB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxuY29uc3Qgam9zZSA9IHJlcXVpcmUoJ2pvc2UnKTtcbmNvbnN0IHRva2VuSGFzaCA9IHJlcXVpcmUoJ29pZGMtdG9rZW4taGFzaCcpO1xuXG5jb25zdCBpc0tleU9iamVjdCA9IHJlcXVpcmUoJy4vaGVscGVycy9pc19rZXlfb2JqZWN0Jyk7XG5jb25zdCBkZWNvZGVKV1QgPSByZXF1aXJlKCcuL2hlbHBlcnMvZGVjb2RlX2p3dCcpO1xuY29uc3QgYmFzZTY0dXJsID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Jhc2U2NHVybCcpO1xuY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2hlbHBlcnMvZGVmYXVsdHMnKTtcbmNvbnN0IHBhcnNlV3d3QXV0aGVudGljYXRlID0gcmVxdWlyZSgnLi9oZWxwZXJzL3d3d19hdXRoZW50aWNhdGVfcGFyc2VyJyk7XG5jb25zdCB7IGFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0LCBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzZXJ0Jyk7XG5jb25zdCBwaWNrID0gcmVxdWlyZSgnLi9oZWxwZXJzL3BpY2snKTtcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNfcGxhaW5fb2JqZWN0Jyk7XG5jb25zdCBwcm9jZXNzUmVzcG9uc2UgPSByZXF1aXJlKCcuL2hlbHBlcnMvcHJvY2Vzc19yZXNwb25zZScpO1xuY29uc3QgVG9rZW5TZXQgPSByZXF1aXJlKCcuL3Rva2VuX3NldCcpO1xuY29uc3QgeyBPUEVycm9yLCBSUEVycm9yIH0gPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuY29uc3Qgbm93ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3VuaXhfdGltZXN0YW1wJyk7XG5jb25zdCB7IHJhbmRvbSB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL2dlbmVyYXRvcnMnKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL2hlbHBlcnMvcmVxdWVzdCcpO1xuY29uc3QgeyBDTE9DS19UT0xFUkFOQ0UgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9jb25zdHMnKTtcbmNvbnN0IHsga2V5c3RvcmVzIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvd2Vha19jYWNoZScpO1xuY29uc3QgS2V5U3RvcmUgPSByZXF1aXJlKCcuL2hlbHBlcnMva2V5c3RvcmUnKTtcbmNvbnN0IGNsb25lID0gcmVxdWlyZSgnLi9oZWxwZXJzL2RlZXBfY2xvbmUnKTtcbmNvbnN0IHsgYXV0aGVudGljYXRlZFBvc3QsIHJlc29sdmVSZXNwb25zZVR5cGUsIHJlc29sdmVSZWRpcmVjdFVyaSB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL2NsaWVudCcpO1xuY29uc3QgeyBxdWVyeUtleVN0b3JlIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNzdWVyJyk7XG5jb25zdCBEZXZpY2VGbG93SGFuZGxlID0gcmVxdWlyZSgnLi9kZXZpY2VfZmxvd19oYW5kbGUnKTtcblxuY29uc3QgW21ham9yLCBtaW5vcl0gPSBwcm9jZXNzLnZlcnNpb25cbiAgLnNsaWNlKDEpXG4gIC5zcGxpdCgnLicpXG4gIC5tYXAoKHN0cikgPT4gcGFyc2VJbnQoc3RyLCAxMCkpO1xuXG5jb25zdCByc2FQc3NQYXJhbXMgPSBtYWpvciA+PSAxNyB8fCAobWFqb3IgPT09IDE2ICYmIG1pbm9yID49IDkpO1xuY29uc3QgcmV0cnlBdHRlbXB0ID0gU3ltYm9sKCk7XG5jb25zdCBza2lwTm9uY2VDaGVjayA9IFN5bWJvbCgpO1xuY29uc3Qgc2tpcE1heEFnZUNoZWNrID0gU3ltYm9sKCk7XG5cbmZ1bmN0aW9uIHBpY2tDYihpbnB1dCkge1xuICByZXR1cm4gcGljayhcbiAgICBpbnB1dCxcbiAgICAnYWNjZXNzX3Rva2VuJywgLy8gT0F1dGggMi4wXG4gICAgJ2NvZGUnLCAvLyBPQXV0aCAyLjBcbiAgICAnZXJyb3JfZGVzY3JpcHRpb24nLCAvLyBPQXV0aCAyLjBcbiAgICAnZXJyb3JfdXJpJywgLy8gT0F1dGggMi4wXG4gICAgJ2Vycm9yJywgLy8gT0F1dGggMi4wXG4gICAgJ2V4cGlyZXNfaW4nLCAvLyBPQXV0aCAyLjBcbiAgICAnaWRfdG9rZW4nLCAvLyBPSURDIENvcmUgMS4wXG4gICAgJ2lzcycsIC8vIGRyYWZ0LWlldGYtb2F1dGgtaXNzLWF1dGgtcmVzcFxuICAgICdyZXNwb25zZScsIC8vIEZBUEkgSkFSTVxuICAgICdzZXNzaW9uX3N0YXRlJywgLy8gT0lEQyBTZXNzaW9uIE1hbmFnZW1lbnRcbiAgICAnc3RhdGUnLCAvLyBPQXV0aCAyLjBcbiAgICAndG9rZW5fdHlwZScsIC8vIE9BdXRoIDIuMFxuICApO1xufVxuXG5mdW5jdGlvbiBhdXRob3JpemF0aW9uSGVhZGVyVmFsdWUodG9rZW4sIHRva2VuVHlwZSA9ICdCZWFyZXInKSB7XG4gIHJldHVybiBgJHt0b2tlblR5cGV9ICR7dG9rZW59YDtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5UHJlc2VuY2UocGF5bG9hZCwgand0LCBwcm9wKSB7XG4gIGlmIChwYXlsb2FkW3Byb3BdID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICBtZXNzYWdlOiBgbWlzc2luZyByZXF1aXJlZCBKV1QgcHJvcGVydHkgJHtwcm9wfWAsXG4gICAgICBqd3QsXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXV0aG9yaXphdGlvblBhcmFtcyhwYXJhbXMpIHtcbiAgY29uc3QgYXV0aFBhcmFtcyA9IHtcbiAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkLFxuICAgIHNjb3BlOiAnb3BlbmlkJyxcbiAgICByZXNwb25zZV90eXBlOiByZXNvbHZlUmVzcG9uc2VUeXBlLmNhbGwodGhpcyksXG4gICAgcmVkaXJlY3RfdXJpOiByZXNvbHZlUmVkaXJlY3RVcmkuY2FsbCh0aGlzKSxcbiAgICAuLi5wYXJhbXMsXG4gIH07XG5cbiAgT2JqZWN0LmVudHJpZXMoYXV0aFBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSBhdXRoUGFyYW1zW2tleV07XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdjbGFpbXMnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGF1dGhQYXJhbXNba2V5XSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3Jlc291cmNlJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgYXV0aFBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBhdXRoUGFyYW1zW2tleV0gPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGF1dGhQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIGdldEtleXN0b3JlKGp3a3MpIHtcbiAgaWYgKFxuICAgICFpc1BsYWluT2JqZWN0KGp3a3MpIHx8XG4gICAgIUFycmF5LmlzQXJyYXkoandrcy5rZXlzKSB8fFxuICAgIGp3a3Mua2V5cy5zb21lKChrKSA9PiAhaXNQbGFpbk9iamVjdChrKSB8fCAhKCdrdHknIGluIGspKVxuICApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdqd2tzIG11c3QgYmUgYSBKU09OIFdlYiBLZXkgU2V0IGZvcm1hdHRlZCBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBLZXlTdG9yZS5mcm9tSldLUyhqd2tzLCB7IG9ubHlQcml2YXRlOiB0cnVlIH0pO1xufVxuXG4vLyBpZiBhbiBPUCBkb2VzbnQgc3VwcG9ydCBjbGllbnRfc2VjcmV0X2Jhc2ljIGJ1dCBzdXBwb3J0cyBjbGllbnRfc2VjcmV0X3Bvc3QsIHVzZSBpdCBpbnN0ZWFkXG4vLyB0aGlzIGlzIGluIHBsYWNlIHRvIHRha2UgY2FyZSBvZiBtb3N0IGNvbW1vbiBwaXRmYWxscyB3aGVuIGZpcnN0IHVzaW5nIGRpc2NvdmVyZWQgSXNzdWVycyB3aXRob3V0XG4vLyB0aGUgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMgZGVmaW5lZCBieSBEaXNjb3ZlcnkgMS4wXG5mdW5jdGlvbiBjaGVja0Jhc2ljU3VwcG9ydChjbGllbnQsIHByb3BlcnRpZXMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdXBwb3J0ZWQgPSBjbGllbnQuaXNzdWVyLnRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kc19zdXBwb3J0ZWQ7XG4gICAgaWYgKCFzdXBwb3J0ZWQuaW5jbHVkZXMocHJvcGVydGllcy50b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZCkpIHtcbiAgICAgIGlmIChzdXBwb3J0ZWQuaW5jbHVkZXMoJ2NsaWVudF9zZWNyZXRfcG9zdCcpKSB7XG4gICAgICAgIHByb3BlcnRpZXMudG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2QgPSAnY2xpZW50X3NlY3JldF9wb3N0JztcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge31cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29tbW9uTWlzdGFrZXMoY2xpZW50LCBtZXRhZGF0YSwgcHJvcGVydGllcykge1xuICBpZiAoIW1ldGFkYXRhLnRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kKSB7XG4gICAgLy8gaWYgbm8gZXhwbGljaXQgdmFsdWUgd2FzIHByb3ZpZGVkXG4gICAgY2hlY2tCYXNpY1N1cHBvcnQoY2xpZW50LCBwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIC8vIDpmcDogYydtb24gcGVvcGxlLi4uIFJURk1cbiAgaWYgKG1ldGFkYXRhLnJlZGlyZWN0X3VyaSkge1xuICAgIGlmIChtZXRhZGF0YS5yZWRpcmVjdF91cmlzKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm92aWRlIGEgcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaXMsIG5vdCBib3RoJyk7XG4gICAgfVxuICAgIHByb3BlcnRpZXMucmVkaXJlY3RfdXJpcyA9IFttZXRhZGF0YS5yZWRpcmVjdF91cmldO1xuICAgIGRlbGV0ZSBwcm9wZXJ0aWVzLnJlZGlyZWN0X3VyaTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YS5yZXNwb25zZV90eXBlKSB7XG4gICAgaWYgKG1ldGFkYXRhLnJlc3BvbnNlX3R5cGVzKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm92aWRlIGEgcmVzcG9uc2VfdHlwZSBvciByZXNwb25zZV90eXBlcywgbm90IGJvdGgnKTtcbiAgICB9XG4gICAgcHJvcGVydGllcy5yZXNwb25zZV90eXBlcyA9IFttZXRhZGF0YS5yZXNwb25zZV90eXBlXTtcbiAgICBkZWxldGUgcHJvcGVydGllcy5yZXNwb25zZV90eXBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRzRm9yRW5kcG9pbnQoZW5kcG9pbnQsIGlzc3VlciwgcHJvcGVydGllcykge1xuICBpZiAoIWlzc3VlcltgJHtlbmRwb2ludH1fZW5kcG9pbnRgXSkgcmV0dXJuO1xuXG4gIGNvbnN0IHRva2VuRW5kcG9pbnRBdXRoTWV0aG9kID0gcHJvcGVydGllcy50b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZDtcbiAgY29uc3QgdG9rZW5FbmRwb2ludEF1dGhTaWduaW5nQWxnID0gcHJvcGVydGllcy50b2tlbl9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnO1xuXG4gIGNvbnN0IGVhbSA9IGAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX21ldGhvZGA7XG4gIGNvbnN0IGVhc2EgPSBgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ2A7XG5cbiAgaWYgKHByb3BlcnRpZXNbZWFtXSA9PT0gdW5kZWZpbmVkICYmIHByb3BlcnRpZXNbZWFzYV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0b2tlbkVuZHBvaW50QXV0aE1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wZXJ0aWVzW2VhbV0gPSB0b2tlbkVuZHBvaW50QXV0aE1ldGhvZDtcbiAgICB9XG4gICAgaWYgKHRva2VuRW5kcG9pbnRBdXRoU2lnbmluZ0FsZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wZXJ0aWVzW2Vhc2FdID0gdG9rZW5FbmRwb2ludEF1dGhTaWduaW5nQWxnO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBCYXNlQ2xpZW50IHtcbiAgI21ldGFkYXRhO1xuICAjaXNzdWVyO1xuICAjYWFkSXNzVmFsaWRhdGlvbjtcbiAgI2FkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcztcbiAgY29uc3RydWN0b3IoaXNzdWVyLCBhYWRJc3NWYWxpZGF0aW9uLCBtZXRhZGF0YSA9IHt9LCBqd2tzLCBvcHRpb25zKSB7XG4gICAgdGhpcy4jbWV0YWRhdGEgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy4jaXNzdWVyID0gaXNzdWVyO1xuICAgIHRoaXMuI2FhZElzc1ZhbGlkYXRpb24gPSBhYWRJc3NWYWxpZGF0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBtZXRhZGF0YS5jbGllbnRfaWQgIT09ICdzdHJpbmcnIHx8ICFtZXRhZGF0YS5jbGllbnRfaWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NsaWVudF9pZCBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICBncmFudF90eXBlczogWydhdXRob3JpemF0aW9uX2NvZGUnXSxcbiAgICAgIGlkX3Rva2VuX3NpZ25lZF9yZXNwb25zZV9hbGc6ICdSUzI1NicsXG4gICAgICBhdXRob3JpemF0aW9uX3NpZ25lZF9yZXNwb25zZV9hbGc6ICdSUzI1NicsXG4gICAgICByZXNwb25zZV90eXBlczogWydjb2RlJ10sXG4gICAgICB0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZDogJ2NsaWVudF9zZWNyZXRfYmFzaWMnLFxuICAgICAgLi4uKHRoaXMuZmFwaSgpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgZ3JhbnRfdHlwZXM6IFsnYXV0aG9yaXphdGlvbl9jb2RlJywgJ2ltcGxpY2l0J10sXG4gICAgICAgICAgICBpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnOiAnUFMyNTYnLFxuICAgICAgICAgICAgYXV0aG9yaXphdGlvbl9zaWduZWRfcmVzcG9uc2VfYWxnOiAnUFMyNTYnLFxuICAgICAgICAgICAgcmVzcG9uc2VfdHlwZXM6IFsnY29kZSBpZF90b2tlbiddLFxuICAgICAgICAgICAgdGxzX2NsaWVudF9jZXJ0aWZpY2F0ZV9ib3VuZF9hY2Nlc3NfdG9rZW5zOiB0cnVlLFxuICAgICAgICAgICAgdG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkKSxcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5mYXBpKCkpIHtcbiAgICAgIHN3aXRjaCAocHJvcGVydGllcy50b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZCkge1xuICAgICAgICBjYXNlICdzZWxmX3NpZ25lZF90bHNfY2xpZW50X2F1dGgnOlxuICAgICAgICBjYXNlICd0bHNfY2xpZW50X2F1dGgnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcml2YXRlX2tleV9qd3QnOlxuICAgICAgICAgIGlmICghandrcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignandrcyBpcyByZXF1aXJlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2QgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIG9yIHVuc3VwcG9ydGVkIHRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ29tbW9uTWlzdGFrZXModGhpcywgbWV0YWRhdGEsIHByb3BlcnRpZXMpO1xuXG4gICAgYXNzZXJ0U2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnQoJ3Rva2VuJywgdGhpcy5pc3N1ZXIsIHByb3BlcnRpZXMpO1xuICAgIFsnaW50cm9zcGVjdGlvbicsICdyZXZvY2F0aW9uJ10uZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgIGdldERlZmF1bHRzRm9yRW5kcG9pbnQoZW5kcG9pbnQsIHRoaXMuaXNzdWVyLCBwcm9wZXJ0aWVzKTtcbiAgICAgIGFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0KGVuZHBvaW50LCB0aGlzLmlzc3VlciwgcHJvcGVydGllcyk7XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHRoaXMuI21ldGFkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGlmICghdGhpc1trZXldKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jbWV0YWRhdGEuZ2V0KGtleSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChqd2tzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGtleXN0b3JlID0gZ2V0S2V5c3RvcmUuY2FsbCh0aGlzLCBqd2tzKTtcbiAgICAgIGtleXN0b3Jlcy5zZXQodGhpcywga2V5c3RvcmUpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5hZGRpdGlvbmFsQXV0aG9yaXplZFBhcnRpZXMpIHtcbiAgICAgIHRoaXMuI2FkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcyA9IGNsb25lKG9wdGlvbnMuYWRkaXRpb25hbEF1dGhvcml6ZWRQYXJ0aWVzKTtcbiAgICB9XG5cbiAgICB0aGlzW0NMT0NLX1RPTEVSQU5DRV0gPSAwO1xuICB9XG5cbiAgYXV0aG9yaXphdGlvblVybChwYXJhbXMgPSB7fSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChwYXJhbXMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbXMgbXVzdCBiZSBhIHBsYWluIG9iamVjdCcpO1xuICAgIH1cbiAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAnYXV0aG9yaXphdGlvbl9lbmRwb2ludCcpO1xuICAgIGNvbnN0IHRhcmdldCA9IHVybC5wYXJzZSh0aGlzLmlzc3Vlci5hdXRob3JpemF0aW9uX2VuZHBvaW50LCB0cnVlKTtcbiAgICB0YXJnZXQuc2VhcmNoID0gbnVsbDtcbiAgICB0YXJnZXQucXVlcnkgPSB7XG4gICAgICAuLi50YXJnZXQucXVlcnksXG4gICAgICAuLi5hdXRob3JpemF0aW9uUGFyYW1zLmNhbGwodGhpcywgcGFyYW1zKSxcbiAgICB9O1xuICAgIHJldHVybiB1cmwuZm9ybWF0KHRhcmdldCk7XG4gIH1cblxuICBhdXRob3JpemF0aW9uUG9zdChwYXJhbXMgPSB7fSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChwYXJhbXMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbXMgbXVzdCBiZSBhIHBsYWluIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dHMgPSBhdXRob3JpemF0aW9uUGFyYW1zLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICBjb25zdCBmb3JtSW5wdXRzID0gT2JqZWN0LmtleXMoaW5wdXRzKVxuICAgICAgLm1hcCgobmFtZSkgPT4gYDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cIiR7bmFtZX1cIiB2YWx1ZT1cIiR7aW5wdXRzW25hbWVdfVwiLz5gKVxuICAgICAgLmpvaW4oJ1xcbicpO1xuXG4gICAgcmV0dXJuIGA8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuPHRpdGxlPlJlcXVlc3RpbmcgQXV0aG9yaXphdGlvbjwvdGl0bGU+XG48L2hlYWQ+XG48Ym9keSBvbmxvYWQ9XCJqYXZhc2NyaXB0OmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpXCI+XG48Zm9ybSBtZXRob2Q9XCJwb3N0XCIgYWN0aW9uPVwiJHt0aGlzLmlzc3Vlci5hdXRob3JpemF0aW9uX2VuZHBvaW50fVwiPlxuICAke2Zvcm1JbnB1dHN9XG48L2Zvcm0+XG48L2JvZHk+XG48L2h0bWw+YDtcbiAgfVxuXG4gIGVuZFNlc3Npb25VcmwocGFyYW1zID0ge30pIHtcbiAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAnZW5kX3Nlc3Npb25fZW5kcG9pbnQnKTtcblxuICAgIGNvbnN0IHsgMDogcG9zdExvZ291dCwgbGVuZ3RoIH0gPSB0aGlzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaXMgfHwgW107XG5cbiAgICBjb25zdCB7IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IGxlbmd0aCA9PT0gMSA/IHBvc3RMb2dvdXQgOiB1bmRlZmluZWQgfSA9IHBhcmFtcztcblxuICAgIGxldCBpZF90b2tlbl9oaW50O1xuICAgICh7IGlkX3Rva2VuX2hpbnQsIC4uLnBhcmFtcyB9ID0gcGFyYW1zKTtcbiAgICBpZiAoaWRfdG9rZW5faGludCBpbnN0YW5jZW9mIFRva2VuU2V0KSB7XG4gICAgICBpZiAoIWlkX3Rva2VuX2hpbnQuaWRfdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWRfdG9rZW4gbm90IHByZXNlbnQgaW4gVG9rZW5TZXQnKTtcbiAgICAgIH1cbiAgICAgIGlkX3Rva2VuX2hpbnQgPSBpZF90b2tlbl9oaW50LmlkX3Rva2VuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldCA9IHVybC5wYXJzZSh0aGlzLmlzc3Vlci5lbmRfc2Vzc2lvbl9lbmRwb2ludCwgdHJ1ZSk7XG4gICAgdGFyZ2V0LnNlYXJjaCA9IG51bGw7XG4gICAgZGVmYXVsdHMoXG4gICAgICB0YXJnZXQucXVlcnksXG4gICAgICBwYXJhbXMsXG4gICAgICB7XG4gICAgICAgIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcbiAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZCxcbiAgICAgIH0sXG4gICAgICB7IGlkX3Rva2VuX2hpbnQgfSxcbiAgICApO1xuXG4gICAgT2JqZWN0LmVudHJpZXModGFyZ2V0LnF1ZXJ5KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZSB0YXJnZXQucXVlcnlba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cmwuZm9ybWF0KHRhcmdldCk7XG4gIH1cblxuICBjYWxsYmFja1BhcmFtcyhpbnB1dCkge1xuICAgIGNvbnN0IGlzSW5jb21pbmdNZXNzYWdlID1cbiAgICAgIGlucHV0IGluc3RhbmNlb2Ygc3RkaHR0cC5JbmNvbWluZ01lc3NhZ2UgfHwgKGlucHV0ICYmIGlucHV0Lm1ldGhvZCAmJiBpbnB1dC51cmwpO1xuICAgIGNvbnN0IGlzU3RyaW5nID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJztcblxuICAgIGlmICghaXNTdHJpbmcgJiYgIWlzSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnI2NhbGxiYWNrUGFyYW1zIG9ubHkgYWNjZXB0cyBzdHJpbmcgdXJscywgaHR0cC5JbmNvbWluZ01lc3NhZ2Ugb3IgYSBsb29rYWxpa2UnLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGlzSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgICBzd2l0Y2ggKGlucHV0Lm1ldGhvZCkge1xuICAgICAgICBjYXNlICdHRVQnOlxuICAgICAgICAgIHJldHVybiBwaWNrQ2IodXJsLnBhcnNlKGlucHV0LnVybCwgdHJ1ZSkucXVlcnkpO1xuICAgICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgICBpZiAoaW5wdXQuYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAnaW5jb21pbmcgbWVzc2FnZSBib2R5IG1pc3NpbmcsIGluY2x1ZGUgYSBib2R5IHBhcnNlciBwcmlvciB0byB0aGlzIG1ldGhvZCBjYWxsJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGlucHV0LmJvZHkpIHtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0LmJvZHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tDYihxdWVyeXN0cmluZy5wYXJzZShpbnB1dC5ib2R5LnRvU3RyaW5nKCd1dGYtOCcpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dC5ib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrQ2IocXVlcnlzdHJpbmcucGFyc2UoaW5wdXQuYm9keSkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHBpY2tDYihpbnB1dC5ib2R5KTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgSW5jb21pbmdNZXNzYWdlIGJvZHkgb2JqZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgSW5jb21pbmdNZXNzYWdlIG1ldGhvZCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGlja0NiKHVybC5wYXJzZShpbnB1dCwgdHJ1ZSkucXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNhbGxiYWNrKFxuICAgIHJlZGlyZWN0VXJpLFxuICAgIHBhcmFtZXRlcnMsXG4gICAgY2hlY2tzID0ge30sXG4gICAgeyBleGNoYW5nZUJvZHksIGNsaWVudEFzc2VydGlvblBheWxvYWQsIERQb1AgfSA9IHt9LFxuICApIHtcbiAgICBsZXQgcGFyYW1zID0gcGlja0NiKHBhcmFtZXRlcnMpO1xuXG4gICAgaWYgKGNoZWNrcy5qYXJtICYmICEoJ3Jlc3BvbnNlJyBpbiBwYXJhbWV0ZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiAnZXhwZWN0ZWQgYSBKQVJNIHJlc3BvbnNlJyxcbiAgICAgICAgY2hlY2tzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCdyZXNwb25zZScgaW4gcGFyYW1ldGVycykge1xuICAgICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgdGhpcy5kZWNyeXB0SkFSTShwYXJhbXMucmVzcG9uc2UpO1xuICAgICAgcGFyYW1zID0gYXdhaXQgdGhpcy52YWxpZGF0ZUpBUk0oZGVjcnlwdGVkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kZWZhdWx0X21heF9hZ2UgJiYgIWNoZWNrcy5tYXhfYWdlKSB7XG4gICAgICBjaGVja3MubWF4X2FnZSA9IHRoaXMuZGVmYXVsdF9tYXhfYWdlO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc3RhdGUgJiYgIWNoZWNrcy5zdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2hlY2tzLnN0YXRlIGFyZ3VtZW50IGlzIG1pc3NpbmcnKTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5zdGF0ZSAmJiBjaGVja3Muc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogJ3N0YXRlIG1pc3NpbmcgZnJvbSB0aGUgcmVzcG9uc2UnLFxuICAgICAgICBjaGVja3MsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjaGVja3Muc3RhdGUgIT09IHBhcmFtcy5zdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBwcmludGY6IFsnc3RhdGUgbWlzbWF0Y2gsIGV4cGVjdGVkICVzLCBnb3Q6ICVzJywgY2hlY2tzLnN0YXRlLCBwYXJhbXMuc3RhdGVdLFxuICAgICAgICBjaGVja3MsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgnaXNzJyBpbiBwYXJhbXMpIHtcbiAgICAgIGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24odGhpcy5pc3N1ZXIsICdpc3N1ZXInKTtcbiAgICAgIGlmIChwYXJhbXMuaXNzICE9PSB0aGlzLmlzc3Vlci5pc3N1ZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIHByaW50ZjogWydpc3MgbWlzbWF0Y2gsIGV4cGVjdGVkICVzLCBnb3Q6ICVzJywgdGhpcy5pc3N1ZXIuaXNzdWVyLCBwYXJhbXMuaXNzXSxcbiAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLmlzc3Vlci5hdXRob3JpemF0aW9uX3Jlc3BvbnNlX2lzc19wYXJhbWV0ZXJfc3VwcG9ydGVkICYmXG4gICAgICAhKCdpZF90b2tlbicgaW4gcGFyYW1zKSAmJlxuICAgICAgISgncmVzcG9uc2UnIGluIHBhcmFtZXRlcnMpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6ICdpc3MgbWlzc2luZyBmcm9tIHRoZSByZXNwb25zZScsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBPUEVycm9yKHBhcmFtcyk7XG4gICAgfVxuXG4gICAgY29uc3QgUkVTUE9OU0VfVFlQRV9SRVFVSVJFRF9QQVJBTVMgPSB7XG4gICAgICBjb2RlOiBbJ2NvZGUnXSxcbiAgICAgIGlkX3Rva2VuOiBbJ2lkX3Rva2VuJ10sXG4gICAgICB0b2tlbjogWydhY2Nlc3NfdG9rZW4nLCAndG9rZW5fdHlwZSddLFxuICAgIH07XG5cbiAgICBpZiAoY2hlY2tzLnJlc3BvbnNlX3R5cGUpIHtcbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBjaGVja3MucmVzcG9uc2VfdHlwZS5zcGxpdCgnICcpKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbm9uZScpIHtcbiAgICAgICAgICBpZiAocGFyYW1zLmNvZGUgfHwgcGFyYW1zLmlkX3Rva2VuIHx8IHBhcmFtcy5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ3VuZXhwZWN0ZWQgcGFyYW1zIGVuY291bnRlcmVkIGZvciBcIm5vbmVcIiByZXNwb25zZScsXG4gICAgICAgICAgICAgIGNoZWNrcyxcbiAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgUkVTUE9OU0VfVFlQRV9SRVFVSVJFRF9QQVJBTVNbdHlwZV0pIHtcbiAgICAgICAgICAgIGlmICghcGFyYW1zW3BhcmFtXSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7cGFyYW19IG1pc3NpbmcgZnJvbSByZXNwb25zZWAsXG4gICAgICAgICAgICAgICAgY2hlY2tzLFxuICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5pZF90b2tlbikge1xuICAgICAgY29uc3QgdG9rZW5zZXQgPSBuZXcgVG9rZW5TZXQocGFyYW1zKTtcbiAgICAgIGF3YWl0IHRoaXMuZGVjcnlwdElkVG9rZW4odG9rZW5zZXQpO1xuICAgICAgYXdhaXQgdGhpcy52YWxpZGF0ZUlkVG9rZW4oXG4gICAgICAgIHRva2Vuc2V0LFxuICAgICAgICBjaGVja3Mubm9uY2UsXG4gICAgICAgICdhdXRob3JpemF0aW9uJyxcbiAgICAgICAgY2hlY2tzLm1heF9hZ2UsXG4gICAgICAgIGNoZWNrcy5zdGF0ZSxcbiAgICAgICk7XG5cbiAgICAgIGlmICghcGFyYW1zLmNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRva2Vuc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY29kZSkge1xuICAgICAgY29uc3QgdG9rZW5zZXQgPSBhd2FpdCB0aGlzLmdyYW50KFxuICAgICAgICB7XG4gICAgICAgICAgLi4uZXhjaGFuZ2VCb2R5LFxuICAgICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICAgIGNvZGU6IHBhcmFtcy5jb2RlLFxuICAgICAgICAgIHJlZGlyZWN0X3VyaTogcmVkaXJlY3RVcmksXG4gICAgICAgICAgY29kZV92ZXJpZmllcjogY2hlY2tzLmNvZGVfdmVyaWZpZXIsXG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCwgRFBvUCB9LFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgdGhpcy5kZWNyeXB0SWRUb2tlbih0b2tlbnNldCk7XG4gICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlSWRUb2tlbih0b2tlbnNldCwgY2hlY2tzLm5vbmNlLCAndG9rZW4nLCBjaGVja3MubWF4X2FnZSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc2Vzc2lvbl9zdGF0ZSkge1xuICAgICAgICB0b2tlbnNldC5zZXNzaW9uX3N0YXRlID0gcGFyYW1zLnNlc3Npb25fc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b2tlbnNldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRva2VuU2V0KHBhcmFtcyk7XG4gIH1cblxuICBhc3luYyBvYXV0aENhbGxiYWNrKFxuICAgIHJlZGlyZWN0VXJpLFxuICAgIHBhcmFtZXRlcnMsXG4gICAgY2hlY2tzID0ge30sXG4gICAgeyBleGNoYW5nZUJvZHksIGNsaWVudEFzc2VydGlvblBheWxvYWQsIERQb1AgfSA9IHt9LFxuICApIHtcbiAgICBsZXQgcGFyYW1zID0gcGlja0NiKHBhcmFtZXRlcnMpO1xuXG4gICAgaWYgKGNoZWNrcy5qYXJtICYmICEoJ3Jlc3BvbnNlJyBpbiBwYXJhbWV0ZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiAnZXhwZWN0ZWQgYSBKQVJNIHJlc3BvbnNlJyxcbiAgICAgICAgY2hlY2tzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCdyZXNwb25zZScgaW4gcGFyYW1ldGVycykge1xuICAgICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgdGhpcy5kZWNyeXB0SkFSTShwYXJhbXMucmVzcG9uc2UpO1xuICAgICAgcGFyYW1zID0gYXdhaXQgdGhpcy52YWxpZGF0ZUpBUk0oZGVjcnlwdGVkKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnN0YXRlICYmICFjaGVja3Muc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NoZWNrcy5zdGF0ZSBhcmd1bWVudCBpcyBtaXNzaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuc3RhdGUgJiYgY2hlY2tzLnN0YXRlKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6ICdzdGF0ZSBtaXNzaW5nIGZyb20gdGhlIHJlc3BvbnNlJyxcbiAgICAgICAgY2hlY2tzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLnN0YXRlICE9PSBwYXJhbXMuc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgcHJpbnRmOiBbJ3N0YXRlIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIGNoZWNrcy5zdGF0ZSwgcGFyYW1zLnN0YXRlXSxcbiAgICAgICAgY2hlY2tzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoJ2lzcycgaW4gcGFyYW1zKSB7XG4gICAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAnaXNzdWVyJyk7XG4gICAgICBpZiAocGFyYW1zLmlzcyAhPT0gdGhpcy5pc3N1ZXIuaXNzdWVyKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBwcmludGY6IFsnaXNzIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIHRoaXMuaXNzdWVyLmlzc3VlciwgcGFyYW1zLmlzc10sXG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdGhpcy5pc3N1ZXIuYXV0aG9yaXphdGlvbl9yZXNwb25zZV9pc3NfcGFyYW1ldGVyX3N1cHBvcnRlZCAmJlxuICAgICAgISgnaWRfdG9rZW4nIGluIHBhcmFtcykgJiZcbiAgICAgICEoJ3Jlc3BvbnNlJyBpbiBwYXJhbWV0ZXJzKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiAnaXNzIG1pc3NpbmcgZnJvbSB0aGUgcmVzcG9uc2UnLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgT1BFcnJvcihwYXJhbXMpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGFyYW1zLmlkX3Rva2VuID09PSAnc3RyaW5nJyAmJiBwYXJhbXMuaWRfdG9rZW4ubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgJ2lkX3Rva2VuIGRldGVjdGVkIGluIHRoZSByZXNwb25zZSwgeW91IG11c3QgdXNlIGNsaWVudC5jYWxsYmFjaygpIGluc3RlYWQgb2YgY2xpZW50Lm9hdXRoQ2FsbGJhY2soKScsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGUgcGFyYW1zLmlkX3Rva2VuO1xuXG4gICAgY29uc3QgUkVTUE9OU0VfVFlQRV9SRVFVSVJFRF9QQVJBTVMgPSB7XG4gICAgICBjb2RlOiBbJ2NvZGUnXSxcbiAgICAgIHRva2VuOiBbJ2FjY2Vzc190b2tlbicsICd0b2tlbl90eXBlJ10sXG4gICAgfTtcblxuICAgIGlmIChjaGVja3MucmVzcG9uc2VfdHlwZSkge1xuICAgICAgZm9yIChjb25zdCB0eXBlIG9mIGNoZWNrcy5yZXNwb25zZV90eXBlLnNwbGl0KCcgJykpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdub25lJykge1xuICAgICAgICAgIGlmIChwYXJhbXMuY29kZSB8fCBwYXJhbXMuaWRfdG9rZW4gfHwgcGFyYW1zLmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgICAgICBtZXNzYWdlOiAndW5leHBlY3RlZCBwYXJhbXMgZW5jb3VudGVyZWQgZm9yIFwibm9uZVwiIHJlc3BvbnNlJyxcbiAgICAgICAgICAgICAgY2hlY2tzLFxuICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoUkVTUE9OU0VfVFlQRV9SRVFVSVJFRF9QQVJBTVNbdHlwZV0pIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIFJFU1BPTlNFX1RZUEVfUkVRVUlSRURfUEFSQU1TW3R5cGVdKSB7XG4gICAgICAgICAgICBpZiAoIXBhcmFtc1twYXJhbV0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke3BhcmFtfSBtaXNzaW5nIGZyb20gcmVzcG9uc2VgLFxuICAgICAgICAgICAgICAgIGNoZWNrcyxcbiAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY29kZSkge1xuICAgICAgY29uc3QgdG9rZW5zZXQgPSBhd2FpdCB0aGlzLmdyYW50KFxuICAgICAgICB7XG4gICAgICAgICAgLi4uZXhjaGFuZ2VCb2R5LFxuICAgICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICAgIGNvZGU6IHBhcmFtcy5jb2RlLFxuICAgICAgICAgIHJlZGlyZWN0X3VyaTogcmVkaXJlY3RVcmksXG4gICAgICAgICAgY29kZV92ZXJpZmllcjogY2hlY2tzLmNvZGVfdmVyaWZpZXIsXG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCwgRFBvUCB9LFxuICAgICAgKTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbnNldC5pZF90b2tlbiA9PT0gJ3N0cmluZycgJiYgdG9rZW5zZXQuaWRfdG9rZW4ubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgJ2lkX3Rva2VuIGRldGVjdGVkIGluIHRoZSByZXNwb25zZSwgeW91IG11c3QgdXNlIGNsaWVudC5jYWxsYmFjaygpIGluc3RlYWQgb2YgY2xpZW50Lm9hdXRoQ2FsbGJhY2soKScsXG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0b2tlbnNldC5pZF90b2tlbjtcblxuICAgICAgcmV0dXJuIHRva2Vuc2V0O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVG9rZW5TZXQocGFyYW1zKTtcbiAgfVxuXG4gIGFzeW5jIGRlY3J5cHRJZFRva2VuKHRva2VuKSB7XG4gICAgaWYgKCF0aGlzLmlkX3Rva2VuX2VuY3J5cHRlZF9yZXNwb25zZV9hbGcpIHtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG5cbiAgICBsZXQgaWRUb2tlbiA9IHRva2VuO1xuXG4gICAgaWYgKGlkVG9rZW4gaW5zdGFuY2VvZiBUb2tlblNldCkge1xuICAgICAgaWYgKCFpZFRva2VuLmlkX3Rva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lkX3Rva2VuIG5vdCBwcmVzZW50IGluIFRva2VuU2V0Jyk7XG4gICAgICB9XG4gICAgICBpZFRva2VuID0gaWRUb2tlbi5pZF90b2tlbjtcbiAgICB9XG5cbiAgICBjb25zdCBleHBlY3RlZEFsZyA9IHRoaXMuaWRfdG9rZW5fZW5jcnlwdGVkX3Jlc3BvbnNlX2FsZztcbiAgICBjb25zdCBleHBlY3RlZEVuYyA9IHRoaXMuaWRfdG9rZW5fZW5jcnlwdGVkX3Jlc3BvbnNlX2VuYztcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZGVjcnlwdEpXRShpZFRva2VuLCBleHBlY3RlZEFsZywgZXhwZWN0ZWRFbmMpO1xuXG4gICAgaWYgKHRva2VuIGluc3RhbmNlb2YgVG9rZW5TZXQpIHtcbiAgICAgIHRva2VuLmlkX3Rva2VuID0gcmVzdWx0O1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZUpXVFVzZXJpbmZvKGJvZHkpIHtcbiAgICBjb25zdCBleHBlY3RlZEFsZyA9IHRoaXMudXNlcmluZm9fc2lnbmVkX3Jlc3BvbnNlX2FsZztcblxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlSldUKGJvZHksIGV4cGVjdGVkQWxnLCBbXSk7XG4gIH1cblxuICBhc3luYyBkZWNyeXB0SkFSTShyZXNwb25zZSkge1xuICAgIGlmICghdGhpcy5hdXRob3JpemF0aW9uX2VuY3J5cHRlZF9yZXNwb25zZV9hbGcpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBjb25zdCBleHBlY3RlZEFsZyA9IHRoaXMuYXV0aG9yaXphdGlvbl9lbmNyeXB0ZWRfcmVzcG9uc2VfYWxnO1xuICAgIGNvbnN0IGV4cGVjdGVkRW5jID0gdGhpcy5hdXRob3JpemF0aW9uX2VuY3J5cHRlZF9yZXNwb25zZV9lbmM7XG5cbiAgICByZXR1cm4gdGhpcy5kZWNyeXB0SldFKHJlc3BvbnNlLCBleHBlY3RlZEFsZywgZXhwZWN0ZWRFbmMpO1xuICB9XG5cbiAgYXN5bmMgZGVjcnlwdEpXVFVzZXJpbmZvKGJvZHkpIHtcbiAgICBpZiAoIXRoaXMudXNlcmluZm9fZW5jcnlwdGVkX3Jlc3BvbnNlX2FsZykge1xuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuXG4gICAgY29uc3QgZXhwZWN0ZWRBbGcgPSB0aGlzLnVzZXJpbmZvX2VuY3J5cHRlZF9yZXNwb25zZV9hbGc7XG4gICAgY29uc3QgZXhwZWN0ZWRFbmMgPSB0aGlzLnVzZXJpbmZvX2VuY3J5cHRlZF9yZXNwb25zZV9lbmM7XG5cbiAgICByZXR1cm4gdGhpcy5kZWNyeXB0SldFKGJvZHksIGV4cGVjdGVkQWxnLCBleHBlY3RlZEVuYyk7XG4gIH1cblxuICBhc3luYyBkZWNyeXB0SldFKGp3ZSwgZXhwZWN0ZWRBbGcsIGV4cGVjdGVkRW5jID0gJ0ExMjhDQkMtSFMyNTYnKSB7XG4gICAgY29uc3QgaGVhZGVyID0gSlNPTi5wYXJzZShiYXNlNjR1cmwuZGVjb2RlKGp3ZS5zcGxpdCgnLicpWzBdKSk7XG5cbiAgICBpZiAoaGVhZGVyLmFsZyAhPT0gZXhwZWN0ZWRBbGcpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgcHJpbnRmOiBbJ3VuZXhwZWN0ZWQgSldFIGFsZyByZWNlaXZlZCwgZXhwZWN0ZWQgJXMsIGdvdDogJXMnLCBleHBlY3RlZEFsZywgaGVhZGVyLmFsZ10sXG4gICAgICAgIGp3dDogandlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGhlYWRlci5lbmMgIT09IGV4cGVjdGVkRW5jKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIHByaW50ZjogWyd1bmV4cGVjdGVkIEpXRSBlbmMgcmVjZWl2ZWQsIGV4cGVjdGVkICVzLCBnb3Q6ICVzJywgZXhwZWN0ZWRFbmMsIGhlYWRlci5lbmNdLFxuICAgICAgICBqd3Q6IGp3ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFBsYWludGV4dCA9IChyZXN1bHQpID0+IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShyZXN1bHQucGxhaW50ZXh0KTtcbiAgICBsZXQgcGxhaW50ZXh0O1xuICAgIGlmIChleHBlY3RlZEFsZy5tYXRjaCgvXig/OlJTQXxFQ0RIKS8pKSB7XG4gICAgICBjb25zdCBrZXlzdG9yZSA9IGF3YWl0IGtleXN0b3Jlcy5nZXQodGhpcyk7XG5cbiAgICAgIGZvciAoY29uc3QgeyBrZXlPYmplY3Q6IGtleSB9IG9mIGtleXN0b3JlLmFsbCh7XG4gICAgICAgIC4uLmpvc2UuZGVjb2RlUHJvdGVjdGVkSGVhZGVyKGp3ZSksXG4gICAgICAgIHVzZTogJ2VuYycsXG4gICAgICB9KSkge1xuICAgICAgICBwbGFpbnRleHQgPSBhd2FpdCBqb3NlLmNvbXBhY3REZWNyeXB0KGp3ZSwga2V5KS50aGVuKGdldFBsYWludGV4dCwgKCkgPT4ge30pO1xuICAgICAgICBpZiAocGxhaW50ZXh0KSBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGxhaW50ZXh0ID0gYXdhaXQgam9zZVxuICAgICAgICAuY29tcGFjdERlY3J5cHQoandlLCB0aGlzLnNlY3JldEZvckFsZyhleHBlY3RlZEFsZyA9PT0gJ2RpcicgPyBleHBlY3RlZEVuYyA6IGV4cGVjdGVkQWxnKSlcbiAgICAgICAgLnRoZW4oZ2V0UGxhaW50ZXh0LCAoKSA9PiB7fSk7XG4gICAgfVxuXG4gICAgaWYgKCFwbGFpbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogJ2ZhaWxlZCB0byBkZWNyeXB0IEpXRScsXG4gICAgICAgIGp3dDogandlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwbGFpbnRleHQ7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZUlkVG9rZW4odG9rZW5TZXQsIG5vbmNlLCByZXR1cm5lZEJ5LCBtYXhBZ2UsIHN0YXRlKSB7XG4gICAgbGV0IGlkVG9rZW4gPSB0b2tlblNldDtcblxuICAgIGNvbnN0IGV4cGVjdGVkQWxnID0gdGhpcy5pZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnO1xuXG4gICAgY29uc3QgaXNUb2tlblNldCA9IGlkVG9rZW4gaW5zdGFuY2VvZiBUb2tlblNldDtcblxuICAgIGlmIChpc1Rva2VuU2V0KSB7XG4gICAgICBpZiAoIWlkVG9rZW4uaWRfdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWRfdG9rZW4gbm90IHByZXNlbnQgaW4gVG9rZW5TZXQnKTtcbiAgICAgIH1cbiAgICAgIGlkVG9rZW4gPSBpZFRva2VuLmlkX3Rva2VuO1xuICAgIH1cblxuICAgIGlkVG9rZW4gPSBTdHJpbmcoaWRUb2tlbik7XG5cbiAgICBjb25zdCB0aW1lc3RhbXAgPSBub3coKTtcbiAgICBjb25zdCB7IHByb3RlY3RlZDogaGVhZGVyLCBwYXlsb2FkLCBrZXkgfSA9IGF3YWl0IHRoaXMudmFsaWRhdGVKV1QoaWRUb2tlbiwgZXhwZWN0ZWRBbGcpO1xuXG4gICAgaWYgKHR5cGVvZiBtYXhBZ2UgPT09ICdudW1iZXInIHx8IChtYXhBZ2UgIT09IHNraXBNYXhBZ2VDaGVjayAmJiB0aGlzLnJlcXVpcmVfYXV0aF90aW1lKSkge1xuICAgICAgaWYgKCFwYXlsb2FkLmF1dGhfdGltZSkge1xuICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogJ21pc3NpbmcgcmVxdWlyZWQgSldUIHByb3BlcnR5IGF1dGhfdGltZScsXG4gICAgICAgICAgand0OiBpZFRva2VuLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5hdXRoX3RpbWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSldUIGF1dGhfdGltZSBjbGFpbSBtdXN0IGJlIGEgSlNPTiBudW1lcmljIHZhbHVlJyxcbiAgICAgICAgICBqd3Q6IGlkVG9rZW4sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBtYXhBZ2UgPT09ICdudW1iZXInICYmXG4gICAgICBwYXlsb2FkLmF1dGhfdGltZSArIG1heEFnZSA8IHRpbWVzdGFtcCAtIHRoaXNbQ0xPQ0tfVE9MRVJBTkNFXVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBwcmludGY6IFtcbiAgICAgICAgICAndG9vIG11Y2ggdGltZSBoYXMgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCBFbmQtVXNlciBhdXRoZW50aWNhdGlvbiwgbWF4X2FnZSAlaSwgYXV0aF90aW1lOiAlaSwgbm93ICVpJyxcbiAgICAgICAgICBtYXhBZ2UsXG4gICAgICAgICAgcGF5bG9hZC5hdXRoX3RpbWUsXG4gICAgICAgICAgdGltZXN0YW1wIC0gdGhpc1tDTE9DS19UT0xFUkFOQ0VdLFxuICAgICAgICBdLFxuICAgICAgICBub3c6IHRpbWVzdGFtcCxcbiAgICAgICAgdG9sZXJhbmNlOiB0aGlzW0NMT0NLX1RPTEVSQU5DRV0sXG4gICAgICAgIGF1dGhfdGltZTogcGF5bG9hZC5hdXRoX3RpbWUsXG4gICAgICAgIGp3dDogaWRUb2tlbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG5vbmNlICE9PSBza2lwTm9uY2VDaGVjayAmJlxuICAgICAgKHBheWxvYWQubm9uY2UgfHwgbm9uY2UgIT09IHVuZGVmaW5lZCkgJiZcbiAgICAgIHBheWxvYWQubm9uY2UgIT09IG5vbmNlXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIHByaW50ZjogWydub25jZSBtaXNtYXRjaCwgZXhwZWN0ZWQgJXMsIGdvdDogJXMnLCBub25jZSwgcGF5bG9hZC5ub25jZV0sXG4gICAgICAgIGp3dDogaWRUb2tlbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXR1cm5lZEJ5ID09PSAnYXV0aG9yaXphdGlvbicpIHtcbiAgICAgIGlmICghcGF5bG9hZC5hdF9oYXNoICYmIHRva2VuU2V0LmFjY2Vzc190b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogJ21pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgYXRfaGFzaCcsXG4gICAgICAgICAgand0OiBpZFRva2VuLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXlsb2FkLmNfaGFzaCAmJiB0b2tlblNldC5jb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBjX2hhc2gnLFxuICAgICAgICAgIGp3dDogaWRUb2tlbixcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZhcGkoKSkge1xuICAgICAgICBpZiAoIXBheWxvYWQuc19oYXNoICYmICh0b2tlblNldC5zdGF0ZSB8fCBzdGF0ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBzX2hhc2gnLFxuICAgICAgICAgICAgand0OiBpZFRva2VuLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXlsb2FkLnNfaGFzaCkge1xuICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IHZlcmlmeSBzX2hhc2gsIFwiY2hlY2tzLnN0YXRlXCIgcHJvcGVydHkgbm90IHByb3ZpZGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRva2VuSGFzaC52YWxpZGF0ZShcbiAgICAgICAgICAgIHsgY2xhaW06ICdzX2hhc2gnLCBzb3VyY2U6ICdzdGF0ZScgfSxcbiAgICAgICAgICAgIHBheWxvYWQuc19oYXNoLFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICBoZWFkZXIuYWxnLFxuICAgICAgICAgICAga2V5Lmp3ayAmJiBrZXkuandrLmNydixcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7IG1lc3NhZ2U6IGVyci5tZXNzYWdlLCBqd3Q6IGlkVG9rZW4gfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5mYXBpKCkgJiYgcGF5bG9hZC5pYXQgPCB0aW1lc3RhbXAgLSAzNjAwKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIHByaW50ZjogWydKV1QgaXNzdWVkIHRvbyBmYXIgaW4gdGhlIHBhc3QsIG5vdyAlaSwgaWF0ICVpJywgdGltZXN0YW1wLCBwYXlsb2FkLmlhdF0sXG4gICAgICAgIG5vdzogdGltZXN0YW1wLFxuICAgICAgICB0b2xlcmFuY2U6IHRoaXNbQ0xPQ0tfVE9MRVJBTkNFXSxcbiAgICAgICAgaWF0OiBwYXlsb2FkLmlhdCxcbiAgICAgICAgand0OiBpZFRva2VuLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuU2V0LmFjY2Vzc190b2tlbiAmJiBwYXlsb2FkLmF0X2hhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdG9rZW5IYXNoLnZhbGlkYXRlKFxuICAgICAgICAgIHsgY2xhaW06ICdhdF9oYXNoJywgc291cmNlOiAnYWNjZXNzX3Rva2VuJyB9LFxuICAgICAgICAgIHBheWxvYWQuYXRfaGFzaCxcbiAgICAgICAgICB0b2tlblNldC5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgaGVhZGVyLmFsZyxcbiAgICAgICAgICBrZXkuandrICYmIGtleS5qd2suY3J2LFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHsgbWVzc2FnZTogZXJyLm1lc3NhZ2UsIGp3dDogaWRUb2tlbiB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9rZW5TZXQuY29kZSAmJiBwYXlsb2FkLmNfaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0b2tlbkhhc2gudmFsaWRhdGUoXG4gICAgICAgICAgeyBjbGFpbTogJ2NfaGFzaCcsIHNvdXJjZTogJ2NvZGUnIH0sXG4gICAgICAgICAgcGF5bG9hZC5jX2hhc2gsXG4gICAgICAgICAgdG9rZW5TZXQuY29kZSxcbiAgICAgICAgICBoZWFkZXIuYWxnLFxuICAgICAgICAgIGtleS5qd2sgJiYga2V5Lmp3ay5jcnYsXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3IoeyBtZXNzYWdlOiBlcnIubWVzc2FnZSwgand0OiBpZFRva2VuIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b2tlblNldDtcbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlSldUKGp3dCwgZXhwZWN0ZWRBbGcsIHJlcXVpcmVkID0gWydpc3MnLCAnc3ViJywgJ2F1ZCcsICdleHAnLCAnaWF0J10pIHtcbiAgICBjb25zdCBpc1NlbGZJc3N1ZWQgPSB0aGlzLmlzc3Vlci5pc3N1ZXIgPT09ICdodHRwczovL3NlbGYtaXNzdWVkLm1lJztcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBub3coKTtcbiAgICBsZXQgaGVhZGVyO1xuICAgIGxldCBwYXlsb2FkO1xuICAgIHRyeSB7XG4gICAgICAoeyBoZWFkZXIsIHBheWxvYWQgfSA9IGRlY29kZUpXVChqd3QsIHsgY29tcGxldGU6IHRydWUgfSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBwcmludGY6IFsnZmFpbGVkIHRvIGRlY29kZSBKV1QgKCVzOiAlcyknLCBlcnIubmFtZSwgZXJyLm1lc3NhZ2VdLFxuICAgICAgICBqd3QsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaGVhZGVyLmFsZyAhPT0gZXhwZWN0ZWRBbGcpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgcHJpbnRmOiBbJ3VuZXhwZWN0ZWQgSldUIGFsZyByZWNlaXZlZCwgZXhwZWN0ZWQgJXMsIGdvdDogJXMnLCBleHBlY3RlZEFsZywgaGVhZGVyLmFsZ10sXG4gICAgICAgIGp3dCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc1NlbGZJc3N1ZWQpIHtcbiAgICAgIHJlcXVpcmVkID0gWy4uLnJlcXVpcmVkLCAnc3ViX2p3ayddO1xuICAgIH1cblxuICAgIHJlcXVpcmVkLmZvckVhY2godmVyaWZ5UHJlc2VuY2UuYmluZCh1bmRlZmluZWQsIHBheWxvYWQsIGp3dCkpO1xuXG4gICAgaWYgKHBheWxvYWQuaXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBleHBlY3RlZElzcyA9IHRoaXMuaXNzdWVyLmlzc3VlcjtcblxuICAgICAgaWYgKHRoaXMuI2FhZElzc1ZhbGlkYXRpb24pIHtcbiAgICAgICAgZXhwZWN0ZWRJc3MgPSB0aGlzLmlzc3Vlci5pc3N1ZXIucmVwbGFjZSgne3RlbmFudGlkfScsIHBheWxvYWQudGlkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBheWxvYWQuaXNzICE9PSBleHBlY3RlZElzcykge1xuICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgcHJpbnRmOiBbJ3VuZXhwZWN0ZWQgaXNzIHZhbHVlLCBleHBlY3RlZCAlcywgZ290OiAlcycsIGV4cGVjdGVkSXNzLCBwYXlsb2FkLmlzc10sXG4gICAgICAgICAgand0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF5bG9hZC5pYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkLmlhdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdKV1QgaWF0IGNsYWltIG11c3QgYmUgYSBKU09OIG51bWVyaWMgdmFsdWUnLFxuICAgICAgICAgIGp3dCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBheWxvYWQubmJmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5uYmYgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSldUIG5iZiBjbGFpbSBtdXN0IGJlIGEgSlNPTiBudW1lcmljIHZhbHVlJyxcbiAgICAgICAgICBqd3QsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBheWxvYWQubmJmID4gdGltZXN0YW1wICsgdGhpc1tDTE9DS19UT0xFUkFOQ0VdKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBwcmludGY6IFtcbiAgICAgICAgICAgICdKV1Qgbm90IGFjdGl2ZSB5ZXQsIG5vdyAlaSwgbmJmICVpJyxcbiAgICAgICAgICAgIHRpbWVzdGFtcCArIHRoaXNbQ0xPQ0tfVE9MRVJBTkNFXSxcbiAgICAgICAgICAgIHBheWxvYWQubmJmLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgbm93OiB0aW1lc3RhbXAsXG4gICAgICAgICAgdG9sZXJhbmNlOiB0aGlzW0NMT0NLX1RPTEVSQU5DRV0sXG4gICAgICAgICAgbmJmOiBwYXlsb2FkLm5iZixcbiAgICAgICAgICBqd3QsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXlsb2FkLmV4cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHBheWxvYWQuZXhwICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogJ0pXVCBleHAgY2xhaW0gbXVzdCBiZSBhIEpTT04gbnVtZXJpYyB2YWx1ZScsXG4gICAgICAgICAgand0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lc3RhbXAgLSB0aGlzW0NMT0NLX1RPTEVSQU5DRV0gPj0gcGF5bG9hZC5leHApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIHByaW50ZjogWydKV1QgZXhwaXJlZCwgbm93ICVpLCBleHAgJWknLCB0aW1lc3RhbXAgLSB0aGlzW0NMT0NLX1RPTEVSQU5DRV0sIHBheWxvYWQuZXhwXSxcbiAgICAgICAgICBub3c6IHRpbWVzdGFtcCxcbiAgICAgICAgICB0b2xlcmFuY2U6IHRoaXNbQ0xPQ0tfVE9MRVJBTkNFXSxcbiAgICAgICAgICBleHA6IHBheWxvYWQuZXhwLFxuICAgICAgICAgIGp3dCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBheWxvYWQuYXVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQuYXVkKSkge1xuICAgICAgICBpZiAocGF5bG9hZC5hdWQubGVuZ3RoID4gMSAmJiAhcGF5bG9hZC5henApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyByZXF1aXJlZCBKV1QgcHJvcGVydHkgYXpwJyxcbiAgICAgICAgICAgIGp3dCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5bG9hZC5hdWQuaW5jbHVkZXModGhpcy5jbGllbnRfaWQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgICAgcHJpbnRmOiBbXG4gICAgICAgICAgICAgICdhdWQgaXMgbWlzc2luZyB0aGUgY2xpZW50X2lkLCBleHBlY3RlZCAlcyB0byBiZSBpbmNsdWRlZCBpbiAlaicsXG4gICAgICAgICAgICAgIHRoaXMuY2xpZW50X2lkLFxuICAgICAgICAgICAgICBwYXlsb2FkLmF1ZCxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBqd3QsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hdWQgIT09IHRoaXMuY2xpZW50X2lkKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBwcmludGY6IFsnYXVkIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIHRoaXMuY2xpZW50X2lkLCBwYXlsb2FkLmF1ZF0sXG4gICAgICAgICAgand0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF5bG9hZC5henAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IGFkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcyA9IHRoaXMuI2FkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcztcblxuICAgICAgaWYgKHR5cGVvZiBhZGRpdGlvbmFsQXV0aG9yaXplZFBhcnRpZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGFkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcyA9IFt0aGlzLmNsaWVudF9pZCwgYWRkaXRpb25hbEF1dGhvcml6ZWRQYXJ0aWVzXTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhZGRpdGlvbmFsQXV0aG9yaXplZFBhcnRpZXMpKSB7XG4gICAgICAgIGFkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcyA9IFt0aGlzLmNsaWVudF9pZCwgLi4uYWRkaXRpb25hbEF1dGhvcml6ZWRQYXJ0aWVzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZGl0aW9uYWxBdXRob3JpemVkUGFydGllcyA9IFt0aGlzLmNsaWVudF9pZF07XG4gICAgICB9XG5cbiAgICAgIGlmICghYWRkaXRpb25hbEF1dGhvcml6ZWRQYXJ0aWVzLmluY2x1ZGVzKHBheWxvYWQuYXpwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgcHJpbnRmOiBbJ2F6cCBtaXNtYXRjaCwgZ290OiAlcycsIHBheWxvYWQuYXpwXSxcbiAgICAgICAgICBqd3QsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBrZXlzO1xuXG4gICAgaWYgKGlzU2VsZklzc3VlZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXNzZXJ0KGlzUGxhaW5PYmplY3QocGF5bG9hZC5zdWJfandrKSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IGpvc2UuaW1wb3J0SldLKHBheWxvYWQuc3ViX2p3aywgaGVhZGVyLmFsZyk7XG4gICAgICAgIGFzc2VydC5lcXVhbChrZXkudHlwZSwgJ3B1YmxpYycpO1xuICAgICAgICBrZXlzID0gW3sga2V5T2JqZWN0OiBrZXkgfV07XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdmYWlsZWQgdG8gdXNlIHN1Yl9qd2sgY2xhaW0gYXMgYW4gYXN5bW1ldHJpYyBKU09OIFdlYiBLZXknLFxuICAgICAgICAgIGp3dCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoKGF3YWl0IGpvc2UuY2FsY3VsYXRlSndrVGh1bWJwcmludChwYXlsb2FkLnN1Yl9qd2spKSAhPT0gcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdmYWlsZWQgdG8gbWF0Y2ggdGhlIHN1YmplY3Qgd2l0aCBzdWJfandrJyxcbiAgICAgICAgICBqd3QsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGVhZGVyLmFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICBrZXlzID0gW3RoaXMuc2VjcmV0Rm9yQWxnKGhlYWRlci5hbGcpXTtcbiAgICB9IGVsc2UgaWYgKGhlYWRlci5hbGcgIT09ICdub25lJykge1xuICAgICAga2V5cyA9IGF3YWl0IHF1ZXJ5S2V5U3RvcmUuY2FsbCh0aGlzLmlzc3VlciwgeyAuLi5oZWFkZXIsIHVzZTogJ3NpZycgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFrZXlzICYmIGhlYWRlci5hbGcgPT09ICdub25lJykge1xuICAgICAgcmV0dXJuIHsgcHJvdGVjdGVkOiBoZWFkZXIsIHBheWxvYWQgfTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IGpvc2VcbiAgICAgICAgLmNvbXBhY3RWZXJpZnkoand0LCBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8ga2V5IDoga2V5LmtleU9iamVjdClcbiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTtcbiAgICAgIGlmICh2ZXJpZmllZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgcHJvdGVjdGVkOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAga2V5LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgIG1lc3NhZ2U6ICdmYWlsZWQgdG8gdmFsaWRhdGUgSldUIHNpZ25hdHVyZScsXG4gICAgICBqd3QsXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyByZWZyZXNoKHJlZnJlc2hUb2tlbiwgeyBleGNoYW5nZUJvZHksIGNsaWVudEFzc2VydGlvblBheWxvYWQsIERQb1AgfSA9IHt9KSB7XG4gICAgbGV0IHRva2VuID0gcmVmcmVzaFRva2VuO1xuXG4gICAgaWYgKHRva2VuIGluc3RhbmNlb2YgVG9rZW5TZXQpIHtcbiAgICAgIGlmICghdG9rZW4ucmVmcmVzaF90b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWZyZXNoX3Rva2VuIG5vdCBwcmVzZW50IGluIFRva2VuU2V0Jyk7XG4gICAgICB9XG4gICAgICB0b2tlbiA9IHRva2VuLnJlZnJlc2hfdG9rZW47XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5zZXQgPSBhd2FpdCB0aGlzLmdyYW50KFxuICAgICAge1xuICAgICAgICAuLi5leGNoYW5nZUJvZHksXG4gICAgICAgIGdyYW50X3R5cGU6ICdyZWZyZXNoX3Rva2VuJyxcbiAgICAgICAgcmVmcmVzaF90b2tlbjogU3RyaW5nKHRva2VuKSxcbiAgICAgIH0sXG4gICAgICB7IGNsaWVudEFzc2VydGlvblBheWxvYWQsIERQb1AgfSxcbiAgICApO1xuXG4gICAgaWYgKHRva2Vuc2V0LmlkX3Rva2VuKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlY3J5cHRJZFRva2VuKHRva2Vuc2V0KTtcbiAgICAgIGF3YWl0IHRoaXMudmFsaWRhdGVJZFRva2VuKHRva2Vuc2V0LCBza2lwTm9uY2VDaGVjaywgJ3Rva2VuJywgc2tpcE1heEFnZUNoZWNrKTtcblxuICAgICAgaWYgKHJlZnJlc2hUb2tlbiBpbnN0YW5jZW9mIFRva2VuU2V0ICYmIHJlZnJlc2hUb2tlbi5pZF90b2tlbikge1xuICAgICAgICBjb25zdCBleHBlY3RlZFN1YiA9IHJlZnJlc2hUb2tlbi5jbGFpbXMoKS5zdWI7XG4gICAgICAgIGNvbnN0IGFjdHVhbFN1YiA9IHRva2Vuc2V0LmNsYWltcygpLnN1YjtcbiAgICAgICAgaWYgKGFjdHVhbFN1YiAhPT0gZXhwZWN0ZWRTdWIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgICAgICBwcmludGY6IFsnc3ViIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIGV4cGVjdGVkU3ViLCBhY3R1YWxTdWJdLFxuICAgICAgICAgICAgand0OiB0b2tlbnNldC5pZF90b2tlbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b2tlbnNldDtcbiAgfVxuXG4gIGFzeW5jIHJlcXVlc3RSZXNvdXJjZShcbiAgICByZXNvdXJjZVVybCxcbiAgICBhY2Nlc3NUb2tlbixcbiAgICB7XG4gICAgICBtZXRob2QsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keSxcbiAgICAgIERQb1AsXG4gICAgICB0b2tlblR5cGUgPSBEUG9QXG4gICAgICAgID8gJ0RQb1AnXG4gICAgICAgIDogYWNjZXNzVG9rZW4gaW5zdGFuY2VvZiBUb2tlblNldFxuICAgICAgICA/IGFjY2Vzc1Rva2VuLnRva2VuX3R5cGVcbiAgICAgICAgOiAnQmVhcmVyJyxcbiAgICB9ID0ge30sXG4gICAgcmV0cnksXG4gICkge1xuICAgIGlmIChhY2Nlc3NUb2tlbiBpbnN0YW5jZW9mIFRva2VuU2V0KSB7XG4gICAgICBpZiAoIWFjY2Vzc1Rva2VuLmFjY2Vzc190b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhY2Nlc3NfdG9rZW4gbm90IHByZXNlbnQgaW4gVG9rZW5TZXQnKTtcbiAgICAgIH1cbiAgICAgIGFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4uYWNjZXNzX3Rva2VuO1xuICAgIH1cblxuICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vIGFjY2VzcyB0b2tlbiBwcm92aWRlZCcpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjY2Vzc1Rva2VuICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBhY2Nlc3MgdG9rZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0cyA9IHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYXV0aG9yaXphdGlvbkhlYWRlclZhbHVlKGFjY2Vzc1Rva2VuLCB0b2tlblR5cGUpLFxuICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgfSxcbiAgICAgIGJvZHksXG4gICAgfTtcblxuICAgIGNvbnN0IG1UTFMgPSAhIXRoaXMudGxzX2NsaWVudF9jZXJ0aWZpY2F0ZV9ib3VuZF9hY2Nlc3NfdG9rZW5zO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAge1xuICAgICAgICAuLi5yZXF1ZXN0T3B0cyxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYnVmZmVyJyxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmw6IHJlc291cmNlVXJsLFxuICAgICAgfSxcbiAgICAgIHsgYWNjZXNzVG9rZW4sIG1UTFMsIERQb1AgfSxcbiAgICApO1xuXG4gICAgY29uc3Qgd3d3QXV0aGVudGljYXRlID0gcmVzcG9uc2UuaGVhZGVyc1snd3d3LWF1dGhlbnRpY2F0ZSddO1xuICAgIGlmIChcbiAgICAgIHJldHJ5ICE9PSByZXRyeUF0dGVtcHQgJiZcbiAgICAgIHd3d0F1dGhlbnRpY2F0ZSAmJlxuICAgICAgd3d3QXV0aGVudGljYXRlLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnZHBvcCAnKSAmJlxuICAgICAgcGFyc2VXd3dBdXRoZW50aWNhdGUod3d3QXV0aGVudGljYXRlKS5lcnJvciA9PT0gJ3VzZV9kcG9wX25vbmNlJ1xuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFJlc291cmNlKHJlc291cmNlVXJsLCBhY2Nlc3NUb2tlbiwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHksXG4gICAgICAgIERQb1AsXG4gICAgICAgIHRva2VuVHlwZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIGFzeW5jIHVzZXJpbmZvKGFjY2Vzc1Rva2VuLCB7IG1ldGhvZCA9ICdHRVQnLCB2aWEgPSAnaGVhZGVyJywgdG9rZW5UeXBlLCBwYXJhbXMsIERQb1AgfSA9IHt9KSB7XG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLmlzc3VlciwgJ3VzZXJpbmZvX2VuZHBvaW50Jyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHRva2VuVHlwZSxcbiAgICAgIG1ldGhvZDogU3RyaW5nKG1ldGhvZCkudG9VcHBlckNhc2UoKSxcbiAgICAgIERQb1AsXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLm1ldGhvZCAhPT0gJ0dFVCcgJiYgb3B0aW9ucy5tZXRob2QgIT09ICdQT1NUJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignI3VzZXJpbmZvKCkgbWV0aG9kIGNhbiBvbmx5IGJlIFBPU1Qgb3IgYSBHRVQnKTtcbiAgICB9XG5cbiAgICBpZiAodmlhID09PSAnYm9keScgJiYgb3B0aW9ucy5tZXRob2QgIT09ICdQT1NUJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FuIG9ubHkgc2VuZCBib2R5IG9uIFBPU1QnKTtcbiAgICB9XG5cbiAgICBjb25zdCBqd3QgPSAhISh0aGlzLnVzZXJpbmZvX3NpZ25lZF9yZXNwb25zZV9hbGcgfHwgdGhpcy51c2VyaW5mb19lbmNyeXB0ZWRfcmVzcG9uc2VfYWxnKTtcblxuICAgIGlmIChqd3QpIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHsgQWNjZXB0OiAnYXBwbGljYXRpb24vand0JyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMgPSB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gICAgfVxuICAgIGNvbnN0IG1UTFMgPSAhIXRoaXMudGxzX2NsaWVudF9jZXJ0aWZpY2F0ZV9ib3VuZF9hY2Nlc3NfdG9rZW5zO1xuXG4gICAgbGV0IHRhcmdldFVybDtcbiAgICBpZiAobVRMUyAmJiB0aGlzLmlzc3Vlci5tdGxzX2VuZHBvaW50X2FsaWFzZXMpIHtcbiAgICAgIHRhcmdldFVybCA9IHRoaXMuaXNzdWVyLm10bHNfZW5kcG9pbnRfYWxpYXNlcy51c2VyaW5mb19lbmRwb2ludDtcbiAgICB9XG5cbiAgICB0YXJnZXRVcmwgPSBuZXcgdXJsLlVSTCh0YXJnZXRVcmwgfHwgdGhpcy5pc3N1ZXIudXNlcmluZm9fZW5kcG9pbnQpO1xuXG4gICAgaWYgKHZpYSA9PT0gJ2JvZHknKSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgIG9wdGlvbnMuYm9keSA9IG5ldyB1cmwuVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICBvcHRpb25zLmJvZHkuYXBwZW5kKFxuICAgICAgICAnYWNjZXNzX3Rva2VuJyxcbiAgICAgICAgYWNjZXNzVG9rZW4gaW5zdGFuY2VvZiBUb2tlblNldCA/IGFjY2Vzc1Rva2VuLmFjY2Vzc190b2tlbiA6IGFjY2Vzc1Rva2VuLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgYWRkaXRpb25hbCBwYXJhbWV0ZXJzLCBHRVQgdmlhIHF1ZXJ5c3RyaW5nLCBQT1NUIHZpYSB1cmxlbmNvZGVkIGJvZHlcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBpZiAob3B0aW9ucy5tZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgdGFyZ2V0VXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmJvZHkpIHtcbiAgICAgICAgLy8gUE9TVCAmJiB2aWEgYm9keVxuICAgICAgICBPYmplY3QuZW50cmllcyhwYXJhbXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIG9wdGlvbnMuYm9keS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUE9TVCAmJiB2aWEgaGVhZGVyXG4gICAgICAgIG9wdGlvbnMuYm9keSA9IG5ldyB1cmwuVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBvcHRpb25zLmJvZHkuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ib2R5KSB7XG4gICAgICBvcHRpb25zLmJvZHkgPSBvcHRpb25zLmJvZHkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucmVxdWVzdFJlc291cmNlKHRhcmdldFVybCwgYWNjZXNzVG9rZW4sIG9wdGlvbnMpO1xuXG4gICAgbGV0IHBhcnNlZCA9IHByb2Nlc3NSZXNwb25zZShyZXNwb25zZSwgeyBiZWFyZXI6IHRydWUgfSk7XG5cbiAgICBpZiAoand0KSB7XG4gICAgICBpZiAoIS9eYXBwbGljYXRpb25cXC9qd3QvLnRlc3QocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC10eXBlJ10pKSB7XG4gICAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnZXhwZWN0ZWQgYXBwbGljYXRpb24vand0IHJlc3BvbnNlIGZyb20gdGhlIHVzZXJpbmZvX2VuZHBvaW50JyxcbiAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJvZHkgPSByZXNwb25zZS5ib2R5LnRvU3RyaW5nKCk7XG4gICAgICBjb25zdCB1c2VyaW5mbyA9IGF3YWl0IHRoaXMuZGVjcnlwdEpXVFVzZXJpbmZvKGJvZHkpO1xuICAgICAgaWYgKCF0aGlzLnVzZXJpbmZvX3NpZ25lZF9yZXNwb25zZV9hbGcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKHVzZXJpbmZvKTtcbiAgICAgICAgICBhc3NlcnQoaXNQbGFpbk9iamVjdChwYXJzZWQpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2ZhaWxlZCB0byBwYXJzZSB1c2VyaW5mbyBKV0UgcGF5bG9hZCBhcyBKU09OJyxcbiAgICAgICAgICAgIGp3dDogdXNlcmluZm8sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh7IHBheWxvYWQ6IHBhcnNlZCB9ID0gYXdhaXQgdGhpcy52YWxpZGF0ZUpXVFVzZXJpbmZvKHVzZXJpbmZvKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZCA9IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ3Jlc3BvbnNlJywgeyB2YWx1ZTogcmVzcG9uc2UgfSk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWNjZXNzVG9rZW4gaW5zdGFuY2VvZiBUb2tlblNldCAmJiBhY2Nlc3NUb2tlbi5pZF90b2tlbikge1xuICAgICAgY29uc3QgZXhwZWN0ZWRTdWIgPSBhY2Nlc3NUb2tlbi5jbGFpbXMoKS5zdWI7XG4gICAgICBpZiAocGFyc2VkLnN1YiAhPT0gZXhwZWN0ZWRTdWIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIHByaW50ZjogWyd1c2VyaW5mbyBzdWIgbWlzbWF0Y2gsIGV4cGVjdGVkICVzLCBnb3Q6ICVzJywgZXhwZWN0ZWRTdWIsIHBhcnNlZC5zdWJdLFxuICAgICAgICAgIGJvZHk6IHBhcnNlZCxcbiAgICAgICAgICBqd3Q6IGFjY2Vzc1Rva2VuLmlkX3Rva2VuLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG5cbiAgZW5jcnlwdGlvblNlY3JldChsZW4pIHtcbiAgICBjb25zdCBoYXNoID0gbGVuIDw9IDI1NiA/ICdzaGEyNTYnIDogbGVuIDw9IDM4NCA/ICdzaGEzODQnIDogbGVuIDw9IDUxMiA/ICdzaGE1MTInIDogZmFsc2U7XG4gICAgaWYgKCFoYXNoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIHN5bW1ldHJpYyBlbmNyeXB0aW9uIGtleSBkZXJpdmF0aW9uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyeXB0b1xuICAgICAgLmNyZWF0ZUhhc2goaGFzaClcbiAgICAgIC51cGRhdGUodGhpcy5jbGllbnRfc2VjcmV0KVxuICAgICAgLmRpZ2VzdCgpXG4gICAgICAuc2xpY2UoMCwgbGVuIC8gOCk7XG4gIH1cblxuICBzZWNyZXRGb3JBbGcoYWxnKSB7XG4gICAgaWYgKCF0aGlzLmNsaWVudF9zZWNyZXQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NsaWVudF9zZWNyZXQgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoL15BKFxcZHszfSkoPzpHQ00pP0tXJC8udGVzdChhbGcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmNyeXB0aW9uU2VjcmV0KHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApKTtcbiAgICB9XG5cbiAgICBpZiAoL15BKFxcZHszfSkoPzpHQ018Q0JDLUhTKFxcZHszfSkpJC8udGVzdChhbGcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmNyeXB0aW9uU2VjcmV0KHBhcnNlSW50KFJlZ0V4cC4kMiB8fCBSZWdFeHAuJDEsIDEwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0aGlzLmNsaWVudF9zZWNyZXQpO1xuICB9XG5cbiAgYXN5bmMgZ3JhbnQoYm9keSwgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkLCBEUG9QIH0gPSB7fSwgcmV0cnkpIHtcbiAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAndG9rZW5fZW5kcG9pbnQnKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGhlbnRpY2F0ZWRQb3N0LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3Rva2VuJyxcbiAgICAgIHtcbiAgICAgICAgZm9ybTogYm9keSxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICB9LFxuICAgICAgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkLCBEUG9QIH0sXG4gICAgKTtcbiAgICBsZXQgcmVzcG9uc2VCb2R5O1xuICAgIHRyeSB7XG4gICAgICByZXNwb25zZUJvZHkgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHJldHJ5ICE9PSByZXRyeUF0dGVtcHQgJiYgZXJyIGluc3RhbmNlb2YgT1BFcnJvciAmJiBlcnIuZXJyb3IgPT09ICd1c2VfZHBvcF9ub25jZScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhbnQoYm9keSwgeyBjbGllbnRBc3NlcnRpb25QYXlsb2FkLCBEUG9QIH0sIHJldHJ5QXR0ZW1wdCk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUb2tlblNldChyZXNwb25zZUJvZHkpO1xuICB9XG5cbiAgYXN5bmMgZGV2aWNlQXV0aG9yaXphdGlvbihwYXJhbXMgPSB7fSwgeyBleGNoYW5nZUJvZHksIGNsaWVudEFzc2VydGlvblBheWxvYWQsIERQb1AgfSA9IHt9KSB7XG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLmlzc3VlciwgJ2RldmljZV9hdXRob3JpemF0aW9uX2VuZHBvaW50Jyk7XG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLmlzc3VlciwgJ3Rva2VuX2VuZHBvaW50Jyk7XG5cbiAgICBjb25zdCBib2R5ID0gYXV0aG9yaXphdGlvblBhcmFtcy5jYWxsKHRoaXMsIHtcbiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRfaWQsXG4gICAgICByZWRpcmVjdF91cmk6IG51bGwsXG4gICAgICByZXNwb25zZV90eXBlOiBudWxsLFxuICAgICAgLi4ucGFyYW1zLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoZW50aWNhdGVkUG9zdC5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdkZXZpY2VfYXV0aG9yaXphdGlvbicsXG4gICAgICB7XG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgICAgICBmb3JtOiBib2R5LFxuICAgICAgfSxcbiAgICAgIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCwgZW5kcG9pbnRBdXRoTWV0aG9kOiAndG9rZW4nIH0sXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgcmV0dXJuIG5ldyBEZXZpY2VGbG93SGFuZGxlKHtcbiAgICAgIGNsaWVudDogdGhpcyxcbiAgICAgIGV4Y2hhbmdlQm9keSxcbiAgICAgIGNsaWVudEFzc2VydGlvblBheWxvYWQsXG4gICAgICByZXNwb25zZTogcmVzcG9uc2VCb2R5LFxuICAgICAgbWF4QWdlOiBwYXJhbXMubWF4X2FnZSxcbiAgICAgIERQb1AsXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyByZXZva2UodG9rZW4sIGhpbnQsIHsgcmV2b2tlQm9keSwgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCB9ID0ge30pIHtcbiAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAncmV2b2NhdGlvbl9lbmRwb2ludCcpO1xuICAgIGlmIChoaW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGhpbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoaW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtID0geyAuLi5yZXZva2VCb2R5LCB0b2tlbiB9O1xuXG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGZvcm0udG9rZW5fdHlwZV9oaW50ID0gaGludDtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGhlbnRpY2F0ZWRQb3N0LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3Jldm9jYXRpb24nLFxuICAgICAge1xuICAgICAgICBmb3JtLFxuICAgICAgfSxcbiAgICAgIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCB9LFxuICAgICk7XG4gICAgcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCB7IGJvZHk6IGZhbHNlIH0pO1xuICB9XG5cbiAgYXN5bmMgaW50cm9zcGVjdCh0b2tlbiwgaGludCwgeyBpbnRyb3NwZWN0Qm9keSwgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCB9ID0ge30pIHtcbiAgICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKHRoaXMuaXNzdWVyLCAnaW50cm9zcGVjdGlvbl9lbmRwb2ludCcpO1xuICAgIGlmIChoaW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGhpbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoaW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtID0geyAuLi5pbnRyb3NwZWN0Qm9keSwgdG9rZW4gfTtcbiAgICBpZiAoaGludCkge1xuICAgICAgZm9ybS50b2tlbl90eXBlX2hpbnQgPSBoaW50O1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aGVudGljYXRlZFBvc3QuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnaW50cm9zcGVjdGlvbicsXG4gICAgICB7IGZvcm0sIHJlc3BvbnNlVHlwZTogJ2pzb24nIH0sXG4gICAgICB7IGNsaWVudEFzc2VydGlvblBheWxvYWQgfSxcbiAgICApO1xuXG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcblxuICAgIHJldHVybiByZXNwb25zZUJvZHk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcmVnaXN0ZXIobWV0YWRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgaW5pdGlhbEFjY2Vzc1Rva2VuLCBqd2tzLCAuLi5jbGllbnRPcHRpb25zIH0gPSBvcHRpb25zO1xuXG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLmlzc3VlciwgJ3JlZ2lzdHJhdGlvbl9lbmRwb2ludCcpO1xuXG4gICAgaWYgKGp3a3MgIT09IHVuZGVmaW5lZCAmJiAhKG1ldGFkYXRhLmp3a3MgfHwgbWV0YWRhdGEuandrc191cmkpKSB7XG4gICAgICBjb25zdCBrZXlzdG9yZSA9IGF3YWl0IGdldEtleXN0b3JlLmNhbGwodGhpcywgandrcyk7XG4gICAgICBtZXRhZGF0YS5qd2tzID0ga2V5c3RvcmUudG9KV0tTKCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LmNhbGwodGhpcywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgLi4uKGluaXRpYWxBY2Nlc3NUb2tlblxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBhdXRob3JpemF0aW9uSGVhZGVyVmFsdWUoaW5pdGlhbEFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICBqc29uOiBtZXRhZGF0YSxcbiAgICAgIHVybDogdGhpcy5pc3N1ZXIucmVnaXN0cmF0aW9uX2VuZHBvaW50LFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCB7IHN0YXR1c0NvZGU6IDIwMSwgYmVhcmVyOiB0cnVlIH0pO1xuXG4gICAgcmV0dXJuIG5ldyB0aGlzKHJlc3BvbnNlQm9keSwgandrcywgY2xpZW50T3B0aW9ucyk7XG4gIH1cblxuICBnZXQgbWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIGNsb25lKE9iamVjdC5mcm9tRW50cmllcyh0aGlzLiNtZXRhZGF0YS5lbnRyaWVzKCkpKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tVXJpKHJlZ2lzdHJhdGlvbkNsaWVudFVyaSwgcmVnaXN0cmF0aW9uQWNjZXNzVG9rZW4sIGp3a3MsIGNsaWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QuY2FsbCh0aGlzLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiByZWdpc3RyYXRpb25DbGllbnRVcmksXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYXV0aG9yaXphdGlvbkhlYWRlclZhbHVlKHJlZ2lzdHJhdGlvbkFjY2Vzc1Rva2VuKSxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IHByb2Nlc3NSZXNwb25zZShyZXNwb25zZSwgeyBiZWFyZXI6IHRydWUgfSk7XG5cbiAgICByZXR1cm4gbmV3IHRoaXMocmVzcG9uc2VCb2R5LCBqd2tzLCBjbGllbnRPcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIHJlcXVlc3RPYmplY3QoXG4gICAgcmVxdWVzdE9iamVjdCA9IHt9LFxuICAgIHtcbiAgICAgIHNpZ246IHNpZ25pbmdBbGdvcml0aG0gPSB0aGlzLnJlcXVlc3Rfb2JqZWN0X3NpZ25pbmdfYWxnIHx8ICdub25lJyxcbiAgICAgIGVuY3J5cHQ6IHtcbiAgICAgICAgYWxnOiBlS2V5TWFuYWdlbWVudCA9IHRoaXMucmVxdWVzdF9vYmplY3RfZW5jcnlwdGlvbl9hbGcsXG4gICAgICAgIGVuYzogZUNvbnRlbnRFbmNyeXB0aW9uID0gdGhpcy5yZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2VuYyB8fCAnQTEyOENCQy1IUzI1NicsXG4gICAgICB9ID0ge30sXG4gICAgfSA9IHt9LFxuICApIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QocmVxdWVzdE9iamVjdCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcXVlc3RPYmplY3QgbXVzdCBiZSBhIHBsYWluIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGxldCBzaWduZWQ7XG4gICAgbGV0IGtleTtcbiAgICBjb25zdCB1bml4ID0gbm93KCk7XG4gICAgY29uc3QgaGVhZGVyID0geyBhbGc6IHNpZ25pbmdBbGdvcml0aG0sIHR5cDogJ29hdXRoLWF1dGh6LXJlcStqd3QnIH07XG4gICAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgZGVmYXVsdHMoe30sIHJlcXVlc3RPYmplY3QsIHtcbiAgICAgICAgaXNzOiB0aGlzLmNsaWVudF9pZCxcbiAgICAgICAgYXVkOiB0aGlzLmlzc3Vlci5pc3N1ZXIsXG4gICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRfaWQsXG4gICAgICAgIGp0aTogcmFuZG9tKCksXG4gICAgICAgIGlhdDogdW5peCxcbiAgICAgICAgZXhwOiB1bml4ICsgMzAwLFxuICAgICAgICAuLi4odGhpcy5mYXBpKCkgPyB7IG5iZjogdW5peCB9IDogdW5kZWZpbmVkKSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgaWYgKHNpZ25pbmdBbGdvcml0aG0gPT09ICdub25lJykge1xuICAgICAgc2lnbmVkID0gW2Jhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoaGVhZGVyKSksIGJhc2U2NHVybC5lbmNvZGUocGF5bG9hZCksICcnXS5qb2luKCcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN5bW1ldHJpYyA9IHNpZ25pbmdBbGdvcml0aG0uc3RhcnRzV2l0aCgnSFMnKTtcbiAgICAgIGlmIChzeW1tZXRyaWMpIHtcbiAgICAgICAga2V5ID0gdGhpcy5zZWNyZXRGb3JBbGcoc2lnbmluZ0FsZ29yaXRobSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBrZXlzdG9yZSA9IGF3YWl0IGtleXN0b3Jlcy5nZXQodGhpcyk7XG5cbiAgICAgICAgaWYgKCFrZXlzdG9yZSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICBgbm8ga2V5c3RvcmUgcHJlc2VudCBmb3IgY2xpZW50LCBjYW5ub3Qgc2lnbiB1c2luZyBhbGcgJHtzaWduaW5nQWxnb3JpdGhtfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBrZXlzdG9yZS5nZXQoeyBhbGc6IHNpZ25pbmdBbGdvcml0aG0sIHVzZTogJ3NpZycgfSk7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgbm8ga2V5IHRvIHNpZ24gd2l0aCBmb3VuZCBmb3IgYWxnICR7c2lnbmluZ0FsZ29yaXRobX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzaWduZWQgPSBhd2FpdCBuZXcgam9zZS5Db21wYWN0U2lnbihuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocGF5bG9hZCkpXG4gICAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoe1xuICAgICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgICBraWQ6IHN5bW1ldHJpYyA/IHVuZGVmaW5lZCA6IGtleS5qd2sua2lkLFxuICAgICAgICB9KVxuICAgICAgICAuc2lnbihzeW1tZXRyaWMgPyBrZXkgOiBrZXkua2V5T2JqZWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIWVLZXlNYW5hZ2VtZW50KSB7XG4gICAgICByZXR1cm4gc2lnbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGZpZWxkcyA9IHsgYWxnOiBlS2V5TWFuYWdlbWVudCwgZW5jOiBlQ29udGVudEVuY3J5cHRpb24sIGN0eTogJ29hdXRoLWF1dGh6LXJlcStqd3QnIH07XG5cbiAgICBpZiAoZmllbGRzLmFsZy5tYXRjaCgvXihSU0F8RUNESCkvKSkge1xuICAgICAgW2tleV0gPSBhd2FpdCBxdWVyeUtleVN0b3JlLmNhbGwoXG4gICAgICAgIHRoaXMuaXNzdWVyLFxuICAgICAgICB7IGFsZzogZmllbGRzLmFsZywgdXNlOiAnZW5jJyB9LFxuICAgICAgICB7IGFsbG93TXVsdGk6IHRydWUgfSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IHRoaXMuc2VjcmV0Rm9yQWxnKGZpZWxkcy5hbGcgPT09ICdkaXInID8gZmllbGRzLmVuYyA6IGZpZWxkcy5hbGcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgam9zZS5Db21wYWN0RW5jcnlwdChuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc2lnbmVkKSlcbiAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoe1xuICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgIGtpZDoga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IHVuZGVmaW5lZCA6IGtleS5qd2sua2lkLFxuICAgICAgfSlcbiAgICAgIC5lbmNyeXB0KGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBrZXkgOiBrZXkua2V5T2JqZWN0KTtcbiAgfVxuXG4gIGFzeW5jIHB1c2hlZEF1dGhvcml6YXRpb25SZXF1ZXN0KHBhcmFtcyA9IHt9LCB7IGNsaWVudEFzc2VydGlvblBheWxvYWQgfSA9IHt9KSB7XG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLmlzc3VlciwgJ3B1c2hlZF9hdXRob3JpemF0aW9uX3JlcXVlc3RfZW5kcG9pbnQnKTtcblxuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAuLi4oJ3JlcXVlc3QnIGluIHBhcmFtcyA/IHBhcmFtcyA6IGF1dGhvcml6YXRpb25QYXJhbXMuY2FsbCh0aGlzLCBwYXJhbXMpKSxcbiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRfaWQsXG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aGVudGljYXRlZFBvc3QuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncHVzaGVkX2F1dGhvcml6YXRpb25fcmVxdWVzdCcsXG4gICAgICB7XG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgICAgICBmb3JtOiBib2R5LFxuICAgICAgfSxcbiAgICAgIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCwgZW5kcG9pbnRBdXRoTWV0aG9kOiAndG9rZW4nIH0sXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UsIHsgc3RhdHVzQ29kZTogMjAxIH0pO1xuXG4gICAgaWYgKCEoJ2V4cGlyZXNfaW4nIGluIHJlc3BvbnNlQm9keSkpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogJ2V4cGVjdGVkIGV4cGlyZXNfaW4gaW4gUHVzaGVkIEF1dGhvcml6YXRpb24gU3VjY2Vzc2Z1bCBSZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VCb2R5LmV4cGlyZXNfaW4gIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkIGV4cGlyZXNfaW4gdmFsdWUgaW4gUHVzaGVkIEF1dGhvcml6YXRpb24gU3VjY2Vzc2Z1bCBSZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghKCdyZXF1ZXN0X3VyaScgaW4gcmVzcG9uc2VCb2R5KSkge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiAnZXhwZWN0ZWQgcmVxdWVzdF91cmkgaW4gUHVzaGVkIEF1dGhvcml6YXRpb24gU3VjY2Vzc2Z1bCBSZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VCb2R5LnJlcXVlc3RfdXJpICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiAnaW52YWxpZCByZXF1ZXN0X3VyaSB2YWx1ZSBpbiBQdXNoZWQgQXV0aG9yaXphdGlvbiBTdWNjZXNzZnVsIFJlc3BvbnNlJyxcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VCb2R5O1xuICB9XG5cbiAgZ2V0IGlzc3VlcigpIHtcbiAgICByZXR1cm4gdGhpcy4jaXNzdWVyO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgW2luc3BlY3QuY3VzdG9tXSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSAke2luc3BlY3QodGhpcy5tZXRhZGF0YSwge1xuICAgICAgZGVwdGg6IEluZmluaXR5LFxuICAgICAgY29sb3JzOiBwcm9jZXNzLnN0ZG91dC5pc1RUWSxcbiAgICAgIGNvbXBhY3Q6IGZhbHNlLFxuICAgICAgc29ydGVkOiB0cnVlLFxuICAgIH0pfWA7XG4gIH1cblxuICBmYXBpKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdGQVBJMUNsaWVudCc7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZUpBUk0ocmVzcG9uc2UpIHtcbiAgICBjb25zdCBleHBlY3RlZEFsZyA9IHRoaXMuYXV0aG9yaXphdGlvbl9zaWduZWRfcmVzcG9uc2VfYWxnO1xuICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gYXdhaXQgdGhpcy52YWxpZGF0ZUpXVChyZXNwb25zZSwgZXhwZWN0ZWRBbGcsIFsnaXNzJywgJ2V4cCcsICdhdWQnXSk7XG4gICAgcmV0dXJuIHBpY2tDYihwYXlsb2FkKTtcbiAgfVxufVxuXG5jb25zdCBSU1BTID0gL14oPzpSU3xQUykoPzoyNTZ8Mzg0fDUxMikkLztcbmZ1bmN0aW9uIGRldGVybWluZVJzYUFsZ29yaXRobShwcml2YXRlS2V5LCBwcml2YXRlS2V5SW5wdXQsIHZhbHVlc1N1cHBvcnRlZCkge1xuICBpZiAoXG4gICAgdHlwZW9mIHByaXZhdGVLZXlJbnB1dCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgcHJpdmF0ZUtleUlucHV0LmtleSA9PT0gJ29iamVjdCcgJiZcbiAgICBwcml2YXRlS2V5SW5wdXQua2V5LmFsZ1xuICApIHtcbiAgICByZXR1cm4gcHJpdmF0ZUtleUlucHV0LmtleS5hbGc7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXNTdXBwb3J0ZWQpKSB7XG4gICAgbGV0IGNhbmRpZGF0ZXMgPSB2YWx1ZXNTdXBwb3J0ZWQuZmlsdGVyKFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKFJTUFMpKTtcbiAgICBpZiAocHJpdmF0ZUtleS5hc3ltbWV0cmljS2V5VHlwZSA9PT0gJ3JzYS1wc3MnKSB7XG4gICAgICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZS5zdGFydHNXaXRoKCdQUycpKTtcbiAgICB9XG4gICAgcmV0dXJuIFsnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLCAnUlMyNTYnLCAnUlMzODQnLCAnUlMzODQnXS5maW5kKChwcmVmZXJyZWQpID0+XG4gICAgICBjYW5kaWRhdGVzLmluY2x1ZGVzKHByZWZlcnJlZCksXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAnUFMyNTYnO1xufVxuXG5jb25zdCBwMjU2ID0gQnVmZmVyLmZyb20oWzQyLCAxMzQsIDcyLCAyMDYsIDYxLCAzLCAxLCA3XSk7XG5jb25zdCBwMzg0ID0gQnVmZmVyLmZyb20oWzQzLCAxMjksIDQsIDAsIDM0XSk7XG5jb25zdCBwNTIxID0gQnVmZmVyLmZyb20oWzQzLCAxMjksIDQsIDAsIDM1XSk7XG5jb25zdCBzZWNwMjU2azEgPSBCdWZmZXIuZnJvbShbNDMsIDEyOSwgNCwgMCwgMTBdKTtcblxuZnVuY3Rpb24gZGV0ZXJtaW5lRWNBbGdvcml0aG0ocHJpdmF0ZUtleSwgcHJpdmF0ZUtleUlucHV0KSB7XG4gIC8vIElmIGlucHV0IHdhcyBhIEpXS1xuICBzd2l0Y2ggKFxuICAgIHR5cGVvZiBwcml2YXRlS2V5SW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHByaXZhdGVLZXlJbnB1dC5rZXkgPT09ICdvYmplY3QnICYmXG4gICAgcHJpdmF0ZUtleUlucHV0LmtleS5jcnZcbiAgKSB7XG4gICAgY2FzZSAnUC0yNTYnOlxuICAgICAgcmV0dXJuICdFUzI1Nic7XG4gICAgY2FzZSAnc2VjcDI1NmsxJzpcbiAgICAgIHJldHVybiAnRVMyNTZLJztcbiAgICBjYXNlICdQLTM4NCc6XG4gICAgICByZXR1cm4gJ0VTMzg0JztcbiAgICBjYXNlICdQLTUxMic6XG4gICAgICByZXR1cm4gJ0VTNTEyJztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBjb25zdCBidWYgPSBwcml2YXRlS2V5LmV4cG9ydCh7IGZvcm1hdDogJ2RlcicsIHR5cGU6ICdwa2NzOCcgfSk7XG4gIGNvbnN0IGkgPSBidWZbMV0gPCAxMjggPyAxNyA6IDE4O1xuICBjb25zdCBsZW4gPSBidWZbaV07XG4gIGNvbnN0IGN1cnZlT2lkID0gYnVmLnNsaWNlKGkgKyAxLCBpICsgMSArIGxlbik7XG4gIGlmIChjdXJ2ZU9pZC5lcXVhbHMocDI1NikpIHtcbiAgICByZXR1cm4gJ0VTMjU2JztcbiAgfVxuXG4gIGlmIChjdXJ2ZU9pZC5lcXVhbHMocDM4NCkpIHtcbiAgICByZXR1cm4gJ0VTMzg0JztcbiAgfVxuICBpZiAoY3VydmVPaWQuZXF1YWxzKHA1MjEpKSB7XG4gICAgcmV0dXJuICdFUzUxMic7XG4gIH1cblxuICBpZiAoY3VydmVPaWQuZXF1YWxzKHNlY3AyNTZrMSkpIHtcbiAgICByZXR1cm4gJ0VTMjU2Syc7XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCBEUG9QIHByaXZhdGUga2V5IGN1cnZlJyk7XG59XG5cbmNvbnN0IGp3a0NhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmFzeW5jIGZ1bmN0aW9uIGdldEp3ayhwcml2YXRlS2V5LCBwcml2YXRlS2V5SW5wdXQpIHtcbiAgaWYgKFxuICAgIHR5cGVvZiBwcml2YXRlS2V5SW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHByaXZhdGVLZXlJbnB1dC5rZXkgPT09ICdvYmplY3QnICYmXG4gICAgcHJpdmF0ZUtleUlucHV0LmtleS5jcnZcbiAgKSB7XG4gICAgcmV0dXJuIHBpY2socHJpdmF0ZUtleUlucHV0LmtleSwgJ2t0eScsICdjcnYnLCAneCcsICd5JywgJ2UnLCAnbicpO1xuICB9XG5cbiAgaWYgKGp3a0NhY2hlLmhhcyhwcml2YXRlS2V5SW5wdXQpKSB7XG4gICAgcmV0dXJuIGp3a0NhY2hlLmdldChwcml2YXRlS2V5SW5wdXQpO1xuICB9XG5cbiAgY29uc3QgandrID0gcGljayhhd2FpdCBqb3NlLmV4cG9ydEpXSyhwcml2YXRlS2V5KSwgJ2t0eScsICdjcnYnLCAneCcsICd5JywgJ2UnLCAnbicpO1xuXG4gIGlmIChpc0tleU9iamVjdChwcml2YXRlS2V5SW5wdXQpKSB7XG4gICAgandrQ2FjaGUuc2V0KHByaXZhdGVLZXlJbnB1dCwgandrKTtcbiAgfVxuXG4gIHJldHVybiBqd2s7XG59XG5cbi8qKlxuICogQG5hbWUgZHBvcFByb29mXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZHBvcFByb29mKHBheWxvYWQsIHByaXZhdGVLZXlJbnB1dCwgYWNjZXNzVG9rZW4pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHBheWxvYWQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF5bG9hZCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0Jyk7XG4gIH1cblxuICBsZXQgcHJpdmF0ZUtleTtcbiAgaWYgKGlzS2V5T2JqZWN0KHByaXZhdGVLZXlJbnB1dCkpIHtcbiAgICBwcml2YXRlS2V5ID0gcHJpdmF0ZUtleUlucHV0O1xuICB9IGVsc2Uge1xuICAgIHByaXZhdGVLZXkgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleShwcml2YXRlS2V5SW5wdXQpO1xuICB9XG5cbiAgaWYgKHByaXZhdGVLZXkudHlwZSAhPT0gJ3ByaXZhdGUnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJEUG9QXCIgb3B0aW9uIG11c3QgYmUgYSBwcml2YXRlIGtleScpO1xuICB9XG4gIGxldCBhbGc7XG4gIHN3aXRjaCAocHJpdmF0ZUtleS5hc3ltbWV0cmljS2V5VHlwZSkge1xuICAgIGNhc2UgJ2VkMjU1MTknOlxuICAgIGNhc2UgJ2VkNDQ4JzpcbiAgICAgIGFsZyA9ICdFZERTQSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlYyc6XG4gICAgICBhbGcgPSBkZXRlcm1pbmVFY0FsZ29yaXRobShwcml2YXRlS2V5LCBwcml2YXRlS2V5SW5wdXQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncnNhJzpcbiAgICBjYXNlIHJzYVBzc1BhcmFtcyAmJiAncnNhLXBzcyc6XG4gICAgICBhbGcgPSBkZXRlcm1pbmVSc2FBbGdvcml0aG0oXG4gICAgICAgIHByaXZhdGVLZXksXG4gICAgICAgIHByaXZhdGVLZXlJbnB1dCxcbiAgICAgICAgdGhpcy5pc3N1ZXIuZHBvcF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCBEUG9QIHByaXZhdGUga2V5IGFzeW1tZXRyaWMga2V5IHR5cGUnKTtcbiAgfVxuXG4gIGlmICghYWxnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY291bGQgbm90IGRldGVybWluZSBEUG9QIEpXUyBBbGdvcml0aG0nKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgam9zZS5TaWduSldUKHtcbiAgICBhdGg6IGFjY2Vzc1Rva2VuXG4gICAgICA/IGJhc2U2NHVybC5lbmNvZGUoY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShhY2Nlc3NUb2tlbikuZGlnZXN0KCkpXG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICAuLi5wYXlsb2FkLFxuICB9KVxuICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoe1xuICAgICAgYWxnLFxuICAgICAgdHlwOiAnZHBvcCtqd3QnLFxuICAgICAgandrOiBhd2FpdCBnZXRKd2socHJpdmF0ZUtleSwgcHJpdmF0ZUtleUlucHV0KSxcbiAgICB9KVxuICAgIC5zZXRJc3N1ZWRBdCgpXG4gICAgLnNldEp0aShyYW5kb20oKSlcbiAgICAuc2lnbihwcml2YXRlS2V5KTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VDbGllbnQucHJvdG90eXBlLCAnZHBvcFByb29mJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHZhbHVlKC4uLmFyZ3MpIHtcbiAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKFxuICAgICAgJ1RoZSBEUG9QIEFQSXMgaW1wbGVtZW50cyBhbiBJRVRGIGRyYWZ0IChodHRwczovL3d3dy5pZXRmLm9yZy9hcmNoaXZlL2lkL2RyYWZ0LWlldGYtb2F1dGgtZHBvcC0wNC5odG1sKS4gQnJlYWtpbmcgZHJhZnQgaW1wbGVtZW50YXRpb25zIGFyZSBpbmNsdWRlZCBhcyBtaW5vciB2ZXJzaW9ucyBvZiB0aGUgb3BlbmlkLWNsaWVudCBsaWJyYXJ5LCB0aGVyZWZvcmUsIHRoZSB+IHNlbXZlciBvcGVyYXRvciBzaG91bGQgYmUgdXNlZCBhbmQgY2xvc2UgYXR0ZW50aW9uIGJlIHBheWVkIHRvIGxpYnJhcnkgY2hhbmdlbG9nIGFzIHdlbGwgYXMgdGhlIGRyYWZ0cyB0aGVtc2VsdmVzLicsXG4gICAgICAnRHJhZnRXYXJuaW5nJyxcbiAgICApO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlQ2xpZW50LnByb3RvdHlwZSwgJ2Rwb3BQcm9vZicsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogZHBvcFByb29mLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmRwb3BQcm9vZiguLi5hcmdzKTtcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChpc3N1ZXIsIGFhZElzc1ZhbGlkYXRpb24gPSBmYWxzZSkgPT5cbiAgY2xhc3MgQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudCB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgc3VwZXIoaXNzdWVyLCBhYWRJc3NWYWxpZGF0aW9uLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGlzc3VlcigpIHtcbiAgICAgIHJldHVybiBpc3N1ZXI7XG4gICAgfVxuICB9O1xubW9kdWxlLmV4cG9ydHMuQmFzZUNsaWVudCA9IEJhc2VDbGllbnQ7XG4iLCJjb25zdCBMUlUgPSByZXF1aXJlKCdscnUtY2FjaGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgTFJVKHsgbWF4OiAxMDAgfSk7XG4iLCIvLyBDcmVkaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2hlL3B5b2lkYy9ibG9iL21hc3Rlci9zcmMvb2ljL3V0aWxzL3dlYmZpbmdlci5weVxuXG4vLyAtLSBOb3JtYWxpemF0aW9uIC0tXG4vLyBBIHN0cmluZyBvZiBhbnkgb3RoZXIgdHlwZSBpcyBpbnRlcnByZXRlZCBhcyBhIFVSSSBlaXRoZXIgdGhlIGZvcm0gb2Ygc2NoZW1lXG4vLyBcIjovL1wiIGF1dGhvcml0eSBwYXRoLWFiZW1wdHkgWyBcIj9cIiBxdWVyeSBdIFsgXCIjXCIgZnJhZ21lbnQgXSBvciBhdXRob3JpdHlcbi8vIHBhdGgtYWJlbXB0eSBbIFwiP1wiIHF1ZXJ5IF0gWyBcIiNcIiBmcmFnbWVudCBdIHBlciBSRkMgMzk4NiBbUkZDMzk4Nl0gYW5kIGlzXG4vLyBub3JtYWxpemVkIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuLy9cbi8vIElmIHRoZSB1c2VyIGlucHV0IElkZW50aWZpZXIgZG9lcyBub3QgaGF2ZSBhbiBSRkMgMzk4NiBbUkZDMzk4Nl0gc2NoZW1lXG4vLyBwb3J0aW9uLCB0aGUgc3RyaW5nIGlzIGludGVycHJldGVkIGFzIFt1c2VyaW5mbyBcIkBcIl0gaG9zdCBbXCI6XCIgcG9ydF1cbi8vIHBhdGgtYWJlbXB0eSBbIFwiP1wiIHF1ZXJ5IF0gWyBcIiNcIiBmcmFnbWVudCBdIHBlciBSRkMgMzk4NiBbUkZDMzk4Nl0uXG4vLyBJZiB0aGUgdXNlcmluZm8gY29tcG9uZW50IGlzIHByZXNlbnQgYW5kIGFsbCBvZiB0aGUgcGF0aCBjb21wb25lbnQsIHF1ZXJ5XG4vLyBjb21wb25lbnQsIGFuZCBwb3J0IGNvbXBvbmVudCBhcmUgZW1wdHksIHRoZSBhY2N0IHNjaGVtZSBpcyBhc3N1bWVkLiBJbiB0aGlzXG4vLyBjYXNlLCB0aGUgbm9ybWFsaXplZCBVUkkgaXMgZm9ybWVkIGJ5IHByZWZpeGluZyBhY2N0OiB0byB0aGUgc3RyaW5nIGFzIHRoZVxuLy8gc2NoZW1lLiBQZXIgdGhlICdhY2N0JyBVUkkgU2NoZW1lIFtJ4oCRRC5pZXRm4oCRYXBwc2F3Z+KAkWFjY3TigJF1cmldLCBpZiB0aGVyZSBpcyBhblxuLy8gYXQtc2lnbiBjaGFyYWN0ZXIgKCdAJykgaW4gdGhlIHVzZXJpbmZvIGNvbXBvbmVudCwgaXQgbmVlZHMgdG8gYmVcbi8vIHBlcmNlbnQtZW5jb2RlZCBhcyBkZXNjcmliZWQgaW4gUkZDIDM5ODYgW1JGQzM5ODZdLlxuLy8gRm9yIGFsbCBvdGhlciBpbnB1dHMgd2l0aG91dCBhIHNjaGVtZSBwb3J0aW9uLCB0aGUgaHR0cHMgc2NoZW1lIGlzIGFzc3VtZWQsXG4vLyBhbmQgdGhlIG5vcm1hbGl6ZWQgVVJJIGlzIGZvcm1lZCBieSBwcmVmaXhpbmcgaHR0cHM6Ly8gdG8gdGhlIHN0cmluZyBhcyB0aGVcbi8vIHNjaGVtZS5cbi8vIElmIHRoZSByZXN1bHRpbmcgVVJJIGNvbnRhaW5zIGEgZnJhZ21lbnQgcG9ydGlvbiwgaXQgTVVTVCBiZSBzdHJpcHBlZCBvZmZcbi8vIHRvZ2V0aGVyIHdpdGggdGhlIGZyYWdtZW50IGRlbGltaXRlciBjaGFyYWN0ZXIgXCIjXCIuXG4vLyBUaGUgV2ViRmluZ2VyIFtJ4oCRRC5pZXRm4oCRYXBwc2F3Z+KAkXdlYmZpbmdlcl0gUmVzb3VyY2UgaW4gdGhpcyBjYXNlIGlzIHRoZVxuLy8gcmVzdWx0aW5nIFVSSSwgYW5kIHRoZSBXZWJGaW5nZXIgSG9zdCBpcyB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudC5cbi8vXG4vLyBOb3RlOiBTaW5jZSB0aGUgZGVmaW5pdGlvbiBvZiBhdXRob3JpdHkgaW4gUkZDIDM5ODYgW1JGQzM5ODZdIGlzXG4vLyBbIHVzZXJpbmZvIFwiQFwiIF0gaG9zdCBbIFwiOlwiIHBvcnQgXSwgaXQgaXMgbGVnYWwgdG8gaGF2ZSBhIHVzZXIgaW5wdXRcbi8vIGlkZW50aWZpZXIgbGlrZSB1c2VyaW5mb0Bob3N0OnBvcnQsIGUuZy4sIGFsaWNlQGV4YW1wbGUuY29tOjgwODAuXG5cbmNvbnN0IFBPUlQgPSAvXlxcZCskLztcblxuZnVuY3Rpb24gaGFzU2NoZW1lKGlucHV0KSB7XG4gIGlmIChpbnB1dC5pbmNsdWRlcygnOi8vJykpIHJldHVybiB0cnVlO1xuXG4gIGNvbnN0IGF1dGhvcml0eSA9IGlucHV0LnJlcGxhY2UoLyhcXC98XFw/KS9nLCAnIycpLnNwbGl0KCcjJylbMF07XG4gIGlmIChhdXRob3JpdHkuaW5jbHVkZXMoJzonKSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXV0aG9yaXR5LmluZGV4T2YoJzonKTtcbiAgICBjb25zdCBob3N0T3JQb3J0ID0gYXV0aG9yaXR5LnNsaWNlKGluZGV4ICsgMSk7XG4gICAgaWYgKCFQT1JULnRlc3QoaG9zdE9yUG9ydCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWNjdFNjaGVtZUFzc3VtZWQoaW5wdXQpIHtcbiAgaWYgKCFpbnB1dC5pbmNsdWRlcygnQCcpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHBhcnRzID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgY29uc3QgaG9zdCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gIShob3N0LmluY2x1ZGVzKCc6JykgfHwgaG9zdC5pbmNsdWRlcygnLycpIHx8IGhvc3QuaW5jbHVkZXMoJz8nKSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCkge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGxldCBvdXRwdXQ7XG4gIGlmIChoYXNTY2hlbWUoaW5wdXQpKSB7XG4gICAgb3V0cHV0ID0gaW5wdXQ7XG4gIH0gZWxzZSBpZiAoYWNjdFNjaGVtZUFzc3VtZWQoaW5wdXQpKSB7XG4gICAgb3V0cHV0ID0gYGFjY3Q6JHtpbnB1dH1gO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGBodHRwczovLyR7aW5wdXR9YDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQuc3BsaXQoJyMnKVswXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemU7XG4iLCJjb25zdCB7IGluc3BlY3QgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCB7IFJQRXJyb3IgfSA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5jb25zdCBnZXRDbGllbnQgPSByZXF1aXJlKCcuL2NsaWVudCcpO1xuY29uc3QgcmVnaXN0cnkgPSByZXF1aXJlKCcuL2lzc3Vlcl9yZWdpc3RyeScpO1xuY29uc3QgcHJvY2Vzc1Jlc3BvbnNlID0gcmVxdWlyZSgnLi9oZWxwZXJzL3Byb2Nlc3NfcmVzcG9uc2UnKTtcbmNvbnN0IHdlYmZpbmdlck5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4vaGVscGVycy93ZWJmaW5nZXJfbm9ybWFsaXplJyk7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3JlcXVlc3QnKTtcbmNvbnN0IGNsb25lID0gcmVxdWlyZSgnLi9oZWxwZXJzL2RlZXBfY2xvbmUnKTtcbmNvbnN0IHsga2V5c3RvcmUgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc3N1ZXInKTtcblxuY29uc3QgQUFEX01VTFRJVEVOQU5UX0RJU0NPVkVSWSA9IFtcbiAgJ2h0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9jb21tb24vLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nLFxuICAnaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vbi92Mi4wLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uJyxcbiAgJ2h0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9vcmdhbml6YXRpb25zL3YyLjAvLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nLFxuICAnaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbnN1bWVycy92Mi4wLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uJyxcbl07XG5jb25zdCBBQURfTVVMVElURU5BTlQgPSBTeW1ib2woKTtcbmNvbnN0IElTU1VFUl9ERUZBVUxUUyA9IHtcbiAgY2xhaW1fdHlwZXNfc3VwcG9ydGVkOiBbJ25vcm1hbCddLFxuICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZDogZmFsc2UsXG4gIGdyYW50X3R5cGVzX3N1cHBvcnRlZDogWydhdXRob3JpemF0aW9uX2NvZGUnLCAnaW1wbGljaXQnXSxcbiAgcmVxdWVzdF9wYXJhbWV0ZXJfc3VwcG9ydGVkOiBmYWxzZSxcbiAgcmVxdWVzdF91cmlfcGFyYW1ldGVyX3N1cHBvcnRlZDogdHJ1ZSxcbiAgcmVxdWlyZV9yZXF1ZXN0X3VyaV9yZWdpc3RyYXRpb246IGZhbHNlLFxuICByZXNwb25zZV9tb2Rlc19zdXBwb3J0ZWQ6IFsncXVlcnknLCAnZnJhZ21lbnQnXSxcbiAgdG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2RzX3N1cHBvcnRlZDogWydjbGllbnRfc2VjcmV0X2Jhc2ljJ10sXG59O1xuXG5jbGFzcyBJc3N1ZXIge1xuICAjbWV0YWRhdGE7XG4gIGNvbnN0cnVjdG9yKG1ldGEgPSB7fSkge1xuICAgIGNvbnN0IGFhZElzc1ZhbGlkYXRpb24gPSBtZXRhW0FBRF9NVUxUSVRFTkFOVF07XG4gICAgZGVsZXRlIG1ldGFbQUFEX01VTFRJVEVOQU5UXTtcbiAgICBbJ2ludHJvc3BlY3Rpb24nLCAncmV2b2NhdGlvbiddLmZvckVhY2goKGVuZHBvaW50KSA9PiB7XG4gICAgICAvLyBpZiBpbnRyby9yZXZvY2F0aW9uIGVuZHBvaW50IGF1dGggc3BlY2lmaWMgbWV0YSBpcyBtaXNzaW5nIHVzZSB0aGUgdG9rZW4gb25lcyBpZiB0aGV5XG4gICAgICAvLyBhcmUgZGVmaW5lZFxuICAgICAgaWYgKFxuICAgICAgICBtZXRhW2Ake2VuZHBvaW50fV9lbmRwb2ludGBdICYmXG4gICAgICAgIG1ldGFbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfbWV0aG9kc19zdXBwb3J0ZWRgXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgIG1ldGFbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZGBdID09PSB1bmRlZmluZWRcbiAgICAgICkge1xuICAgICAgICBpZiAobWV0YS50b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkKSB7XG4gICAgICAgICAgbWV0YVtgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RzX3N1cHBvcnRlZGBdID1cbiAgICAgICAgICAgIG1ldGEudG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2RzX3N1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0YS50b2tlbl9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQpIHtcbiAgICAgICAgICBtZXRhW2Ake2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWRgXSA9XG4gICAgICAgICAgICBtZXRhLnRva2VuX2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy4jbWV0YWRhdGEgPSBuZXcgTWFwKCk7XG5cbiAgICBPYmplY3QuZW50cmllcyhtZXRhKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHRoaXMuI21ldGFkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGlmICghdGhpc1trZXldKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jbWV0YWRhdGEuZ2V0KGtleSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZ2lzdHJ5LnNldCh0aGlzLmlzc3VlciwgdGhpcyk7XG5cbiAgICBjb25zdCBDbGllbnQgPSBnZXRDbGllbnQodGhpcywgYWFkSXNzVmFsaWRhdGlvbik7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBDbGllbnQ6IHsgdmFsdWU6IENsaWVudCwgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgICAgRkFQSTFDbGllbnQ6IHsgdmFsdWU6IGNsYXNzIEZBUEkxQ2xpZW50IGV4dGVuZHMgQ2xpZW50IHt9LCBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgfSk7XG4gIH1cblxuICBnZXQgbWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIGNsb25lKE9iamVjdC5mcm9tRW50cmllcyh0aGlzLiNtZXRhZGF0YS5lbnRyaWVzKCkpKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB3ZWJmaW5nZXIoaW5wdXQpIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IHdlYmZpbmdlck5vcm1hbGl6ZShpbnB1dCk7XG4gICAgY29uc3QgeyBob3N0IH0gPSB1cmwucGFyc2UocmVzb3VyY2UpO1xuICAgIGNvbnN0IHdlYmZpbmdlclVybCA9IGBodHRwczovLyR7aG9zdH0vLndlbGwta25vd24vd2ViZmluZ2VyYDtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdC5jYWxsKHRoaXMsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6IHdlYmZpbmdlclVybCxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgICAgc2VhcmNoUGFyYW1zOiB7IHJlc291cmNlLCByZWw6ICdodHRwOi8vb3BlbmlkLm5ldC9zcGVjcy9jb25uZWN0LzEuMC9pc3N1ZXInIH0sXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBib2R5ID0gcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcblxuICAgIGNvbnN0IGxvY2F0aW9uID1cbiAgICAgIEFycmF5LmlzQXJyYXkoYm9keS5saW5rcykgJiZcbiAgICAgIGJvZHkubGlua3MuZmluZChcbiAgICAgICAgKGxpbmspID0+XG4gICAgICAgICAgdHlwZW9mIGxpbmsgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgbGluay5yZWwgPT09ICdodHRwOi8vb3BlbmlkLm5ldC9zcGVjcy9jb25uZWN0LzEuMC9pc3N1ZXInICYmXG4gICAgICAgICAgbGluay5ocmVmLFxuICAgICAgKTtcblxuICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIGlzc3VlciBmb3VuZCBpbiB3ZWJmaW5nZXIgcmVzcG9uc2UnLFxuICAgICAgICBib2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsb2NhdGlvbi5ocmVmICE9PSAnc3RyaW5nJyB8fCAhbG9jYXRpb24uaHJlZi5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcih7XG4gICAgICAgIHByaW50ZjogWydpbnZhbGlkIGlzc3VlciBsb2NhdGlvbiAlcycsIGxvY2F0aW9uLmhyZWZdLFxuICAgICAgICBib2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZXhwZWN0ZWRJc3N1ZXIgPSBsb2NhdGlvbi5ocmVmO1xuICAgIGlmIChyZWdpc3RyeS5oYXMoZXhwZWN0ZWRJc3N1ZXIpKSB7XG4gICAgICByZXR1cm4gcmVnaXN0cnkuZ2V0KGV4cGVjdGVkSXNzdWVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc3N1ZXIgPSBhd2FpdCB0aGlzLmRpc2NvdmVyKGV4cGVjdGVkSXNzdWVyKTtcblxuICAgIGlmIChpc3N1ZXIuaXNzdWVyICE9PSBleHBlY3RlZElzc3Vlcikge1xuICAgICAgcmVnaXN0cnkuZGVsKGlzc3Vlci5pc3N1ZXIpO1xuICAgICAgdGhyb3cgbmV3IFJQRXJyb3IoXG4gICAgICAgICdkaXNjb3ZlcmVkIGlzc3VlciBtaXNtYXRjaCwgZXhwZWN0ZWQgJXMsIGdvdDogJXMnLFxuICAgICAgICBleHBlY3RlZElzc3VlcixcbiAgICAgICAgaXNzdWVyLmlzc3VlcixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBpc3N1ZXI7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZGlzY292ZXIodXJpKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdXJsLnBhcnNlKHVyaSk7XG5cbiAgICBpZiAocGFyc2VkLnBhdGhuYW1lLmluY2x1ZGVzKCcvLndlbGwta25vd24vJykpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdC5jYWxsKHRoaXMsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgIHVybDogdXJpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGJvZHkgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJc3N1ZXIoe1xuICAgICAgICAuLi5JU1NVRVJfREVGQVVMVFMsXG4gICAgICAgIC4uLmJvZHksXG4gICAgICAgIFtBQURfTVVMVElURU5BTlRdOiAhIUFBRF9NVUxUSVRFTkFOVF9ESVNDT1ZFUlkuZmluZCgoZGlzY292ZXJ5VVJMKSA9PlxuICAgICAgICAgIHVyaS5zdGFydHNXaXRoKGRpc2NvdmVyeVVSTCksXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aG5hbWU7XG4gICAgaWYgKHBhcnNlZC5wYXRobmFtZS5lbmRzV2l0aCgnLycpKSB7XG4gICAgICBwYXRobmFtZSA9IGAke3BhcnNlZC5wYXRobmFtZX0ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGhuYW1lID0gYCR7cGFyc2VkLnBhdGhuYW1lfS8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbmA7XG4gICAgfVxuXG4gICAgY29uc3Qgd2VsbEtub3duVXJpID0gdXJsLmZvcm1hdCh7IC4uLnBhcnNlZCwgcGF0aG5hbWUgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QuY2FsbCh0aGlzLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICB1cmw6IHdlbGxLbm93blVyaSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGJvZHkgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIHJldHVybiBuZXcgSXNzdWVyKHtcbiAgICAgIC4uLklTU1VFUl9ERUZBVUxUUyxcbiAgICAgIC4uLmJvZHksXG4gICAgICBbQUFEX01VTFRJVEVOQU5UXTogISFBQURfTVVMVElURU5BTlRfRElTQ09WRVJZLmZpbmQoKGRpc2NvdmVyeVVSTCkgPT5cbiAgICAgICAgd2VsbEtub3duVXJpLnN0YXJ0c1dpdGgoZGlzY292ZXJ5VVJMKSxcbiAgICAgICksXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyByZWxvYWRKd2tzVXJpKCkge1xuICAgIGF3YWl0IGtleXN0b3JlLmNhbGwodGhpcywgdHJ1ZSk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBbaW5zcGVjdC5jdXN0b21dKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9ICR7aW5zcGVjdCh0aGlzLm1ldGFkYXRhLCB7XG4gICAgICBkZXB0aDogSW5maW5pdHksXG4gICAgICBjb2xvcnM6IHByb2Nlc3Muc3Rkb3V0LmlzVFRZLFxuICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgICBzb3J0ZWQ6IHRydWUsXG4gICAgfSl9YDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElzc3VlcjtcbiIsImNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuY29uc3QgeyBmb3JtYXQgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgY2xvbmVEZWVwID0gcmVxdWlyZSgnLi9oZWxwZXJzL2RlZXBfY2xvbmUnKTtcbmNvbnN0IHsgUlBFcnJvciwgT1BFcnJvciB9ID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbmNvbnN0IHsgQmFzZUNsaWVudCB9ID0gcmVxdWlyZSgnLi9jbGllbnQnKTtcbmNvbnN0IHsgcmFuZG9tLCBjb2RlQ2hhbGxlbmdlIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvZ2VuZXJhdG9ycycpO1xuY29uc3QgcGljayA9IHJlcXVpcmUoJy4vaGVscGVycy9waWNrJyk7XG5jb25zdCB7IHJlc29sdmVSZXNwb25zZVR5cGUsIHJlc29sdmVSZWRpcmVjdFVyaSB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL2NsaWVudCcpO1xuXG5mdW5jdGlvbiB2ZXJpZmllZChlcnIsIHVzZXIsIGluZm8gPSB7fSkge1xuICBpZiAoZXJyKSB7XG4gICAgdGhpcy5lcnJvcihlcnIpO1xuICB9IGVsc2UgaWYgKCF1c2VyKSB7XG4gICAgdGhpcy5mYWlsKGluZm8pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3VjY2Vzcyh1c2VyLCBpbmZvKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBPcGVuSURDb25uZWN0U3RyYXRlZ3koXG4gIHsgY2xpZW50LCBwYXJhbXMgPSB7fSwgcGFzc1JlcVRvQ2FsbGJhY2sgPSBmYWxzZSwgc2Vzc2lvbktleSwgdXNlUEtDRSA9IHRydWUsIGV4dHJhcyA9IHt9IH0gPSB7fSxcbiAgdmVyaWZ5LFxuKSB7XG4gIGlmICghKGNsaWVudCBpbnN0YW5jZW9mIEJhc2VDbGllbnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2xpZW50IG11c3QgYmUgYW4gaW5zdGFuY2Ugb2Ygb3BlbmlkLWNsaWVudCBDbGllbnQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyaWZ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmVyaWZ5IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKCFjbGllbnQuaXNzdWVyIHx8ICFjbGllbnQuaXNzdWVyLmlzc3Vlcikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NsaWVudCBtdXN0IGhhdmUgYW4gaXNzdWVyIHdpdGggYW4gaWRlbnRpZmllcicpO1xuICB9XG5cbiAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICB0aGlzLl9pc3N1ZXIgPSBjbGllbnQuaXNzdWVyO1xuICB0aGlzLl92ZXJpZnkgPSB2ZXJpZnk7XG4gIHRoaXMuX3Bhc3NSZXFUb0NhbGxiYWNrID0gcGFzc1JlcVRvQ2FsbGJhY2s7XG4gIHRoaXMuX3VzZVBLQ0UgPSB1c2VQS0NFO1xuICB0aGlzLl9rZXkgPSBzZXNzaW9uS2V5IHx8IGBvaWRjOiR7dXJsLnBhcnNlKHRoaXMuX2lzc3Vlci5pc3N1ZXIpLmhvc3RuYW1lfWA7XG4gIHRoaXMuX3BhcmFtcyA9IGNsb25lRGVlcChwYXJhbXMpO1xuICB0aGlzLl9leHRyYXMgPSBjbG9uZURlZXAoZXh0cmFzKTtcblxuICBpZiAoIXRoaXMuX3BhcmFtcy5yZXNwb25zZV90eXBlKSB0aGlzLl9wYXJhbXMucmVzcG9uc2VfdHlwZSA9IHJlc29sdmVSZXNwb25zZVR5cGUuY2FsbChjbGllbnQpO1xuICBpZiAoIXRoaXMuX3BhcmFtcy5yZWRpcmVjdF91cmkpIHRoaXMuX3BhcmFtcy5yZWRpcmVjdF91cmkgPSByZXNvbHZlUmVkaXJlY3RVcmkuY2FsbChjbGllbnQpO1xuICBpZiAoIXRoaXMuX3BhcmFtcy5zY29wZSkgdGhpcy5fcGFyYW1zLnNjb3BlID0gJ29wZW5pZCc7XG5cbiAgaWYgKHRoaXMuX3VzZVBLQ0UgPT09IHRydWUpIHtcbiAgICBjb25zdCBzdXBwb3J0ZWRNZXRob2RzID0gQXJyYXkuaXNBcnJheSh0aGlzLl9pc3N1ZXIuY29kZV9jaGFsbGVuZ2VfbWV0aG9kc19zdXBwb3J0ZWQpXG4gICAgICA/IHRoaXMuX2lzc3Vlci5jb2RlX2NoYWxsZW5nZV9tZXRob2RzX3N1cHBvcnRlZFxuICAgICAgOiBmYWxzZTtcblxuICAgIGlmIChzdXBwb3J0ZWRNZXRob2RzICYmIHN1cHBvcnRlZE1ldGhvZHMuaW5jbHVkZXMoJ1MyNTYnKSkge1xuICAgICAgdGhpcy5fdXNlUEtDRSA9ICdTMjU2JztcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnRlZE1ldGhvZHMgJiYgc3VwcG9ydGVkTWV0aG9kcy5pbmNsdWRlcygncGxhaW4nKSkge1xuICAgICAgdGhpcy5fdXNlUEtDRSA9ICdwbGFpbic7XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRNZXRob2RzKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnbmVpdGhlciBjb2RlX2NoYWxsZW5nZV9tZXRob2Qgc3VwcG9ydGVkIGJ5IHRoZSBjbGllbnQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBpc3N1ZXInLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdXNlUEtDRSA9ICdTMjU2JztcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX3VzZVBLQ0UgPT09ICdzdHJpbmcnICYmICFbJ3BsYWluJywgJ1MyNTYnXS5pbmNsdWRlcyh0aGlzLl91c2VQS0NFKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGhpcy5fdXNlUEtDRX0gaXMgbm90IHZhbGlkL2ltcGxlbWVudGVkIFBLQ0UgY29kZV9jaGFsbGVuZ2VfbWV0aG9kYCk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSB1cmwucGFyc2UoY2xpZW50Lmlzc3Vlci5pc3N1ZXIpLmhvc3RuYW1lO1xufVxuXG5PcGVuSURDb25uZWN0U3RyYXRlZ3kucHJvdG90eXBlLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZShyZXEsIG9wdGlvbnMpIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gICAgaWYgKCFyZXEuc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXV0aGVudGljYXRpb24gcmVxdWlyZXMgc2Vzc2lvbiBzdXBwb3J0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcVBhcmFtcyA9IGNsaWVudC5jYWxsYmFja1BhcmFtcyhyZXEpO1xuICAgIGNvbnN0IHNlc3Npb25LZXkgPSB0aGlzLl9rZXk7XG5cbiAgICAvKiBzdGFydCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0ICovXG4gICAgaWYgKE9iamVjdC5rZXlzKHJlcVBhcmFtcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBwcm92aWRlIG9wdGlvbnMgb2JqZWN0IHdpdGggZXh0cmEgYXV0aGVudGljYXRpb24gcGFyYW1ldGVyc1xuICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICBzdGF0ZTogcmFuZG9tKCksXG4gICAgICAgIC4uLnRoaXMuX3BhcmFtcyxcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIH07XG5cbiAgICAgIGlmICghcGFyYW1zLm5vbmNlICYmIHBhcmFtcy5yZXNwb25zZV90eXBlLmluY2x1ZGVzKCdpZF90b2tlbicpKSB7XG4gICAgICAgIHBhcmFtcy5ub25jZSA9IHJhbmRvbSgpO1xuICAgICAgfVxuXG4gICAgICByZXEuc2Vzc2lvbltzZXNzaW9uS2V5XSA9IHBpY2socGFyYW1zLCAnbm9uY2UnLCAnc3RhdGUnLCAnbWF4X2FnZScsICdyZXNwb25zZV90eXBlJyk7XG5cbiAgICAgIGlmICh0aGlzLl91c2VQS0NFICYmIHBhcmFtcy5yZXNwb25zZV90eXBlLmluY2x1ZGVzKCdjb2RlJykpIHtcbiAgICAgICAgY29uc3QgdmVyaWZpZXIgPSByYW5kb20oKTtcbiAgICAgICAgcmVxLnNlc3Npb25bc2Vzc2lvbktleV0uY29kZV92ZXJpZmllciA9IHZlcmlmaWVyO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy5fdXNlUEtDRSkge1xuICAgICAgICAgIGNhc2UgJ1MyNTYnOlxuICAgICAgICAgICAgcGFyYW1zLmNvZGVfY2hhbGxlbmdlID0gY29kZUNoYWxsZW5nZSh2ZXJpZmllcik7XG4gICAgICAgICAgICBwYXJhbXMuY29kZV9jaGFsbGVuZ2VfbWV0aG9kID0gJ1MyNTYnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncGxhaW4nOlxuICAgICAgICAgICAgcGFyYW1zLmNvZGVfY2hhbGxlbmdlID0gdmVyaWZpZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJlZGlyZWN0KGNsaWVudC5hdXRob3JpemF0aW9uVXJsKHBhcmFtcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKiBlbmQgYXV0aGVudGljYXRpb24gcmVxdWVzdCAqL1xuXG4gICAgLyogc3RhcnQgYXV0aGVudGljYXRpb24gcmVzcG9uc2UgKi9cblxuICAgIGNvbnN0IHNlc3Npb24gPSByZXEuc2Vzc2lvbltzZXNzaW9uS2V5XTtcbiAgICBpZiAoT2JqZWN0LmtleXMoc2Vzc2lvbiB8fCB7fSkubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdChcbiAgICAgICAgICAnZGlkIG5vdCBmaW5kIGV4cGVjdGVkIGF1dGhvcml6YXRpb24gcmVxdWVzdCBkZXRhaWxzIGluIHNlc3Npb24sIHJlcS5zZXNzaW9uW1wiJXNcIl0gaXMgJWonLFxuICAgICAgICAgIHNlc3Npb25LZXksXG4gICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgc3RhdGUsXG4gICAgICBub25jZSxcbiAgICAgIG1heF9hZ2U6IG1heEFnZSxcbiAgICAgIGNvZGVfdmVyaWZpZXI6IGNvZGVWZXJpZmllcixcbiAgICAgIHJlc3BvbnNlX3R5cGU6IHJlc3BvbnNlVHlwZSxcbiAgICB9ID0gc2Vzc2lvbjtcblxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgcmVxLnNlc3Npb25bc2Vzc2lvbktleV07XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIHJlZGlyZWN0X3VyaTogdGhpcy5fcGFyYW1zLnJlZGlyZWN0X3VyaSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcblxuICAgIGNvbnN0IGNoZWNrcyA9IHtcbiAgICAgIHN0YXRlLFxuICAgICAgbm9uY2UsXG4gICAgICBtYXhfYWdlOiBtYXhBZ2UsXG4gICAgICBjb2RlX3ZlcmlmaWVyOiBjb2RlVmVyaWZpZXIsXG4gICAgICByZXNwb25zZV90eXBlOiByZXNwb25zZVR5cGUsXG4gICAgfTtcblxuICAgIGNvbnN0IHRva2Vuc2V0ID0gYXdhaXQgY2xpZW50LmNhbGxiYWNrKG9wdHMucmVkaXJlY3RfdXJpLCByZXFQYXJhbXMsIGNoZWNrcywgdGhpcy5fZXh0cmFzKTtcblxuICAgIGNvbnN0IHBhc3NSZXEgPSB0aGlzLl9wYXNzUmVxVG9DYWxsYmFjaztcbiAgICBjb25zdCBsb2FkVXNlcmluZm8gPSB0aGlzLl92ZXJpZnkubGVuZ3RoID4gKHBhc3NSZXEgPyAzIDogMikgJiYgY2xpZW50Lmlzc3Vlci51c2VyaW5mb19lbmRwb2ludDtcblxuICAgIGNvbnN0IGFyZ3MgPSBbdG9rZW5zZXQsIHZlcmlmaWVkLmJpbmQodGhpcyldO1xuXG4gICAgaWYgKGxvYWRVc2VyaW5mbykge1xuICAgICAgaWYgKCF0b2tlbnNldC5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAnZXhwZWN0ZWQgYWNjZXNzX3Rva2VuIHRvIGJlIHJldHVybmVkIHdoZW4gYXNraW5nIGZvciB1c2VyaW5mbyBpbiB2ZXJpZnkgY2FsbGJhY2snLFxuICAgICAgICAgIHRva2Vuc2V0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVzZXJpbmZvID0gYXdhaXQgY2xpZW50LnVzZXJpbmZvKHRva2Vuc2V0KTtcbiAgICAgIGFyZ3Muc3BsaWNlKDEsIDAsIHVzZXJpbmZvKTtcbiAgICB9XG5cbiAgICBpZiAocGFzc1JlcSkge1xuICAgICAgYXJncy51bnNoaWZ0KHJlcSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdmVyaWZ5KC4uLmFyZ3MpO1xuICAgIC8qIGVuZCBhdXRoZW50aWNhdGlvbiByZXNwb25zZSAqL1xuICB9KSgpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIGlmIChcbiAgICAgIChlcnJvciBpbnN0YW5jZW9mIE9QRXJyb3IgJiZcbiAgICAgICAgZXJyb3IuZXJyb3IgIT09ICdzZXJ2ZXJfZXJyb3InICYmXG4gICAgICAgICFlcnJvci5lcnJvci5zdGFydHNXaXRoKCdpbnZhbGlkJykpIHx8XG4gICAgICBlcnJvciBpbnN0YW5jZW9mIFJQRXJyb3JcbiAgICApIHtcbiAgICAgIHRoaXMuZmFpbChlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZW5JRENvbm5lY3RTdHJhdGVneTtcbiIsImNvbnN0IElzc3VlciA9IHJlcXVpcmUoJy4vaXNzdWVyJyk7XG5jb25zdCB7IE9QRXJyb3IsIFJQRXJyb3IgfSA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5jb25zdCBTdHJhdGVneSA9IHJlcXVpcmUoJy4vcGFzc3BvcnRfc3RyYXRlZ3knKTtcbmNvbnN0IFRva2VuU2V0ID0gcmVxdWlyZSgnLi90b2tlbl9zZXQnKTtcbmNvbnN0IHsgQ0xPQ0tfVE9MRVJBTkNFLCBIVFRQX09QVElPTlMgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9jb25zdHMnKTtcbmNvbnN0IGdlbmVyYXRvcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMvZ2VuZXJhdG9ycycpO1xuY29uc3QgeyBzZXREZWZhdWx0cyB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3JlcXVlc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIElzc3VlcixcbiAgU3RyYXRlZ3ksXG4gIFRva2VuU2V0LFxuICBlcnJvcnM6IHtcbiAgICBPUEVycm9yLFxuICAgIFJQRXJyb3IsXG4gIH0sXG4gIGN1c3RvbToge1xuICAgIHNldEh0dHBPcHRpb25zRGVmYXVsdHM6IHNldERlZmF1bHRzLFxuICAgIGh0dHBfb3B0aW9uczogSFRUUF9PUFRJT05TLFxuICAgIGNsb2NrX3RvbGVyYW5jZTogQ0xPQ0tfVE9MRVJBTkNFLFxuICB9LFxuICBnZW5lcmF0b3JzLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25maWdUb0lzc3Vlck1ldGFkYXRhID0gZXhwb3J0cy5jb25maWdGcm9tSXNzdWVyTWV0YWRhdGEgPSBleHBvcnRzLldFTExfS05PV05fT1BFTklEX0NPTkZJRyA9IHZvaWQgMDtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNvbnN0IG9wZW5pZF9jbGllbnRfMSA9IHJlcXVpcmUoXCJvcGVuaWQtY2xpZW50XCIpO1xuZXhwb3J0cy5XRUxMX0tOT1dOX09QRU5JRF9DT05GSUcgPSBcIi53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uXCI7XG5mdW5jdGlvbiBjb25maWdGcm9tSXNzdWVyTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICBpZiAobWV0YWRhdGEuYXV0aG9yaXphdGlvbl9lbmRwb2ludCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkNvbmZpZ3VyYXRpb25FcnJvcihgSXNzdWVyIG1ldGFkYXRhIGlzIG1pc3NpbmcgYW4gYXV0aG9yaXphdGlvbiBlbmRwb2ludDogJHtKU09OLnN0cmluZ2lmeShtZXRhZGF0YSl9YCk7XG4gICAgfVxuICAgIGlmIChtZXRhZGF0YS50b2tlbl9lbmRwb2ludCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkNvbmZpZ3VyYXRpb25FcnJvcihgSXNzdWVyIG1ldGFkYXRhIGlzIG1pc3NpbmcgYW4gdG9rZW4gZW5kcG9pbnQ6ICR7SlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpfWApO1xuICAgIH1cbiAgICBpZiAobWV0YWRhdGEuandrc191cmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5Db25maWd1cmF0aW9uRXJyb3IoYElzc3VlciBtZXRhZGF0YSBpcyBtaXNzaW5nIGEga2V5c2V0IFVSSTogJHtKU09OLnN0cmluZ2lmeShtZXRhZGF0YSl9YCk7XG4gICAgfVxuICAgIGlmIChtZXRhZGF0YS5jbGFpbXNfc3VwcG9ydGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuQ29uZmlndXJhdGlvbkVycm9yKGBJc3N1ZXIgbWV0YWRhdGEgaXMgbWlzc2luZyBzdXBwb3J0ZWQgY2xhaW1zOiAke0pTT04uc3RyaW5naWZ5KG1ldGFkYXRhKX1gKTtcbiAgICB9XG4gICAgaWYgKG1ldGFkYXRhLnN1YmplY3RfdHlwZXNfc3VwcG9ydGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuQ29uZmlndXJhdGlvbkVycm9yKGBJc3N1ZXIgbWV0YWRhdGEgaXMgbWlzc2luZyBzdXBwb3J0ZWQgc3ViamVjdCB0eXBlczogJHtKU09OLnN0cmluZ2lmeShtZXRhZGF0YSl9YCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGlzc3VlcjogbWV0YWRhdGEuaXNzdWVyLFxuICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6IG1ldGFkYXRhLmF1dGhvcml6YXRpb25fZW5kcG9pbnQsXG4gICAgICAgIHN1YmplY3RUeXBlc1N1cHBvcnRlZDogbWV0YWRhdGEuc3ViamVjdF90eXBlc19zdXBwb3J0ZWQsXG4gICAgICAgIGNsYWltc1N1cHBvcnRlZDogbWV0YWRhdGEuY2xhaW1zX3N1cHBvcnRlZCxcbiAgICAgICAgdG9rZW5FbmRwb2ludDogbWV0YWRhdGEudG9rZW5fZW5kcG9pbnQsXG4gICAgICAgIGp3a3NVcmk6IG1ldGFkYXRhLmp3a3NfdXJpLFxuICAgICAgICB1c2VyaW5mb0VuZHBvaW50OiBtZXRhZGF0YS51c2VyaW5mb19lbmRwb2ludCxcbiAgICAgICAgcmVnaXN0cmF0aW9uRW5kcG9pbnQ6IG1ldGFkYXRhLnJlZ2lzdHJhdGlvbl9lbmRwb2ludCxcbiAgICAgICAgdG9rZW5FbmRwb2ludEF1dGhNZXRob2RzU3VwcG9ydGVkOiBtZXRhZGF0YS50b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkLFxuICAgICAgICB0b2tlbkVuZHBvaW50QXV0aFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0ZWQ6IG1ldGFkYXRhLnRva2VuX2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZCxcbiAgICAgICAgcmVxdWVzdE9iamVjdFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0ZWQ6IG1ldGFkYXRhLnJlcXVlc3Rfb2JqZWN0X3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQsXG4gICAgICAgIGdyYW50VHlwZXNTdXBwb3J0ZWQ6IG1ldGFkYXRhLmdyYW50X3R5cGVzX3N1cHBvcnRlZCxcbiAgICAgICAgcmVzcG9uc2VUeXBlc1N1cHBvcnRlZDogbWV0YWRhdGEucmVzcG9uc2VfdHlwZXNfc3VwcG9ydGVkLFxuICAgICAgICBpZFRva2VuU2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnRlZDogbWV0YWRhdGEuaWRfdG9rZW5fc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZCxcbiAgICAgICAgc2NvcGVzU3VwcG9ydGVkOiBtZXRhZGF0YS5zY29wZXNfc3VwcG9ydGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gW1wib3BlbmlkXCJdXG4gICAgICAgICAgICA6IG1ldGFkYXRhLnNjb3Blc19zdXBwb3J0ZWQsXG4gICAgfTtcbn1cbmV4cG9ydHMuY29uZmlnRnJvbUlzc3Vlck1ldGFkYXRhID0gY29uZmlnRnJvbUlzc3Vlck1ldGFkYXRhO1xuZnVuY3Rpb24gY29uZmlnVG9Jc3N1ZXJNZXRhZGF0YShjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc3N1ZXI6IGNvbmZpZy5pc3N1ZXIsXG4gICAgICAgIGF1dGhvcml6YXRpb25fZW5kcG9pbnQ6IGNvbmZpZy5hdXRob3JpemF0aW9uRW5kcG9pbnQsXG4gICAgICAgIGp3a3NfdXJpOiBjb25maWcuandrc1VyaSxcbiAgICAgICAgdG9rZW5fZW5kcG9pbnQ6IGNvbmZpZy50b2tlbkVuZHBvaW50LFxuICAgICAgICByZWdpc3RyYXRpb25fZW5kcG9pbnQ6IGNvbmZpZy5yZWdpc3RyYXRpb25FbmRwb2ludCxcbiAgICAgICAgc3ViamVjdF90eXBlc19zdXBwb3J0ZWQ6IGNvbmZpZy5zdWJqZWN0VHlwZXNTdXBwb3J0ZWQsXG4gICAgICAgIGNsYWltc19zdXBwb3J0ZWQ6IGNvbmZpZy5jbGFpbXNTdXBwb3J0ZWQsXG4gICAgICAgIHRva2VuX2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZDogY29uZmlnLnRva2VuRW5kcG9pbnRBdXRoU2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnRlZCxcbiAgICAgICAgdXNlcmluZm9fZW5kcG9pbnQ6IGNvbmZpZy51c2VyaW5mb0VuZHBvaW50LFxuICAgICAgICB0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkOiBjb25maWcudG9rZW5FbmRwb2ludEF1dGhNZXRob2RzU3VwcG9ydGVkLFxuICAgICAgICByZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkOiBjb25maWcucmVxdWVzdE9iamVjdFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0ZWQsXG4gICAgICAgIGdyYW50X3R5cGVzX3N1cHBvcnRlZDogY29uZmlnLmdyYW50VHlwZXNTdXBwb3J0ZWQsXG4gICAgICAgIHJlc3BvbnNlX3R5cGVzX3N1cHBvcnRlZDogY29uZmlnLnJlc3BvbnNlVHlwZXNTdXBwb3J0ZWQsXG4gICAgICAgIGlkX3Rva2VuX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQ6IGNvbmZpZy5pZFRva2VuU2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnRlZCxcbiAgICAgICAgc2NvcGVzX3N1cHBvcnRlZDogY29uZmlnLnNjb3Blc1N1cHBvcnRlZCxcbiAgICB9O1xufVxuZXhwb3J0cy5jb25maWdUb0lzc3Vlck1ldGFkYXRhID0gY29uZmlnVG9Jc3N1ZXJNZXRhZGF0YTtcbmNsYXNzIElzc3VlckNvbmZpZ0ZldGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2VVdGlsaXR5KSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHkgPSBzdG9yYWdlVXRpbGl0eTtcbiAgICB9XG4gICAgc3RhdGljIGdldExvY2FsU3RvcmFnZUtleShpc3N1ZXIpIHtcbiAgICAgICAgcmV0dXJuIGBpc3N1ZXJDb25maWc6JHtpc3N1ZXJ9YDtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hDb25maWcoaXNzdWVyKSB7XG4gICAgICAgIGNvbnN0IG9pZGNJc3N1ZXIgPSBhd2FpdCBvcGVuaWRfY2xpZW50XzEuSXNzdWVyLmRpc2NvdmVyKGlzc3Vlcik7XG4gICAgICAgIGNvbnN0IGlzc3VlckNvbmZpZyA9IGNvbmZpZ0Zyb21Jc3N1ZXJNZXRhZGF0YShvaWRjSXNzdWVyLm1ldGFkYXRhKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXQoSXNzdWVyQ29uZmlnRmV0Y2hlci5nZXRMb2NhbFN0b3JhZ2VLZXkoaXNzdWVyKSwgSlNPTi5zdHJpbmdpZnkoaXNzdWVyQ29uZmlnKSk7XG4gICAgICAgIHJldHVybiBpc3N1ZXJDb25maWc7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gSXNzdWVyQ29uZmlnRmV0Y2hlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlzc3VlckNvbmZpZ0ZldGNoZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xID0gcmVxdWlyZShcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIik7XG5jb25zdCBvcGVuaWRfY2xpZW50XzEgPSByZXF1aXJlKFwib3BlbmlkLWNsaWVudFwiKTtcbmNvbnN0IElzc3VlckNvbmZpZ0ZldGNoZXJfMSA9IHJlcXVpcmUoXCIuLi9Jc3N1ZXJDb25maWdGZXRjaGVyXCIpO1xuY2xhc3MgQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlVXRpbGl0eSwgcmVkaXJlY3Rvcikge1xuICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5ID0gc3RvcmFnZVV0aWxpdHk7XG4gICAgICAgIHRoaXMucmVkaXJlY3RvciA9IHJlZGlyZWN0b3I7XG4gICAgfVxuICAgIGFzeW5jIGNhbkhhbmRsZShvaWRjTG9naW5PcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhIShvaWRjTG9naW5PcHRpb25zLmlzc3VlckNvbmZpZ3VyYXRpb24uZ3JhbnRUeXBlc1N1cHBvcnRlZCAmJlxuICAgICAgICAgICAgb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXJDb25maWd1cmF0aW9uLmdyYW50VHlwZXNTdXBwb3J0ZWQuaW5kZXhPZihcImF1dGhvcml6YXRpb25fY29kZVwiKSA+IC0xKTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlKG9pZGNMb2dpbk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaXNzdWVyID0gbmV3IG9wZW5pZF9jbGllbnRfMS5Jc3N1ZXIoKDAsIElzc3VlckNvbmZpZ0ZldGNoZXJfMS5jb25maWdUb0lzc3Vlck1ldGFkYXRhKShvaWRjTG9naW5PcHRpb25zLmlzc3VlckNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gbmV3IGlzc3Vlci5DbGllbnQoe1xuICAgICAgICAgICAgY2xpZW50X2lkOiBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudFNlY3JldCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNvZGVWZXJpZmllciA9IG9wZW5pZF9jbGllbnRfMS5nZW5lcmF0b3JzLmNvZGVWZXJpZmllcigpO1xuICAgICAgICBjb25zdCBjb2RlQ2hhbGxlbmdlID0gb3BlbmlkX2NsaWVudF8xLmdlbmVyYXRvcnMuY29kZUNoYWxsZW5nZShjb2RlVmVyaWZpZXIpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IG9wZW5pZF9jbGllbnRfMS5nZW5lcmF0b3JzLnN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFVybCA9IGNsaWVudC5hdXRob3JpemF0aW9uVXJsKHtcbiAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICByZXNwb25zZV90eXBlOiBcImNvZGVcIixcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogb2lkY0xvZ2luT3B0aW9ucy5yZWRpcmVjdFVybCxcbiAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlX21ldGhvZDogXCJTMjU2XCIsXG4gICAgICAgICAgICBwcm9tcHQ6IFwiY29uc2VudFwiLFxuICAgICAgICAgICAgc2NvcGU6IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuREVGQVVMVF9TQ09QRVMsXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIoc3RhdGUsIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob2lkY0xvZ2luT3B0aW9ucy5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICBjb2RlVmVyaWZpZXIsXG4gICAgICAgICAgICAgICAgaXNzdWVyOiBvaWRjTG9naW5PcHRpb25zLmlzc3VlcixcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVybDogb2lkY0xvZ2luT3B0aW9ucy5yZWRpcmVjdFVybCxcbiAgICAgICAgICAgICAgICBkcG9wOiBvaWRjTG9naW5PcHRpb25zLmRwb3AgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5yZWRpcmVjdG9yLnJlZGlyZWN0KHRhcmdldFVybCwge1xuICAgICAgICAgICAgaGFuZGxlUmVkaXJlY3Q6IG9pZGNMb2dpbk9wdGlvbnMuaGFuZGxlUmVkaXJlY3QsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGhvcml6YXRpb25Db2RlV2l0aFBrY2VPaWRjSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhvcml6YXRpb25Db2RlV2l0aFBrY2VPaWRjSGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNvbnN0IGpvc2VfMSA9IHJlcXVpcmUoXCJqb3NlXCIpO1xuY29uc3QgY3Jvc3NfZmV0Y2hfMSA9IHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvaWRjTG9naW5PcHRpb25zKSB7XG4gICAgcmV0dXJuIChvaWRjTG9naW5PcHRpb25zLnJlZnJlc2hUb2tlbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudElkICE9PSB1bmRlZmluZWQpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEFjY2VzcyhyZWZyZXNoT3B0aW9ucywgZHBvcCwgcmVmcmVzaEJpbmRpbmdLZXksIGV2ZW50RW1pdHRlcikge1xuICAgIHZhciBfYTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgZHBvcEtleTtcbiAgICAgICAgaWYgKGRwb3ApIHtcbiAgICAgICAgICAgIGRwb3BLZXkgPSByZWZyZXNoQmluZGluZ0tleSB8fCAoYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZ2VuZXJhdGVEcG9wS2V5UGFpcikoKSk7XG4gICAgICAgICAgICBbZHBvcEtleS5wdWJsaWNLZXkuYWxnXSA9IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuUFJFRkVSUkVEX1NJR05JTkdfQUxHO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IHJlZnJlc2hPcHRpb25zLnRva2VuUmVmcmVzaGVyLnJlZnJlc2gocmVmcmVzaE9wdGlvbnMuc2Vzc2lvbklkLCByZWZyZXNoT3B0aW9ucy5yZWZyZXNoVG9rZW4sIGRwb3BLZXkpO1xuICAgICAgICBjb25zdCByb3RhdGVkUmVmcmVzaE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5yZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogKF9hID0gdG9rZW5zLnJlZnJlc2hUb2tlbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcmVmcmVzaE9wdGlvbnMucmVmcmVzaFRva2VuLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhdXRoRmV0Y2ggPSBhd2FpdCAoMCwgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5idWlsZEF1dGhlbnRpY2F0ZWRGZXRjaCkoY3Jvc3NfZmV0Y2hfMS5mZXRjaCwgdG9rZW5zLmFjY2Vzc1Rva2VuLCB7XG4gICAgICAgICAgICBkcG9wS2V5LFxuICAgICAgICAgICAgcmVmcmVzaE9wdGlvbnM6IHJvdGF0ZWRSZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRva2Vucywge1xuICAgICAgICAgICAgZmV0Y2g6IGF1dGhGZXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZWZyZXNoIGNyZWRlbnRpYWxzOiAke2V9YCk7XG4gICAgfVxufVxuY2xhc3MgUmVmcmVzaFRva2VuT2lkY0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuUmVmcmVzaGVyLCBzdG9yYWdlVXRpbGl0eSkge1xuICAgICAgICB0aGlzLnRva2VuUmVmcmVzaGVyID0gdG9rZW5SZWZyZXNoZXI7XG4gICAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHkgPSBzdG9yYWdlVXRpbGl0eTtcbiAgICB9XG4gICAgYXN5bmMgY2FuSGFuZGxlKG9pZGNMb2dpbk9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlT3B0aW9ucyhvaWRjTG9naW5PcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlKG9pZGNMb2dpbk9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIShhd2FpdCB0aGlzLmNhbkhhbmRsZShvaWRjTG9naW5PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVmcmVzaFRva2VuT2lkY0hhbmRsZXIgY2Fubm90IGhhbmRsZSB0aGUgcHJvdmlkZWQgb3B0aW9ucywgbWlzc2luZyBvbmUgb2YgJ3JlZnJlc2hUb2tlbicsICdjbGllbnRJZCcgaW46ICR7SlNPTi5zdHJpbmdpZnkob2lkY0xvZ2luT3B0aW9ucyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmcmVzaE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZWZyZXNoVG9rZW46IG9pZGNMb2dpbk9wdGlvbnMucmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgc2Vzc2lvbklkOiBvaWRjTG9naW5PcHRpb25zLnNlc3Npb25JZCxcbiAgICAgICAgICAgIHRva2VuUmVmcmVzaGVyOiB0aGlzLnRva2VuUmVmcmVzaGVyLFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob2lkY0xvZ2luT3B0aW9ucy5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgIGlzc3Vlcjogb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXIsXG4gICAgICAgICAgICBkcG9wOiBvaWRjTG9naW5PcHRpb25zLmRwb3AgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcbiAgICAgICAgICAgIGNsaWVudElkOiBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudFNlY3JldDogb2lkY0xvZ2luT3B0aW9ucy5jbGllbnQuY2xpZW50U2VjcmV0LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLCBcInB1YmxpY0tleVwiKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihvaWRjTG9naW5PcHRpb25zLnNlc3Npb25JZCwgXCJwcml2YXRlS2V5XCIpO1xuICAgICAgICBsZXQga2V5UGFpcjtcbiAgICAgICAgaWYgKHB1YmxpY0tleSAhPT0gdW5kZWZpbmVkICYmIHByaXZhdGVLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAga2V5UGFpciA9IHtcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXk6IEpTT04ucGFyc2UocHVibGljS2V5KSxcbiAgICAgICAgICAgICAgICBwcml2YXRlS2V5OiAoYXdhaXQgKDAsIGpvc2VfMS5pbXBvcnRKV0spKEpTT04ucGFyc2UocHJpdmF0ZUtleSksIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuUFJFRkVSUkVEX1NJR05JTkdfQUxHWzBdKSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjY2Vzc0luZm8gPSBhd2FpdCByZWZyZXNoQWNjZXNzKHJlZnJlc2hPcHRpb25zLCBvaWRjTG9naW5PcHRpb25zLmRwb3AsIGtleVBhaXIpO1xuICAgICAgICBjb25zdCBzZXNzaW9uSW5mbyA9IHtcbiAgICAgICAgICAgIGlzTG9nZ2VkSW46IHRydWUsXG4gICAgICAgICAgICBzZXNzaW9uSWQ6IG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoYWNjZXNzSW5mby5pZFRva2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIElkZW50aXR5IFByb3ZpZGVyIFske29pZGNMb2dpbk9wdGlvbnMuaXNzdWVyfV0gZGlkIG5vdCByZXR1cm4gYW4gSUQgdG9rZW4gb24gcmVmcmVzaCwgd2hpY2ggcHJldmVudHMgdXMgZnJvbSBnZXR0aW5nIHRoZSB1c2VyJ3MgV2ViSUQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbkluZm8ud2ViSWQgPSBhd2FpdCAoMCwgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5nZXRXZWJpZEZyb21Ub2tlblBheWxvYWQpKGFjY2Vzc0luZm8uaWRUb2tlbiwgb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXJDb25maWd1cmF0aW9uLmp3a3NVcmksIG9pZGNMb2dpbk9wdGlvbnMuaXNzdWVyLCBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRJZCk7XG4gICAgICAgIGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLnNhdmVTZXNzaW9uSW5mb1RvU3RvcmFnZSkodGhpcy5zdG9yYWdlVXRpbGl0eSwgb2lkY0xvZ2luT3B0aW9ucy5zZXNzaW9uSWQsIHVuZGVmaW5lZCwgXCJ0cnVlXCIsIChfYSA9IGFjY2Vzc0luZm8ucmVmcmVzaFRva2VuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZWZyZXNoT3B0aW9ucy5yZWZyZXNoVG9rZW4sIHVuZGVmaW5lZCwga2V5UGFpcik7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihvaWRjTG9naW5PcHRpb25zLnNlc3Npb25JZCwge1xuICAgICAgICAgICAgaXNzdWVyOiBvaWRjTG9naW5PcHRpb25zLmlzc3VlcixcbiAgICAgICAgICAgIGRwb3A6IG9pZGNMb2dpbk9wdGlvbnMuZHBvcCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiLFxuICAgICAgICAgICAgY2xpZW50SWQ6IG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudElkLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudFNlY3JldCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0OiBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRTZWNyZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2lkY0xvZ2luT3B0aW9ucy5jbGllbnQuY2xpZW50TmFtZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICAgICAgY2xpZW50TmFtZTogb2lkY0xvZ2luT3B0aW9ucy5jbGllbnQuY2xpZW50TmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHNlc3Npb25JbmZvLCB7XG4gICAgICAgICAgICBmZXRjaDogYWNjZXNzSW5mby5mZXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmVmcmVzaFRva2VuT2lkY0hhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWZyZXNoVG9rZW5PaWRjSGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEdlbmVyYWxMb2dvdXRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzZXNzaW9uSW5mb01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIgPSBzZXNzaW9uSW5mb01hbmFnZXI7XG4gICAgfVxuICAgIGFzeW5jIGNhbkhhbmRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZSh1c2VySWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIuY2xlYXIodXNlcklkKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBHZW5lcmFsTG9nb3V0SGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyYWxMb2dvdXRIYW5kbGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LRVlfUkVHSVNURVJFRF9TRVNTSU9OUyA9IHZvaWQgMDtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmV4cG9ydHMuS0VZX1JFR0lTVEVSRURfU0VTU0lPTlMgPSBgJHtzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLlNPTElEX0NMSUVOVF9BVVRITl9LRVlfUFJFRklYfXJlZ2lzdGVyZWRTZXNzaW9uc2A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2Vzc2lvbkluZm9NYW5hZ2VyID0gZXhwb3J0cy5jbGVhciA9IGV4cG9ydHMuZ2V0VW5hdXRoZW50aWNhdGVkU2Vzc2lvbiA9IHZvaWQgMDtcbmNvbnN0IHV1aWRfMSA9IHJlcXVpcmUoXCJ1dWlkXCIpO1xuY29uc3QgY3Jvc3NfZmV0Y2hfMSA9IHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbmNvbnN0IGNvbnN0YW50XzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRcIik7XG5mdW5jdGlvbiBnZXRVbmF1dGhlbnRpY2F0ZWRTZXNzaW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgICBzZXNzaW9uSWQ6ICgwLCB1dWlkXzEudjQpKCksXG4gICAgICAgIGZldGNoOiBjcm9zc19mZXRjaF8xLmZldGNoLFxuICAgIH07XG59XG5leHBvcnRzLmdldFVuYXV0aGVudGljYXRlZFNlc3Npb24gPSBnZXRVbmF1dGhlbnRpY2F0ZWRTZXNzaW9uO1xuYXN5bmMgZnVuY3Rpb24gY2xlYXIoc2Vzc2lvbklkLCBzdG9yYWdlKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBzdG9yYWdlLmRlbGV0ZUFsbFVzZXJEYXRhKHNlc3Npb25JZCwgeyBzZWN1cmU6IGZhbHNlIH0pLFxuICAgICAgICBzdG9yYWdlLmRlbGV0ZUFsbFVzZXJEYXRhKHNlc3Npb25JZCwgeyBzZWN1cmU6IHRydWUgfSksXG4gICAgICAgIHN0b3JhZ2UuZGVsZXRlKFwiY2xpZW50S2V5XCIsIHsgc2VjdXJlOiBmYWxzZSB9KSxcbiAgICBdKTtcbn1cbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmNsYXNzIFNlc3Npb25JbmZvTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3Ioc3RvcmFnZVV0aWxpdHkpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlVXRpbGl0eSA9IHN0b3JhZ2VVdGlsaXR5O1xuICAgIH1cbiAgICB1cGRhdGUoX3Nlc3Npb25JZCwgX29wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IEltcGxlbWVudGVkXCIpO1xuICAgIH1cbiAgICBhc3luYyBnZXQoc2Vzc2lvbklkKSB7XG4gICAgICAgIGNvbnN0IHdlYklkID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJ3ZWJJZFwiKTtcbiAgICAgICAgY29uc3QgaXNMb2dnZWRJbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihzZXNzaW9uSWQsIFwiaXNMb2dnZWRJblwiKTtcbiAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJyZWZyZXNoVG9rZW5cIik7XG4gICAgICAgIGNvbnN0IGlzc3VlciA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihzZXNzaW9uSWQsIFwiaXNzdWVyXCIpO1xuICAgICAgICBpZiAoaXNzdWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgIHdlYklkLFxuICAgICAgICAgICAgICAgIGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW4gPT09IFwidHJ1ZVwiLFxuICAgICAgICAgICAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgICAgICAgICAgICBpc3N1ZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIGdldEFsbCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbiAgICBhc3luYyBjbGVhcihzZXNzaW9uSWQpIHtcbiAgICAgICAgY29uc3QgcmF3U2Vzc2lvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldChjb25zdGFudF8xLktFWV9SRUdJU1RFUkVEX1NFU1NJT05TKTtcbiAgICAgICAgaWYgKHJhd1Nlc3Npb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb25zID0gSlNPTi5wYXJzZShyYXdTZXNzaW9ucyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldChjb25zdGFudF8xLktFWV9SRUdJU1RFUkVEX1NFU1NJT05TLCBKU09OLnN0cmluZ2lmeShzZXNzaW9ucy5maWx0ZXIoKHN0b3JlZFNlc3Npb25JZCkgPT4gc3RvcmVkU2Vzc2lvbklkICE9PSBzZXNzaW9uSWQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsZWFyKHNlc3Npb25JZCwgdGhpcy5zdG9yYWdlVXRpbGl0eSk7XG4gICAgfVxuICAgIGFzeW5jIHJlZ2lzdGVyKHNlc3Npb25JZCkge1xuICAgICAgICBjb25zdCByYXdTZXNzaW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0KGNvbnN0YW50XzEuS0VZX1JFR0lTVEVSRURfU0VTU0lPTlMpO1xuICAgICAgICBpZiAocmF3U2Vzc2lvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVV0aWxpdHkuc2V0KGNvbnN0YW50XzEuS0VZX1JFR0lTVEVSRURfU0VTU0lPTlMsIEpTT04uc3RyaW5naWZ5KFtzZXNzaW9uSWRdKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBKU09OLnBhcnNlKHJhd1Nlc3Npb25zKTtcbiAgICAgICAgaWYgKCFzZXNzaW9ucy5pbmNsdWRlcyhzZXNzaW9uSWQpKSB7XG4gICAgICAgICAgICBzZXNzaW9ucy5wdXNoKHNlc3Npb25JZCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXQoY29uc3RhbnRfMS5LRVlfUkVHSVNURVJFRF9TRVNTSU9OUywgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbnMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGFzeW5jIGdldFJlZ2lzdGVyZWRTZXNzaW9uSWRBbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldChjb25zdGFudF8xLktFWV9SRUdJU1RFUkVEX1NFU1NJT05TKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBjbGVhckFsbCgpIHtcbiAgICAgICAgY29uc3QgcmF3U2Vzc2lvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldChjb25zdGFudF8xLktFWV9SRUdJU1RFUkVEX1NFU1NJT05TKTtcbiAgICAgICAgaWYgKHJhd1Nlc3Npb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXNzaW9ucyA9IEpTT04ucGFyc2UocmF3U2Vzc2lvbnMpO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzZXNzaW9ucy5tYXAoKHNlc3Npb25JZCkgPT4gdGhpcy5jbGVhcihzZXNzaW9uSWQpKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldChjb25zdGFudF8xLktFWV9SRUdJU1RFUkVEX1NFU1NJT05TLCBKU09OLnN0cmluZ2lmeShbXSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2Vzc2lvbkluZm9NYW5hZ2VyID0gU2Vzc2lvbkluZm9NYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2Vzc2lvbkluZm9NYW5hZ2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdXRoQ29kZVJlZGlyZWN0SGFuZGxlciA9IHZvaWQgMDtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IG9wZW5pZF9jbGllbnRfMSA9IHJlcXVpcmUoXCJvcGVuaWQtY2xpZW50XCIpO1xuY29uc3QgY3Jvc3NfZmV0Y2hfMSA9IHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbmNvbnN0IElzc3VlckNvbmZpZ0ZldGNoZXJfMSA9IHJlcXVpcmUoXCIuLi9Jc3N1ZXJDb25maWdGZXRjaGVyXCIpO1xuY2xhc3MgQXV0aENvZGVSZWRpcmVjdEhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2VVdGlsaXR5LCBzZXNzaW9uSW5mb01hbmFnZXIsIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhciwgdG9rZW5SZWZyZXNoZXIpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlVXRpbGl0eSA9IHN0b3JhZ2VVdGlsaXR5O1xuICAgICAgICB0aGlzLnNlc3Npb25JbmZvTWFuYWdlciA9IHNlc3Npb25JbmZvTWFuYWdlcjtcbiAgICAgICAgdGhpcy5pc3N1ZXJDb25maWdGZXRjaGVyID0gaXNzdWVyQ29uZmlnRmV0Y2hlcjtcbiAgICAgICAgdGhpcy5jbGllbnRSZWdpc3RyYXIgPSBjbGllbnRSZWdpc3RyYXI7XG4gICAgICAgIHRoaXMudG9rZW5SZWZyZXNoZXIgPSB0b2tlblJlZnJlc2hlcjtcbiAgICB9XG4gICAgYXN5bmMgY2FuSGFuZGxlKHJlZGlyZWN0VXJsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBteVVybCA9IG5ldyB1cmxfMS5VUkwocmVkaXJlY3RVcmwpO1xuICAgICAgICAgICAgcmV0dXJuIChteVVybC5zZWFyY2hQYXJhbXMuZ2V0KFwiY29kZVwiKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG15VXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJzdGF0ZVwiKSAhPT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7cmVkaXJlY3RVcmx9XSBpcyBub3QgYSB2YWxpZCBVUkwsIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBhIHJlZGlyZWN0IFVSTDogJHtlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZShpbnB1dFJlZGlyZWN0VXJsLCBldmVudEVtaXR0ZXIpIHtcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5jYW5IYW5kbGUoaW5wdXRSZWRpcmVjdFVybCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF1dGhDb2RlUmVkaXJlY3RIYW5kbGVyIGNhbm5vdCBoYW5kbGUgWyR7aW5wdXRSZWRpcmVjdFVybH1dOiBpdCBpcyBtaXNzaW5nIG9uZSBvZiBbY29kZSwgc3RhdGVdLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwoaW5wdXRSZWRpcmVjdFVybCk7XG4gICAgICAgIGNvbnN0IG9hdXRoU3RhdGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChcInN0YXRlXCIpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShcImNvZGVcIik7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKFwic3RhdGVcIik7XG4gICAgICAgIGNvbnN0IHNlc3Npb25JZCA9IGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLmdldFNlc3Npb25JZEZyb21PYXV0aFN0YXRlKSh0aGlzLnN0b3JhZ2VVdGlsaXR5LCBvYXV0aFN0YXRlKTtcbiAgICAgICAgaWYgKHNlc3Npb25JZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHN0b3JlZCBzZXNzaW9uIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3RhdGUgWyR7b2F1dGhTdGF0ZX1dYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2lkY0NvbnRleHQgPSBhd2FpdCAoMCwgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5sb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZSkoc2Vzc2lvbklkLCB0aGlzLnN0b3JhZ2VVdGlsaXR5LCB0aGlzLmlzc3VlckNvbmZpZ0ZldGNoZXIpO1xuICAgICAgICBjb25zdCBpc3N1ZXIgPSBuZXcgb3BlbmlkX2NsaWVudF8xLklzc3VlcigoMCwgSXNzdWVyQ29uZmlnRmV0Y2hlcl8xLmNvbmZpZ1RvSXNzdWVyTWV0YWRhdGEpKG9pZGNDb250ZXh0Lmlzc3VlckNvbmZpZykpO1xuICAgICAgICBjb25zdCBjbGllbnRJbmZvID0gYXdhaXQgdGhpcy5jbGllbnRSZWdpc3RyYXIuZ2V0Q2xpZW50KHsgc2Vzc2lvbklkIH0sIG9pZGNDb250ZXh0Lmlzc3VlckNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBpc3N1ZXIuQ2xpZW50KHtcbiAgICAgICAgICAgIGNsaWVudF9pZDogY2xpZW50SW5mby5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IGNsaWVudEluZm8uY2xpZW50U2VjcmV0LFxuICAgICAgICAgICAgdG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2Q6IGNsaWVudEluZm8uY2xpZW50U2VjcmV0XG4gICAgICAgICAgICAgICAgPyBcImNsaWVudF9zZWNyZXRfYmFzaWNcIlxuICAgICAgICAgICAgICAgIDogXCJub25lXCIsXG4gICAgICAgICAgICBpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnOiBjbGllbnRJbmZvLmlkVG9rZW5TaWduZWRSZXNwb25zZUFsZyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsaWVudC5jYWxsYmFja1BhcmFtcyhpbnB1dFJlZGlyZWN0VXJsKTtcbiAgICAgICAgbGV0IGRwb3BLZXk7XG4gICAgICAgIGlmIChvaWRjQ29udGV4dC5kcG9wKSB7XG4gICAgICAgICAgICBkcG9wS2V5ID0gYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZ2VuZXJhdGVEcG9wS2V5UGFpcikoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlblNldCA9IGF3YWl0IGNsaWVudC5jYWxsYmFjayh1cmwuaHJlZiwgcGFyYW1zLCB7IGNvZGVfdmVyaWZpZXI6IG9pZGNDb250ZXh0LmNvZGVWZXJpZmllciwgc3RhdGU6IG9hdXRoU3RhdGUgfSwgeyBEUG9QOiBkcG9wS2V5ID09PSBudWxsIHx8IGRwb3BLZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRwb3BLZXkucHJpdmF0ZUtleSB9KTtcbiAgICAgICAgaWYgKHRva2VuU2V0LmFjY2Vzc190b2tlbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICB0b2tlblNldC5pZF90b2tlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBJZGVudGl0eSBQcm92aWRlciBbJHtpc3N1ZXIubWV0YWRhdGEuaXNzdWVyfV0gZGlkIG5vdCByZXR1cm4gdGhlIGV4cGVjdGVkIHRva2VuczogbWlzc2luZyBhdCBsZWFzdCBvbmUgb2YgJ2FjY2Vzc190b2tlbicsICdpZF90b2tlbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVmcmVzaE9wdGlvbnM7XG4gICAgICAgIGlmICh0b2tlblNldC5yZWZyZXNoX3Rva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlciA9PT0gbnVsbCB8fCBldmVudEVtaXR0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50RW1pdHRlci5lbWl0KHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuRVZFTlRTLk5FV19SRUZSRVNIX1RPS0VOLCB0b2tlblNldC5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgIHJlZnJlc2hPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogdG9rZW5TZXQucmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgdG9rZW5SZWZyZXNoZXI6IHRoaXMudG9rZW5SZWZyZXNoZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF1dGhGZXRjaCA9IGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLmJ1aWxkQXV0aGVudGljYXRlZEZldGNoKShjcm9zc19mZXRjaF8xLmZldGNoLCB0b2tlblNldC5hY2Nlc3NfdG9rZW4sIHtcbiAgICAgICAgICAgIGRwb3BLZXksXG4gICAgICAgICAgICByZWZyZXNoT3B0aW9ucyxcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcixcbiAgICAgICAgICAgIGV4cGlyZXNJbjogdG9rZW5TZXQuZXhwaXJlc19pbixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHdlYmlkID0gYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkKSh0b2tlblNldC5pZF90b2tlbiwgaXNzdWVyLm1ldGFkYXRhLmp3a3NfdXJpLCBpc3N1ZXIubWV0YWRhdGEuaXNzdWVyLCBjbGllbnQubWV0YWRhdGEuY2xpZW50X2lkKTtcbiAgICAgICAgYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuc2F2ZVNlc3Npb25JbmZvVG9TdG9yYWdlKSh0aGlzLnN0b3JhZ2VVdGlsaXR5LCBzZXNzaW9uSWQsIHdlYmlkLCBcInRydWVcIiwgdG9rZW5TZXQucmVmcmVzaF90b2tlbiwgdW5kZWZpbmVkLCBkcG9wS2V5KTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSBhd2FpdCB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5nZXQoc2Vzc2lvbklkKTtcbiAgICAgICAgaWYgKCFzZXNzaW9uSW5mbykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhbnkgc2Vzc2lvbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggU2Vzc2lvbklEIFske3Nlc3Npb25JZH1dIGluIG91ciBzdG9yYWdlLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHNlc3Npb25JbmZvLCB7XG4gICAgICAgICAgICBmZXRjaDogYXV0aEZldGNoLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkF1dGhDb2RlUmVkaXJlY3RIYW5kbGVyID0gQXV0aENvZGVSZWRpcmVjdEhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoQ29kZVJlZGlyZWN0SGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXIgPSB2b2lkIDA7XG5jb25zdCB1cmxfMSA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBTZXNzaW9uSW5mb01hbmFnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zZXNzaW9uSW5mby9TZXNzaW9uSW5mb01hbmFnZXJcIik7XG5jbGFzcyBGYWxsYmFja1JlZGlyZWN0SGFuZGxlciB7XG4gICAgYXN5bmMgY2FuSGFuZGxlKHJlZGlyZWN0VXJsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgdXJsXzEuVVJMKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3JlZGlyZWN0VXJsfV0gaXMgbm90IGEgdmFsaWQgVVJMLCBhbmQgY2Fubm90IGJlIHVzZWQgYXMgYSByZWRpcmVjdCBVUkw6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBoYW5kbGUoX3JlZGlyZWN0VXJsKSB7XG4gICAgICAgIHJldHVybiAoMCwgU2Vzc2lvbkluZm9NYW5hZ2VyXzEuZ2V0VW5hdXRoZW50aWNhdGVkU2Vzc2lvbikoKTtcbiAgICB9XG59XG5leHBvcnRzLkZhbGxiYWNrUmVkaXJlY3RIYW5kbGVyID0gRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWxsYmFja1JlZGlyZWN0SGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNsYXNzIEFnZ3JlZ2F0ZUluY29taW5nUmVkaXJlY3RIYW5kbGVyIGV4dGVuZHMgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5BZ2dyZWdhdGVIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihyZWRpcmVjdEhhbmRsZXJzKSB7XG4gICAgICAgIHN1cGVyKHJlZGlyZWN0SGFuZGxlcnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEFnZ3JlZ2F0ZUluY29taW5nUmVkaXJlY3RIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWdncmVnYXRlSW5jb21pbmdSZWRpcmVjdEhhbmRsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBSZWRpcmVjdG9yIHtcbiAgICByZWRpcmVjdChyZWRpcmVjdFVybCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhbmRsZVJlZGlyZWN0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmhhbmRsZVJlZGlyZWN0KHJlZGlyZWN0VXJsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgcmVkaXJlY3Rpb24gaGFuZGxlciBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSBOb2RlIGVudmlyb25tZW50LlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlZGlyZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWRpcmVjdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZWdvdGlhdGVDbGllbnRTaWduaW5nQWxnID0gdm9pZCAwO1xuY29uc3Qgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMSA9IHJlcXVpcmUoXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCIpO1xuY29uc3Qgb3BlbmlkX2NsaWVudF8xID0gcmVxdWlyZShcIm9wZW5pZC1jbGllbnRcIik7XG5jb25zdCBJc3N1ZXJDb25maWdGZXRjaGVyXzEgPSByZXF1aXJlKFwiLi9Jc3N1ZXJDb25maWdGZXRjaGVyXCIpO1xuZnVuY3Rpb24gbmVnb3RpYXRlQ2xpZW50U2lnbmluZ0FsZyhpc3N1ZXJDb25maWcsIGNsaWVudFByZWZlcmVuY2UpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaXNzdWVyQ29uZmlnLmlkVG9rZW5TaWduaW5nQWxnVmFsdWVzU3VwcG9ydGVkKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgT0lEQyBpc3N1ZXIgZGlzY292ZXJ5IHByb2ZpbGUgaXMgbWlzc2luZyB0aGUgJ2lkX3Rva2VuX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQnIHZhbHVlLCB3aGljaCBpcyBtYW5kYXRvcnkuXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaWduaW5nQWxnID0gKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZGV0ZXJtaW5lU2lnbmluZ0FsZykoaXNzdWVyQ29uZmlnLmlkVG9rZW5TaWduaW5nQWxnVmFsdWVzU3VwcG9ydGVkLCBjbGllbnRQcmVmZXJlbmNlKTtcbiAgICBpZiAoc2lnbmluZ0FsZyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHNpZ25hdHVyZSBhbGdvcml0aG0gbWF0Y2ggYmV0d2VlbiAke0pTT04uc3RyaW5naWZ5KGlzc3VlckNvbmZpZy5pZFRva2VuU2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnRlZCl9IHN1cHBvcnRlZCBieSB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgYW5kICR7SlNPTi5zdHJpbmdpZnkoY2xpZW50UHJlZmVyZW5jZSl9IHByZWZlcnJlZCBieSB0aGUgY2xpZW50LmApO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmluZ0FsZztcbn1cbmV4cG9ydHMubmVnb3RpYXRlQ2xpZW50U2lnbmluZ0FsZyA9IG5lZ290aWF0ZUNsaWVudFNpZ25pbmdBbGc7XG5jbGFzcyBDbGllbnRSZWdpc3RyYXIge1xuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2VVdGlsaXR5KSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHkgPSBzdG9yYWdlVXRpbGl0eTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q2xpZW50KG9wdGlvbnMsIGlzc3VlckNvbmZpZykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBbc3RvcmVkQ2xpZW50SWQsIHN0b3JlZENsaWVudFNlY3JldCwgc3RvcmVkQ2xpZW50TmFtZSwgc3RvcmVkSWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnLF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIFwiY2xpZW50SWRcIiksXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIFwiY2xpZW50U2VjcmV0XCIpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCBcImNsaWVudE5hbWVcIiksXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIFwiaWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnXCIpLFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKHN0b3JlZENsaWVudElkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNsaWVudElkOiBzdG9yZWRDbGllbnRJZCxcbiAgICAgICAgICAgICAgICBjbGllbnRTZWNyZXQ6IHN0b3JlZENsaWVudFNlY3JldCxcbiAgICAgICAgICAgICAgICBjbGllbnROYW1lOiBzdG9yZWRDbGllbnROYW1lLFxuICAgICAgICAgICAgICAgIGlkVG9rZW5TaWduZWRSZXNwb25zZUFsZzogc3RvcmVkSWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnICE9PSBudWxsICYmIHN0b3JlZElkVG9rZW5TaWduZWRSZXNwb25zZUFsZyAhPT0gdm9pZCAwID8gc3RvcmVkSWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnIDogbmVnb3RpYXRlQ2xpZW50U2lnbmluZ0FsZyhpc3N1ZXJDb25maWcsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuUFJFRkVSUkVEX1NJR05JTkdfQUxHKSxcbiAgICAgICAgICAgICAgICBjbGllbnRUeXBlOiBcImR5bmFtaWNcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNzdWVyID0gbmV3IG9wZW5pZF9jbGllbnRfMS5Jc3N1ZXIoKDAsIElzc3VlckNvbmZpZ0ZldGNoZXJfMS5jb25maWdUb0lzc3Vlck1ldGFkYXRhKShpc3N1ZXJDb25maWcpKTtcbiAgICAgICAgaWYgKGlzc3Vlci5tZXRhZGF0YS5yZWdpc3RyYXRpb25fZW5kcG9pbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuQ29uZmlndXJhdGlvbkVycm9yKGBEeW5hbWljIGNsaWVudCByZWdpc3RyYXRpb24gY2Fubm90IGJlIHBlcmZvcm1lZCwgYmVjYXVzZSBpc3N1ZXIgZG9lcyBub3QgaGF2ZSBhIHJlZ2lzdHJhdGlvbiBlbmRwb2ludDogJHtKU09OLnN0cmluZ2lmeShpc3N1ZXIubWV0YWRhdGEpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25pbmdBbGcgPSBuZWdvdGlhdGVDbGllbnRTaWduaW5nQWxnKGlzc3VlckNvbmZpZywgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5QUkVGRVJSRURfU0lHTklOR19BTEcpO1xuICAgICAgICBjb25zdCByZWdpc3RlcmVkQ2xpZW50ID0gYXdhaXQgaXNzdWVyLkNsaWVudC5yZWdpc3Rlcih7XG4gICAgICAgICAgICByZWRpcmVjdF91cmlzOiBbb3B0aW9ucy5yZWRpcmVjdFVybF0sXG4gICAgICAgICAgICBjbGllbnRfbmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxuICAgICAgICAgICAgaWRfdG9rZW5fc2lnbmVkX3Jlc3BvbnNlX2FsZzogc2lnbmluZ0FsZyxcbiAgICAgICAgICAgIGdyYW50X3R5cGVzOiBbXCJhdXRob3JpemF0aW9uX2NvZGVcIiwgXCJyZWZyZXNoX3Rva2VuXCJdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW5mb1RvU2F2ZSA9IHtcbiAgICAgICAgICAgIGNsaWVudElkOiByZWdpc3RlcmVkQ2xpZW50Lm1ldGFkYXRhLmNsaWVudF9pZCxcbiAgICAgICAgICAgIGlkVG9rZW5TaWduZWRSZXNwb25zZUFsZzogKF9hID0gcmVnaXN0ZXJlZENsaWVudC5tZXRhZGF0YS5pZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBzaWduaW5nQWxnLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocmVnaXN0ZXJlZENsaWVudC5tZXRhZGF0YS5jbGllbnRfc2VjcmV0KSB7XG4gICAgICAgICAgICBpbmZvVG9TYXZlLmNsaWVudFNlY3JldCA9IHJlZ2lzdGVyZWRDbGllbnQubWV0YWRhdGEuY2xpZW50X3NlY3JldDtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIGluZm9Ub1NhdmUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xpZW50SWQ6IHJlZ2lzdGVyZWRDbGllbnQubWV0YWRhdGEuY2xpZW50X2lkLFxuICAgICAgICAgICAgY2xpZW50U2VjcmV0OiByZWdpc3RlcmVkQ2xpZW50Lm1ldGFkYXRhLmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICBjbGllbnROYW1lOiByZWdpc3RlcmVkQ2xpZW50Lm1ldGFkYXRhLmNsaWVudF9uYW1lLFxuICAgICAgICAgICAgaWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnOiAoX2IgPSByZWdpc3RlcmVkQ2xpZW50Lm1ldGFkYXRhLmlkX3Rva2VuX3NpZ25lZF9yZXNwb25zZV9hbGcpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHNpZ25pbmdBbGcsXG4gICAgICAgICAgICBjbGllbnRUeXBlOiBcImR5bmFtaWNcIixcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDbGllbnRSZWdpc3RyYXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGllbnRSZWdpc3RyYXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xID0gcmVxdWlyZShcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIik7XG5jb25zdCBvcGVuaWRfY2xpZW50XzEgPSByZXF1aXJlKFwib3BlbmlkLWNsaWVudFwiKTtcbmNvbnN0IElzc3VlckNvbmZpZ0ZldGNoZXJfMSA9IHJlcXVpcmUoXCIuLi9Jc3N1ZXJDb25maWdGZXRjaGVyXCIpO1xuY29uc3QgQ2xpZW50UmVnaXN0cmFyXzEgPSByZXF1aXJlKFwiLi4vQ2xpZW50UmVnaXN0cmFyXCIpO1xuY29uc3QgdG9rZW5TZXRUb1Rva2VuRW5kcG9pbnRSZXNwb25zZSA9ICh0b2tlblNldCwgaXNzdWVyTWV0YWRhdGEpID0+IHtcbiAgICBpZiAodG9rZW5TZXQuYWNjZXNzX3Rva2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgSWRlbnRpdHkgUHJvdmlkZXIgWyR7aXNzdWVyTWV0YWRhdGEuaXNzdWVyfV0gZGlkIG5vdCByZXR1cm4gYW4gYWNjZXNzIHRva2VuIG9uIHJlZnJlc2guYCk7XG4gICAgfVxuICAgIGlmICh0b2tlblNldC50b2tlbl90eXBlICE9PSBcIkJlYXJlclwiICYmIHRva2VuU2V0LnRva2VuX3R5cGUgIT09IFwiRFBvUFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIElkZW50aXR5IFByb3ZpZGVyIFske2lzc3Vlck1ldGFkYXRhLmlzc3Vlcn1dIHJldHVybmVkIGFuIHVua25vd24gdG9rZW4gdHlwZTogWyR7dG9rZW5TZXQudG9rZW5fdHlwZX1dLmApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogdG9rZW5TZXQuYWNjZXNzX3Rva2VuLFxuICAgICAgICB0b2tlblR5cGU6IHRva2VuU2V0LnRva2VuX3R5cGUsXG4gICAgICAgIGlkVG9rZW46IHRva2VuU2V0LmlkX3Rva2VuLFxuICAgICAgICByZWZyZXNoVG9rZW46IHRva2VuU2V0LnJlZnJlc2hfdG9rZW4sXG4gICAgICAgIGV4cGlyZXNBdDogdG9rZW5TZXQuZXhwaXJlc19hdCxcbiAgICB9O1xufTtcbmNsYXNzIFRva2VuUmVmcmVzaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlVXRpbGl0eSwgaXNzdWVyQ29uZmlnRmV0Y2hlciwgY2xpZW50UmVnaXN0cmFyKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHkgPSBzdG9yYWdlVXRpbGl0eTtcbiAgICAgICAgdGhpcy5pc3N1ZXJDb25maWdGZXRjaGVyID0gaXNzdWVyQ29uZmlnRmV0Y2hlcjtcbiAgICAgICAgdGhpcy5jbGllbnRSZWdpc3RyYXIgPSBjbGllbnRSZWdpc3RyYXI7XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2goc2Vzc2lvbklkLCByZWZyZXNoVG9rZW4sIGRwb3BLZXksIGV2ZW50RW1pdHRlcikge1xuICAgICAgICBjb25zdCBvaWRjQ29udGV4dCA9IGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLmxvYWRPaWRjQ29udGV4dEZyb21TdG9yYWdlKShzZXNzaW9uSWQsIHRoaXMuc3RvcmFnZVV0aWxpdHksIHRoaXMuaXNzdWVyQ29uZmlnRmV0Y2hlcik7XG4gICAgICAgIGNvbnN0IGlzc3VlciA9IG5ldyBvcGVuaWRfY2xpZW50XzEuSXNzdWVyKCgwLCBJc3N1ZXJDb25maWdGZXRjaGVyXzEuY29uZmlnVG9Jc3N1ZXJNZXRhZGF0YSkob2lkY0NvbnRleHQuaXNzdWVyQ29uZmlnKSk7XG4gICAgICAgIGNvbnN0IGNsaWVudEluZm8gPSBhd2FpdCB0aGlzLmNsaWVudFJlZ2lzdHJhci5nZXRDbGllbnQoeyBzZXNzaW9uSWQgfSwgb2lkY0NvbnRleHQuaXNzdWVyQ29uZmlnKTtcbiAgICAgICAgaWYgKGNsaWVudEluZm8uaWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNsaWVudEluZm8uaWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnID0gKDAsIENsaWVudFJlZ2lzdHJhcl8xLm5lZ290aWF0ZUNsaWVudFNpZ25pbmdBbGcpKG9pZGNDb250ZXh0Lmlzc3VlckNvbmZpZywgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5QUkVGRVJSRURfU0lHTklOR19BTEcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBpc3N1ZXIuQ2xpZW50KHtcbiAgICAgICAgICAgIGNsaWVudF9pZDogY2xpZW50SW5mby5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IGNsaWVudEluZm8uY2xpZW50U2VjcmV0LFxuICAgICAgICAgICAgdG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2Q6IGNsaWVudEluZm8uY2xpZW50U2VjcmV0XG4gICAgICAgICAgICAgICAgPyBcImNsaWVudF9zZWNyZXRfYmFzaWNcIlxuICAgICAgICAgICAgICAgIDogXCJub25lXCIsXG4gICAgICAgICAgICBpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnOiBjbGllbnRJbmZvLmlkVG9rZW5TaWduZWRSZXNwb25zZUFsZyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZWZyZXNoVG9rZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXNzaW9uIFske3Nlc3Npb25JZH1dIGhhcyBubyByZWZyZXNoIHRva2VuIHRvIGFsbG93IGl0IHRvIHJlZnJlc2ggaXRzIGFjY2VzcyB0b2tlbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2lkY0NvbnRleHQuZHBvcCAmJiBkcG9wS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRm9yIHNlc3Npb24gWyR7c2Vzc2lvbklkfV0sIHRoZSBrZXkgYm91bmQgdG8gdGhlIERQb1AgYWNjZXNzIHRva2VuIG11c3QgYmUgcHJvdmlkZWQgdG8gcmVmcmVzaCBzYWlkIGFjY2VzcyB0b2tlbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlblNldCA9IHRva2VuU2V0VG9Ub2tlbkVuZHBvaW50UmVzcG9uc2UoYXdhaXQgY2xpZW50LnJlZnJlc2gocmVmcmVzaFRva2VuLCB7XG4gICAgICAgICAgICBEUG9QOiBkcG9wS2V5ID8gZHBvcEtleS5wcml2YXRlS2V5IDogdW5kZWZpbmVkLFxuICAgICAgICB9KSwgaXNzdWVyLm1ldGFkYXRhKTtcbiAgICAgICAgaWYgKHRva2VuU2V0LnJlZnJlc2hUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXIgPT09IG51bGwgfHwgZXZlbnRFbWl0dGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudEVtaXR0ZXIuZW1pdChzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkVWRU5UUy5ORVdfUkVGUkVTSF9UT0tFTiwgdG9rZW5TZXQucmVmcmVzaFRva2VuKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHRva2VuU2V0LnJlZnJlc2hUb2tlbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlblNldDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUb2tlblJlZnJlc2hlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRva2VuUmVmcmVzaGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMSA9IHJlcXVpcmUoXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCIpO1xuY29uc3Qgb3BlbmlkX2NsaWVudF8xID0gcmVxdWlyZShcIm9wZW5pZC1jbGllbnRcIik7XG5jb25zdCBjcm9zc19mZXRjaF8xID0gcmVxdWlyZShcImNyb3NzLWZldGNoXCIpO1xuY29uc3QgSXNzdWVyQ29uZmlnRmV0Y2hlcl8xID0gcmVxdWlyZShcIi4uL0lzc3VlckNvbmZpZ0ZldGNoZXJcIik7XG5jbGFzcyBDbGllbnRDcmVkZW50aWFsc09pZGNIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlblJlZnJlc2hlciwgX3N0b3JhZ2VVdGlsaXR5KSB7XG4gICAgICAgIHRoaXMudG9rZW5SZWZyZXNoZXIgPSB0b2tlblJlZnJlc2hlcjtcbiAgICAgICAgdGhpcy5fc3RvcmFnZVV0aWxpdHkgPSBfc3RvcmFnZVV0aWxpdHk7XG4gICAgfVxuICAgIGFzeW5jIGNhbkhhbmRsZShvaWRjTG9naW5PcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudElkID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICB0eXBlb2Ygb2lkY0xvZ2luT3B0aW9ucy5jbGllbnQuY2xpZW50U2VjcmV0ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRUeXBlID09PSBcInN0YXRpY1wiKTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlKG9pZGNMb2dpbk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaXNzdWVyID0gbmV3IG9wZW5pZF9jbGllbnRfMS5Jc3N1ZXIoKDAsIElzc3VlckNvbmZpZ0ZldGNoZXJfMS5jb25maWdUb0lzc3Vlck1ldGFkYXRhKShvaWRjTG9naW5PcHRpb25zLmlzc3VlckNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gbmV3IGlzc3Vlci5DbGllbnQoe1xuICAgICAgICAgICAgY2xpZW50X2lkOiBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudFNlY3JldCxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBkcG9wS2V5O1xuICAgICAgICBpZiAob2lkY0xvZ2luT3B0aW9ucy5kcG9wKSB7XG4gICAgICAgICAgICBkcG9wS2V5ID0gYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZ2VuZXJhdGVEcG9wS2V5UGFpcikoKTtcbiAgICAgICAgICAgIFtkcG9wS2V5LnB1YmxpY0tleS5hbGddID0gc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5QUkVGRVJSRURfU0lHTklOR19BTEc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5zID0gYXdhaXQgY2xpZW50LmdyYW50KHtcbiAgICAgICAgICAgIGdyYW50X3R5cGU6IFwiY2xpZW50X2NyZWRlbnRpYWxzXCIsXG4gICAgICAgICAgICB0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZDogXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCIsXG4gICAgICAgICAgICBzY29wZTogc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5ERUZBVUxUX1NDT1BFUyxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgRFBvUDogb2lkY0xvZ2luT3B0aW9ucy5kcG9wICYmIGRwb3BLZXkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gZHBvcEtleS5wcml2YXRlS2V5XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgd2ViSWQ7XG4gICAgICAgIGlmICh0b2tlbnMuYWNjZXNzX3Rva2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZXNwb25zZSBmcm9tIFNvbGlkIElkZW50aXR5IFByb3ZpZGVyIFske29pZGNMb2dpbk9wdGlvbnMuaXNzdWVyfV06ICR7SlNPTi5zdHJpbmdpZnkodG9rZW5zKX0gaXMgbWlzc2luZyAnYWNjZXNzX3Rva2VuJy5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5zLmlkX3Rva2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdlYklkID0gYXdhaXQgKDAsIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkKSh0b2tlbnMuYWNjZXNzX3Rva2VuLCBvaWRjTG9naW5PcHRpb25zLmlzc3VlckNvbmZpZ3VyYXRpb24uandrc1VyaSwgb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXIsIFwic29saWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3ZWJJZCA9IGF3YWl0ICgwLCBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLmdldFdlYmlkRnJvbVRva2VuUGF5bG9hZCkodG9rZW5zLmlkX3Rva2VuLCBvaWRjTG9naW5PcHRpb25zLmlzc3VlckNvbmZpZ3VyYXRpb24uandrc1VyaSwgb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXIsIG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudElkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdXRoRmV0Y2ggPSBhd2FpdCAoMCwgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5idWlsZEF1dGhlbnRpY2F0ZWRGZXRjaCkoY3Jvc3NfZmV0Y2hfMS5mZXRjaCwgdG9rZW5zLmFjY2Vzc190b2tlbiwge1xuICAgICAgICAgICAgZHBvcEtleSxcbiAgICAgICAgICAgIHJlZnJlc2hPcHRpb25zOiB0b2tlbnMucmVmcmVzaF90b2tlblxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHRva2Vucy5yZWZyZXNoX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IG9pZGNMb2dpbk9wdGlvbnMuc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblJlZnJlc2hlcjogdGhpcy50b2tlblJlZnJlc2hlcixcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBldmVudEVtaXR0ZXI6IG9pZGNMb2dpbk9wdGlvbnMuZXZlbnRFbWl0dGVyLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSB7XG4gICAgICAgICAgICBpc0xvZ2dlZEluOiB0cnVlLFxuICAgICAgICAgICAgc2Vzc2lvbklkOiBvaWRjTG9naW5PcHRpb25zLnNlc3Npb25JZCxcbiAgICAgICAgICAgIHdlYklkLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzZXNzaW9uSW5mbywge1xuICAgICAgICAgICAgZmV0Y2g6IGF1dGhGZXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ2xpZW50Q3JlZGVudGlhbHNPaWRjSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudENyZWRlbnRpYWxzT2lkY0hhbmRsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcyA9IGV4cG9ydHMuYnVpbGRSZWRpcmVjdEhhbmRsZXIgPSBleHBvcnRzLmJ1aWxkTG9naW5IYW5kbGVyID0gdm9pZCAwO1xuY29uc3Qgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMSA9IHJlcXVpcmUoXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCIpO1xuY29uc3QgU3RvcmFnZVV0aWxpdHlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdG9yYWdlL1N0b3JhZ2VVdGlsaXR5XCIpKTtcbmNvbnN0IENsaWVudEF1dGhlbnRpY2F0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ2xpZW50QXV0aGVudGljYXRpb25cIikpO1xuY29uc3QgT2lkY0xvZ2luSGFuZGxlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvT2lkY0xvZ2luSGFuZGxlclwiKSk7XG5jb25zdCBBZ2dyZWdhdGVPaWRjSGFuZGxlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvQWdncmVnYXRlT2lkY0hhbmRsZXJcIikpO1xuY29uc3QgQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9naW4vb2lkYy9vaWRjSGFuZGxlcnMvQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyXCIpKTtcbmNvbnN0IFJlZnJlc2hUb2tlbk9pZGNIYW5kbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9naW4vb2lkYy9vaWRjSGFuZGxlcnMvUmVmcmVzaFRva2VuT2lkY0hhbmRsZXJcIikpO1xuY29uc3QgSXNzdWVyQ29uZmlnRmV0Y2hlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvSXNzdWVyQ29uZmlnRmV0Y2hlclwiKSk7XG5jb25zdCBHZW5lcmFsTG9nb3V0SGFuZGxlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ291dC9HZW5lcmFsTG9nb3V0SGFuZGxlclwiKSk7XG5jb25zdCBTZXNzaW9uSW5mb01hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL3Nlc3Npb25JbmZvL1Nlc3Npb25JbmZvTWFuYWdlclwiKTtcbmNvbnN0IEF1dGhDb2RlUmVkaXJlY3RIYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9sb2dpbi9vaWRjL2luY29taW5nUmVkaXJlY3RIYW5kbGVyL0F1dGhDb2RlUmVkaXJlY3RIYW5kbGVyXCIpO1xuY29uc3QgRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvaW5jb21pbmdSZWRpcmVjdEhhbmRsZXIvRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXJcIik7XG5jb25zdCBBZ2dyZWdhdGVJbmNvbWluZ1JlZGlyZWN0SGFuZGxlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvQWdncmVnYXRlSW5jb21pbmdSZWRpcmVjdEhhbmRsZXJcIikpO1xuY29uc3QgUmVkaXJlY3Rvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvUmVkaXJlY3RvclwiKSk7XG5jb25zdCBDbGllbnRSZWdpc3RyYXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb2dpbi9vaWRjL0NsaWVudFJlZ2lzdHJhclwiKSk7XG5jb25zdCBUb2tlblJlZnJlc2hlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2luL29pZGMvcmVmcmVzaC9Ub2tlblJlZnJlc2hlclwiKSk7XG5jb25zdCBDbGllbnRDcmVkZW50aWFsc09pZGNIYW5kbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9naW4vb2lkYy9vaWRjSGFuZGxlcnMvQ2xpZW50Q3JlZGVudGlhbHNPaWRjSGFuZGxlclwiKSk7XG5jb25zdCBidWlsZExvZ2luSGFuZGxlciA9IChzdG9yYWdlVXRpbGl0eSwgdG9rZW5SZWZyZXNoZXIsIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhcikgPT4ge1xuICAgIHJldHVybiBuZXcgT2lkY0xvZ2luSGFuZGxlcl8xLmRlZmF1bHQoc3RvcmFnZVV0aWxpdHksIG5ldyBBZ2dyZWdhdGVPaWRjSGFuZGxlcl8xLmRlZmF1bHQoW1xuICAgICAgICBuZXcgUmVmcmVzaFRva2VuT2lkY0hhbmRsZXJfMS5kZWZhdWx0KHRva2VuUmVmcmVzaGVyLCBzdG9yYWdlVXRpbGl0eSksXG4gICAgICAgIG5ldyBDbGllbnRDcmVkZW50aWFsc09pZGNIYW5kbGVyXzEuZGVmYXVsdCh0b2tlblJlZnJlc2hlciwgc3RvcmFnZVV0aWxpdHkpLFxuICAgICAgICBuZXcgQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyXzEuZGVmYXVsdChzdG9yYWdlVXRpbGl0eSwgbmV3IFJlZGlyZWN0b3JfMS5kZWZhdWx0KCkpLFxuICAgIF0pLCBpc3N1ZXJDb25maWdGZXRjaGVyLCBjbGllbnRSZWdpc3RyYXIpO1xufTtcbmV4cG9ydHMuYnVpbGRMb2dpbkhhbmRsZXIgPSBidWlsZExvZ2luSGFuZGxlcjtcbmNvbnN0IGJ1aWxkUmVkaXJlY3RIYW5kbGVyID0gKHN0b3JhZ2VVdGlsaXR5LCBzZXNzaW9uSW5mb01hbmFnZXIsIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhciwgdG9rZW5SZWZyZXNoZXIpID0+IHtcbiAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZUluY29taW5nUmVkaXJlY3RIYW5kbGVyXzEuZGVmYXVsdChbXG4gICAgICAgIG5ldyBBdXRoQ29kZVJlZGlyZWN0SGFuZGxlcl8xLkF1dGhDb2RlUmVkaXJlY3RIYW5kbGVyKHN0b3JhZ2VVdGlsaXR5LCBzZXNzaW9uSW5mb01hbmFnZXIsIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhciwgdG9rZW5SZWZyZXNoZXIpLFxuICAgICAgICBuZXcgRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXJfMS5GYWxsYmFja1JlZGlyZWN0SGFuZGxlcigpLFxuICAgIF0pO1xufTtcbmV4cG9ydHMuYnVpbGRSZWRpcmVjdEhhbmRsZXIgPSBidWlsZFJlZGlyZWN0SGFuZGxlcjtcbmZ1bmN0aW9uIGdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpIHtcbiAgICBjb25zdCBpbk1lbW9yeVN0b3JhZ2UgPSBuZXcgc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5Jbk1lbW9yeVN0b3JhZ2UoKTtcbiAgICBjb25zdCBzZWN1cmVTdG9yYWdlID0gZGVwZW5kZW5jaWVzLnNlY3VyZVN0b3JhZ2UgfHwgaW5NZW1vcnlTdG9yYWdlO1xuICAgIGNvbnN0IGluc2VjdXJlU3RvcmFnZSA9IGRlcGVuZGVuY2llcy5pbnNlY3VyZVN0b3JhZ2UgfHwgaW5NZW1vcnlTdG9yYWdlO1xuICAgIGNvbnN0IHN0b3JhZ2VVdGlsaXR5ID0gbmV3IFN0b3JhZ2VVdGlsaXR5XzEuZGVmYXVsdChzZWN1cmVTdG9yYWdlLCBpbnNlY3VyZVN0b3JhZ2UpO1xuICAgIGNvbnN0IGlzc3VlckNvbmZpZ0ZldGNoZXIgPSBuZXcgSXNzdWVyQ29uZmlnRmV0Y2hlcl8xLmRlZmF1bHQoc3RvcmFnZVV0aWxpdHkpO1xuICAgIGNvbnN0IGNsaWVudFJlZ2lzdHJhciA9IG5ldyBDbGllbnRSZWdpc3RyYXJfMS5kZWZhdWx0KHN0b3JhZ2VVdGlsaXR5KTtcbiAgICBjb25zdCBzZXNzaW9uSW5mb01hbmFnZXIgPSBuZXcgU2Vzc2lvbkluZm9NYW5hZ2VyXzEuU2Vzc2lvbkluZm9NYW5hZ2VyKHN0b3JhZ2VVdGlsaXR5KTtcbiAgICBjb25zdCB0b2tlblJlZnJlc2hlciA9IG5ldyBUb2tlblJlZnJlc2hlcl8xLmRlZmF1bHQoc3RvcmFnZVV0aWxpdHksIGlzc3VlckNvbmZpZ0ZldGNoZXIsIGNsaWVudFJlZ2lzdHJhcik7XG4gICAgY29uc3QgbG9naW5IYW5kbGVyID0gKDAsIGV4cG9ydHMuYnVpbGRMb2dpbkhhbmRsZXIpKHN0b3JhZ2VVdGlsaXR5LCB0b2tlblJlZnJlc2hlciwgaXNzdWVyQ29uZmlnRmV0Y2hlciwgY2xpZW50UmVnaXN0cmFyKTtcbiAgICBjb25zdCByZWRpcmVjdEhhbmRsZXIgPSAoMCwgZXhwb3J0cy5idWlsZFJlZGlyZWN0SGFuZGxlcikoc3RvcmFnZVV0aWxpdHksIHNlc3Npb25JbmZvTWFuYWdlciwgaXNzdWVyQ29uZmlnRmV0Y2hlciwgY2xpZW50UmVnaXN0cmFyLCB0b2tlblJlZnJlc2hlcik7XG4gICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoZW50aWNhdGlvbl8xLmRlZmF1bHQobG9naW5IYW5kbGVyLCByZWRpcmVjdEhhbmRsZXIsIG5ldyBHZW5lcmFsTG9nb3V0SGFuZGxlcl8xLmRlZmF1bHQoc2Vzc2lvbkluZm9NYW5hZ2VyKSwgc2Vzc2lvbkluZm9NYW5hZ2VyKTtcbn1cbmV4cG9ydHMuZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzID0gZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwZW5kZW5jaWVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXNzaW9uID0gZXhwb3J0cy5kZWZhdWx0U3RvcmFnZSA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEgPSByZXF1aXJlKFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiKTtcbmNvbnN0IHV1aWRfMSA9IHJlcXVpcmUoXCJ1dWlkXCIpO1xuY29uc3QgY3Jvc3NfZmV0Y2hfMSA9IHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbmNvbnN0IGRlcGVuZGVuY2llc18xID0gcmVxdWlyZShcIi4vZGVwZW5kZW5jaWVzXCIpO1xuZXhwb3J0cy5kZWZhdWx0U3RvcmFnZSA9IG5ldyBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkluTWVtb3J5U3RvcmFnZSgpO1xuY2xhc3MgU2Vzc2lvbiBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Ioc2Vzc2lvbk9wdGlvbnMgPSB7fSwgc2Vzc2lvbklkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudG9rZW5SZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhc3RUaW1lb3V0SGFuZGxlID0gMDtcbiAgICAgICAgdGhpcy5sb2dpbiA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2dpbkluZm8gPSBhd2FpdCB0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uLmxvZ2luKHRoaXMuaW5mby5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICBpZiAobG9naW5JbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZm8uaXNMb2dnZWRJbiA9IGxvZ2luSW5mby5pc0xvZ2dlZEluO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5mby5zZXNzaW9uSWQgPSBsb2dpbkluZm8uc2Vzc2lvbklkO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5mby53ZWJJZCA9IGxvZ2luSW5mby53ZWJJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mZXRjaCA9IGFzeW5jICh1cmwsIGluaXQpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbmZvLmlzTG9nZ2VkSW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNyb3NzX2ZldGNoXzEuZmV0Y2gpKHVybCwgaW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbi5mZXRjaCh1cmwsIGluaXQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZ291dCA9IGFzeW5jICgpID0+IHRoaXMuaW50ZXJuYWxMb2dvdXQodHJ1ZSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxMb2dvdXQgPSBhc3luYyAoZW1pdEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uLmxvZ291dCh0aGlzLmluZm8uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxhc3RUaW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgIHRoaXMuaW5mby5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZW1pdEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuRVZFTlRTLkxPR09VVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlSW5jb21pbmdSZWRpcmVjdCA9IGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgICAgIGxldCBzZXNzaW9uSW5mbztcbiAgICAgICAgICAgIGlmICh0aGlzLmluZm8uaXNMb2dnZWRJbikge1xuICAgICAgICAgICAgICAgIHNlc3Npb25JbmZvID0gdGhpcy5pbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50b2tlblJlcXVlc3RJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2VuUmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSW5mbyA9IGF3YWl0IHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24uaGFuZGxlSW5jb21pbmdSZWRpcmVjdCh1cmwsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mby5pc0xvZ2dlZEluID0gc2Vzc2lvbkluZm8uaXNMb2dnZWRJbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mby53ZWJJZCA9IHNlc3Npb25JbmZvLndlYklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvLnNlc3Npb25JZCA9IHNlc3Npb25JbmZvLnNlc3Npb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uSW5mby5pc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuRVZFTlRTLkxPR0lOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlblJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25JbmZvO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuY2xpZW50QXV0aGVudGljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24gPSBzZXNzaW9uT3B0aW9ucy5jbGllbnRBdXRoZW50aWNhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZXNzaW9uT3B0aW9ucy5zdG9yYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uID0gKDAsIGRlcGVuZGVuY2llc18xLmdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcykoe1xuICAgICAgICAgICAgICAgIHNlY3VyZVN0b3JhZ2U6IHNlc3Npb25PcHRpb25zLnN0b3JhZ2UsXG4gICAgICAgICAgICAgICAgaW5zZWN1cmVTdG9yYWdlOiBzZXNzaW9uT3B0aW9ucy5zdG9yYWdlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2Vzc2lvbk9wdGlvbnMuc2VjdXJlU3RvcmFnZSAmJiBzZXNzaW9uT3B0aW9ucy5pbnNlY3VyZVN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24gPSAoMCwgZGVwZW5kZW5jaWVzXzEuZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzKSh7XG4gICAgICAgICAgICAgICAgc2VjdXJlU3RvcmFnZTogc2Vzc2lvbk9wdGlvbnMuc2VjdXJlU3RvcmFnZSxcbiAgICAgICAgICAgICAgICBpbnNlY3VyZVN0b3JhZ2U6IHNlc3Npb25PcHRpb25zLmluc2VjdXJlU3RvcmFnZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbiA9ICgwLCBkZXBlbmRlbmNpZXNfMS5nZXRDbGllbnRBdXRoZW50aWNhdGlvbldpdGhEZXBlbmRlbmNpZXMpKHtcbiAgICAgICAgICAgICAgICBzZWN1cmVTdG9yYWdlOiBleHBvcnRzLmRlZmF1bHRTdG9yYWdlLFxuICAgICAgICAgICAgICAgIGluc2VjdXJlU3RvcmFnZTogZXhwb3J0cy5kZWZhdWx0U3RvcmFnZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5zZXNzaW9uSW5mbykge1xuICAgICAgICAgICAgdGhpcy5pbmZvID0ge1xuICAgICAgICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbk9wdGlvbnMuc2Vzc2lvbkluZm8uc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdlYklkOiBzZXNzaW9uT3B0aW9ucy5zZXNzaW9uSW5mby53ZWJJZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluZm8gPSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uSWQgIT09IG51bGwgJiYgc2Vzc2lvbklkICE9PSB2b2lkIDAgPyBzZXNzaW9uSWQgOiAoMCwgdXVpZF8xLnY0KSgpLFxuICAgICAgICAgICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMub25OZXdSZWZyZXNoVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vbk5ld1JlZnJlc2hUb2tlbihzZXNzaW9uT3B0aW9ucy5vbk5ld1JlZnJlc2hUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbihzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkVWRU5UUy5USU1FT1VUX1NFVCwgKHRpbWVvdXRIYW5kbGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMubGFzdFRpbWVvdXRIYW5kbGUgPSB0aW1lb3V0SGFuZGxlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkVWRU5UUy5FUlJPUiwgKCkgPT4gdGhpcy5pbnRlcm5hbExvZ291dChmYWxzZSkpO1xuICAgICAgICB0aGlzLm9uKHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuRVZFTlRTLlNFU1NJT05fRVhQSVJFRCwgKCkgPT4gdGhpcy5pbnRlcm5hbExvZ291dChmYWxzZSkpO1xuICAgIH1cbiAgICBvbkxvZ2luKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMub24oc29saWRfY2xpZW50X2F1dGhuX2NvcmVfMS5FVkVOVFMuTE9HSU4sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb25Mb2dvdXQoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vbihzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkVWRU5UUy5MT0dPVVQsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb25OZXdSZWZyZXNoVG9rZW4oY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vbihzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkVWRU5UUy5ORVdfUkVGUkVTSF9UT0tFTiwgY2FsbGJhY2spO1xuICAgIH1cbn1cbmV4cG9ydHMuU2Vzc2lvbiA9IFNlc3Npb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXNzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbGVhclNlc3Npb25Gcm9tU3RvcmFnZUFsbCA9IGV4cG9ydHMuZ2V0U2Vzc2lvbklkRnJvbVN0b3JhZ2VBbGwgPSBleHBvcnRzLmdldFNlc3Npb25Gcm9tU3RvcmFnZSA9IHZvaWQgMDtcbmNvbnN0IGRlcGVuZGVuY2llc18xID0gcmVxdWlyZShcIi4vZGVwZW5kZW5jaWVzXCIpO1xuY29uc3QgU2Vzc2lvbl8xID0gcmVxdWlyZShcIi4vU2Vzc2lvblwiKTtcbmFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb25Gcm9tU3RvcmFnZShzZXNzaW9uSWQsIHN0b3JhZ2UsIG9uTmV3UmVmcmVzaFRva2VuKSB7XG4gICAgY29uc3QgY2xpZW50QXV0aCA9IHN0b3JhZ2VcbiAgICAgICAgPyAoMCwgZGVwZW5kZW5jaWVzXzEuZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzKSh7XG4gICAgICAgICAgICBzZWN1cmVTdG9yYWdlOiBzdG9yYWdlLFxuICAgICAgICAgICAgaW5zZWN1cmVTdG9yYWdlOiBzdG9yYWdlLFxuICAgICAgICB9KVxuICAgICAgICA6ICgwLCBkZXBlbmRlbmNpZXNfMS5nZXRDbGllbnRBdXRoZW50aWNhdGlvbldpdGhEZXBlbmRlbmNpZXMpKHtcbiAgICAgICAgICAgIHNlY3VyZVN0b3JhZ2U6IFNlc3Npb25fMS5kZWZhdWx0U3RvcmFnZSxcbiAgICAgICAgICAgIGluc2VjdXJlU3RvcmFnZTogU2Vzc2lvbl8xLmRlZmF1bHRTdG9yYWdlLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBzZXNzaW9uSW5mbyA9IGF3YWl0IGNsaWVudEF1dGguZ2V0U2Vzc2lvbkluZm8oc2Vzc2lvbklkKTtcbiAgICBpZiAoc2Vzc2lvbkluZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uID0gbmV3IFNlc3Npb25fMS5TZXNzaW9uKHtcbiAgICAgICAgc2Vzc2lvbkluZm8sXG4gICAgICAgIGNsaWVudEF1dGhlbnRpY2F0aW9uOiBjbGllbnRBdXRoLFxuICAgICAgICBvbk5ld1JlZnJlc2hUb2tlbixcbiAgICB9KTtcbiAgICBpZiAoc2Vzc2lvbkluZm8ucmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGF3YWl0IHNlc3Npb24ubG9naW4oe1xuICAgICAgICAgICAgb2lkY0lzc3Vlcjogc2Vzc2lvbkluZm8uaXNzdWVyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNlc3Npb247XG59XG5leHBvcnRzLmdldFNlc3Npb25Gcm9tU3RvcmFnZSA9IGdldFNlc3Npb25Gcm9tU3RvcmFnZTtcbmFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb25JZEZyb21TdG9yYWdlQWxsKHN0b3JhZ2UpIHtcbiAgICBjb25zdCBjbGllbnRBdXRoID0gc3RvcmFnZVxuICAgICAgICA/ICgwLCBkZXBlbmRlbmNpZXNfMS5nZXRDbGllbnRBdXRoZW50aWNhdGlvbldpdGhEZXBlbmRlbmNpZXMpKHtcbiAgICAgICAgICAgIHNlY3VyZVN0b3JhZ2U6IHN0b3JhZ2UsXG4gICAgICAgICAgICBpbnNlY3VyZVN0b3JhZ2U6IHN0b3JhZ2UsXG4gICAgICAgIH0pXG4gICAgICAgIDogKDAsIGRlcGVuZGVuY2llc18xLmdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcykoe1xuICAgICAgICAgICAgc2VjdXJlU3RvcmFnZTogU2Vzc2lvbl8xLmRlZmF1bHRTdG9yYWdlLFxuICAgICAgICAgICAgaW5zZWN1cmVTdG9yYWdlOiBTZXNzaW9uXzEuZGVmYXVsdFN0b3JhZ2UsXG4gICAgICAgIH0pO1xuICAgIHJldHVybiBjbGllbnRBdXRoLmdldFNlc3Npb25JZEFsbCgpO1xufVxuZXhwb3J0cy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZUFsbCA9IGdldFNlc3Npb25JZEZyb21TdG9yYWdlQWxsO1xuYXN5bmMgZnVuY3Rpb24gY2xlYXJTZXNzaW9uRnJvbVN0b3JhZ2VBbGwoc3RvcmFnZSkge1xuICAgIGNvbnN0IGNsaWVudEF1dGggPSBzdG9yYWdlXG4gICAgICAgID8gKDAsIGRlcGVuZGVuY2llc18xLmdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcykoe1xuICAgICAgICAgICAgc2VjdXJlU3RvcmFnZTogc3RvcmFnZSxcbiAgICAgICAgICAgIGluc2VjdXJlU3RvcmFnZTogc3RvcmFnZSxcbiAgICAgICAgfSlcbiAgICAgICAgOiAoMCwgZGVwZW5kZW5jaWVzXzEuZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzKSh7XG4gICAgICAgICAgICBzZWN1cmVTdG9yYWdlOiBTZXNzaW9uXzEuZGVmYXVsdFN0b3JhZ2UsXG4gICAgICAgICAgICBpbnNlY3VyZVN0b3JhZ2U6IFNlc3Npb25fMS5kZWZhdWx0U3RvcmFnZSxcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGNsaWVudEF1dGguY2xlYXJTZXNzaW9uQWxsKCk7XG59XG5leHBvcnRzLmNsZWFyU2Vzc2lvbkZyb21TdG9yYWdlQWxsID0gY2xlYXJTZXNzaW9uRnJvbVN0b3JhZ2VBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aVNlc3Npb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluTWVtb3J5U3RvcmFnZSA9IGV4cG9ydHMuQ29uZmlndXJhdGlvbkVycm9yID0gZXhwb3J0cy5Ob3RJbXBsZW1lbnRlZEVycm9yID0gZXhwb3J0cy5jbGVhclNlc3Npb25Gcm9tU3RvcmFnZUFsbCA9IGV4cG9ydHMuZ2V0U2Vzc2lvbklkRnJvbVN0b3JhZ2VBbGwgPSBleHBvcnRzLmdldFNlc3Npb25Gcm9tU3RvcmFnZSA9IGV4cG9ydHMuU2Vzc2lvbiA9IHZvaWQgMDtcbnZhciBTZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9TZXNzaW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2Vzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2Vzc2lvbl8xLlNlc3Npb247IH0gfSk7XG52YXIgbXVsdGlTZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9tdWx0aVNlc3Npb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTZXNzaW9uRnJvbVN0b3JhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG11bHRpU2Vzc2lvbl8xLmdldFNlc3Npb25Gcm9tU3RvcmFnZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNlc3Npb25JZEZyb21TdG9yYWdlQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtdWx0aVNlc3Npb25fMS5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZUFsbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNsZWFyU2Vzc2lvbkZyb21TdG9yYWdlQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtdWx0aVNlc3Npb25fMS5jbGVhclNlc3Npb25Gcm9tU3RvcmFnZUFsbDsgfSB9KTtcbnZhciBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xID0gcmVxdWlyZShcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RJbXBsZW1lbnRlZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLk5vdEltcGxlbWVudGVkRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25maWd1cmF0aW9uRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEuQ29uZmlndXJhdGlvbkVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5NZW1vcnlTdG9yYWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2xpZF9jbGllbnRfYXV0aG5fY29yZV8xLkluTWVtb3J5U3RvcmFnZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsbnVsbF0sIm5hbWVzIjpbImxpYiIsInNpZ24iLCJub3JtYWxpemUiLCJwdW55Y29kZSIsInVzbSIsImNvbnZlcnNpb25zIiwiSW1wbCIsIlVSTCIsInJlcXVpcmUkJDAiLCJyZXF1aXJlJCQxIiwicGFyc2VVUkwiLCJTdHJlYW0iLCJjbG9uZSIsIlNUQVRVU19DT0RFUyIsImh0dHAiLCJVcmwiLCJ3aGF0d2dVcmwiLCJVUkwkMSIsImh0dHBzIiwiemxpYiIsImNyeXB0b18xIiwiX2RlZmF1bHQiLCJidWZmZXJfMSIsImVycm9yc19qc18xIiwidXRpbCIsImNyeXB0byIsImRlY3J5cHQiLCJ1dGlsXzEiLCJ6bGliXzEiLCJiYXNlNjR1cmxfanNfMSIsInRhZ0ludGVnZXIiLCJ0YWdTZXF1ZW5jZSIsIm1ham9yIiwibWlub3IiLCJwYXJzZSIsImVuY3J5cHQiLCJlbmNyeXB0X2pzXzEiLCJkZWNyeXB0X2pzXzEiLCJyc2FQc3NQYXJhbXMiLCJ2ZXJpZnkiLCJzaWduX2pzXzEiLCJ2ZXJpZnlfanNfMSIsIlJFR0VYIiwiZmV0Y2hKd2tzIiwiZXZlbnRzXzEiLCJiYXNlNjR1cmwiLCJ2YWxpZGF0ZSIsInZlcnNpb24iLCJjcm9zc0ZldGNoIiwiam9zZSIsIlN0b3JhZ2VVdGlsaXR5IiwidXVpZCIsInNvbGlkX2NsaWVudF9hdXRobl9jb3JlXzEiLCJjcm9zc19mZXRjaF8xIiwiZm9ybWF0IiwiT1BFcnJvciIsIlJQRXJyb3IiLCJhc3NlcnQiLCJjcmVhdGVIYXNoIiwicmVxdWlyZSQkMiIsImVuY29kZSIsInNoYWtlMjU2IiwiaXNQbGFpbk9iamVjdCIsImFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0IiwiYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbiIsInBhcnNlV3d3QXV0aGVudGljYXRlIiwibm93IiwicmFuZG9tIiwiWWFsbGlzdCIsIkhUVFBfT1BUSU9OUyIsIkNMT0NLX1RPTEVSQU5DRSIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0Iiwic2V0RGVmYXVsdHMiLCJMUlUiLCJxdWVyeXN0cmluZyIsImtleXN0b3JlcyIsInY4Iiwia2V5c3RvcmUiLCJpc0tleU9iamVjdCIsInJlc29sdmVSZXNwb25zZVR5cGUiLCJyZXNvbHZlUmVkaXJlY3RVcmkiLCJhdXRoZW50aWNhdGVkUG9zdCIsIm1lcmdlIiwiY2xpZW50IiwicHJvY2Vzc1Jlc3BvbnNlIiwiS2V5U3RvcmUiLCJxdWVyeUtleVN0b3JlIiwib2JqZWN0SGFzaCIsImluc3BlY3QiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJyZXF1aXJlJCQ4IiwiQmFzZUNsaWVudCIsInVybCIsIlRva2VuU2V0IiwiZGVmYXVsdHMiLCJzdGRodHRwIiwidG9rZW5IYXNoIiwiZGVjb2RlSldUIiwiRGV2aWNlRmxvd0hhbmRsZSIsInJlZ2lzdHJ5IiwiZ2V0Q2xpZW50Iiwid2ViZmluZ2VyTm9ybWFsaXplIiwiY2xvbmVEZWVwIiwiSXNzdWVyIiwiU3RyYXRlZ3kiLCJvcGVuaWRfY2xpZW50XzEiLCJjb25zdGFudF8xIiwidXJsXzEiLCJ0aGlzIiwiQ2xpZW50QXV0aGVudGljYXRpb25fMSIsIk9pZGNMb2dpbkhhbmRsZXJfMSIsIkFnZ3JlZ2F0ZU9pZGNIYW5kbGVyXzEiLCJBdXRob3JpemF0aW9uQ29kZVdpdGhQa2NlT2lkY0hhbmRsZXJfMSIsIlJlZnJlc2hUb2tlbk9pZGNIYW5kbGVyXzEiLCJJc3N1ZXJDb25maWdGZXRjaGVyXzEiLCJHZW5lcmFsTG9nb3V0SGFuZGxlcl8xIiwiQWdncmVnYXRlSW5jb21pbmdSZWRpcmVjdEhhbmRsZXJfMSIsIlJlZGlyZWN0b3JfMSIsInJlcXVpcmUkJDkiLCJDbGllbnRSZWdpc3RyYXJfMSIsInJlcXVpcmUkJDEwIiwiVG9rZW5SZWZyZXNoZXJfMSIsInJlcXVpcmUkJDExIiwiQ2xpZW50Q3JlZGVudGlhbHNPaWRjSGFuZGxlcl8xIiwicmVxdWlyZSQkMTIiLCJkZXBlbmRlbmNpZXNfMSIsIm11bHRpU2Vzc2lvbl8xIiwiU2Vzc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXVEQTtBQUNPLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUM3RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdEcsUUFBUSxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDdEgsUUFBUSxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUUsS0FBSyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBQ0Q7QUFDTyxTQUFTLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFO0FBQzNDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNySCxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLE1BQU0sS0FBSyxVQUFVLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdKLElBQUksU0FBUyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxVQUFVLENBQUMsRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDdEUsSUFBSSxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDdEIsUUFBUSxJQUFJLENBQUMsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFDdEUsUUFBUSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSTtBQUN0RCxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pLLFlBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRCxZQUFZLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6QixnQkFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTTtBQUM5QyxnQkFBZ0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ3hFLGdCQUFnQixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ2pFLGdCQUFnQixLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxTQUFTO0FBQ2pFLGdCQUFnQjtBQUNoQixvQkFBb0IsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRTtBQUNoSSxvQkFBb0IsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtBQUMxRyxvQkFBb0IsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0FBQ3pGLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDdkYsb0JBQW9CLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUMsb0JBQW9C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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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SUFBSSxDQUFDO0FBQ25DLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDbkMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMzQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3JDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDNUIsR0FBRyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQzlDLElBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDO0FBQ2xDLEdBQUcsTUFBTTtBQUNULElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDM0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMzQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ25DLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDbkMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMs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QzFDLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDL0csUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDNUQsVUFBVSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUNqQyxVQUFVLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM3QixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzNDLE9BQU87QUFDUCxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDckIsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sS0FBSyxDQUFDLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFO0FBQ2pGLE1BQU0sT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtBQUNsRSxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQy9CLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUIsT0FB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QTtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQy9DLEVBQUUsTUFBTSxHQUFHLElBQUlSLEtBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN0QyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLENBQUMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUNEO0FBQ0EsTUFBTSwwQkFBMEIsR0FBRyxTQUFTLElBQUlJLDBCQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtBQUMxQixDQUFDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUM1RSxDQUFDO0FBQ0Q7QUFDQSxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDL0IsQ0FBQyxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckYsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU8sQ0FBQztBQUNkLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUNwQixFQUFFLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMs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QUFDeEMsUUFBUSxJQUFJLEdBQUcsS0FBSyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDakQsWUFBWSxNQUFNLElBQUksU0FBUyxFQUFFLENBQUM7QUFDbEMsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLFlBQVksR0FBRztBQUNuQixRQUFRLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDaEQsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLEVBQUU7QUFDM0IsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDMUMsWUFBWSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLFlBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUU7QUFDM0MsZ0JBQWdCLE1BQU0sR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLFlBQVksSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUM7QUFDbEMsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsS0FBSztBQUNMLElBQUksZUFBZSxHQUFHO0FBQ3RCLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN2RCxZQUFZLE1BQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQztBQUNsQyxTQUFTO0FBQ1QsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDekMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUM1QyxZQUFZLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztB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QUUsQ0FBQyxFQUFFO0FBQzlCLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFDRDtBQUNPLFNBQVMsZUFBZSxDQUFDLEdBQUcsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ2pEO0FBQ0E7QUFDQSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUNyZ0IsQ0FBQztBQUNEO0FBQ0EsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDcEMsRUFBRSxNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUksQ0FBQ0EsVUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3ZCLElBQUksTUFBTSxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUNuRCxHQUFHO0FBQ0g7QUFDQSxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2Q7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxPQUFPLENBQUM7QUFDWjtBQUNBLElBQUksU0FBUyxDQUFDO0FBQ2Q7QUFDQTtBQUNBLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNuQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDbkI7QUFDQSxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUNsQyxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLElBQUksQ0FBQyxDQUFDO0FBQzdCLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLEVBQUUsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDMUIsRUFBRSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQztBQUNyQyxFQUFFLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7QUFDeEMsSUFBSSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUMvRDtBQUNBLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO0FBQ3RCO0FBQ0EsTUFBTSxJQUFJLEdBQUcsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkgsS0FBSztBQUNMO0FBQ0EsSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7QUFDMUI7QUFDQSxNQUFNLFFBQVEsR0FBRyxTQUFTLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7QUFDekUsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2RTtBQUNBO0FBQ0EsRUFBRSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDM0U7QUFDQSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssR0FBRyxVQUFVLEdBQUcsQ0FBQyxLQUFLLEdBQUcsVUFBVSxJQUFJLEtBQUssQ0FBQztBQUMvRDtBQUNBLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQ2hELElBQUksUUFBUSxHQUFHLFFBQVEsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ3JDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxVQUFVLEtBQUssT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7QUFDckUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksS0FBSyxJQUFJLEtBQUssRUFBRTtBQUN0QixJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztBQUN2RSxHQUFHO0FBQ0g7QUFDQSxFQUFFLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDckIsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLEVBQUUsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUN2QjtBQUNBLEVBQUUsS0FBSyxJQUFJLGNBQWMsQ0FBQztBQUMxQjtBQUNBLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxTQUFTLElBQUksS0FBSyxHQUFHLEtBQUssSUFBSSxXQUFXLENBQUM7QUFDakUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztBQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3JCO0FBQ0EsRUFBRSxNQUFNLEdBQUcsR0FBRyxLQUFLLEdBQUcsV0FBVyxHQUFHLEtBQUssR0FBRyxTQUFTLENBQUM7QUFDdEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztBQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDdEI7QUFDQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsS0FBSyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNuQztBQUNBLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDN0I7QUFDQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2pDO0FBQ0EsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQzNCO0FBQ0EsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzlCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkM7O0FDMUZBLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRTtBQUNyQixFQUFFLElBQUksQ0FBQ0EsVUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3ZCLElBQUksTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDcEMsR0FBRztBQUNIO0FBQ0EsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNSLEVBQUUsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakM7QUFDQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZELEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzNCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQzFCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFDQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFDQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFDQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUs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QztBQUNuQixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNsRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNyRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekIsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRTtBQUM3QixFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDMUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUNkLEdBQUc7QUFDSDtBQUNBLEVBQUUsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDbkMsRUFBRSxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMzRDtBQUNBLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3ZDLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdEQsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN2QixFQUFFLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDMUMsRUFBRSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNsRCxFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ2xDLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUNqQyxFQUFFLE9BQU8sR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUN2QyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2xDLEVBQUUsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBQ0Q7QUFDQSxTQUFTLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDcEMsRUFBRSxPQUFPLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUNEO0FBQ0EsU0FBUyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3BDLEVBQUUsT0FBTyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFDRDtBQUNBLFNBQVMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNwQyxFQUFFLE9BQU8sTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FB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LElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCO0FBQ0EsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzlCLElBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEM7QUFDQSxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDakMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFJLEtBQUs7QUFDTDtBQUNBLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNmLEdBQUc7QUFDSDtBQUNBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUNyRDtBQUNBLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUM5QixJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQixLQUFLO0FBQ0w7QUFDQSxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEUsS0FBSztBQUNMO0FBQ0EsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakI7QUFDQSxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDakMsTUFBTSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNuQyxNQUFNLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixLQUFLO0FBQ0w7QUFDQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixHQUFHO0FBQ0g7QUFDQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxF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S0FBSyxHQUFHLEtBQUssSUFBSSxLQUFJO0FBQ3ZCLEVBQUUsS0FBSyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM1RCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBQztBQUN6QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSTtBQUN4QixHQUFHO0FBQ0gsRUFBQztBQUNEO0FBQ0EsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFO0FBQ3hELEVBQUUsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFJO0FBQ3ZCLEVBQUUsS0FBSyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFDO0FBQ3pDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFJO0FBQ3hCLEdBQUc7QUFDSCxFQUFDO0FBQ0Q7QUFDQSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRTtBQUNyQyxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNyRTtBQUNBLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFJO0FBQ3hCLEdBQUc7QUFDSCxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFB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
